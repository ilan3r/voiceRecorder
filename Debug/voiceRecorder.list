
voiceRecorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f84  08006f84  00008080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f84  08006f84  00007f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f8c  08006f8c  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00007f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006f94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000080  08007014  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08007014  0000872c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d8b  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb6  00000000  00000000  00018e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0001bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdc  00000000  00000000  0001cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dc5  00000000  00000000  0001d854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001584b  00000000  00000000  00036619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9e4  00000000  00000000  0004be64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a0  00000000  00000000  000d888c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000dcf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a8c 	.word	0x08006a8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006a8c 	.word	0x08006a8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)  // Replace with your pin
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005cc:	d118      	bne.n	8000600 <HAL_GPIO_EXTI_Callback+0x44>
    {
        // Your interrupt handling code here
    	char str[] = "button pressed \r\n";
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005d0:	f107 040c 	add.w	r4, r7, #12
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	682b      	ldr	r3, [r5, #0]
 80005dc:	8023      	strh	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, (const uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdfc 	bl	80001e0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f107 010c 	add.w	r1, r7, #12
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	4805      	ldr	r0, [pc, #20]	@ (800060c <HAL_GPIO_EXTI_Callback+0x50>)
 80005f6:	f003 fce3 	bl	8003fc0 <HAL_UART_Transmit>

    	button_flag = 1;
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <HAL_GPIO_EXTI_Callback+0x54>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]

    }
}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bdb0      	pop	{r4, r5, r7, pc}
 8000608:	08006aa4 	.word	0x08006aa4
 800060c:	20000244 	.word	0x20000244
 8000610:	20000291 	.word	0x20000291

08000614 <_write>:

int _write(int file, char *ptr, int len) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	b29a      	uxth	r2, r3
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	68b9      	ldr	r1, [r7, #8]
 800062a:	4804      	ldr	r0, [pc, #16]	@ (800063c <_write+0x28>)
 800062c:	f003 fcc8 	bl	8003fc0 <HAL_UART_Transmit>
    return len;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000244 	.word	0x20000244

08000640 <sd_card_init>:

static FRESULT sd_result;
static FATFS sdCard;
static FIL testFile;
void sd_card_init(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	sd_result = f_mount(&sdCard, "", 1);
 8000644:	2201      	movs	r2, #1
 8000646:	490c      	ldr	r1, [pc, #48]	@ (8000678 <sd_card_init+0x38>)
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <sd_card_init+0x3c>)
 800064a:	f005 f9f1 	bl	8005a30 <f_mount>
 800064e:	4603      	mov	r3, r0
 8000650:	461a      	mov	r2, r3
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <sd_card_init+0x40>)
 8000654:	701a      	strb	r2, [r3, #0]

	if (sd_result != 0){
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <sd_card_init+0x40>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <sd_card_init+0x2c>
		printf("error in mounting sd card %d \r\n", sd_result);
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <sd_card_init+0x40>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	4619      	mov	r1, r3
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <sd_card_init+0x44>)
 8000666:	f005 fb47 	bl	8005cf8 <iprintf>
//		while (1);
//	}
//	else printf("successfully wrote to file \r\n");


}
 800066a:	e002      	b.n	8000672 <sd_card_init+0x32>
	else printf("success in mounting sd card\r\n");
 800066c:	4806      	ldr	r0, [pc, #24]	@ (8000688 <sd_card_init+0x48>)
 800066e:	f005 fbab 	bl	8005dc8 <puts>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08006ab8 	.word	0x08006ab8
 800067c:	20000360 	.word	0x20000360
 8000680:	2000035e 	.word	0x2000035e
 8000684:	08006abc 	.word	0x08006abc
 8000688:	08006adc 	.word	0x08006adc

0800068c <start_recording>:


void start_recording(uint32_t frequency){
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <stop_recording>:
void write2wave_file(uint8_t *data, uint16_t data_size){

}


void stop_recording(void){
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0


}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fd8c 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f84e 	bl	8000758 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006bc:	f000 f8b6 	bl	800082c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f9b6 	bl	8000a30 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c4:	f000 f98c 	bl	80009e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006c8:	f000 f960 	bl	800098c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006cc:	f000 f928 	bl	8000920 <MX_SPI1_Init>
  MX_FATFS_Init();
 80006d0:	f004 f832 	bl	8004738 <MX_FATFS_Init>
  MX_I2S2_Init();
 80006d4:	f000 f8c8 	bl	8000868 <MX_I2S2_Init>
  MX_I2S3_Init();
 80006d8:	f000 f8f4 	bl	80008c4 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t*) data_i2s, sizeof(data_i2s)/2); // divide by 2 to get number of samples
 80006dc:	2264      	movs	r2, #100	@ 0x64
 80006de:	4917      	ldr	r1, [pc, #92]	@ (800073c <main+0x8c>)
 80006e0:	4817      	ldr	r0, [pc, #92]	@ (8000740 <main+0x90>)
 80006e2:	f001 fd83 	bl	80021ec <HAL_I2S_Receive_DMA>
  HAL_Delay(500);
 80006e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ea:	f000 fde3 	bl	80012b4 <HAL_Delay>
  sd_card_init();
 80006ee:	f7ff ffa7 	bl	8000640 <sd_card_init>

  printf("start...\r\n");
 80006f2:	4814      	ldr	r0, [pc, #80]	@ (8000744 <main+0x94>)
 80006f4:	f005 fb68 	bl	8005dc8 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (button_flag){
 80006f8:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <main+0x98>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0fa      	beq.n	80006f8 <main+0x48>
		  if (start_stop_recording){
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <main+0x9c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d008      	beq.n	800071e <main+0x6e>
			  start_stop_recording = 0;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <main+0x9c>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
			  stop_recording();
 8000712:	f7ff ffc5 	bl	80006a0 <stop_recording>
			  printf("stop recording\r\n");
 8000716:	480e      	ldr	r0, [pc, #56]	@ (8000750 <main+0xa0>)
 8000718:	f005 fb56 	bl	8005dc8 <puts>
 800071c:	e009      	b.n	8000732 <main+0x82>
		  }
		  else {
			  // initial value is 0, so need to start recording at the first press
			  start_recording(I2S_AUDIOFREQ_32K);
 800071e:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8000722:	f7ff ffb3 	bl	800068c <start_recording>
			  start_stop_recording = 1;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <main+0x9c>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
			  printf("start recording\r\n");
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <main+0xa4>)
 800072e:	f005 fb4b 	bl	8005dc8 <puts>
		  }

		  button_flag = 0;
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <main+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
	  if (button_flag){
 8000738:	e7de      	b.n	80006f8 <main+0x48>
 800073a:	bf00      	nop
 800073c:	20000294 	.word	0x20000294
 8000740:	200000e4 	.word	0x200000e4
 8000744:	08006ee0 	.word	0x08006ee0
 8000748:	20000291 	.word	0x20000291
 800074c:	20000292 	.word	0x20000292
 8000750:	08006eec 	.word	0x08006eec
 8000754:	08006efc 	.word	0x08006efc

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	@ 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	@ 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f005 fc0e 	bl	8005f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a27      	ldr	r2, [pc, #156]	@ (8000824 <SystemClock_Config+0xcc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
 800078c:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a4:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <SystemClock_Config+0xd0>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007d0:	2354      	movs	r3, #84	@ 0x54
 80007d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d8:	2307      	movs	r3, #7
 80007da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 f965 	bl	8002ab0 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ec:	f000 f9ca 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2302      	movs	r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fbc7 	bl	8002fa0 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000818:	f000 f9b4 	bl	8000b84 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000840:	2301      	movs	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000844:	2360      	movs	r3, #96	@ 0x60
 8000846:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fdc6 	bl	80033e0 <HAL_RCCEx_PeriphCLKConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800085a:	f000 f993 	bl	8000b84 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_I2S2_Init+0x54>)
 800086e:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <MX_I2S2_Init+0x58>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2S2_Init+0x54>)
 8000874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000878:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_I2S2_Init+0x54>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_I2S2_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_I2S2_Init+0x54>)
 8000888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800088c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_I2S2_Init+0x54>)
 8000890:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000894:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_I2S2_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_I2S2_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_I2S2_Init+0x54>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_I2S2_Init+0x54>)
 80008aa:	f001 fb5f 	bl	8001f6c <HAL_I2S_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80008b4:	f000 f966 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000009c 	.word	0x2000009c
 80008c0:	40003800 	.word	0x40003800

080008c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008c8:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008ca:	4a14      	ldr	r2, [pc, #80]	@ (800091c <MX_I2S3_Init+0x58>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008d0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008de:	2201      	movs	r2, #1
 80008e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008ea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80008ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_I2S3_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_I2S3_Init+0x54>)
 8000904:	f001 fb32 	bl	8001f6c <HAL_I2S_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800090e:	f000 f939 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000e4 	.word	0x200000e4
 800091c:	40003c00 	.word	0x40003c00

08000920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000926:	4a18      	ldr	r2, [pc, #96]	@ (8000988 <MX_SPI1_Init+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_SPI1_Init+0x64>)
 800094c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000950:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000954:	2218      	movs	r2, #24
 8000956:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_SPI1_Init+0x64>)
 800096c:	220a      	movs	r2, #10
 800096e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_SPI1_Init+0x64>)
 8000972:	f002 fe83 	bl	800367c <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800097c:	f000 f902 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001ec 	.word	0x200001ec
 8000988:	40013000 	.word	0x40013000

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_USART2_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009c4:	f003 faac 	bl	8003f20 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f8d9 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000244 	.word	0x20000244
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_DMA_Init+0x4c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <MX_DMA_Init+0x4c>)
 80009f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <MX_DMA_Init+0x4c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200b      	movs	r0, #11
 8000a08:	f000 fd53 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a0c:	200b      	movs	r0, #11
 8000a0e:	f000 fd6c 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 fd4b 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a1c:	200f      	movs	r0, #15
 8000a1e:	f000 fd64 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b34      	ldr	r3, [pc, #208]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a33      	ldr	r2, [pc, #204]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a25      	ldr	r2, [pc, #148]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_GPIO_Init+0xec>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2110      	movs	r1, #16
 8000aba:	4819      	ldr	r0, [pc, #100]	@ (8000b20 <MX_GPIO_Init+0xf0>)
 8000abc:	f001 fa24 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <MX_GPIO_Init+0xf0>)
 8000ac6:	f001 fa1f 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_PB_Pin */
  GPIO_InitStruct.Pin = BLUE_PB_Pin;
 8000aca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_PB_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4810      	ldr	r0, [pc, #64]	@ (8000b24 <MX_GPIO_Init+0xf4>)
 8000ae2:	f001 f88d 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LD3_Pin;
 8000ae6:	2330      	movs	r3, #48	@ 0x30
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <MX_GPIO_Init+0xf0>)
 8000afe:	f001 f87f 	bl	8001c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2028      	movs	r0, #40	@ 0x28
 8000b08:	f000 fcd3 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b0c:	2028      	movs	r0, #40	@ 0x28
 8000b0e:	f000 fcec 	bl	80014ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800

08000b28 <HAL_I2S_TxCpltCallback>:

}



void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef * hi2s){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

	// whenever called, 32000 samples already got played
	callback_result = FULL_COMPLETED;
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <HAL_I2S_TxCpltCallback+0x28>)
 8000b32:	2202      	movs	r2, #2
 8000b34:	701a      	strb	r2, [r3, #0]
	played_size += 32000;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <HAL_I2S_TxCpltCallback+0x2c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <HAL_I2S_TxCpltCallback+0x2c>)
 8000b40:	6013      	str	r3, [r2, #0]
	printf("FULL callback\r\n");
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_I2S_TxCpltCallback+0x30>)
 8000b44:	f005 f940 	bl	8005dc8 <puts>

}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000290 	.word	0x20000290
 8000b54:	2000028c 	.word	0x2000028c
 8000b58:	08006f20 	.word	0x08006f20

08000b5c <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef * hi2s){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_I2S_RxCpltCallback+0x20>)
 8000b66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b6a:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_I2S_RxCpltCallback+0x24>)
 8000b6c:	801a      	strh	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000294 	.word	0x20000294
 8000b80:	2000035c 	.word	0x2000035c

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	@ 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a8a      	ldr	r2, [pc, #552]	@ (8000e28 <HAL_I2S_MspInit+0x248>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f040 808c 	bne.w	8000d1c <HAL_I2S_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
 8000c08:	4b88      	ldr	r3, [pc, #544]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	4a87      	ldr	r2, [pc, #540]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c14:	4b85      	ldr	r3, [pc, #532]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1c:	623b      	str	r3, [r7, #32]
 8000c1e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	4b81      	ldr	r3, [pc, #516]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	4a80      	ldr	r2, [pc, #512]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c30:	4b7e      	ldr	r3, [pc, #504]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	4b7a      	ldr	r3, [pc, #488]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a79      	ldr	r2, [pc, #484]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b77      	ldr	r3, [pc, #476]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	486f      	ldr	r0, [pc, #444]	@ (8000e30 <HAL_I2S_MspInit+0x250>)
 8000c74:	f000 ffc4 	bl	8001c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000c78:	2348      	movs	r3, #72	@ 0x48
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4867      	ldr	r0, [pc, #412]	@ (8000e30 <HAL_I2S_MspInit+0x250>)
 8000c94:	f000 ffb4 	bl	8001c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000caa:	2305      	movs	r3, #5
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	485f      	ldr	r0, [pc, #380]	@ (8000e34 <HAL_I2S_MspInit+0x254>)
 8000cb6:	f000 ffa3 	bl	8001c00 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000cba:	4b5f      	ldr	r3, [pc, #380]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cbc:	4a5f      	ldr	r2, [pc, #380]	@ (8000e3c <HAL_I2S_MspInit+0x25c>)
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cc8:	2240      	movs	r2, #64	@ 0x40
 8000cca:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd2:	4b59      	ldr	r3, [pc, #356]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cda:	4b57      	ldr	r3, [pc, #348]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ce0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce2:	4b55      	ldr	r3, [pc, #340]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000cea:	4b53      	ldr	r3, [pc, #332]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf2:	4b51      	ldr	r3, [pc, #324]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000cfe:	484e      	ldr	r0, [pc, #312]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000d00:	f000 fc0e 	bl	8001520 <HAL_DMA_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_I2S_MspInit+0x12e>
    {
      Error_Handler();
 8000d0a:	f7ff ff3b 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a49      	ldr	r2, [pc, #292]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d14:	4a48      	ldr	r2, [pc, #288]	@ (8000e38 <HAL_I2S_MspInit+0x258>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d1a:	e080      	b.n	8000e1e <HAL_I2S_MspInit+0x23e>
  else if(hi2s->Instance==SPI3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a47      	ldr	r2, [pc, #284]	@ (8000e40 <HAL_I2S_MspInit+0x260>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d17b      	bne.n	8000e1e <HAL_I2S_MspInit+0x23e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	4b40      	ldr	r3, [pc, #256]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b39      	ldr	r3, [pc, #228]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a38      	ldr	r2, [pc, #224]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b36      	ldr	r3, [pc, #216]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b32      	ldr	r3, [pc, #200]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a31      	ldr	r2, [pc, #196]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <HAL_I2S_MspInit+0x24c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	482b      	ldr	r0, [pc, #172]	@ (8000e44 <HAL_I2S_MspInit+0x264>)
 8000d98:	f000 ff32 	bl	8001c00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dae:	2306      	movs	r3, #6
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	481d      	ldr	r0, [pc, #116]	@ (8000e30 <HAL_I2S_MspInit+0x250>)
 8000dba:	f000 ff21 	bl	8001c00 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000dc0:	4a22      	ldr	r2, [pc, #136]	@ (8000e4c <HAL_I2S_MspInit+0x26c>)
 8000dc2:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ddc:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000de0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000de4:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dec:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000df0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000e02:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000e04:	f000 fb8c 	bl	8001520 <HAL_DMA_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_I2S_MspInit+0x232>
      Error_Handler();
 8000e0e:	f7ff feb9 	bl	8000b84 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a0c      	ldr	r2, [pc, #48]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000e16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e18:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <HAL_I2S_MspInit+0x268>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e1e:	bf00      	nop
 8000e20:	3738      	adds	r7, #56	@ 0x38
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40003800 	.word	0x40003800
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40020400 	.word	0x40020400
 8000e38:	2000012c 	.word	0x2000012c
 8000e3c:	40026070 	.word	0x40026070
 8000e40:	40003c00 	.word	0x40003c00
 8000e44:	40020000 	.word	0x40020000
 8000e48:	2000018c 	.word	0x2000018c
 8000e4c:	40026010 	.word	0x40026010

08000e50 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a28      	ldr	r2, [pc, #160]	@ (8000f10 <HAL_SPI_MspInit+0xc0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d149      	bne.n	8000f06 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000e7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_SPI_MspInit+0xc4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec6:	23c0      	movs	r3, #192	@ 0xc0
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <HAL_SPI_MspInit+0xc8>)
 8000ee2:	f000 fe8d 	bl	8001c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <HAL_SPI_MspInit+0xcc>)
 8000f02:	f000 fe7d 	bl	8001c00 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	@ 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40013000 	.word	0x40013000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400

08000f20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <HAL_UART_MspInit+0x84>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d12b      	bne.n	8000f9a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_UART_MspInit+0x8c>)
 8000f96:	f000 fe33 	bl	8001c00 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	@ 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f935 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <DMA1_Stream0_IRQHandler+0x10>)
 8001016:	f000 fb89 	bl	800172c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000018c 	.word	0x2000018c

08001024 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <DMA1_Stream4_IRQHandler+0x10>)
 800102a:	f000 fb7f 	bl	800172c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000012c 	.word	0x2000012c

08001038 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_PB_Pin);
 800103c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001040:	f000 ff7c 	bl	8001f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e00a      	b.n	8001070 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800105a:	f3af 8000 	nop.w
 800105e:	4601      	mov	r1, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	b2ca      	uxtb	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf0      	blt.n	800105a <_read+0x12>
  }

  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010aa:	605a      	str	r2, [r3, #4]
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_isatty>:

int _isatty(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f004 ff82 	bl	8006024 <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20018000 	.word	0x20018000
 800114c:	00000400 	.word	0x00000400
 8001150:	20000590 	.word	0x20000590
 8001154:	20000730 	.word	0x20000730

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001180:	f7ff ffea 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	@ (80011bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80011aa:	f004 ff41 	bl	8006030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ae:	f7ff fa7f 	bl	80006b0 <main>
  bx  lr    
 80011b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011c0:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 80011c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011c8:	2000072c 	.word	0x2000072c

080011cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <HAL_Init+0x40>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <HAL_Init+0x40>)
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <HAL_Init+0x40>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f94f 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fcc4 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f967 	bl	8001506 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f92f 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000594 	.word	0x20000594

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000594 	.word	0x20000594

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	@ (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	@ (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	@ 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff3e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff31 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff feb6 	bl	800129c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e099      	b.n	8001670 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155c:	e00f      	b.n	800157e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800155e:	f7ff fe9d 	bl	800129c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b05      	cmp	r3, #5
 800156a:	d908      	bls.n	800157e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e078      	b.n	8001670 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e8      	bne.n	800155e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_DMA_Init+0x158>)
 8001598:	4013      	ands	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d107      	bne.n	80015e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	4313      	orrs	r3, r2
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f023 0307 	bic.w	r3, r3, #7
 80015fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	2b04      	cmp	r3, #4
 8001610:	d117      	bne.n	8001642 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4313      	orrs	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00e      	beq.n	8001642 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fa6f 	bl	8001b08 <DMA_CheckFifoParam>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2240      	movs	r2, #64	@ 0x40
 8001634:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800163e:	2301      	movs	r3, #1
 8001640:	e016      	b.n	8001670 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fa26 	bl	8001a9c <DMA_CalcBaseAndBitshift>
 8001650:	4603      	mov	r3, r0
 8001652:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001658:	223f      	movs	r2, #63	@ 0x3f
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	f010803f 	.word	0xf010803f

0800167c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001692:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_DMA_Start_IT+0x26>
 800169e:	2302      	movs	r3, #2
 80016a0:	e040      	b.n	8001724 <HAL_DMA_Start_IT+0xa8>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d12f      	bne.n	8001716 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f9b8 	bl	8001a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d4:	223f      	movs	r2, #63	@ 0x3f
 80016d6:	409a      	lsls	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0216 	orr.w	r2, r2, #22
 80016ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0208 	orr.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e005      	b.n	8001722 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800171e:	2302      	movs	r3, #2
 8001720:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001738:	4b8e      	ldr	r3, [pc, #568]	@ (8001974 <HAL_DMA_IRQHandler+0x248>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a8e      	ldr	r2, [pc, #568]	@ (8001978 <HAL_DMA_IRQHandler+0x24c>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0a9b      	lsrs	r3, r3, #10
 8001744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001756:	2208      	movs	r2, #8
 8001758:	409a      	lsls	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01a      	beq.n	8001798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0204 	bic.w	r2, r2, #4
 800177e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001784:	2208      	movs	r2, #8
 8001786:	409a      	lsls	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	2201      	movs	r2, #1
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d012      	beq.n	80017ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ba:	2201      	movs	r2, #1
 80017bc:	409a      	lsls	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c6:	f043 0202 	orr.w	r2, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d2:	2204      	movs	r2, #4
 80017d4:	409a      	lsls	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d012      	beq.n	8001804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00b      	beq.n	8001804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f0:	2204      	movs	r2, #4
 80017f2:	409a      	lsls	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fc:	f043 0204 	orr.w	r2, r3, #4
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001808:	2210      	movs	r2, #16
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d043      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d03c      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001826:	2210      	movs	r2, #16
 8001828:	409a      	lsls	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d018      	beq.n	800186e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d024      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
 800185a:	e01f      	b.n	800189c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
 800186c:	e016      	b.n	800189c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0208 	bic.w	r2, r2, #8
 800188a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	2220      	movs	r2, #32
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 808f 	beq.w	80019cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8087 	beq.w	80019cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	2220      	movs	r2, #32
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d136      	bne.n	8001944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0216 	bic.w	r2, r2, #22
 80018e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <HAL_DMA_IRQHandler+0x1da>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0208 	bic.w	r2, r2, #8
 8001914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	223f      	movs	r2, #63	@ 0x3f
 800191c:	409a      	lsls	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001936:	2b00      	cmp	r3, #0
 8001938:	d07e      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
        }
        return;
 8001942:	e079      	b.n	8001a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01d      	beq.n	800198e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10d      	bne.n	800197c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	2b00      	cmp	r3, #0
 8001966:	d031      	beq.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
 8001970:	e02c      	b.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000
 8001978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d023      	beq.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e01e      	b.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10f      	bne.n	80019bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0210 	bic.w	r2, r2, #16
 80019aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d032      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d022      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2205      	movs	r2, #5
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d307      	bcc.n	8001a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f2      	bne.n	80019f8 <HAL_DMA_IRQHandler+0x2cc>
 8001a12:	e000      	b.n	8001a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4798      	blx	r3
 8001a36:	e000      	b.n	8001a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a38:	bf00      	nop
    }
  }
}
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b40      	cmp	r3, #64	@ 0x40
 8001a6c:	d108      	bne.n	8001a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a7e:	e007      	b.n	8001a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3b10      	subs	r3, #16
 8001aac:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <DMA_CalcBaseAndBitshift+0x64>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <DMA_CalcBaseAndBitshift+0x68>)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d909      	bls.n	8001ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	659a      	str	r2, [r3, #88]	@ 0x58
 8001adc:	e007      	b.n	8001aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	aaaaaaab 	.word	0xaaaaaaab
 8001b04:	08006f48 	.word	0x08006f48

08001b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d11f      	bne.n	8001b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d856      	bhi.n	8001bd6 <DMA_CheckFifoParam+0xce>
 8001b28:	a201      	add	r2, pc, #4	@ (adr r2, 8001b30 <DMA_CheckFifoParam+0x28>)
 8001b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2e:	bf00      	nop
 8001b30:	08001b41 	.word	0x08001b41
 8001b34:	08001b53 	.word	0x08001b53
 8001b38:	08001b41 	.word	0x08001b41
 8001b3c:	08001bd7 	.word	0x08001bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d046      	beq.n	8001bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b50:	e043      	b.n	8001bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b5a:	d140      	bne.n	8001bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b60:	e03d      	b.n	8001bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b6a:	d121      	bne.n	8001bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d837      	bhi.n	8001be2 <DMA_CheckFifoParam+0xda>
 8001b72:	a201      	add	r2, pc, #4	@ (adr r2, 8001b78 <DMA_CheckFifoParam+0x70>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001b89 	.word	0x08001b89
 8001b7c:	08001b8f 	.word	0x08001b8f
 8001b80:	08001b89 	.word	0x08001b89
 8001b84:	08001ba1 	.word	0x08001ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b8c:	e030      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d025      	beq.n	8001be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b9e:	e022      	b.n	8001be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ba8:	d11f      	bne.n	8001bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bae:	e01c      	b.n	8001bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d903      	bls.n	8001bbe <DMA_CheckFifoParam+0xb6>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d003      	beq.n	8001bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bbc:	e018      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc2:	e015      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd4:	e00b      	b.n	8001bee <DMA_CheckFifoParam+0xe6>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e00a      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e008      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bde:	bf00      	nop
 8001be0:	e006      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001be2:	bf00      	nop
 8001be4:	e004      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
 8001be8:	e002      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bea:	bf00      	nop
 8001bec:	e000      	b.n	8001bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bee:	bf00      	nop
    }
  } 
  
  return status; 
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e159      	b.n	8001ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 8148 	bne.w	8001eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d005      	beq.n	8001c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d130      	bne.n	8001cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0201 	and.w	r2, r3, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d017      	beq.n	8001cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a2 	beq.w	8001eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b57      	ldr	r3, [pc, #348]	@ (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	4a56      	ldr	r2, [pc, #344]	@ (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d96:	4b54      	ldr	r3, [pc, #336]	@ (8001ee8 <HAL_GPIO_Init+0x2e8>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da2:	4a52      	ldr	r2, [pc, #328]	@ (8001eec <HAL_GPIO_Init+0x2ec>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a49      	ldr	r2, [pc, #292]	@ (8001ef0 <HAL_GPIO_Init+0x2f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0x202>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a48      	ldr	r2, [pc, #288]	@ (8001ef4 <HAL_GPIO_Init+0x2f4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0x1fe>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a47      	ldr	r2, [pc, #284]	@ (8001ef8 <HAL_GPIO_Init+0x2f8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00d      	beq.n	8001dfa <HAL_GPIO_Init+0x1fa>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a46      	ldr	r2, [pc, #280]	@ (8001efc <HAL_GPIO_Init+0x2fc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x1f6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a45      	ldr	r2, [pc, #276]	@ (8001f00 <HAL_GPIO_Init+0x300>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_GPIO_Init+0x1f2>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x204>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	@ (8001eec <HAL_GPIO_Init+0x2ec>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e22:	4b38      	ldr	r3, [pc, #224]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e46:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e70:	4a24      	ldr	r2, [pc, #144]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f04 <HAL_GPIO_Init+0x304>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f aea2 	bls.w	8001c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40013c00 	.word	0x40013c00

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f24:	e003      	b.n	8001f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	041a      	lsls	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	619a      	str	r2, [r3, #24]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f52:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fb2e 	bl	80005bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40013c00 	.word	0x40013c00

08001f6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e128      	b.n	80021d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a90      	ldr	r2, [pc, #576]	@ (80021d8 <HAL_I2S_Init+0x26c>)
 8001f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe fe21 	bl	8000be0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001fb4:	f023 030f 	bic.w	r3, r3, #15
 8001fb8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d060      	beq.n	800208c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e001      	b.n	8001fdc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d802      	bhi.n	8001fea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f001 fae6 	bl	80035bc <HAL_RCCEx_GetPeriphCLKFreq>
 8001ff0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ffa:	d125      	bne.n	8002048 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d010      	beq.n	8002026 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	fbb2 f2f3 	udiv	r2, r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	3305      	adds	r3, #5
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	e01f      	b.n	8002066 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	461a      	mov	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	3305      	adds	r3, #5
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e00e      	b.n	8002066 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	3305      	adds	r3, #5
 8002064:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4a5c      	ldr	r2, [pc, #368]	@ (80021dc <HAL_I2S_Init+0x270>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	08db      	lsrs	r3, r3, #3
 8002070:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	e003      	b.n	8002094 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800208c:	2302      	movs	r3, #2
 800208e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d902      	bls.n	80020a0 <HAL_I2S_Init+0x134>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2bff      	cmp	r3, #255	@ 0xff
 800209e:	d907      	bls.n	80020b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e08f      	b.n	80021d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	ea42 0103 	orr.w	r1, r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80020ce:	f023 030f 	bic.w	r3, r3, #15
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6851      	ldr	r1, [r2, #4]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6892      	ldr	r2, [r2, #8]
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68d2      	ldr	r2, [r2, #12]
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6992      	ldr	r2, [r2, #24]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d161      	bne.n	80021c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a38      	ldr	r2, [pc, #224]	@ (80021e0 <HAL_I2S_Init+0x274>)
 8002100:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a37      	ldr	r2, [pc, #220]	@ (80021e4 <HAL_I2S_Init+0x278>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_I2S_Init+0x1a4>
 800210c:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <HAL_I2S_Init+0x27c>)
 800210e:	e001      	b.n	8002114 <HAL_I2S_Init+0x1a8>
 8002110:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	4932      	ldr	r1, [pc, #200]	@ (80021e4 <HAL_I2S_Init+0x278>)
 800211c:	428a      	cmp	r2, r1
 800211e:	d101      	bne.n	8002124 <HAL_I2S_Init+0x1b8>
 8002120:	4a31      	ldr	r2, [pc, #196]	@ (80021e8 <HAL_I2S_Init+0x27c>)
 8002122:	e001      	b.n	8002128 <HAL_I2S_Init+0x1bc>
 8002124:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002128:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800212c:	f023 030f 	bic.w	r3, r3, #15
 8002130:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2b      	ldr	r2, [pc, #172]	@ (80021e4 <HAL_I2S_Init+0x278>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_I2S_Init+0x1d4>
 800213c:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <HAL_I2S_Init+0x27c>)
 800213e:	e001      	b.n	8002144 <HAL_I2S_Init+0x1d8>
 8002140:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002144:	2202      	movs	r2, #2
 8002146:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a25      	ldr	r2, [pc, #148]	@ (80021e4 <HAL_I2S_Init+0x278>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_I2S_Init+0x1ea>
 8002152:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_I2S_Init+0x27c>)
 8002154:	e001      	b.n	800215a <HAL_I2S_Init+0x1ee>
 8002156:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002166:	d003      	beq.n	8002170 <HAL_I2S_Init+0x204>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d103      	bne.n	8002178 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	e001      	b.n	800217c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002186:	4313      	orrs	r3, r2
 8002188:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002190:	4313      	orrs	r3, r2
 8002192:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800219a:	4313      	orrs	r3, r2
 800219c:	b29a      	uxth	r2, r3
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <HAL_I2S_Init+0x278>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_I2S_Init+0x24c>
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_I2S_Init+0x27c>)
 80021b6:	e001      	b.n	80021bc <HAL_I2S_Init+0x250>
 80021b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021bc:	897a      	ldrh	r2, [r7, #10]
 80021be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	080024e9 	.word	0x080024e9
 80021dc:	cccccccd 	.word	0xcccccccd
 80021e0:	080025fd 	.word	0x080025fd
 80021e4:	40003800 	.word	0x40003800
 80021e8:	40003400 	.word	0x40003400

080021ec <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	4613      	mov	r3, r2
 80021f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_I2S_Receive_DMA+0x1a>
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e09d      	b.n	8002346 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	e095      	b.n	8002346 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_I2S_Receive_DMA+0x3e>
 8002226:	2302      	movs	r3, #2
 8002228:	e08d      	b.n	8002346 <HAL_I2S_Receive_DMA+0x15a>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2204      	movs	r2, #4
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d002      	beq.n	800225e <HAL_I2S_Receive_DMA+0x72>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d10a      	bne.n	8002274 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002272:	e005      	b.n	8002280 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	4a32      	ldr	r2, [pc, #200]	@ (8002350 <HAL_I2S_Receive_DMA+0x164>)
 8002286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <HAL_I2S_Receive_DMA+0x168>)
 800228e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002294:	4a30      	ldr	r2, [pc, #192]	@ (8002358 <HAL_I2S_Receive_DMA+0x16c>)
 8002296:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022a6:	d10a      	bne.n	80022be <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	4619      	mov	r1, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ce:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80022d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80022d6:	f7ff f9d1 	bl	800167c <HAL_DMA_Start_IT>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00f      	beq.n	8002300 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	f043 0208 	orr.w	r2, r3, #8
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e022      	b.n	8002346 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002342:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	080023c7 	.word	0x080023c7
 8002354:	08002385 	.word	0x08002385
 8002358:	080023e3 	.word	0x080023e3

0800235c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002390:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7fe fbcf 	bl	8000b5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff ffc1 	bl	800235c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0203 	bic.w	r2, r2, #3
 80023fe:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	f043 0208 	orr.w	r2, r3, #8
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff ffa5 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	881a      	ldrh	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	1c9a      	adds	r2, r3, #2
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10e      	bne.n	8002482 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002472:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe fb53 	bl	8000b28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	b292      	uxth	r2, r2
 800249e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	1c9a      	adds	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10e      	bne.n	80024e0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fb3e 	bl	8000b5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b04      	cmp	r3, #4
 8002502:	d13a      	bne.n	800257a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d109      	bne.n	8002522 <I2S_IRQHandler+0x3a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002518:	2b40      	cmp	r3, #64	@ 0x40
 800251a:	d102      	bne.n	8002522 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffb4 	bl	800248a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002528:	2b40      	cmp	r3, #64	@ 0x40
 800252a:	d126      	bne.n	800257a <I2S_IRQHandler+0x92>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d11f      	bne.n	800257a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002548:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	f043 0202 	orr.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fefb 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b03      	cmp	r3, #3
 8002584:	d136      	bne.n	80025f4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d109      	bne.n	80025a4 <I2S_IRQHandler+0xbc>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259a:	2b80      	cmp	r3, #128	@ 0x80
 800259c:	d102      	bne.n	80025a4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ff45 	bl	800242e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d122      	bne.n	80025f4 <I2S_IRQHandler+0x10c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d11b      	bne.n	80025f4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80025ca:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff febe 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a92      	ldr	r2, [pc, #584]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002616:	4b92      	ldr	r3, [pc, #584]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002618:	e001      	b.n	800261e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800261a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a8b      	ldr	r2, [pc, #556]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d101      	bne.n	8002638 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002634:	4b8a      	ldr	r3, [pc, #552]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002636:	e001      	b.n	800263c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002638:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002648:	d004      	beq.n	8002654 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8099 	bne.w	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d107      	bne.n	800266e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f925 	bl	80028b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9c8 	bl	8002a18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	2b40      	cmp	r3, #64	@ 0x40
 8002690:	d13a      	bne.n	8002708 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d035      	beq.n	8002708 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6e      	ldr	r2, [pc, #440]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80026a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026a8:	e001      	b.n	80026ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80026aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4969      	ldr	r1, [pc, #420]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026b6:	428b      	cmp	r3, r1
 80026b8:	d101      	bne.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80026ba:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026bc:	e001      	b.n	80026c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80026be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f043 0202 	orr.w	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fe34 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b08      	cmp	r3, #8
 8002710:	f040 80c3 	bne.w	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80bd 	beq.w	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800272e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a49      	ldr	r2, [pc, #292]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800273a:	4b49      	ldr	r3, [pc, #292]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800273c:	e001      	b.n	8002742 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800273e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4944      	ldr	r1, [pc, #272]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800274a:	428b      	cmp	r3, r1
 800274c:	d101      	bne.n	8002752 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800274e:	4b44      	ldr	r3, [pc, #272]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002750:	e001      	b.n	8002756 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002752:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002756:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800275a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f043 0204 	orr.w	r2, r3, #4
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fdf6 	bl	8002370 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002784:	e089      	b.n	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f8be 	bl	800291c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f8fd 	bl	80029b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	d12f      	bne.n	8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d02a      	beq.n	8002824 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027ea:	e001      	b.n	80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80027ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4919      	ldr	r1, [pc, #100]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027f8:	428b      	cmp	r3, r1
 80027fa:	d101      	bne.n	8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027fe:	e001      	b.n	8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002800:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002804:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002808:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fda6 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b08      	cmp	r3, #8
 800282c:	d136      	bne.n	800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d031      	beq.n	800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002844:	e001      	b.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002846:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4902      	ldr	r1, [pc, #8]	@ (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002852:	428b      	cmp	r3, r1
 8002854:	d106      	bne.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002856:	4b02      	ldr	r3, [pc, #8]	@ (8002860 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002858:	e006      	b.n	8002868 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800285a:	bf00      	nop
 800285c:	40003800 	.word	0x40003800
 8002860:	40003400 	.word	0x40003400
 8002864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002868:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800286c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800287c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0204 	orr.w	r2, r3, #4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fd6c 	bl	8002370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002898:	e000      	b.n	800289c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800289a:	bf00      	nop
}
 800289c:	bf00      	nop
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	1c99      	adds	r1, r3, #2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ffc9 	bl	80028a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	1c99      	adds	r1, r3, #2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6251      	str	r1, [r2, #36]	@ 0x24
 800292e:	8819      	ldrh	r1, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <I2SEx_TxISR_I2SExt+0x90>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <I2SEx_TxISR_I2SExt+0x22>
 800293a:	4b1d      	ldr	r3, [pc, #116]	@ (80029b0 <I2SEx_TxISR_I2SExt+0x94>)
 800293c:	e001      	b.n	8002942 <I2SEx_TxISR_I2SExt+0x26>
 800293e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002942:	460a      	mov	r2, r1
 8002944:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d121      	bne.n	80029a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <I2SEx_TxISR_I2SExt+0x90>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <I2SEx_TxISR_I2SExt+0x50>
 8002968:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <I2SEx_TxISR_I2SExt+0x94>)
 800296a:	e001      	b.n	8002970 <I2SEx_TxISR_I2SExt+0x54>
 800296c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	490d      	ldr	r1, [pc, #52]	@ (80029ac <I2SEx_TxISR_I2SExt+0x90>)
 8002978:	428b      	cmp	r3, r1
 800297a:	d101      	bne.n	8002980 <I2SEx_TxISR_I2SExt+0x64>
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <I2SEx_TxISR_I2SExt+0x94>)
 800297e:	e001      	b.n	8002984 <I2SEx_TxISR_I2SExt+0x68>
 8002980:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002984:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002988:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff81 	bl	80028a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40003800 	.word	0x40003800
 80029b0:	40003400 	.word	0x40003400

080029b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68d8      	ldr	r0, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	1c99      	adds	r1, r3, #2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80029cc:	b282      	uxth	r2, r0
 80029ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d113      	bne.n	8002a10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff4a 	bl	80028a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a20      	ldr	r2, [pc, #128]	@ (8002aa8 <I2SEx_RxISR_I2SExt+0x90>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <I2SEx_RxISR_I2SExt+0x16>
 8002a2a:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <I2SEx_RxISR_I2SExt+0x94>)
 8002a2c:	e001      	b.n	8002a32 <I2SEx_RxISR_I2SExt+0x1a>
 8002a2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a32:	68d8      	ldr	r0, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	1c99      	adds	r1, r3, #2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002a3e:	b282      	uxth	r2, r0
 8002a40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d121      	bne.n	8002a9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <I2SEx_RxISR_I2SExt+0x90>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <I2SEx_RxISR_I2SExt+0x50>
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <I2SEx_RxISR_I2SExt+0x94>)
 8002a66:	e001      	b.n	8002a6c <I2SEx_RxISR_I2SExt+0x54>
 8002a68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	490d      	ldr	r1, [pc, #52]	@ (8002aa8 <I2SEx_RxISR_I2SExt+0x90>)
 8002a74:	428b      	cmp	r3, r1
 8002a76:	d101      	bne.n	8002a7c <I2SEx_RxISR_I2SExt+0x64>
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <I2SEx_RxISR_I2SExt+0x94>)
 8002a7a:	e001      	b.n	8002a80 <I2SEx_RxISR_I2SExt+0x68>
 8002a7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff03 	bl	80028a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40003800 	.word	0x40003800
 8002aac:	40003400 	.word	0x40003400

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e267      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d075      	beq.n	8002bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ace:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	4b85      	ldr	r3, [pc, #532]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d112      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae6:	4b82      	ldr	r3, [pc, #520]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05b      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x108>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d157      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e242      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x74>
 8002b16:	4b76      	ldr	r3, [pc, #472]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a75      	ldr	r2, [pc, #468]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b70      	ldr	r3, [pc, #448]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6c      	ldr	r2, [pc, #432]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b48:	4b69      	ldr	r3, [pc, #420]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a68      	ldr	r2, [pc, #416]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a65      	ldr	r2, [pc, #404]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fb98 	bl	800129c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fb94 	bl	800129c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e207      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fb84 	bl	800129c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fb80 	bl	800129c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1f3      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b51      	ldr	r3, [pc, #324]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0xe8>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b47      	ldr	r3, [pc, #284]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1c7      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4937      	ldr	r1, [pc, #220]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b34      	ldr	r3, [pc, #208]	@ (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fb39 	bl	800129c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fb35 	bl	800129c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1a8      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4925      	ldr	r1, [pc, #148]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fb18 	bl	800129c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe fb14 	bl	800129c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e187      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d036      	beq.n	8002d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe faf8 	bl	800129c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe faf4 	bl	800129c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e167      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x200>
 8002cce:	e01b      	b.n	8002d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fae1 	bl	800129c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e00e      	b.n	8002cfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe fadd 	bl	800129c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d907      	bls.n	8002cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e150      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470000 	.word	0x42470000
 8002cf8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b88      	ldr	r3, [pc, #544]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ea      	bne.n	8002cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8097 	beq.w	8002e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b81      	ldr	r3, [pc, #516]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d36:	4b7a      	ldr	r3, [pc, #488]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b77      	ldr	r3, [pc, #476]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b74      	ldr	r3, [pc, #464]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a73      	ldr	r2, [pc, #460]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fa9d 	bl	800129c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fe fa99 	bl	800129c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e10c      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2ea>
 8002d8c:	4b64      	ldr	r3, [pc, #400]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a63      	ldr	r2, [pc, #396]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x30c>
 8002da2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dae:	4b5c      	ldr	r3, [pc, #368]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002dbc:	4b58      	ldr	r3, [pc, #352]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc0:	4a57      	ldr	r2, [pc, #348]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc8:	4b55      	ldr	r3, [pc, #340]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a54      	ldr	r2, [pc, #336]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fa5e 	bl	800129c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe fa5a 	bl	800129c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0cb      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfa:	4b49      	ldr	r3, [pc, #292]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ee      	beq.n	8002de4 <HAL_RCC_OscConfig+0x334>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe fa48 	bl	800129c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe fa44 	bl	800129c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0b5      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e26:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ee      	bne.n	8002e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	4a38      	ldr	r2, [pc, #224]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a1 	beq.w	8002f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e4e:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d05c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d141      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fa18 	bl	800129c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fa14 	bl	800129c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e087      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b27      	ldr	r3, [pc, #156]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	491b      	ldr	r1, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe f9ed 	bl	800129c <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe f9e9 	bl	800129c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e05c      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x416>
 8002ee4:	e054      	b.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe f9d6 	bl	800129c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f9d2 	bl	800129c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e045      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x444>
 8002f12:	e03d      	b.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e038      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_RCC_OscConfig+0x4ec>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d028      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d121      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0cc      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b68      	ldr	r3, [pc, #416]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d90c      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b65      	ldr	r3, [pc, #404]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b63      	ldr	r3, [pc, #396]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b8      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	4b59      	ldr	r3, [pc, #356]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300c:	4b53      	ldr	r3, [pc, #332]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a52      	ldr	r2, [pc, #328]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b50      	ldr	r3, [pc, #320]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	494d      	ldr	r1, [pc, #308]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d044      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b47      	ldr	r3, [pc, #284]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d119      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d003      	beq.n	800305e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305a:	2b03      	cmp	r3, #3
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b3f      	ldr	r3, [pc, #252]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e067      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b37      	ldr	r3, [pc, #220]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4934      	ldr	r1, [pc, #208]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7fe f904 	bl	800129c <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7fe f900 	bl	800129c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b25      	ldr	r3, [pc, #148]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d20c      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b22      	ldr	r3, [pc, #136]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4916      	ldr	r1, [pc, #88]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003112:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490e      	ldr	r1, [pc, #56]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003126:	f000 f821 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490a      	ldr	r1, [pc, #40]	@ (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a09      	ldr	r2, [pc, #36]	@ (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f864 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00
 800315c:	40023800 	.word	0x40023800
 8003160:	08006f30 	.word	0x08006f30
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b094      	sub	sp, #80	@ 0x50
 8003172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003184:	4b79      	ldr	r3, [pc, #484]	@ (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d00d      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x40>
 8003190:	2b08      	cmp	r3, #8
 8003192:	f200 80e1 	bhi.w	8003358 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 800319a:	2b04      	cmp	r3, #4
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800319e:	e0db      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b73      	ldr	r3, [pc, #460]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x204>)
 80031a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031a4:	e0db      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a6:	4b73      	ldr	r3, [pc, #460]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x208>)
 80031a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031aa:	e0d8      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ac:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b6:	4b6d      	ldr	r3, [pc, #436]	@ (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d063      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	2200      	movs	r2, #0
 80031ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d6:	2300      	movs	r3, #0
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031de:	4622      	mov	r2, r4
 80031e0:	462b      	mov	r3, r5
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f0:	0150      	lsls	r0, r2, #5
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4621      	mov	r1, r4
 80031f8:	1a51      	subs	r1, r2, r1
 80031fa:	6139      	str	r1, [r7, #16]
 80031fc:	4629      	mov	r1, r5
 80031fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003210:	4659      	mov	r1, fp
 8003212:	018b      	lsls	r3, r1, #6
 8003214:	4651      	mov	r1, sl
 8003216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321a:	4651      	mov	r1, sl
 800321c:	018a      	lsls	r2, r1, #6
 800321e:	4651      	mov	r1, sl
 8003220:	ebb2 0801 	subs.w	r8, r2, r1
 8003224:	4659      	mov	r1, fp
 8003226:	eb63 0901 	sbc.w	r9, r3, r1
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323e:	4690      	mov	r8, r2
 8003240:	4699      	mov	r9, r3
 8003242:	4623      	mov	r3, r4
 8003244:	eb18 0303 	adds.w	r3, r8, r3
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	462b      	mov	r3, r5
 800324c:	eb49 0303 	adc.w	r3, r9, r3
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800325e:	4629      	mov	r1, r5
 8003260:	024b      	lsls	r3, r1, #9
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003268:	4621      	mov	r1, r4
 800326a:	024a      	lsls	r2, r1, #9
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003272:	2200      	movs	r2, #0
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800327c:	f7fd f808 	bl	8000290 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003288:	e058      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328a:	4b38      	ldr	r3, [pc, #224]	@ (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	2200      	movs	r2, #0
 8003292:	4618      	mov	r0, r3
 8003294:	4611      	mov	r1, r2
 8003296:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032a4:	4642      	mov	r2, r8
 80032a6:	464b      	mov	r3, r9
 80032a8:	f04f 0000 	mov.w	r0, #0
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	0159      	lsls	r1, r3, #5
 80032b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b6:	0150      	lsls	r0, r2, #5
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4641      	mov	r1, r8
 80032be:	ebb2 0a01 	subs.w	sl, r2, r1
 80032c2:	4649      	mov	r1, r9
 80032c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032dc:	ebb2 040a 	subs.w	r4, r2, sl
 80032e0:	eb63 050b 	sbc.w	r5, r3, fp
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	00eb      	lsls	r3, r5, #3
 80032ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f2:	00e2      	lsls	r2, r4, #3
 80032f4:	4614      	mov	r4, r2
 80032f6:	461d      	mov	r5, r3
 80032f8:	4643      	mov	r3, r8
 80032fa:	18e3      	adds	r3, r4, r3
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	464b      	mov	r3, r9
 8003300:	eb45 0303 	adc.w	r3, r5, r3
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003312:	4629      	mov	r1, r5
 8003314:	028b      	lsls	r3, r1, #10
 8003316:	4621      	mov	r1, r4
 8003318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800331c:	4621      	mov	r1, r4
 800331e:	028a      	lsls	r2, r1, #10
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003326:	2200      	movs	r2, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	61fa      	str	r2, [r7, #28]
 800332c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003330:	f7fc ffae 	bl	8000290 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <HAL_RCC_GetSysClockFreq+0x200>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800334c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800334e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x204>)
 800335a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003360:	4618      	mov	r0, r3
 8003362:	3750      	adds	r7, #80	@ 0x50
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400
 8003374:	007a1200 	.word	0x007a1200

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	@ (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	@ (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08006f40 	.word	0x08006f40

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffdc 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0b5b      	lsrs	r3, r3, #13
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	@ (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08006f40 	.word	0x08006f40

080033e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003404:	2b00      	cmp	r3, #0
 8003406:	d035      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003408:	4b67      	ldr	r3, [pc, #412]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800340e:	f7fd ff45 	bl	800129c <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003416:	f7fd ff41 	bl	800129c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0ba      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003428:	4b60      	ldr	r3, [pc, #384]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	019a      	lsls	r2, r3, #6
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	071b      	lsls	r3, r3, #28
 8003440:	495a      	ldr	r1, [pc, #360]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003448:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800344e:	f7fd ff25 	bl	800129c <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003456:	f7fd ff21 	bl	800129c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e09a      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003468:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8083 	beq.w	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	4a48      	ldr	r2, [pc, #288]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	@ 0x40
 8003492:	4b46      	ldr	r3, [pc, #280]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800349e:	4b44      	ldr	r3, [pc, #272]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a43      	ldr	r2, [pc, #268]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034aa:	f7fd fef7 	bl	800129c <HAL_GetTick>
 80034ae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fd fef3 	bl	800129c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e06c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80034c4:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d0:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d028      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ee:	4b2f      	ldr	r3, [pc, #188]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034f8:	4b2e      	ldr	r3, [pc, #184]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034fe:	4b2d      	ldr	r3, [pc, #180]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003504:	4a29      	ldr	r2, [pc, #164]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800350a:	4b28      	ldr	r3, [pc, #160]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d114      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003516:	f7fd fec1 	bl	800129c <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fd febd 	bl	800129c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e034      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003548:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800354c:	d10d      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800354e:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800355e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003562:	4912      	ldr	r1, [pc, #72]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
 8003568:	e005      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800356a:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4a0f      	ldr	r2, [pc, #60]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003570:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003578:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003582:	490a      	ldr	r1, [pc, #40]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7c1a      	ldrb	r2, [r3, #16]
 8003598:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800359a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	42470068 	.word	0x42470068
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470e40 	.word	0x42470e40
 80035b8:	424711e0 	.word	0x424711e0

080035bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d13f      	bne.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80035da:	4b24      	ldr	r3, [pc, #144]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035f0:	d12f      	bne.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80035f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80035f4:	617b      	str	r3, [r7, #20]
          break;
 80035f6:	e02f      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035f8:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003604:	d108      	bne.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003606:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800360e:	4a19      	ldr	r2, [pc, #100]	@ (8003674 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	e007      	b.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003618:	4b14      	ldr	r3, [pc, #80]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003620:	4a15      	ldr	r2, [pc, #84]	@ (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003628:	4b10      	ldr	r3, [pc, #64]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800363e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003642:	0f1b      	lsrs	r3, r3, #28
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
          break;
 8003650:	e002      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
          break;
 8003656:	bf00      	nop
        }
      }
      break;
 8003658:	e000      	b.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800365a:	bf00      	nop
    }
  }
  return frequency;
 800365c:	697b      	ldr	r3, [r7, #20]
}
 800365e:	4618      	mov	r0, r3
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	00bb8000 	.word	0x00bb8000
 8003674:	007a1200 	.word	0x007a1200
 8003678:	00f42400 	.word	0x00f42400

0800367c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07b      	b.n	8003786 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800369e:	d009      	beq.n	80036b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
 80036a6:	e005      	b.n	80036b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fbbe 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003738:	ea42 0103 	orr.w	r1, r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	f003 0104 	and.w	r1, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	f003 0210 	and.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379e:	f7fd fd7d 	bl	800129c <HAL_GetTick>
 80037a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d001      	beq.n	80037b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
 80037b6:	e12a      	b.n	8003a0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Transmit+0x36>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e122      	b.n	8003a0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_SPI_Transmit+0x48>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e11b      	b.n	8003a0e <HAL_SPI_Transmit+0x280>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2203      	movs	r2, #3
 80037e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003824:	d10f      	bne.n	8003846 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d007      	beq.n	8003864 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386c:	d152      	bne.n	8003914 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_SPI_Transmit+0xee>
 8003876:	8b7b      	ldrh	r3, [r7, #26]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d145      	bne.n	8003908 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038a0:	e032      	b.n	8003908 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d112      	bne.n	80038d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	881a      	ldrh	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038d4:	e018      	b.n	8003908 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d6:	f7fd fce1 	bl	800129c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d803      	bhi.n	80038ee <HAL_SPI_Transmit+0x160>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_Transmit+0x166>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e082      	b.n	8003a0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1c7      	bne.n	80038a2 <HAL_SPI_Transmit+0x114>
 8003912:	e053      	b.n	80039bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_Transmit+0x194>
 800391c:	8b7b      	ldrh	r3, [r7, #26]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d147      	bne.n	80039b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003948:	e033      	b.n	80039b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d113      	bne.n	8003980 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800397e:	e018      	b.n	80039b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003980:	f7fd fc8c 	bl	800129c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d803      	bhi.n	8003998 <HAL_SPI_Transmit+0x20a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d102      	bne.n	800399e <HAL_SPI_Transmit+0x210>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e02d      	b.n	8003a0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1c6      	bne.n	800394a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fa59 	bl	8003e78 <SPI_EndRxTxTransaction>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08a      	sub	sp, #40	@ 0x28
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a28:	f7fd fc38 	bl	800129c <HAL_GetTick>
 8003a2c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a34:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a3c:	887b      	ldrh	r3, [r7, #2]
 8003a3e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a40:	7ffb      	ldrb	r3, [r7, #31]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d00c      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x4a>
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4c:	d106      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x46>
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d001      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e17f      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x5c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x5c>
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e174      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x6e>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e16d      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x34a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d003      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	887a      	ldrh	r2, [r7, #2]
 8003ac2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae0:	2b40      	cmp	r3, #64	@ 0x40
 8003ae2:	d007      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003afc:	d17e      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_TransmitReceive+0xf6>
 8003b06:	8afb      	ldrh	r3, [r7, #22]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d16c      	bne.n	8003be6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b30:	e059      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x162>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x162>
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d113      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d119      	bne.n	8003bba <HAL_SPI_TransmitReceive+0x1a4>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d014      	beq.n	8003bba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bba:	f7fd fb6f 	bl	800129c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d80d      	bhi.n	8003be6 <HAL_SPI_TransmitReceive+0x1d0>
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d009      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0bc      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1a0      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x11c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d19b      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x11c>
 8003bfa:	e082      	b.n	8003d02 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_SPI_TransmitReceive+0x1f4>
 8003c04:	8afb      	ldrh	r3, [r7, #22]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d171      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c30:	e05d      	b.n	8003cee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d11c      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x264>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d017      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x264>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d114      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d119      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x2a6>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d014      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cbc:	f7fd faee 	bl	800129c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d803      	bhi.n	8003cd4 <HAL_SPI_TransmitReceive+0x2be>
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d102      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x2c4>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e038      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d19c      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x21c>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d197      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d02:	6a3a      	ldr	r2, [r7, #32]
 8003d04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f8b6 	bl	8003e78 <SPI_EndRxTxTransaction>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e01d      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3728      	adds	r7, #40	@ 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d78:	f7fd fa90 	bl	800129c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d88:	f7fd fa88 	bl	800129c <HAL_GetTick>
 8003d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d8e:	4b39      	ldr	r3, [pc, #228]	@ (8003e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	015b      	lsls	r3, r3, #5
 8003d94:	0d1b      	lsrs	r3, r3, #20
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9e:	e055      	b.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d051      	beq.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da8:	f7fd fa78 	bl	800129c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d902      	bls.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d13d      	bne.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dd6:	d111      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de0:	d004      	beq.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dea:	d107      	bne.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e04:	d10f      	bne.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e018      	b.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	e002      	b.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d19a      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000000 	.word	0x20000000

08003e78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff ff6a 	bl	8003d68 <SPI_WaitFlagStateUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e032      	b.n	8003f10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <SPI_EndRxTxTransaction+0xa0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <SPI_EndRxTxTransaction+0xa4>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	0d5b      	lsrs	r3, r3, #21
 8003eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec8:	d112      	bne.n	8003ef0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2180      	movs	r1, #128	@ 0x80
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ff47 	bl	8003d68 <SPI_WaitFlagStateUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d016      	beq.n	8003f0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e00f      	b.n	8003f10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d0f2      	beq.n	8003ef0 <SPI_EndRxTxTransaction+0x78>
 8003f0a:	e000      	b.n	8003f0e <SPI_EndRxTxTransaction+0x96>
        break;
 8003f0c:	bf00      	nop
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	165e9f81 	.word	0x165e9f81

08003f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e042      	b.n	8003fb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fc ffea 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2224      	movs	r2, #36	@ 0x24
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f973 	bl	8004250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d175      	bne.n	80040cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_UART_Transmit+0x2c>
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e06e      	b.n	80040ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2221      	movs	r2, #33	@ 0x21
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffe:	f7fd f94d 	bl	800129c <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Transmit+0x6c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004034:	e02e      	b.n	8004094 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	@ 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f848 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e03a      	b.n	80040ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3302      	adds	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e007      	b.n	8004086 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1cb      	bne.n	8004036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2140      	movs	r1, #64	@ 0x40
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f814 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e006      	b.n	80040ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	e03b      	b.n	8004160 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d037      	beq.n	8004160 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f0:	f7fd f8d4 	bl	800129c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	6a3a      	ldr	r2, [r7, #32]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <UART_WaitOnFlagUntilTimeout+0x30>
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e03a      	b.n	8004180 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d023      	beq.n	8004160 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b80      	cmp	r3, #128	@ 0x80
 800411c:	d020      	beq.n	8004160 <UART_WaitOnFlagUntilTimeout+0x8a>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b40      	cmp	r3, #64	@ 0x40
 8004122:	d01d      	beq.n	8004160 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b08      	cmp	r3, #8
 8004130:	d116      	bne.n	8004160 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f81d 	bl	8004188 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2208      	movs	r2, #8
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e00f      	b.n	8004180 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	429a      	cmp	r2, r3
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	429a      	cmp	r2, r3
 800417c:	d0b4      	beq.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b095      	sub	sp, #84	@ 0x54
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80041b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e5      	bne.n	80041c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d119      	bne.n	8004234 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	647b      	str	r3, [r7, #68]	@ 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004220:	61ba      	str	r2, [r7, #24]
 8004222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	613b      	str	r3, [r7, #16]
   return(result);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004242:	bf00      	nop
 8004244:	3754      	adds	r7, #84	@ 0x54
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b0c0      	sub	sp, #256	@ 0x100
 8004256:	af00      	add	r7, sp, #0
 8004258:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	ea40 0301 	orr.w	r3, r0, r1
 8004278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	431a      	orrs	r2, r3
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	431a      	orrs	r2, r3
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042a8:	f021 010c 	bic.w	r1, r1, #12
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042b6:	430b      	orrs	r3, r1
 80042b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ca:	6999      	ldr	r1, [r3, #24]
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	ea40 0301 	orr.w	r3, r0, r1
 80042d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b8f      	ldr	r3, [pc, #572]	@ (800451c <UART_SetConfig+0x2cc>)
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d005      	beq.n	80042f0 <UART_SetConfig+0xa0>
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004520 <UART_SetConfig+0x2d0>)
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d104      	bne.n	80042fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7ff f862 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 80042f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042f8:	e003      	b.n	8004302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042fa:	f7ff f849 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80042fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430c:	f040 810c 	bne.w	8004528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800431a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800431e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004322:	4622      	mov	r2, r4
 8004324:	462b      	mov	r3, r5
 8004326:	1891      	adds	r1, r2, r2
 8004328:	65b9      	str	r1, [r7, #88]	@ 0x58
 800432a:	415b      	adcs	r3, r3
 800432c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800432e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004332:	4621      	mov	r1, r4
 8004334:	eb12 0801 	adds.w	r8, r2, r1
 8004338:	4629      	mov	r1, r5
 800433a:	eb43 0901 	adc.w	r9, r3, r1
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800434e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004352:	4690      	mov	r8, r2
 8004354:	4699      	mov	r9, r3
 8004356:	4623      	mov	r3, r4
 8004358:	eb18 0303 	adds.w	r3, r8, r3
 800435c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004360:	462b      	mov	r3, r5
 8004362:	eb49 0303 	adc.w	r3, r9, r3
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004376:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800437a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800437e:	460b      	mov	r3, r1
 8004380:	18db      	adds	r3, r3, r3
 8004382:	653b      	str	r3, [r7, #80]	@ 0x50
 8004384:	4613      	mov	r3, r2
 8004386:	eb42 0303 	adc.w	r3, r2, r3
 800438a:	657b      	str	r3, [r7, #84]	@ 0x54
 800438c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004394:	f7fb ff7c 	bl	8000290 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4b61      	ldr	r3, [pc, #388]	@ (8004524 <UART_SetConfig+0x2d4>)
 800439e:	fba3 2302 	umull	r2, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	011c      	lsls	r4, r3, #4
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043c0:	415b      	adcs	r3, r3
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043c8:	4641      	mov	r1, r8
 80043ca:	eb12 0a01 	adds.w	sl, r2, r1
 80043ce:	4649      	mov	r1, r9
 80043d0:	eb43 0b01 	adc.w	fp, r3, r1
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e8:	4692      	mov	sl, r2
 80043ea:	469b      	mov	fp, r3
 80043ec:	4643      	mov	r3, r8
 80043ee:	eb1a 0303 	adds.w	r3, sl, r3
 80043f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043f6:	464b      	mov	r3, r9
 80043f8:	eb4b 0303 	adc.w	r3, fp, r3
 80043fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800440c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004414:	460b      	mov	r3, r1
 8004416:	18db      	adds	r3, r3, r3
 8004418:	643b      	str	r3, [r7, #64]	@ 0x40
 800441a:	4613      	mov	r3, r2
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	647b      	str	r3, [r7, #68]	@ 0x44
 8004422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800442a:	f7fb ff31 	bl	8000290 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4611      	mov	r1, r2
 8004434:	4b3b      	ldr	r3, [pc, #236]	@ (8004524 <UART_SetConfig+0x2d4>)
 8004436:	fba3 2301 	umull	r2, r3, r3, r1
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2264      	movs	r2, #100	@ 0x64
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	1acb      	subs	r3, r1, r3
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800444a:	4b36      	ldr	r3, [pc, #216]	@ (8004524 <UART_SetConfig+0x2d4>)
 800444c:	fba3 2302 	umull	r2, r3, r3, r2
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004458:	441c      	add	r4, r3
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004464:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	1891      	adds	r1, r2, r2
 8004472:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004474:	415b      	adcs	r3, r3
 8004476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800447c:	4641      	mov	r1, r8
 800447e:	1851      	adds	r1, r2, r1
 8004480:	6339      	str	r1, [r7, #48]	@ 0x30
 8004482:	4649      	mov	r1, r9
 8004484:	414b      	adcs	r3, r1
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004494:	4659      	mov	r1, fp
 8004496:	00cb      	lsls	r3, r1, #3
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449e:	4651      	mov	r1, sl
 80044a0:	00ca      	lsls	r2, r1, #3
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	4642      	mov	r2, r8
 80044aa:	189b      	adds	r3, r3, r2
 80044ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044b0:	464b      	mov	r3, r9
 80044b2:	460a      	mov	r2, r1
 80044b4:	eb42 0303 	adc.w	r3, r2, r3
 80044b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044d0:	460b      	mov	r3, r1
 80044d2:	18db      	adds	r3, r3, r3
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044d6:	4613      	mov	r3, r2
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044e6:	f7fb fed3 	bl	8000290 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <UART_SetConfig+0x2d4>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	@ 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	3332      	adds	r3, #50	@ 0x32
 8004502:	4a08      	ldr	r2, [pc, #32]	@ (8004524 <UART_SetConfig+0x2d4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f003 0207 	and.w	r2, r3, #7
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4422      	add	r2, r4
 8004516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004518:	e106      	b.n	8004728 <UART_SetConfig+0x4d8>
 800451a:	bf00      	nop
 800451c:	40011000 	.word	0x40011000
 8004520:	40011400 	.word	0x40011400
 8004524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800452c:	2200      	movs	r2, #0
 800452e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004532:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800453a:	4642      	mov	r2, r8
 800453c:	464b      	mov	r3, r9
 800453e:	1891      	adds	r1, r2, r2
 8004540:	6239      	str	r1, [r7, #32]
 8004542:	415b      	adcs	r3, r3
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
 8004546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800454a:	4641      	mov	r1, r8
 800454c:	1854      	adds	r4, r2, r1
 800454e:	4649      	mov	r1, r9
 8004550:	eb43 0501 	adc.w	r5, r3, r1
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	00eb      	lsls	r3, r5, #3
 800455e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004562:	00e2      	lsls	r2, r4, #3
 8004564:	4614      	mov	r4, r2
 8004566:	461d      	mov	r5, r3
 8004568:	4643      	mov	r3, r8
 800456a:	18e3      	adds	r3, r4, r3
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004570:	464b      	mov	r3, r9
 8004572:	eb45 0303 	adc.w	r3, r5, r3
 8004576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004586:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004596:	4629      	mov	r1, r5
 8004598:	008b      	lsls	r3, r1, #2
 800459a:	4621      	mov	r1, r4
 800459c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a0:	4621      	mov	r1, r4
 80045a2:	008a      	lsls	r2, r1, #2
 80045a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045a8:	f7fb fe72 	bl	8000290 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4b60      	ldr	r3, [pc, #384]	@ (8004734 <UART_SetConfig+0x4e4>)
 80045b2:	fba3 2302 	umull	r2, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	011c      	lsls	r4, r3, #4
 80045ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045cc:	4642      	mov	r2, r8
 80045ce:	464b      	mov	r3, r9
 80045d0:	1891      	adds	r1, r2, r2
 80045d2:	61b9      	str	r1, [r7, #24]
 80045d4:	415b      	adcs	r3, r3
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045dc:	4641      	mov	r1, r8
 80045de:	1851      	adds	r1, r2, r1
 80045e0:	6139      	str	r1, [r7, #16]
 80045e2:	4649      	mov	r1, r9
 80045e4:	414b      	adcs	r3, r1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045f4:	4659      	mov	r1, fp
 80045f6:	00cb      	lsls	r3, r1, #3
 80045f8:	4651      	mov	r1, sl
 80045fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fe:	4651      	mov	r1, sl
 8004600:	00ca      	lsls	r2, r1, #3
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	4603      	mov	r3, r0
 8004608:	4642      	mov	r2, r8
 800460a:	189b      	adds	r3, r3, r2
 800460c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004610:	464b      	mov	r3, r9
 8004612:	460a      	mov	r2, r1
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004626:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004634:	4649      	mov	r1, r9
 8004636:	008b      	lsls	r3, r1, #2
 8004638:	4641      	mov	r1, r8
 800463a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800463e:	4641      	mov	r1, r8
 8004640:	008a      	lsls	r2, r1, #2
 8004642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004646:	f7fb fe23 	bl	8000290 <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4611      	mov	r1, r2
 8004650:	4b38      	ldr	r3, [pc, #224]	@ (8004734 <UART_SetConfig+0x4e4>)
 8004652:	fba3 2301 	umull	r2, r3, r3, r1
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	2264      	movs	r2, #100	@ 0x64
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	1acb      	subs	r3, r1, r3
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	3332      	adds	r3, #50	@ 0x32
 8004664:	4a33      	ldr	r2, [pc, #204]	@ (8004734 <UART_SetConfig+0x4e4>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004670:	441c      	add	r4, r3
 8004672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004676:	2200      	movs	r2, #0
 8004678:	673b      	str	r3, [r7, #112]	@ 0x70
 800467a:	677a      	str	r2, [r7, #116]	@ 0x74
 800467c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	1891      	adds	r1, r2, r2
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	415b      	adcs	r3, r3
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004690:	4641      	mov	r1, r8
 8004692:	1851      	adds	r1, r2, r1
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	4649      	mov	r1, r9
 8004698:	414b      	adcs	r3, r1
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046a8:	4659      	mov	r1, fp
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b2:	4651      	mov	r1, sl
 80046b4:	00ca      	lsls	r2, r1, #3
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	4642      	mov	r2, r8
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046c2:	464b      	mov	r3, r9
 80046c4:	460a      	mov	r2, r1
 80046c6:	eb42 0303 	adc.w	r3, r2, r3
 80046ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046e4:	4649      	mov	r1, r9
 80046e6:	008b      	lsls	r3, r1, #2
 80046e8:	4641      	mov	r1, r8
 80046ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ee:	4641      	mov	r1, r8
 80046f0:	008a      	lsls	r2, r1, #2
 80046f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046f6:	f7fb fdcb 	bl	8000290 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <UART_SetConfig+0x4e4>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	@ 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	3332      	adds	r3, #50	@ 0x32
 8004712:	4a08      	ldr	r2, [pc, #32]	@ (8004734 <UART_SetConfig+0x4e4>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4422      	add	r2, r4
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800472e:	46bd      	mov	sp, r7
 8004730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004734:	51eb851f 	.word	0x51eb851f

08004738 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800473c:	4904      	ldr	r1, [pc, #16]	@ (8004750 <MX_FATFS_Init+0x18>)
 800473e:	4805      	ldr	r0, [pc, #20]	@ (8004754 <MX_FATFS_Init+0x1c>)
 8004740:	f001 fa08 	bl	8005b54 <FATFS_LinkDriver>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	4b03      	ldr	r3, [pc, #12]	@ (8004758 <MX_FATFS_Init+0x20>)
 800474a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800474c:	bf00      	nop
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2000059c 	.word	0x2000059c
 8004754:	2000000c 	.word	0x2000000c
 8004758:	20000598 	.word	0x20000598

0800475c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;

	return USER_SPI_initialize(pdrv);
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f9d3 	bl	8004b14 <USER_SPI_initialize>
 800476e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fab1 	bl	8004cec <USER_SPI_status>
 800478a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;

	return USER_SPI_read(pdrv, buff, sector, count);
 80047a4:	7bf8      	ldrb	r0, [r7, #15]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	f000 fab4 	bl	8004d18 <USER_SPI_read>
 80047b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4603      	mov	r3, r0
 80047c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff,  sector, count);
 80047ca:	7bf8      	ldrb	r0, [r7, #15]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	f000 fb07 	bl	8004de4 <USER_SPI_write>
 80047d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	603a      	str	r2, [r7, #0]
 80047ea:	71fb      	strb	r3, [r7, #7]
 80047ec:	460b      	mov	r3, r1
 80047ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80047f0:	79b9      	ldrb	r1, [r7, #6]
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fb70 	bl	8004edc <USER_SPI_ioctl>
 80047fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004810:	f7fc fd44 	bl	800129c <HAL_GetTick>
 8004814:	4603      	mov	r3, r0
 8004816:	4a04      	ldr	r2, [pc, #16]	@ (8004828 <SPI_Timer_On+0x20>)
 8004818:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800481a:	4a04      	ldr	r2, [pc, #16]	@ (800482c <SPI_Timer_On+0x24>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	200005a4 	.word	0x200005a4
 800482c:	200005a8 	.word	0x200005a8

08004830 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004834:	f7fc fd32 	bl	800129c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <SPI_Timer_Status+0x24>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <SPI_Timer_Status+0x28>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	bf34      	ite	cc
 8004848:	2301      	movcc	r3, #1
 800484a:	2300      	movcs	r3, #0
 800484c:	b2db      	uxtb	r3, r3
}
 800484e:	4618      	mov	r0, r3
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	200005a4 	.word	0x200005a4
 8004858:	200005a8 	.word	0x200005a8

0800485c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af02      	add	r7, sp, #8
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004866:	f107 020f 	add.w	r2, r7, #15
 800486a:	1df9      	adds	r1, r7, #7
 800486c:	2332      	movs	r3, #50	@ 0x32
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2301      	movs	r3, #1
 8004872:	4804      	ldr	r0, [pc, #16]	@ (8004884 <xchg_spi+0x28>)
 8004874:	f7ff f8cf 	bl	8003a16 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200001ec 	.word	0x200001ec

08004888 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e00a      	b.n	80048ae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	18d4      	adds	r4, r2, r3
 800489e:	20ff      	movs	r0, #255	@ 0xff
 80048a0:	f7ff ffdc 	bl	800485c <xchg_spi>
 80048a4:	4603      	mov	r3, r0
 80048a6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d3f0      	bcc.n	8004898 <rcvr_spi_multi+0x10>
	}
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}

080048c0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	f04f 33ff 	mov.w	r3, #4294967295
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4803      	ldr	r0, [pc, #12]	@ (80048e4 <xmit_spi_multi+0x24>)
 80048d6:	f7fe ff5a 	bl	800378e <HAL_SPI_Transmit>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	200001ec 	.word	0x200001ec

080048e8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80048f0:	f7fc fcd4 	bl	800129c <HAL_GetTick>
 80048f4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80048fa:	20ff      	movs	r0, #255	@ 0xff
 80048fc:	f7ff ffae 	bl	800485c <xchg_spi>
 8004900:	4603      	mov	r3, r0
 8004902:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2bff      	cmp	r3, #255	@ 0xff
 8004908:	d007      	beq.n	800491a <wait_ready+0x32>
 800490a:	f7fc fcc7 	bl	800129c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	429a      	cmp	r2, r3
 8004918:	d8ef      	bhi.n	80048fa <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2bff      	cmp	r3, #255	@ 0xff
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004934:	2201      	movs	r2, #1
 8004936:	2110      	movs	r1, #16
 8004938:	4803      	ldr	r0, [pc, #12]	@ (8004948 <despiselect+0x18>)
 800493a:	f7fd fae5 	bl	8001f08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800493e:	20ff      	movs	r0, #255	@ 0xff
 8004940:	f7ff ff8c 	bl	800485c <xchg_spi>

}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40020000 	.word	0x40020000

0800494c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004950:	2200      	movs	r2, #0
 8004952:	2110      	movs	r1, #16
 8004954:	4809      	ldr	r0, [pc, #36]	@ (800497c <spiselect+0x30>)
 8004956:	f7fd fad7 	bl	8001f08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800495a:	20ff      	movs	r0, #255	@ 0xff
 800495c:	f7ff ff7e 	bl	800485c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004960:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004964:	f7ff ffc0 	bl	80048e8 <wait_ready>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <spiselect+0x26>
 800496e:	2301      	movs	r3, #1
 8004970:	e002      	b.n	8004978 <spiselect+0x2c>

	despiselect();
 8004972:	f7ff ffdd 	bl	8004930 <despiselect>
	return 0;	/* Timeout */
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40020000 	.word	0x40020000

08004980 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800498a:	20c8      	movs	r0, #200	@ 0xc8
 800498c:	f7ff ff3c 	bl	8004808 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004990:	20ff      	movs	r0, #255	@ 0xff
 8004992:	f7ff ff63 	bl	800485c <xchg_spi>
 8004996:	4603      	mov	r3, r0
 8004998:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2bff      	cmp	r3, #255	@ 0xff
 800499e:	d104      	bne.n	80049aa <rcvr_datablock+0x2a>
 80049a0:	f7ff ff46 	bl	8004830 <SPI_Timer_Status>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f2      	bne.n	8004990 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80049ae:	d001      	beq.n	80049b4 <rcvr_datablock+0x34>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e00a      	b.n	80049ca <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ff66 	bl	8004888 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80049bc:	20ff      	movs	r0, #255	@ 0xff
 80049be:	f7ff ff4d 	bl	800485c <xchg_spi>
 80049c2:	20ff      	movs	r0, #255	@ 0xff
 80049c4:	f7ff ff4a 	bl	800485c <xchg_spi>

	return 1;						/* Function succeeded */
 80049c8:	2301      	movs	r3, #1
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80049de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80049e2:	f7ff ff81 	bl	80048e8 <wait_ready>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <xmit_datablock+0x1e>
 80049ec:	2300      	movs	r3, #0
 80049ee:	e01e      	b.n	8004a2e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ff32 	bl	800485c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	2bfd      	cmp	r3, #253	@ 0xfd
 80049fc:	d016      	beq.n	8004a2c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80049fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ff5c 	bl	80048c0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004a08:	20ff      	movs	r0, #255	@ 0xff
 8004a0a:	f7ff ff27 	bl	800485c <xchg_spi>
 8004a0e:	20ff      	movs	r0, #255	@ 0xff
 8004a10:	f7ff ff24 	bl	800485c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004a14:	20ff      	movs	r0, #255	@ 0xff
 8004a16:	f7ff ff21 	bl	800485c <xchg_spi>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	d001      	beq.n	8004a2c <xmit_datablock+0x5a>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e000      	b.n	8004a2e <xmit_datablock+0x5c>
	}
	return 1;
 8004a2c:	2301      	movs	r3, #1
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	6039      	str	r1, [r7, #0]
 8004a40:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da0e      	bge.n	8004a68 <send_cmd+0x32>
		cmd &= 0x7F;
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a50:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004a52:	2100      	movs	r1, #0
 8004a54:	2037      	movs	r0, #55	@ 0x37
 8004a56:	f7ff ffee 	bl	8004a36 <send_cmd>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004a5e:	7bbb      	ldrb	r3, [r7, #14]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d901      	bls.n	8004a68 <send_cmd+0x32>
 8004a64:	7bbb      	ldrb	r3, [r7, #14]
 8004a66:	e051      	b.n	8004b0c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d008      	beq.n	8004a80 <send_cmd+0x4a>
		despiselect();
 8004a6e:	f7ff ff5f 	bl	8004930 <despiselect>
		if (!spiselect()) return 0xFF;
 8004a72:	f7ff ff6b 	bl	800494c <spiselect>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <send_cmd+0x4a>
 8004a7c:	23ff      	movs	r3, #255	@ 0xff
 8004a7e:	e045      	b.n	8004b0c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fee7 	bl	800485c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	0e1b      	lsrs	r3, r3, #24
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fee1 	bl	800485c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fedb 	bl	800485c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	0a1b      	lsrs	r3, r3, #8
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fed5 	bl	800485c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fed0 	bl	800485c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <send_cmd+0x94>
 8004ac6:	2395      	movs	r3, #149	@ 0x95
 8004ac8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d101      	bne.n	8004ad4 <send_cmd+0x9e>
 8004ad0:	2387      	movs	r3, #135	@ 0x87
 8004ad2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fec0 	bl	800485c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d102      	bne.n	8004ae8 <send_cmd+0xb2>
 8004ae2:	20ff      	movs	r0, #255	@ 0xff
 8004ae4:	f7ff feba 	bl	800485c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004ae8:	230a      	movs	r3, #10
 8004aea:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004aec:	20ff      	movs	r0, #255	@ 0xff
 8004aee:	f7ff feb5 	bl	800485c <xchg_spi>
 8004af2:	4603      	mov	r3, r0
 8004af4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da05      	bge.n	8004b0a <send_cmd+0xd4>
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <send_cmd+0xb6>

	return res;							/* Return received response */
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <USER_SPI_initialize+0x14>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0d6      	b.n	8004cd6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004b28:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce0 <USER_SPI_initialize+0x1cc>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <USER_SPI_initialize+0x2a>
 8004b36:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce0 <USER_SPI_initialize+0x1cc>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e0cb      	b.n	8004cd6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004b3e:	4b69      	ldr	r3, [pc, #420]	@ (8004ce4 <USER_SPI_initialize+0x1d0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004b48:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <USER_SPI_initialize+0x1d0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8004b50:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004b52:	230a      	movs	r3, #10
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	e005      	b.n	8004b64 <USER_SPI_initialize+0x50>
 8004b58:	20ff      	movs	r0, #255	@ 0xff
 8004b5a:	f7ff fe7f 	bl	800485c <xchg_spi>
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f6      	bne.n	8004b58 <USER_SPI_initialize+0x44>

	ty = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004b6e:	2100      	movs	r1, #0
 8004b70:	2000      	movs	r0, #0
 8004b72:	f7ff ff60 	bl	8004a36 <send_cmd>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	f040 808b 	bne.w	8004c94 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b82:	f7ff fe41 	bl	8004808 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004b86:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004b8a:	2008      	movs	r0, #8
 8004b8c:	f7ff ff53 	bl	8004a36 <send_cmd>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d151      	bne.n	8004c3a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	e00d      	b.n	8004bb8 <USER_SPI_initialize+0xa4>
 8004b9c:	7bfc      	ldrb	r4, [r7, #15]
 8004b9e:	20ff      	movs	r0, #255	@ 0xff
 8004ba0:	f7ff fe5c 	bl	800485c <xchg_spi>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f104 0310 	add.w	r3, r4, #16
 8004bac:	443b      	add	r3, r7
 8004bae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d9ee      	bls.n	8004b9c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004bbe:	7abb      	ldrb	r3, [r7, #10]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d167      	bne.n	8004c94 <USER_SPI_initialize+0x180>
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
 8004bc6:	2baa      	cmp	r3, #170	@ 0xaa
 8004bc8:	d164      	bne.n	8004c94 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004bca:	bf00      	nop
 8004bcc:	f7ff fe30 	bl	8004830 <SPI_Timer_Status>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <USER_SPI_initialize+0xd2>
 8004bd6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004bda:	20a9      	movs	r0, #169	@ 0xa9
 8004bdc:	f7ff ff2b 	bl	8004a36 <send_cmd>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f2      	bne.n	8004bcc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004be6:	f7ff fe23 	bl	8004830 <SPI_Timer_Status>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d051      	beq.n	8004c94 <USER_SPI_initialize+0x180>
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	203a      	movs	r0, #58	@ 0x3a
 8004bf4:	f7ff ff1f 	bl	8004a36 <send_cmd>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d14a      	bne.n	8004c94 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	e00d      	b.n	8004c20 <USER_SPI_initialize+0x10c>
 8004c04:	7bfc      	ldrb	r4, [r7, #15]
 8004c06:	20ff      	movs	r0, #255	@ 0xff
 8004c08:	f7ff fe28 	bl	800485c <xchg_spi>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f104 0310 	add.w	r3, r4, #16
 8004c14:	443b      	add	r3, r7
 8004c16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d9ee      	bls.n	8004c04 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004c26:	7a3b      	ldrb	r3, [r7, #8]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <USER_SPI_initialize+0x120>
 8004c30:	230c      	movs	r3, #12
 8004c32:	e000      	b.n	8004c36 <USER_SPI_initialize+0x122>
 8004c34:	2304      	movs	r3, #4
 8004c36:	737b      	strb	r3, [r7, #13]
 8004c38:	e02c      	b.n	8004c94 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	20a9      	movs	r0, #169	@ 0xa9
 8004c3e:	f7ff fefa 	bl	8004a36 <send_cmd>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d804      	bhi.n	8004c52 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004c48:	2302      	movs	r3, #2
 8004c4a:	737b      	strb	r3, [r7, #13]
 8004c4c:	23a9      	movs	r3, #169	@ 0xa9
 8004c4e:	73bb      	strb	r3, [r7, #14]
 8004c50:	e003      	b.n	8004c5a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004c52:	2301      	movs	r3, #1
 8004c54:	737b      	strb	r3, [r7, #13]
 8004c56:	2301      	movs	r3, #1
 8004c58:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004c5a:	bf00      	nop
 8004c5c:	f7ff fde8 	bl	8004830 <SPI_Timer_Status>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <USER_SPI_initialize+0x162>
 8004c66:	7bbb      	ldrb	r3, [r7, #14]
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fee3 	bl	8004a36 <send_cmd>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f2      	bne.n	8004c5c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004c76:	f7ff fddb 	bl	8004830 <SPI_Timer_Status>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <USER_SPI_initialize+0x17c>
 8004c80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c84:	2010      	movs	r0, #16
 8004c86:	f7ff fed6 	bl	8004a36 <send_cmd>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <USER_SPI_initialize+0x180>
				ty = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004c94:	4a14      	ldr	r2, [pc, #80]	@ (8004ce8 <USER_SPI_initialize+0x1d4>)
 8004c96:	7b7b      	ldrb	r3, [r7, #13]
 8004c98:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004c9a:	f7ff fe49 	bl	8004930 <despiselect>

	if (ty) {			/* OK */
 8004c9e:	7b7b      	ldrb	r3, [r7, #13]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d012      	beq.n	8004cca <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce4 <USER_SPI_initialize+0x1d0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004cae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <USER_SPI_initialize+0x1d0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0210 	orr.w	r2, r2, #16
 8004cb6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <USER_SPI_initialize+0x1cc>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <USER_SPI_initialize+0x1cc>)
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e002      	b.n	8004cd0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004cca:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <USER_SPI_initialize+0x1cc>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	@ (8004ce0 <USER_SPI_initialize+0x1cc>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b2db      	uxtb	r3, r3
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000020 	.word	0x20000020
 8004ce4:	200001ec 	.word	0x200001ec
 8004ce8:	200005a0 	.word	0x200005a0

08004cec <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <USER_SPI_status+0x14>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e002      	b.n	8004d06 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <USER_SPI_status+0x28>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	b2db      	uxtb	r3, r3
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000020 	.word	0x20000020

08004d18 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <USER_SPI_read+0x1c>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <USER_SPI_read+0x20>
 8004d34:	2304      	movs	r3, #4
 8004d36:	e04d      	b.n	8004dd4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004d38:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <USER_SPI_read+0xc4>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <USER_SPI_read+0x32>
 8004d46:	2303      	movs	r3, #3
 8004d48:	e044      	b.n	8004dd4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004d4a:	4b25      	ldr	r3, [pc, #148]	@ (8004de0 <USER_SPI_read+0xc8>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <USER_SPI_read+0x44>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d111      	bne.n	8004d86 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	2011      	movs	r0, #17
 8004d66:	f7ff fe66 	bl	8004a36 <send_cmd>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d129      	bne.n	8004dc4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d74:	68b8      	ldr	r0, [r7, #8]
 8004d76:	f7ff fe03 	bl	8004980 <rcvr_datablock>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d021      	beq.n	8004dc4 <USER_SPI_read+0xac>
			count = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	e01e      	b.n	8004dc4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	2012      	movs	r0, #18
 8004d8a:	f7ff fe54 	bl	8004a36 <send_cmd>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d117      	bne.n	8004dc4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004d94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d98:	68b8      	ldr	r0, [r7, #8]
 8004d9a:	f7ff fdf1 	bl	8004980 <rcvr_datablock>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <USER_SPI_read+0xa2>
				buff += 512;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004daa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1ed      	bne.n	8004d94 <USER_SPI_read+0x7c>
 8004db8:	e000      	b.n	8004dbc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004dba:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	200c      	movs	r0, #12
 8004dc0:	f7ff fe39 	bl	8004a36 <send_cmd>
		}
	}
	despiselect();
 8004dc4:	f7ff fdb4 	bl	8004930 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000020 	.word	0x20000020
 8004de0:	200005a0 	.word	0x200005a0

08004de4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <USER_SPI_write+0x1c>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <USER_SPI_write+0x20>
 8004e00:	2304      	movs	r3, #4
 8004e02:	e063      	b.n	8004ecc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004e04:	4b33      	ldr	r3, [pc, #204]	@ (8004ed4 <USER_SPI_write+0xf0>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <USER_SPI_write+0x32>
 8004e12:	2303      	movs	r3, #3
 8004e14:	e05a      	b.n	8004ecc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004e16:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <USER_SPI_write+0xf0>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <USER_SPI_write+0x44>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e051      	b.n	8004ecc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004e28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed8 <USER_SPI_write+0xf4>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <USER_SPI_write+0x56>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	025b      	lsls	r3, r3, #9
 8004e38:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d110      	bne.n	8004e62 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	2018      	movs	r0, #24
 8004e44:	f7ff fdf7 	bl	8004a36 <send_cmd>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d136      	bne.n	8004ebc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004e4e:	21fe      	movs	r1, #254	@ 0xfe
 8004e50:	68b8      	ldr	r0, [r7, #8]
 8004e52:	f7ff fdbe 	bl	80049d2 <xmit_datablock>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02f      	beq.n	8004ebc <USER_SPI_write+0xd8>
			count = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	e02c      	b.n	8004ebc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004e62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <USER_SPI_write+0xf4>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <USER_SPI_write+0x92>
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	2097      	movs	r0, #151	@ 0x97
 8004e72:	f7ff fde0 	bl	8004a36 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	2019      	movs	r0, #25
 8004e7a:	f7ff fddc 	bl	8004a36 <send_cmd>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11b      	bne.n	8004ebc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004e84:	21fc      	movs	r1, #252	@ 0xfc
 8004e86:	68b8      	ldr	r0, [r7, #8]
 8004e88:	f7ff fda3 	bl	80049d2 <xmit_datablock>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <USER_SPI_write+0xc4>
				buff += 512;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004e98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1ee      	bne.n	8004e84 <USER_SPI_write+0xa0>
 8004ea6:	e000      	b.n	8004eaa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004ea8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004eaa:	21fd      	movs	r1, #253	@ 0xfd
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7ff fd90 	bl	80049d2 <xmit_datablock>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <USER_SPI_write+0xd8>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004ebc:	f7ff fd38 	bl	8004930 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000020 	.word	0x20000020
 8004ed8:	200005a0 	.word	0x200005a0

08004edc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	@ 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	603a      	str	r2, [r7, #0]
 8004ee6:	71fb      	strb	r3, [r7, #7]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <USER_SPI_ioctl+0x1a>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	e15a      	b.n	80051ac <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004ef6:	4baf      	ldr	r3, [pc, #700]	@ (80051b4 <USER_SPI_ioctl+0x2d8>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <USER_SPI_ioctl+0x2c>
 8004f04:	2303      	movs	r3, #3
 8004f06:	e151      	b.n	80051ac <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8004f0e:	79bb      	ldrb	r3, [r7, #6]
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	f200 8136 	bhi.w	8005182 <USER_SPI_ioctl+0x2a6>
 8004f16:	a201      	add	r2, pc, #4	@ (adr r2, 8004f1c <USER_SPI_ioctl+0x40>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f31 	.word	0x08004f31
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08005183 	.word	0x08005183
 8004f28:	08004ff1 	.word	0x08004ff1
 8004f2c:	080050e7 	.word	0x080050e7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004f30:	f7ff fd0c 	bl	800494c <spiselect>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8127 	beq.w	800518a <USER_SPI_ioctl+0x2ae>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004f42:	e122      	b.n	800518a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004f44:	2100      	movs	r1, #0
 8004f46:	2009      	movs	r0, #9
 8004f48:	f7ff fd75 	bl	8004a36 <send_cmd>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f040 811d 	bne.w	800518e <USER_SPI_ioctl+0x2b2>
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	2110      	movs	r1, #16
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fd10 	bl	8004980 <rcvr_datablock>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8113 	beq.w	800518e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004f68:	7b3b      	ldrb	r3, [r7, #12]
 8004f6a:	099b      	lsrs	r3, r3, #6
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d111      	bne.n	8004f96 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004f72:	7d7b      	ldrb	r3, [r7, #21]
 8004f74:	461a      	mov	r2, r3
 8004f76:	7d3b      	ldrb	r3, [r7, #20]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	4413      	add	r3, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	7cfb      	ldrb	r3, [r7, #19]
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8004f86:	4413      	add	r3, r2
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	029a      	lsls	r2, r3, #10
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e028      	b.n	8004fe8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004f96:	7c7b      	ldrb	r3, [r7, #17]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	7dbb      	ldrb	r3, [r7, #22]
 8004fa0:	09db      	lsrs	r3, r3, #7
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	7d7b      	ldrb	r3, [r7, #21]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0306 	and.w	r3, r3, #6
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3302      	adds	r3, #2
 8004fba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004fbe:	7d3b      	ldrb	r3, [r7, #20]
 8004fc0:	099b      	lsrs	r3, r3, #6
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	441a      	add	r2, r3
 8004fcc:	7cbb      	ldrb	r3, [r7, #18]
 8004fce:	029b      	lsls	r3, r3, #10
 8004fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004fda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fde:	3b09      	subs	r3, #9
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004fee:	e0ce      	b.n	800518e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004ff0:	4b71      	ldr	r3, [pc, #452]	@ (80051b8 <USER_SPI_ioctl+0x2dc>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d031      	beq.n	8005060 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	208d      	movs	r0, #141	@ 0x8d
 8005000:	f7ff fd19 	bl	8004a36 <send_cmd>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 80c3 	bne.w	8005192 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800500c:	20ff      	movs	r0, #255	@ 0xff
 800500e:	f7ff fc25 	bl	800485c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005012:	f107 030c 	add.w	r3, r7, #12
 8005016:	2110      	movs	r1, #16
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fcb1 	bl	8004980 <rcvr_datablock>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80b6 	beq.w	8005192 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005026:	2330      	movs	r3, #48	@ 0x30
 8005028:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800502c:	e007      	b.n	800503e <USER_SPI_ioctl+0x162>
 800502e:	20ff      	movs	r0, #255	@ 0xff
 8005030:	f7ff fc14 	bl	800485c <xchg_spi>
 8005034:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005038:	3b01      	subs	r3, #1
 800503a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800503e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f3      	bne.n	800502e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005046:	7dbb      	ldrb	r3, [r7, #22]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	2310      	movs	r3, #16
 8005050:	fa03 f202 	lsl.w	r2, r3, r2
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800505e:	e098      	b.n	8005192 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005060:	2100      	movs	r1, #0
 8005062:	2009      	movs	r0, #9
 8005064:	f7ff fce7 	bl	8004a36 <send_cmd>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 8091 	bne.w	8005192 <USER_SPI_ioctl+0x2b6>
 8005070:	f107 030c 	add.w	r3, r7, #12
 8005074:	2110      	movs	r1, #16
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fc82 	bl	8004980 <rcvr_datablock>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8087 	beq.w	8005192 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005084:	4b4c      	ldr	r3, [pc, #304]	@ (80051b8 <USER_SPI_ioctl+0x2dc>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d012      	beq.n	80050b6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005090:	7dbb      	ldrb	r3, [r7, #22]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005098:	7dfa      	ldrb	r2, [r7, #23]
 800509a:	09d2      	lsrs	r2, r2, #7
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	4413      	add	r3, r2
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	7e7b      	ldrb	r3, [r7, #25]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e013      	b.n	80050de <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80050b6:	7dbb      	ldrb	r3, [r7, #22]
 80050b8:	109b      	asrs	r3, r3, #2
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	3301      	adds	r3, #1
 80050c2:	7dfa      	ldrb	r2, [r7, #23]
 80050c4:	00d2      	lsls	r2, r2, #3
 80050c6:	f002 0218 	and.w	r2, r2, #24
 80050ca:	7df9      	ldrb	r1, [r7, #23]
 80050cc:	0949      	lsrs	r1, r1, #5
 80050ce:	b2c9      	uxtb	r1, r1
 80050d0:	440a      	add	r2, r1
 80050d2:	3201      	adds	r2, #1
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80050e4:	e055      	b.n	8005192 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80050e6:	4b34      	ldr	r3, [pc, #208]	@ (80051b8 <USER_SPI_ioctl+0x2dc>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f003 0306 	and.w	r3, r3, #6
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d051      	beq.n	8005196 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80050f2:	f107 020c 	add.w	r2, r7, #12
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	210b      	movs	r1, #11
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff feee 	bl	8004edc <USER_SPI_ioctl>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d149      	bne.n	800519a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005106:	7b3b      	ldrb	r3, [r7, #12]
 8005108:	099b      	lsrs	r3, r3, #6
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <USER_SPI_ioctl+0x23e>
 8005110:	7dbb      	ldrb	r3, [r7, #22]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d041      	beq.n	800519e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800512a:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <USER_SPI_ioctl+0x2dc>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	025b      	lsls	r3, r3, #9
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	025b      	lsls	r3, r3, #9
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005144:	2020      	movs	r0, #32
 8005146:	f7ff fc76 	bl	8004a36 <send_cmd>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d128      	bne.n	80051a2 <USER_SPI_ioctl+0x2c6>
 8005150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005152:	2021      	movs	r0, #33	@ 0x21
 8005154:	f7ff fc6f 	bl	8004a36 <send_cmd>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d121      	bne.n	80051a2 <USER_SPI_ioctl+0x2c6>
 800515e:	2100      	movs	r1, #0
 8005160:	2026      	movs	r0, #38	@ 0x26
 8005162:	f7ff fc68 	bl	8004a36 <send_cmd>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11a      	bne.n	80051a2 <USER_SPI_ioctl+0x2c6>
 800516c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005170:	f7ff fbba 	bl	80048e8 <wait_ready>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d013      	beq.n	80051a2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800517a:	2300      	movs	r3, #0
 800517c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005180:	e00f      	b.n	80051a2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005182:	2304      	movs	r3, #4
 8005184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005188:	e00c      	b.n	80051a4 <USER_SPI_ioctl+0x2c8>
		break;
 800518a:	bf00      	nop
 800518c:	e00a      	b.n	80051a4 <USER_SPI_ioctl+0x2c8>
		break;
 800518e:	bf00      	nop
 8005190:	e008      	b.n	80051a4 <USER_SPI_ioctl+0x2c8>
		break;
 8005192:	bf00      	nop
 8005194:	e006      	b.n	80051a4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005196:	bf00      	nop
 8005198:	e004      	b.n	80051a4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <USER_SPI_ioctl+0x2c8>
		break;
 80051a2:	bf00      	nop
	}

	despiselect();
 80051a4:	f7ff fbc4 	bl	8004930 <despiselect>

	return res;
 80051a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3730      	adds	r7, #48	@ 0x30
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000020 	.word	0x20000020
 80051b8:	200005a0 	.word	0x200005a0

080051bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <disk_status+0x30>)
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	79fa      	ldrb	r2, [r7, #7]
 80051d4:	4905      	ldr	r1, [pc, #20]	@ (80051ec <disk_status+0x30>)
 80051d6:	440a      	add	r2, r1
 80051d8:	7a12      	ldrb	r2, [r2, #8]
 80051da:	4610      	mov	r0, r2
 80051dc:	4798      	blx	r3
 80051de:	4603      	mov	r3, r0
 80051e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	200005d4 	.word	0x200005d4

080051f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	4a0e      	ldr	r2, [pc, #56]	@ (800523c <disk_initialize+0x4c>)
 8005202:	5cd3      	ldrb	r3, [r2, r3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d114      	bne.n	8005232 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	4a0c      	ldr	r2, [pc, #48]	@ (800523c <disk_initialize+0x4c>)
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	79fa      	ldrb	r2, [r7, #7]
 8005216:	4909      	ldr	r1, [pc, #36]	@ (800523c <disk_initialize+0x4c>)
 8005218:	440a      	add	r2, r1
 800521a:	7a12      	ldrb	r2, [r2, #8]
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	4a03      	ldr	r2, [pc, #12]	@ (800523c <disk_initialize+0x4c>)
 800522e:	2101      	movs	r1, #1
 8005230:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	200005d4 	.word	0x200005d4

08005240 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	4a0a      	ldr	r2, [pc, #40]	@ (800527c <disk_read+0x3c>)
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	689c      	ldr	r4, [r3, #8]
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	4a07      	ldr	r2, [pc, #28]	@ (800527c <disk_read+0x3c>)
 8005260:	4413      	add	r3, r2
 8005262:	7a18      	ldrb	r0, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	47a0      	blx	r4
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bd90      	pop	{r4, r7, pc}
 800527a:	bf00      	nop
 800527c:	200005d4 	.word	0x200005d4

08005280 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4603      	mov	r3, r0
 800528e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	4a0a      	ldr	r2, [pc, #40]	@ (80052bc <disk_write+0x3c>)
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	68dc      	ldr	r4, [r3, #12]
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	4a07      	ldr	r2, [pc, #28]	@ (80052bc <disk_write+0x3c>)
 80052a0:	4413      	add	r3, r2
 80052a2:	7a18      	ldrb	r0, [r3, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	47a0      	blx	r4
 80052ac:	4603      	mov	r3, r0
 80052ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd90      	pop	{r4, r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200005d4 	.word	0x200005d4

080052c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80052d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	b21a      	sxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b21b      	sxth	r3, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	b21b      	sxth	r3, r3
 80052e2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80052e4:	89fb      	ldrh	r3, [r7, #14]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3303      	adds	r3, #3
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	3202      	adds	r2, #2
 800530a:	7812      	ldrb	r2, [r2, #0]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	3201      	adds	r2, #1
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
	return rv;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e010      	b.n	8005368 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005346:	4a0d      	ldr	r2, [pc, #52]	@ (800537c <clear_lock+0x44>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	4413      	add	r3, r2
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	429a      	cmp	r2, r3
 8005354:	d105      	bne.n	8005362 <clear_lock+0x2a>
 8005356:	4a09      	ldr	r2, [pc, #36]	@ (800537c <clear_lock+0x44>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	4413      	add	r3, r2
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3301      	adds	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d9eb      	bls.n	8005346 <clear_lock+0xe>
	}
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	200005b4 	.word	0x200005b4

08005380 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	78db      	ldrb	r3, [r3, #3]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d034      	beq.n	80053fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7858      	ldrb	r0, [r3, #1]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053a4:	2301      	movs	r3, #1
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	f7ff ff6a 	bl	8005280 <disk_write>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e022      	b.n	80053fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	1ad2      	subs	r2, r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d217      	bcs.n	80053fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	789b      	ldrb	r3, [r3, #2]
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	e010      	b.n	80053f8 <sync_window+0x78>
					wsect += fs->fsize;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4413      	add	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7858      	ldrb	r0, [r3, #1]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053ea:	2301      	movs	r3, #1
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	f7ff ff47 	bl	8005280 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d8eb      	bhi.n	80053d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d01b      	beq.n	8005458 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ffad 	bl	8005380 <sync_window>
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d113      	bne.n	8005458 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	7858      	ldrb	r0, [r3, #1]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800543a:	2301      	movs	r3, #1
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	f7ff feff 	bl	8005240 <disk_read>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005448:	f04f 33ff 	mov.w	r3, #4294967295
 800544c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295
 800546e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d031      	beq.n	80054dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e002      	b.n	8005486 <get_ldnumber+0x24>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3301      	adds	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b20      	cmp	r3, #32
 800548c:	d903      	bls.n	8005496 <get_ldnumber+0x34>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b3a      	cmp	r3, #58	@ 0x3a
 8005494:	d1f4      	bne.n	8005480 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b3a      	cmp	r3, #58	@ 0x3a
 800549c:	d11c      	bne.n	80054d8 <get_ldnumber+0x76>
			tp = *path;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	60fa      	str	r2, [r7, #12]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	3b30      	subs	r3, #48	@ 0x30
 80054ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d80e      	bhi.n	80054d4 <get_ldnumber+0x72>
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d10a      	bne.n	80054d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d107      	bne.n	80054d4 <get_ldnumber+0x72>
					vol = (int)i;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3301      	adds	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	e002      	b.n	80054de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80054dc:	693b      	ldr	r3, [r7, #16]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	70da      	strb	r2, [r3, #3]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff ff7e 	bl	8005408 <move_window>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <check_fs+0x2a>
 8005512:	2304      	movs	r3, #4
 8005514:	e038      	b.n	8005588 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3330      	adds	r3, #48	@ 0x30
 800551a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fece 	bl	80052c0 <ld_word>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <check_fs+0x48>
 8005530:	2303      	movs	r3, #3
 8005532:	e029      	b.n	8005588 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800553a:	2be9      	cmp	r3, #233	@ 0xe9
 800553c:	d009      	beq.n	8005552 <check_fs+0x66>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005544:	2beb      	cmp	r3, #235	@ 0xeb
 8005546:	d11e      	bne.n	8005586 <check_fs+0x9a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800554e:	2b90      	cmp	r3, #144	@ 0x90
 8005550:	d119      	bne.n	8005586 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3330      	adds	r3, #48	@ 0x30
 8005556:	3336      	adds	r3, #54	@ 0x36
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff feca 	bl	80052f2 <ld_dword>
 800555e:	4603      	mov	r3, r0
 8005560:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005564:	4a0a      	ldr	r2, [pc, #40]	@ (8005590 <check_fs+0xa4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d101      	bne.n	800556e <check_fs+0x82>
 800556a:	2300      	movs	r3, #0
 800556c:	e00c      	b.n	8005588 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3330      	adds	r3, #48	@ 0x30
 8005572:	3352      	adds	r3, #82	@ 0x52
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff febc 	bl	80052f2 <ld_dword>
 800557a:	4603      	mov	r3, r0
 800557c:	4a05      	ldr	r2, [pc, #20]	@ (8005594 <check_fs+0xa8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <check_fs+0x9a>
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005586:	2302      	movs	r3, #2
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	00544146 	.word	0x00544146
 8005594:	33544146 	.word	0x33544146

08005598 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b096      	sub	sp, #88	@ 0x58
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff ff58 	bl	8005462 <get_ldnumber>
 80055b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80055b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da01      	bge.n	80055be <find_volume+0x26>
 80055ba:	230b      	movs	r3, #11
 80055bc:	e22d      	b.n	8005a1a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80055be:	4aa1      	ldr	r2, [pc, #644]	@ (8005844 <find_volume+0x2ac>)
 80055c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <find_volume+0x3a>
 80055ce:	230c      	movs	r3, #12
 80055d0:	e223      	b.n	8005a1a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80055e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01a      	beq.n	800561e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fde5 	bl	80051bc <disk_status>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80055f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10c      	bne.n	800561e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <find_volume+0x82>
 800560a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005616:	230a      	movs	r3, #10
 8005618:	e1ff      	b.n	8005a1a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800561a:	2300      	movs	r3, #0
 800561c:	e1fd      	b.n	8005a1a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fddd 	bl	80051f0 <disk_initialize>
 8005636:	4603      	mov	r3, r0
 8005638:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800563c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005648:	2303      	movs	r3, #3
 800564a:	e1e6      	b.n	8005a1a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <find_volume+0xca>
 8005652:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800565e:	230a      	movs	r3, #10
 8005660:	e1db      	b.n	8005a1a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005666:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005668:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800566a:	f7ff ff3f 	bl	80054ec <check_fs>
 800566e:	4603      	mov	r3, r0
 8005670:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005674:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005678:	2b02      	cmp	r3, #2
 800567a:	d149      	bne.n	8005710 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800567c:	2300      	movs	r3, #0
 800567e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005680:	e01e      	b.n	80056c0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005684:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005690:	4413      	add	r3, r2
 8005692:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	3304      	adds	r3, #4
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d006      	beq.n	80056ac <find_volume+0x114>
 800569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a0:	3308      	adds	r3, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fe25 	bl	80052f2 <ld_dword>
 80056a8:	4602      	mov	r2, r0
 80056aa:	e000      	b.n	80056ae <find_volume+0x116>
 80056ac:	2200      	movs	r2, #0
 80056ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	3358      	adds	r3, #88	@ 0x58
 80056b4:	443b      	add	r3, r7
 80056b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80056ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056bc:	3301      	adds	r3, #1
 80056be:	643b      	str	r3, [r7, #64]	@ 0x40
 80056c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d9dd      	bls.n	8005682 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80056c6:	2300      	movs	r3, #0
 80056c8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <find_volume+0x13e>
 80056d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d2:	3b01      	subs	r3, #1
 80056d4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80056d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	3358      	adds	r3, #88	@ 0x58
 80056dc:	443b      	add	r3, r7
 80056de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80056e2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80056e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <find_volume+0x15e>
 80056ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056ee:	f7ff fefd 	bl	80054ec <check_fs>
 80056f2:	4603      	mov	r3, r0
 80056f4:	e000      	b.n	80056f8 <find_volume+0x160>
 80056f6:	2303      	movs	r3, #3
 80056f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80056fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005700:	2b01      	cmp	r3, #1
 8005702:	d905      	bls.n	8005710 <find_volume+0x178>
 8005704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005706:	3301      	adds	r3, #1
 8005708:	643b      	str	r3, [r7, #64]	@ 0x40
 800570a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570c:	2b03      	cmp	r3, #3
 800570e:	d9e2      	bls.n	80056d6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005710:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005714:	2b04      	cmp	r3, #4
 8005716:	d101      	bne.n	800571c <find_volume+0x184>
 8005718:	2301      	movs	r3, #1
 800571a:	e17e      	b.n	8005a1a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800571c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005720:	2b01      	cmp	r3, #1
 8005722:	d901      	bls.n	8005728 <find_volume+0x190>
 8005724:	230d      	movs	r3, #13
 8005726:	e178      	b.n	8005a1a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	3330      	adds	r3, #48	@ 0x30
 800572c:	330b      	adds	r3, #11
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fdc6 	bl	80052c0 <ld_word>
 8005734:	4603      	mov	r3, r0
 8005736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800573a:	d001      	beq.n	8005740 <find_volume+0x1a8>
 800573c:	230d      	movs	r3, #13
 800573e:	e16c      	b.n	8005a1a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005742:	3330      	adds	r3, #48	@ 0x30
 8005744:	3316      	adds	r3, #22
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fdba 	bl	80052c0 <ld_word>
 800574c:	4603      	mov	r3, r0
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <find_volume+0x1cc>
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	3330      	adds	r3, #48	@ 0x30
 800575a:	3324      	adds	r3, #36	@ 0x24
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fdc8 	bl	80052f2 <ld_dword>
 8005762:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005768:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	789b      	ldrb	r3, [r3, #2]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d005      	beq.n	8005788 <find_volume+0x1f0>
 800577c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577e:	789b      	ldrb	r3, [r3, #2]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d001      	beq.n	8005788 <find_volume+0x1f0>
 8005784:	230d      	movs	r3, #13
 8005786:	e148      	b.n	8005a1a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578a:	789b      	ldrb	r3, [r3, #2]
 800578c:	461a      	mov	r2, r3
 800578e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005790:	fb02 f303 	mul.w	r3, r2, r3
 8005794:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579c:	461a      	mov	r2, r3
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	895b      	ldrh	r3, [r3, #10]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <find_volume+0x224>
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	895b      	ldrh	r3, [r3, #10]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	895b      	ldrh	r3, [r3, #10]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <find_volume+0x228>
 80057bc:	230d      	movs	r3, #13
 80057be:	e12c      	b.n	8005a1a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	3330      	adds	r3, #48	@ 0x30
 80057c4:	3311      	adds	r3, #17
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fd7a 	bl	80052c0 <ld_word>
 80057cc:	4603      	mov	r3, r0
 80057ce:	461a      	mov	r2, r3
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	891b      	ldrh	r3, [r3, #8]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <find_volume+0x24e>
 80057e2:	230d      	movs	r3, #13
 80057e4:	e119      	b.n	8005a1a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	3330      	adds	r3, #48	@ 0x30
 80057ea:	3313      	adds	r3, #19
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fd67 	bl	80052c0 <ld_word>
 80057f2:	4603      	mov	r3, r0
 80057f4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80057f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <find_volume+0x272>
 80057fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fe:	3330      	adds	r3, #48	@ 0x30
 8005800:	3320      	adds	r3, #32
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fd75 	bl	80052f2 <ld_dword>
 8005808:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580c:	3330      	adds	r3, #48	@ 0x30
 800580e:	330e      	adds	r3, #14
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fd55 	bl	80052c0 <ld_word>
 8005816:	4603      	mov	r3, r0
 8005818:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800581a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <find_volume+0x28c>
 8005820:	230d      	movs	r3, #13
 8005822:	e0fa      	b.n	8005a1a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005824:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005828:	4413      	add	r3, r2
 800582a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800582c:	8912      	ldrh	r2, [r2, #8]
 800582e:	0912      	lsrs	r2, r2, #4
 8005830:	b292      	uxth	r2, r2
 8005832:	4413      	add	r3, r2
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	429a      	cmp	r2, r3
 800583c:	d204      	bcs.n	8005848 <find_volume+0x2b0>
 800583e:	230d      	movs	r3, #13
 8005840:	e0eb      	b.n	8005a1a <find_volume+0x482>
 8005842:	bf00      	nop
 8005844:	200005ac 	.word	0x200005ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005848:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005850:	8952      	ldrh	r2, [r2, #10]
 8005852:	fbb3 f3f2 	udiv	r3, r3, r2
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <find_volume+0x2ca>
 800585e:	230d      	movs	r3, #13
 8005860:	e0db      	b.n	8005a1a <find_volume+0x482>
		fmt = FS_FAT32;
 8005862:	2303      	movs	r3, #3
 8005864:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800586e:	4293      	cmp	r3, r2
 8005870:	d802      	bhi.n	8005878 <find_volume+0x2e0>
 8005872:	2302      	movs	r3, #2
 8005874:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800587e:	4293      	cmp	r3, r2
 8005880:	d802      	bhi.n	8005888 <find_volume+0x2f0>
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	1c9a      	adds	r2, r3, #2
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005892:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005894:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005896:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800589a:	441a      	add	r2, r3
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80058a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	441a      	add	r2, r3
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80058aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d11e      	bne.n	80058f0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	3330      	adds	r3, #48	@ 0x30
 80058b6:	332a      	adds	r3, #42	@ 0x2a
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff fd01 	bl	80052c0 <ld_word>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <find_volume+0x330>
 80058c4:	230d      	movs	r3, #13
 80058c6:	e0a8      	b.n	8005a1a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	891b      	ldrh	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <find_volume+0x33c>
 80058d0:	230d      	movs	r3, #13
 80058d2:	e0a2      	b.n	8005a1a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80058d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d6:	3330      	adds	r3, #48	@ 0x30
 80058d8:	332c      	adds	r3, #44	@ 0x2c
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fd09 	bl	80052f2 <ld_dword>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ee:	e01f      	b.n	8005930 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	891b      	ldrh	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <find_volume+0x364>
 80058f8:	230d      	movs	r3, #13
 80058fa:	e08e      	b.n	8005a1a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80058fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005902:	441a      	add	r2, r3
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005908:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800590c:	2b02      	cmp	r3, #2
 800590e:	d103      	bne.n	8005918 <find_volume+0x380>
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	e00a      	b.n	800592e <find_volume+0x396>
 8005918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591a:	695a      	ldr	r2, [r3, #20]
 800591c:	4613      	mov	r3, r2
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4413      	add	r3, r2
 8005922:	085a      	lsrs	r2, r3, #1
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800592e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005936:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800593a:	0a5b      	lsrs	r3, r3, #9
 800593c:	429a      	cmp	r2, r3
 800593e:	d201      	bcs.n	8005944 <find_volume+0x3ac>
 8005940:	230d      	movs	r3, #13
 8005942:	e06a      	b.n	8005a1a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	f04f 32ff 	mov.w	r2, #4294967295
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005956:	2280      	movs	r2, #128	@ 0x80
 8005958:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800595a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800595e:	2b03      	cmp	r3, #3
 8005960:	d149      	bne.n	80059f6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005964:	3330      	adds	r3, #48	@ 0x30
 8005966:	3330      	adds	r3, #48	@ 0x30
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fca9 	bl	80052c0 <ld_word>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d140      	bne.n	80059f6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005976:	3301      	adds	r3, #1
 8005978:	4619      	mov	r1, r3
 800597a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800597c:	f7ff fd44 	bl	8005408 <move_window>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d137      	bne.n	80059f6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	2200      	movs	r2, #0
 800598a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	3330      	adds	r3, #48	@ 0x30
 8005990:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fc93 	bl	80052c0 <ld_word>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d127      	bne.n	80059f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80059a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a8:	3330      	adds	r3, #48	@ 0x30
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fca1 	bl	80052f2 <ld_dword>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a24 <find_volume+0x48c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d11e      	bne.n	80059f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	3330      	adds	r3, #48	@ 0x30
 80059bc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fc96 	bl	80052f2 <ld_dword>
 80059c6:	4603      	mov	r3, r0
 80059c8:	4a17      	ldr	r2, [pc, #92]	@ (8005a28 <find_volume+0x490>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d113      	bne.n	80059f6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80059ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d0:	3330      	adds	r3, #48	@ 0x30
 80059d2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fc8b 	bl	80052f2 <ld_dword>
 80059dc:	4602      	mov	r2, r0
 80059de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	3330      	adds	r3, #48	@ 0x30
 80059e6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fc81 	bl	80052f2 <ld_dword>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80059fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80059fe:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <find_volume+0x494>)
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <find_volume+0x494>)
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	4b08      	ldr	r3, [pc, #32]	@ (8005a2c <find_volume+0x494>)
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a10:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005a12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a14:	f7ff fc90 	bl	8005338 <clear_lock>
#endif
	return FR_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3758      	adds	r7, #88	@ 0x58
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	41615252 	.word	0x41615252
 8005a28:	61417272 	.word	0x61417272
 8005a2c:	200005b0 	.word	0x200005b0

08005a30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005a42:	f107 0310 	add.w	r3, r7, #16
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fd0b 	bl	8005462 <get_ldnumber>
 8005a4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	da01      	bge.n	8005a58 <f_mount+0x28>
 8005a54:	230b      	movs	r3, #11
 8005a56:	e02b      	b.n	8005ab0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005a58:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <f_mount+0x88>)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005a68:	69b8      	ldr	r0, [r7, #24]
 8005a6a:	f7ff fc65 	bl	8005338 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	490d      	ldr	r1, [pc, #52]	@ (8005ab8 <f_mount+0x88>)
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <f_mount+0x66>
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d001      	beq.n	8005a9a <f_mount+0x6a>
 8005a96:	2300      	movs	r3, #0
 8005a98:	e00a      	b.n	8005ab0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005a9a:	f107 010c 	add.w	r1, r7, #12
 8005a9e:	f107 0308 	add.w	r3, r7, #8
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff fd77 	bl	8005598 <find_volume>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	200005ac 	.word	0x200005ac

08005abc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005ad4:	7a5b      	ldrb	r3, [r3, #9]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d131      	bne.n	8005b40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005adc:	4b1c      	ldr	r3, [pc, #112]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005ade:	7a5b      	ldrb	r3, [r3, #9]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005aea:	4b19      	ldr	r3, [pc, #100]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005aec:	7a5b      	ldrb	r3, [r3, #9]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005afa:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005afc:	7a5b      	ldrb	r3, [r3, #9]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b13      	ldr	r3, [pc, #76]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005b04:	4413      	add	r3, r2
 8005b06:	79fa      	ldrb	r2, [r7, #7]
 8005b08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005b0a:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005b0c:	7a5b      	ldrb	r3, [r3, #9]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	b2d1      	uxtb	r1, r2
 8005b14:	4a0e      	ldr	r2, [pc, #56]	@ (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005b16:	7251      	strb	r1, [r2, #9]
 8005b18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b1a:	7dbb      	ldrb	r3, [r7, #22]
 8005b1c:	3330      	adds	r3, #48	@ 0x30
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3301      	adds	r3, #1
 8005b28:	223a      	movs	r2, #58	@ 0x3a
 8005b2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	222f      	movs	r2, #47	@ 0x2f
 8005b32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	3303      	adds	r3, #3
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	200005d4 	.word	0x200005d4

08005b54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ffaa 	bl	8005abc <FATFS_LinkDriverEx>
 8005b68:	4603      	mov	r3, r0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <std>:
 8005b74:	2300      	movs	r3, #0
 8005b76:	b510      	push	{r4, lr}
 8005b78:	4604      	mov	r4, r0
 8005b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b82:	6083      	str	r3, [r0, #8]
 8005b84:	8181      	strh	r1, [r0, #12]
 8005b86:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b88:	81c2      	strh	r2, [r0, #14]
 8005b8a:	6183      	str	r3, [r0, #24]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2208      	movs	r2, #8
 8005b90:	305c      	adds	r0, #92	@ 0x5c
 8005b92:	f000 f9f9 	bl	8005f88 <memset>
 8005b96:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <std+0x58>)
 8005b98:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <std+0x5c>)
 8005b9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <std+0x60>)
 8005ba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <std+0x64>)
 8005ba4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <std+0x68>)
 8005ba8:	6224      	str	r4, [r4, #32]
 8005baa:	429c      	cmp	r4, r3
 8005bac:	d006      	beq.n	8005bbc <std+0x48>
 8005bae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bb2:	4294      	cmp	r4, r2
 8005bb4:	d002      	beq.n	8005bbc <std+0x48>
 8005bb6:	33d0      	adds	r3, #208	@ 0xd0
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	d105      	bne.n	8005bc8 <std+0x54>
 8005bbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc4:	f000 ba58 	b.w	8006078 <__retarget_lock_init_recursive>
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	bf00      	nop
 8005bcc:	08005dd9 	.word	0x08005dd9
 8005bd0:	08005dfb 	.word	0x08005dfb
 8005bd4:	08005e33 	.word	0x08005e33
 8005bd8:	08005e57 	.word	0x08005e57
 8005bdc:	200005e0 	.word	0x200005e0

08005be0 <stdio_exit_handler>:
 8005be0:	4a02      	ldr	r2, [pc, #8]	@ (8005bec <stdio_exit_handler+0xc>)
 8005be2:	4903      	ldr	r1, [pc, #12]	@ (8005bf0 <stdio_exit_handler+0x10>)
 8005be4:	4803      	ldr	r0, [pc, #12]	@ (8005bf4 <stdio_exit_handler+0x14>)
 8005be6:	f000 b869 	b.w	8005cbc <_fwalk_sglue>
 8005bea:	bf00      	nop
 8005bec:	20000024 	.word	0x20000024
 8005bf0:	08006915 	.word	0x08006915
 8005bf4:	20000034 	.word	0x20000034

08005bf8 <cleanup_stdio>:
 8005bf8:	6841      	ldr	r1, [r0, #4]
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005c2c <cleanup_stdio+0x34>)
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	4604      	mov	r4, r0
 8005c02:	d001      	beq.n	8005c08 <cleanup_stdio+0x10>
 8005c04:	f000 fe86 	bl	8006914 <_fflush_r>
 8005c08:	68a1      	ldr	r1, [r4, #8]
 8005c0a:	4b09      	ldr	r3, [pc, #36]	@ (8005c30 <cleanup_stdio+0x38>)
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	d002      	beq.n	8005c16 <cleanup_stdio+0x1e>
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 fe7f 	bl	8006914 <_fflush_r>
 8005c16:	68e1      	ldr	r1, [r4, #12]
 8005c18:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <cleanup_stdio+0x3c>)
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	d004      	beq.n	8005c28 <cleanup_stdio+0x30>
 8005c1e:	4620      	mov	r0, r4
 8005c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c24:	f000 be76 	b.w	8006914 <_fflush_r>
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	200005e0 	.word	0x200005e0
 8005c30:	20000648 	.word	0x20000648
 8005c34:	200006b0 	.word	0x200006b0

08005c38 <global_stdio_init.part.0>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c68 <global_stdio_init.part.0+0x30>)
 8005c3c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c6c <global_stdio_init.part.0+0x34>)
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c70 <global_stdio_init.part.0+0x38>)
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	4620      	mov	r0, r4
 8005c44:	2200      	movs	r2, #0
 8005c46:	2104      	movs	r1, #4
 8005c48:	f7ff ff94 	bl	8005b74 <std>
 8005c4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c50:	2201      	movs	r2, #1
 8005c52:	2109      	movs	r1, #9
 8005c54:	f7ff ff8e 	bl	8005b74 <std>
 8005c58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c62:	2112      	movs	r1, #18
 8005c64:	f7ff bf86 	b.w	8005b74 <std>
 8005c68:	20000718 	.word	0x20000718
 8005c6c:	200005e0 	.word	0x200005e0
 8005c70:	08005be1 	.word	0x08005be1

08005c74 <__sfp_lock_acquire>:
 8005c74:	4801      	ldr	r0, [pc, #4]	@ (8005c7c <__sfp_lock_acquire+0x8>)
 8005c76:	f000 ba00 	b.w	800607a <__retarget_lock_acquire_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	20000721 	.word	0x20000721

08005c80 <__sfp_lock_release>:
 8005c80:	4801      	ldr	r0, [pc, #4]	@ (8005c88 <__sfp_lock_release+0x8>)
 8005c82:	f000 b9fb 	b.w	800607c <__retarget_lock_release_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000721 	.word	0x20000721

08005c8c <__sinit>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f7ff fff0 	bl	8005c74 <__sfp_lock_acquire>
 8005c94:	6a23      	ldr	r3, [r4, #32]
 8005c96:	b11b      	cbz	r3, 8005ca0 <__sinit+0x14>
 8005c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c9c:	f7ff bff0 	b.w	8005c80 <__sfp_lock_release>
 8005ca0:	4b04      	ldr	r3, [pc, #16]	@ (8005cb4 <__sinit+0x28>)
 8005ca2:	6223      	str	r3, [r4, #32]
 8005ca4:	4b04      	ldr	r3, [pc, #16]	@ (8005cb8 <__sinit+0x2c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f5      	bne.n	8005c98 <__sinit+0xc>
 8005cac:	f7ff ffc4 	bl	8005c38 <global_stdio_init.part.0>
 8005cb0:	e7f2      	b.n	8005c98 <__sinit+0xc>
 8005cb2:	bf00      	nop
 8005cb4:	08005bf9 	.word	0x08005bf9
 8005cb8:	20000718 	.word	0x20000718

08005cbc <_fwalk_sglue>:
 8005cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc0:	4607      	mov	r7, r0
 8005cc2:	4688      	mov	r8, r1
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8005cd0:	d505      	bpl.n	8005cde <_fwalk_sglue+0x22>
 8005cd2:	6824      	ldr	r4, [r4, #0]
 8005cd4:	2c00      	cmp	r4, #0
 8005cd6:	d1f7      	bne.n	8005cc8 <_fwalk_sglue+0xc>
 8005cd8:	4630      	mov	r0, r6
 8005cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cde:	89ab      	ldrh	r3, [r5, #12]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d907      	bls.n	8005cf4 <_fwalk_sglue+0x38>
 8005ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	d003      	beq.n	8005cf4 <_fwalk_sglue+0x38>
 8005cec:	4629      	mov	r1, r5
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c0      	blx	r8
 8005cf2:	4306      	orrs	r6, r0
 8005cf4:	3568      	adds	r5, #104	@ 0x68
 8005cf6:	e7e9      	b.n	8005ccc <_fwalk_sglue+0x10>

08005cf8 <iprintf>:
 8005cf8:	b40f      	push	{r0, r1, r2, r3}
 8005cfa:	b507      	push	{r0, r1, r2, lr}
 8005cfc:	4906      	ldr	r1, [pc, #24]	@ (8005d18 <iprintf+0x20>)
 8005cfe:	ab04      	add	r3, sp, #16
 8005d00:	6808      	ldr	r0, [r1, #0]
 8005d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d06:	6881      	ldr	r1, [r0, #8]
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	f000 fadb 	bl	80062c4 <_vfiprintf_r>
 8005d0e:	b003      	add	sp, #12
 8005d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d14:	b004      	add	sp, #16
 8005d16:	4770      	bx	lr
 8005d18:	20000030 	.word	0x20000030

08005d1c <_puts_r>:
 8005d1c:	6a03      	ldr	r3, [r0, #32]
 8005d1e:	b570      	push	{r4, r5, r6, lr}
 8005d20:	6884      	ldr	r4, [r0, #8]
 8005d22:	4605      	mov	r5, r0
 8005d24:	460e      	mov	r6, r1
 8005d26:	b90b      	cbnz	r3, 8005d2c <_puts_r+0x10>
 8005d28:	f7ff ffb0 	bl	8005c8c <__sinit>
 8005d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d2e:	07db      	lsls	r3, r3, #31
 8005d30:	d405      	bmi.n	8005d3e <_puts_r+0x22>
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	0598      	lsls	r0, r3, #22
 8005d36:	d402      	bmi.n	8005d3e <_puts_r+0x22>
 8005d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d3a:	f000 f99e 	bl	800607a <__retarget_lock_acquire_recursive>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	0719      	lsls	r1, r3, #28
 8005d42:	d502      	bpl.n	8005d4a <_puts_r+0x2e>
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d135      	bne.n	8005db6 <_puts_r+0x9a>
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 f8c5 	bl	8005edc <__swsetup_r>
 8005d52:	b380      	cbz	r0, 8005db6 <_puts_r+0x9a>
 8005d54:	f04f 35ff 	mov.w	r5, #4294967295
 8005d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d5a:	07da      	lsls	r2, r3, #31
 8005d5c:	d405      	bmi.n	8005d6a <_puts_r+0x4e>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	059b      	lsls	r3, r3, #22
 8005d62:	d402      	bmi.n	8005d6a <_puts_r+0x4e>
 8005d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d66:	f000 f989 	bl	800607c <__retarget_lock_release_recursive>
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da04      	bge.n	8005d7c <_puts_r+0x60>
 8005d72:	69a2      	ldr	r2, [r4, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	dc17      	bgt.n	8005da8 <_puts_r+0x8c>
 8005d78:	290a      	cmp	r1, #10
 8005d7a:	d015      	beq.n	8005da8 <_puts_r+0x8c>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	6022      	str	r2, [r4, #0]
 8005d82:	7019      	strb	r1, [r3, #0]
 8005d84:	68a3      	ldr	r3, [r4, #8]
 8005d86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	60a3      	str	r3, [r4, #8]
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d1ed      	bne.n	8005d6e <_puts_r+0x52>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da11      	bge.n	8005dba <_puts_r+0x9e>
 8005d96:	4622      	mov	r2, r4
 8005d98:	210a      	movs	r1, #10
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 f85f 	bl	8005e5e <__swbuf_r>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d0d7      	beq.n	8005d54 <_puts_r+0x38>
 8005da4:	250a      	movs	r5, #10
 8005da6:	e7d7      	b.n	8005d58 <_puts_r+0x3c>
 8005da8:	4622      	mov	r2, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f857 	bl	8005e5e <__swbuf_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d1e7      	bne.n	8005d84 <_puts_r+0x68>
 8005db4:	e7ce      	b.n	8005d54 <_puts_r+0x38>
 8005db6:	3e01      	subs	r6, #1
 8005db8:	e7e4      	b.n	8005d84 <_puts_r+0x68>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	6022      	str	r2, [r4, #0]
 8005dc0:	220a      	movs	r2, #10
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e7ee      	b.n	8005da4 <_puts_r+0x88>
	...

08005dc8 <puts>:
 8005dc8:	4b02      	ldr	r3, [pc, #8]	@ (8005dd4 <puts+0xc>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f7ff bfa5 	b.w	8005d1c <_puts_r>
 8005dd2:	bf00      	nop
 8005dd4:	20000030 	.word	0x20000030

08005dd8 <__sread>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	460c      	mov	r4, r1
 8005ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de0:	f000 f8fc 	bl	8005fdc <_read_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	bfab      	itete	ge
 8005de8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dea:	89a3      	ldrhlt	r3, [r4, #12]
 8005dec:	181b      	addge	r3, r3, r0
 8005dee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005df2:	bfac      	ite	ge
 8005df4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005df6:	81a3      	strhlt	r3, [r4, #12]
 8005df8:	bd10      	pop	{r4, pc}

08005dfa <__swrite>:
 8005dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfe:	461f      	mov	r7, r3
 8005e00:	898b      	ldrh	r3, [r1, #12]
 8005e02:	05db      	lsls	r3, r3, #23
 8005e04:	4605      	mov	r5, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	4616      	mov	r6, r2
 8005e0a:	d505      	bpl.n	8005e18 <__swrite+0x1e>
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	2302      	movs	r3, #2
 8005e12:	2200      	movs	r2, #0
 8005e14:	f000 f8d0 	bl	8005fb8 <_lseek_r>
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e22:	81a3      	strh	r3, [r4, #12]
 8005e24:	4632      	mov	r2, r6
 8005e26:	463b      	mov	r3, r7
 8005e28:	4628      	mov	r0, r5
 8005e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2e:	f000 b8e7 	b.w	8006000 <_write_r>

08005e32 <__sseek>:
 8005e32:	b510      	push	{r4, lr}
 8005e34:	460c      	mov	r4, r1
 8005e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3a:	f000 f8bd 	bl	8005fb8 <_lseek_r>
 8005e3e:	1c43      	adds	r3, r0, #1
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	bf15      	itete	ne
 8005e44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e4e:	81a3      	strheq	r3, [r4, #12]
 8005e50:	bf18      	it	ne
 8005e52:	81a3      	strhne	r3, [r4, #12]
 8005e54:	bd10      	pop	{r4, pc}

08005e56 <__sclose>:
 8005e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5a:	f000 b89d 	b.w	8005f98 <_close_r>

08005e5e <__swbuf_r>:
 8005e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e60:	460e      	mov	r6, r1
 8005e62:	4614      	mov	r4, r2
 8005e64:	4605      	mov	r5, r0
 8005e66:	b118      	cbz	r0, 8005e70 <__swbuf_r+0x12>
 8005e68:	6a03      	ldr	r3, [r0, #32]
 8005e6a:	b90b      	cbnz	r3, 8005e70 <__swbuf_r+0x12>
 8005e6c:	f7ff ff0e 	bl	8005c8c <__sinit>
 8005e70:	69a3      	ldr	r3, [r4, #24]
 8005e72:	60a3      	str	r3, [r4, #8]
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	071a      	lsls	r2, r3, #28
 8005e78:	d501      	bpl.n	8005e7e <__swbuf_r+0x20>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	b943      	cbnz	r3, 8005e90 <__swbuf_r+0x32>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 f82b 	bl	8005edc <__swsetup_r>
 8005e86:	b118      	cbz	r0, 8005e90 <__swbuf_r+0x32>
 8005e88:	f04f 37ff 	mov.w	r7, #4294967295
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	6922      	ldr	r2, [r4, #16]
 8005e94:	1a98      	subs	r0, r3, r2
 8005e96:	6963      	ldr	r3, [r4, #20]
 8005e98:	b2f6      	uxtb	r6, r6
 8005e9a:	4283      	cmp	r3, r0
 8005e9c:	4637      	mov	r7, r6
 8005e9e:	dc05      	bgt.n	8005eac <__swbuf_r+0x4e>
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fd36 	bl	8006914 <_fflush_r>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d1ed      	bne.n	8005e88 <__swbuf_r+0x2a>
 8005eac:	68a3      	ldr	r3, [r4, #8]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	60a3      	str	r3, [r4, #8]
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	6022      	str	r2, [r4, #0]
 8005eb8:	701e      	strb	r6, [r3, #0]
 8005eba:	6962      	ldr	r2, [r4, #20]
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d004      	beq.n	8005ecc <__swbuf_r+0x6e>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	07db      	lsls	r3, r3, #31
 8005ec6:	d5e1      	bpl.n	8005e8c <__swbuf_r+0x2e>
 8005ec8:	2e0a      	cmp	r6, #10
 8005eca:	d1df      	bne.n	8005e8c <__swbuf_r+0x2e>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 fd20 	bl	8006914 <_fflush_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d0d9      	beq.n	8005e8c <__swbuf_r+0x2e>
 8005ed8:	e7d6      	b.n	8005e88 <__swbuf_r+0x2a>
	...

08005edc <__swsetup_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4b29      	ldr	r3, [pc, #164]	@ (8005f84 <__swsetup_r+0xa8>)
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	b118      	cbz	r0, 8005ef0 <__swsetup_r+0x14>
 8005ee8:	6a03      	ldr	r3, [r0, #32]
 8005eea:	b90b      	cbnz	r3, 8005ef0 <__swsetup_r+0x14>
 8005eec:	f7ff fece 	bl	8005c8c <__sinit>
 8005ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef4:	0719      	lsls	r1, r3, #28
 8005ef6:	d422      	bmi.n	8005f3e <__swsetup_r+0x62>
 8005ef8:	06da      	lsls	r2, r3, #27
 8005efa:	d407      	bmi.n	8005f0c <__swsetup_r+0x30>
 8005efc:	2209      	movs	r2, #9
 8005efe:	602a      	str	r2, [r5, #0]
 8005f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0a:	e033      	b.n	8005f74 <__swsetup_r+0x98>
 8005f0c:	0758      	lsls	r0, r3, #29
 8005f0e:	d512      	bpl.n	8005f36 <__swsetup_r+0x5a>
 8005f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f12:	b141      	cbz	r1, 8005f26 <__swsetup_r+0x4a>
 8005f14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f18:	4299      	cmp	r1, r3
 8005f1a:	d002      	beq.n	8005f22 <__swsetup_r+0x46>
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 f8af 	bl	8006080 <_free_r>
 8005f22:	2300      	movs	r3, #0
 8005f24:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	b94b      	cbnz	r3, 8005f56 <__swsetup_r+0x7a>
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f4c:	d003      	beq.n	8005f56 <__swsetup_r+0x7a>
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 fd2d 	bl	80069b0 <__smakebuf_r>
 8005f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5a:	f013 0201 	ands.w	r2, r3, #1
 8005f5e:	d00a      	beq.n	8005f76 <__swsetup_r+0x9a>
 8005f60:	2200      	movs	r2, #0
 8005f62:	60a2      	str	r2, [r4, #8]
 8005f64:	6962      	ldr	r2, [r4, #20]
 8005f66:	4252      	negs	r2, r2
 8005f68:	61a2      	str	r2, [r4, #24]
 8005f6a:	6922      	ldr	r2, [r4, #16]
 8005f6c:	b942      	cbnz	r2, 8005f80 <__swsetup_r+0xa4>
 8005f6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f72:	d1c5      	bne.n	8005f00 <__swsetup_r+0x24>
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
 8005f76:	0799      	lsls	r1, r3, #30
 8005f78:	bf58      	it	pl
 8005f7a:	6962      	ldrpl	r2, [r4, #20]
 8005f7c:	60a2      	str	r2, [r4, #8]
 8005f7e:	e7f4      	b.n	8005f6a <__swsetup_r+0x8e>
 8005f80:	2000      	movs	r0, #0
 8005f82:	e7f7      	b.n	8005f74 <__swsetup_r+0x98>
 8005f84:	20000030 	.word	0x20000030

08005f88 <memset>:
 8005f88:	4402      	add	r2, r0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	f803 1b01 	strb.w	r1, [r3], #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <_close_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d06      	ldr	r5, [pc, #24]	@ (8005fb4 <_close_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fb f86d 	bl	8001082 <_close>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_close_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_close_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	2000071c 	.word	0x2000071c

08005fb8 <_lseek_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d07      	ldr	r5, [pc, #28]	@ (8005fd8 <_lseek_r+0x20>)
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	602a      	str	r2, [r5, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f7fb f882 	bl	80010d0 <_lseek>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_lseek_r+0x1e>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_lseek_r+0x1e>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	2000071c 	.word	0x2000071c

08005fdc <_read_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d07      	ldr	r5, [pc, #28]	@ (8005ffc <_read_r+0x20>)
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	4608      	mov	r0, r1
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	602a      	str	r2, [r5, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f7fb f82c 	bl	8001048 <_read>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_read_r+0x1e>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_read_r+0x1e>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	2000071c 	.word	0x2000071c

08006000 <_write_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d07      	ldr	r5, [pc, #28]	@ (8006020 <_write_r+0x20>)
 8006004:	4604      	mov	r4, r0
 8006006:	4608      	mov	r0, r1
 8006008:	4611      	mov	r1, r2
 800600a:	2200      	movs	r2, #0
 800600c:	602a      	str	r2, [r5, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f7fa fb00 	bl	8000614 <_write>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_write_r+0x1e>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_write_r+0x1e>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	2000071c 	.word	0x2000071c

08006024 <__errno>:
 8006024:	4b01      	ldr	r3, [pc, #4]	@ (800602c <__errno+0x8>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000030 	.word	0x20000030

08006030 <__libc_init_array>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4d0d      	ldr	r5, [pc, #52]	@ (8006068 <__libc_init_array+0x38>)
 8006034:	4c0d      	ldr	r4, [pc, #52]	@ (800606c <__libc_init_array+0x3c>)
 8006036:	1b64      	subs	r4, r4, r5
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	2600      	movs	r6, #0
 800603c:	42a6      	cmp	r6, r4
 800603e:	d109      	bne.n	8006054 <__libc_init_array+0x24>
 8006040:	4d0b      	ldr	r5, [pc, #44]	@ (8006070 <__libc_init_array+0x40>)
 8006042:	4c0c      	ldr	r4, [pc, #48]	@ (8006074 <__libc_init_array+0x44>)
 8006044:	f000 fd22 	bl	8006a8c <_init>
 8006048:	1b64      	subs	r4, r4, r5
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	2600      	movs	r6, #0
 800604e:	42a6      	cmp	r6, r4
 8006050:	d105      	bne.n	800605e <__libc_init_array+0x2e>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	f855 3b04 	ldr.w	r3, [r5], #4
 8006058:	4798      	blx	r3
 800605a:	3601      	adds	r6, #1
 800605c:	e7ee      	b.n	800603c <__libc_init_array+0xc>
 800605e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006062:	4798      	blx	r3
 8006064:	3601      	adds	r6, #1
 8006066:	e7f2      	b.n	800604e <__libc_init_array+0x1e>
 8006068:	08006f8c 	.word	0x08006f8c
 800606c:	08006f8c 	.word	0x08006f8c
 8006070:	08006f8c 	.word	0x08006f8c
 8006074:	08006f90 	.word	0x08006f90

08006078 <__retarget_lock_init_recursive>:
 8006078:	4770      	bx	lr

0800607a <__retarget_lock_acquire_recursive>:
 800607a:	4770      	bx	lr

0800607c <__retarget_lock_release_recursive>:
 800607c:	4770      	bx	lr
	...

08006080 <_free_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4605      	mov	r5, r0
 8006084:	2900      	cmp	r1, #0
 8006086:	d041      	beq.n	800610c <_free_r+0x8c>
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f0c      	subs	r4, r1, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfb8      	it	lt
 8006092:	18e4      	addlt	r4, r4, r3
 8006094:	f000 f8e0 	bl	8006258 <__malloc_lock>
 8006098:	4a1d      	ldr	r2, [pc, #116]	@ (8006110 <_free_r+0x90>)
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	b933      	cbnz	r3, 80060ac <_free_r+0x2c>
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6014      	str	r4, [r2, #0]
 80060a2:	4628      	mov	r0, r5
 80060a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a8:	f000 b8dc 	b.w	8006264 <__malloc_unlock>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d908      	bls.n	80060c2 <_free_r+0x42>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	1821      	adds	r1, r4, r0
 80060b4:	428b      	cmp	r3, r1
 80060b6:	bf01      	itttt	eq
 80060b8:	6819      	ldreq	r1, [r3, #0]
 80060ba:	685b      	ldreq	r3, [r3, #4]
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	e7ed      	b.n	800609e <_free_r+0x1e>
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b10b      	cbz	r3, 80060cc <_free_r+0x4c>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d9fa      	bls.n	80060c2 <_free_r+0x42>
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	1850      	adds	r0, r2, r1
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d10b      	bne.n	80060ec <_free_r+0x6c>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4401      	add	r1, r0
 80060d8:	1850      	adds	r0, r2, r1
 80060da:	4283      	cmp	r3, r0
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	d1e0      	bne.n	80060a2 <_free_r+0x22>
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	6053      	str	r3, [r2, #4]
 80060e6:	4408      	add	r0, r1
 80060e8:	6010      	str	r0, [r2, #0]
 80060ea:	e7da      	b.n	80060a2 <_free_r+0x22>
 80060ec:	d902      	bls.n	80060f4 <_free_r+0x74>
 80060ee:	230c      	movs	r3, #12
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	e7d6      	b.n	80060a2 <_free_r+0x22>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	1821      	adds	r1, r4, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf04      	itt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	bf04      	itt	eq
 8006104:	1809      	addeq	r1, r1, r0
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	6054      	str	r4, [r2, #4]
 800610a:	e7ca      	b.n	80060a2 <_free_r+0x22>
 800610c:	bd38      	pop	{r3, r4, r5, pc}
 800610e:	bf00      	nop
 8006110:	20000728 	.word	0x20000728

08006114 <sbrk_aligned>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4e0f      	ldr	r6, [pc, #60]	@ (8006154 <sbrk_aligned+0x40>)
 8006118:	460c      	mov	r4, r1
 800611a:	6831      	ldr	r1, [r6, #0]
 800611c:	4605      	mov	r5, r0
 800611e:	b911      	cbnz	r1, 8006126 <sbrk_aligned+0x12>
 8006120:	f000 fca4 	bl	8006a6c <_sbrk_r>
 8006124:	6030      	str	r0, [r6, #0]
 8006126:	4621      	mov	r1, r4
 8006128:	4628      	mov	r0, r5
 800612a:	f000 fc9f 	bl	8006a6c <_sbrk_r>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	d103      	bne.n	800613a <sbrk_aligned+0x26>
 8006132:	f04f 34ff 	mov.w	r4, #4294967295
 8006136:	4620      	mov	r0, r4
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	1cc4      	adds	r4, r0, #3
 800613c:	f024 0403 	bic.w	r4, r4, #3
 8006140:	42a0      	cmp	r0, r4
 8006142:	d0f8      	beq.n	8006136 <sbrk_aligned+0x22>
 8006144:	1a21      	subs	r1, r4, r0
 8006146:	4628      	mov	r0, r5
 8006148:	f000 fc90 	bl	8006a6c <_sbrk_r>
 800614c:	3001      	adds	r0, #1
 800614e:	d1f2      	bne.n	8006136 <sbrk_aligned+0x22>
 8006150:	e7ef      	b.n	8006132 <sbrk_aligned+0x1e>
 8006152:	bf00      	nop
 8006154:	20000724 	.word	0x20000724

08006158 <_malloc_r>:
 8006158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800615c:	1ccd      	adds	r5, r1, #3
 800615e:	f025 0503 	bic.w	r5, r5, #3
 8006162:	3508      	adds	r5, #8
 8006164:	2d0c      	cmp	r5, #12
 8006166:	bf38      	it	cc
 8006168:	250c      	movcc	r5, #12
 800616a:	2d00      	cmp	r5, #0
 800616c:	4606      	mov	r6, r0
 800616e:	db01      	blt.n	8006174 <_malloc_r+0x1c>
 8006170:	42a9      	cmp	r1, r5
 8006172:	d904      	bls.n	800617e <_malloc_r+0x26>
 8006174:	230c      	movs	r3, #12
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	2000      	movs	r0, #0
 800617a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006254 <_malloc_r+0xfc>
 8006182:	f000 f869 	bl	8006258 <__malloc_lock>
 8006186:	f8d8 3000 	ldr.w	r3, [r8]
 800618a:	461c      	mov	r4, r3
 800618c:	bb44      	cbnz	r4, 80061e0 <_malloc_r+0x88>
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff ffbf 	bl	8006114 <sbrk_aligned>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	4604      	mov	r4, r0
 800619a:	d158      	bne.n	800624e <_malloc_r+0xf6>
 800619c:	f8d8 4000 	ldr.w	r4, [r8]
 80061a0:	4627      	mov	r7, r4
 80061a2:	2f00      	cmp	r7, #0
 80061a4:	d143      	bne.n	800622e <_malloc_r+0xd6>
 80061a6:	2c00      	cmp	r4, #0
 80061a8:	d04b      	beq.n	8006242 <_malloc_r+0xea>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	4639      	mov	r1, r7
 80061ae:	4630      	mov	r0, r6
 80061b0:	eb04 0903 	add.w	r9, r4, r3
 80061b4:	f000 fc5a 	bl	8006a6c <_sbrk_r>
 80061b8:	4581      	cmp	r9, r0
 80061ba:	d142      	bne.n	8006242 <_malloc_r+0xea>
 80061bc:	6821      	ldr	r1, [r4, #0]
 80061be:	1a6d      	subs	r5, r5, r1
 80061c0:	4629      	mov	r1, r5
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7ff ffa6 	bl	8006114 <sbrk_aligned>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d03a      	beq.n	8006242 <_malloc_r+0xea>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	442b      	add	r3, r5
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	f8d8 3000 	ldr.w	r3, [r8]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	bb62      	cbnz	r2, 8006234 <_malloc_r+0xdc>
 80061da:	f8c8 7000 	str.w	r7, [r8]
 80061de:	e00f      	b.n	8006200 <_malloc_r+0xa8>
 80061e0:	6822      	ldr	r2, [r4, #0]
 80061e2:	1b52      	subs	r2, r2, r5
 80061e4:	d420      	bmi.n	8006228 <_malloc_r+0xd0>
 80061e6:	2a0b      	cmp	r2, #11
 80061e8:	d917      	bls.n	800621a <_malloc_r+0xc2>
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	6025      	str	r5, [r4, #0]
 80061f0:	bf18      	it	ne
 80061f2:	6059      	strne	r1, [r3, #4]
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	bf08      	it	eq
 80061f8:	f8c8 1000 	streq.w	r1, [r8]
 80061fc:	5162      	str	r2, [r4, r5]
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f82f 	bl	8006264 <__malloc_unlock>
 8006206:	f104 000b 	add.w	r0, r4, #11
 800620a:	1d23      	adds	r3, r4, #4
 800620c:	f020 0007 	bic.w	r0, r0, #7
 8006210:	1ac2      	subs	r2, r0, r3
 8006212:	bf1c      	itt	ne
 8006214:	1a1b      	subne	r3, r3, r0
 8006216:	50a3      	strne	r3, [r4, r2]
 8006218:	e7af      	b.n	800617a <_malloc_r+0x22>
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	42a3      	cmp	r3, r4
 800621e:	bf0c      	ite	eq
 8006220:	f8c8 2000 	streq.w	r2, [r8]
 8006224:	605a      	strne	r2, [r3, #4]
 8006226:	e7eb      	b.n	8006200 <_malloc_r+0xa8>
 8006228:	4623      	mov	r3, r4
 800622a:	6864      	ldr	r4, [r4, #4]
 800622c:	e7ae      	b.n	800618c <_malloc_r+0x34>
 800622e:	463c      	mov	r4, r7
 8006230:	687f      	ldr	r7, [r7, #4]
 8006232:	e7b6      	b.n	80061a2 <_malloc_r+0x4a>
 8006234:	461a      	mov	r2, r3
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	42a3      	cmp	r3, r4
 800623a:	d1fb      	bne.n	8006234 <_malloc_r+0xdc>
 800623c:	2300      	movs	r3, #0
 800623e:	6053      	str	r3, [r2, #4]
 8006240:	e7de      	b.n	8006200 <_malloc_r+0xa8>
 8006242:	230c      	movs	r3, #12
 8006244:	6033      	str	r3, [r6, #0]
 8006246:	4630      	mov	r0, r6
 8006248:	f000 f80c 	bl	8006264 <__malloc_unlock>
 800624c:	e794      	b.n	8006178 <_malloc_r+0x20>
 800624e:	6005      	str	r5, [r0, #0]
 8006250:	e7d6      	b.n	8006200 <_malloc_r+0xa8>
 8006252:	bf00      	nop
 8006254:	20000728 	.word	0x20000728

08006258 <__malloc_lock>:
 8006258:	4801      	ldr	r0, [pc, #4]	@ (8006260 <__malloc_lock+0x8>)
 800625a:	f7ff bf0e 	b.w	800607a <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20000720 	.word	0x20000720

08006264 <__malloc_unlock>:
 8006264:	4801      	ldr	r0, [pc, #4]	@ (800626c <__malloc_unlock+0x8>)
 8006266:	f7ff bf09 	b.w	800607c <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20000720 	.word	0x20000720

08006270 <__sfputc_r>:
 8006270:	6893      	ldr	r3, [r2, #8]
 8006272:	3b01      	subs	r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	b410      	push	{r4}
 8006278:	6093      	str	r3, [r2, #8]
 800627a:	da08      	bge.n	800628e <__sfputc_r+0x1e>
 800627c:	6994      	ldr	r4, [r2, #24]
 800627e:	42a3      	cmp	r3, r4
 8006280:	db01      	blt.n	8006286 <__sfputc_r+0x16>
 8006282:	290a      	cmp	r1, #10
 8006284:	d103      	bne.n	800628e <__sfputc_r+0x1e>
 8006286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628a:	f7ff bde8 	b.w	8005e5e <__swbuf_r>
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	1c58      	adds	r0, r3, #1
 8006292:	6010      	str	r0, [r2, #0]
 8006294:	7019      	strb	r1, [r3, #0]
 8006296:	4608      	mov	r0, r1
 8006298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629c:	4770      	bx	lr

0800629e <__sfputs_r>:
 800629e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a0:	4606      	mov	r6, r0
 80062a2:	460f      	mov	r7, r1
 80062a4:	4614      	mov	r4, r2
 80062a6:	18d5      	adds	r5, r2, r3
 80062a8:	42ac      	cmp	r4, r5
 80062aa:	d101      	bne.n	80062b0 <__sfputs_r+0x12>
 80062ac:	2000      	movs	r0, #0
 80062ae:	e007      	b.n	80062c0 <__sfputs_r+0x22>
 80062b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b4:	463a      	mov	r2, r7
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff ffda 	bl	8006270 <__sfputc_r>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d1f3      	bne.n	80062a8 <__sfputs_r+0xa>
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062c4 <_vfiprintf_r>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	460d      	mov	r5, r1
 80062ca:	b09d      	sub	sp, #116	@ 0x74
 80062cc:	4614      	mov	r4, r2
 80062ce:	4698      	mov	r8, r3
 80062d0:	4606      	mov	r6, r0
 80062d2:	b118      	cbz	r0, 80062dc <_vfiprintf_r+0x18>
 80062d4:	6a03      	ldr	r3, [r0, #32]
 80062d6:	b90b      	cbnz	r3, 80062dc <_vfiprintf_r+0x18>
 80062d8:	f7ff fcd8 	bl	8005c8c <__sinit>
 80062dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062de:	07d9      	lsls	r1, r3, #31
 80062e0:	d405      	bmi.n	80062ee <_vfiprintf_r+0x2a>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	059a      	lsls	r2, r3, #22
 80062e6:	d402      	bmi.n	80062ee <_vfiprintf_r+0x2a>
 80062e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062ea:	f7ff fec6 	bl	800607a <__retarget_lock_acquire_recursive>
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	071b      	lsls	r3, r3, #28
 80062f2:	d501      	bpl.n	80062f8 <_vfiprintf_r+0x34>
 80062f4:	692b      	ldr	r3, [r5, #16]
 80062f6:	b99b      	cbnz	r3, 8006320 <_vfiprintf_r+0x5c>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff fdee 	bl	8005edc <__swsetup_r>
 8006300:	b170      	cbz	r0, 8006320 <_vfiprintf_r+0x5c>
 8006302:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006304:	07dc      	lsls	r4, r3, #31
 8006306:	d504      	bpl.n	8006312 <_vfiprintf_r+0x4e>
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	b01d      	add	sp, #116	@ 0x74
 800630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	0598      	lsls	r0, r3, #22
 8006316:	d4f7      	bmi.n	8006308 <_vfiprintf_r+0x44>
 8006318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800631a:	f7ff feaf 	bl	800607c <__retarget_lock_release_recursive>
 800631e:	e7f3      	b.n	8006308 <_vfiprintf_r+0x44>
 8006320:	2300      	movs	r3, #0
 8006322:	9309      	str	r3, [sp, #36]	@ 0x24
 8006324:	2320      	movs	r3, #32
 8006326:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800632a:	f8cd 800c 	str.w	r8, [sp, #12]
 800632e:	2330      	movs	r3, #48	@ 0x30
 8006330:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064e0 <_vfiprintf_r+0x21c>
 8006334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006338:	f04f 0901 	mov.w	r9, #1
 800633c:	4623      	mov	r3, r4
 800633e:	469a      	mov	sl, r3
 8006340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006344:	b10a      	cbz	r2, 800634a <_vfiprintf_r+0x86>
 8006346:	2a25      	cmp	r2, #37	@ 0x25
 8006348:	d1f9      	bne.n	800633e <_vfiprintf_r+0x7a>
 800634a:	ebba 0b04 	subs.w	fp, sl, r4
 800634e:	d00b      	beq.n	8006368 <_vfiprintf_r+0xa4>
 8006350:	465b      	mov	r3, fp
 8006352:	4622      	mov	r2, r4
 8006354:	4629      	mov	r1, r5
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ffa1 	bl	800629e <__sfputs_r>
 800635c:	3001      	adds	r0, #1
 800635e:	f000 80a7 	beq.w	80064b0 <_vfiprintf_r+0x1ec>
 8006362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006364:	445a      	add	r2, fp
 8006366:	9209      	str	r2, [sp, #36]	@ 0x24
 8006368:	f89a 3000 	ldrb.w	r3, [sl]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 809f 	beq.w	80064b0 <_vfiprintf_r+0x1ec>
 8006372:	2300      	movs	r3, #0
 8006374:	f04f 32ff 	mov.w	r2, #4294967295
 8006378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800637c:	f10a 0a01 	add.w	sl, sl, #1
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006388:	931a      	str	r3, [sp, #104]	@ 0x68
 800638a:	4654      	mov	r4, sl
 800638c:	2205      	movs	r2, #5
 800638e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006392:	4853      	ldr	r0, [pc, #332]	@ (80064e0 <_vfiprintf_r+0x21c>)
 8006394:	f7f9 ff2c 	bl	80001f0 <memchr>
 8006398:	9a04      	ldr	r2, [sp, #16]
 800639a:	b9d8      	cbnz	r0, 80063d4 <_vfiprintf_r+0x110>
 800639c:	06d1      	lsls	r1, r2, #27
 800639e:	bf44      	itt	mi
 80063a0:	2320      	movmi	r3, #32
 80063a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063a6:	0713      	lsls	r3, r2, #28
 80063a8:	bf44      	itt	mi
 80063aa:	232b      	movmi	r3, #43	@ 0x2b
 80063ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063b0:	f89a 3000 	ldrb.w	r3, [sl]
 80063b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063b6:	d015      	beq.n	80063e4 <_vfiprintf_r+0x120>
 80063b8:	9a07      	ldr	r2, [sp, #28]
 80063ba:	4654      	mov	r4, sl
 80063bc:	2000      	movs	r0, #0
 80063be:	f04f 0c0a 	mov.w	ip, #10
 80063c2:	4621      	mov	r1, r4
 80063c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063c8:	3b30      	subs	r3, #48	@ 0x30
 80063ca:	2b09      	cmp	r3, #9
 80063cc:	d94b      	bls.n	8006466 <_vfiprintf_r+0x1a2>
 80063ce:	b1b0      	cbz	r0, 80063fe <_vfiprintf_r+0x13a>
 80063d0:	9207      	str	r2, [sp, #28]
 80063d2:	e014      	b.n	80063fe <_vfiprintf_r+0x13a>
 80063d4:	eba0 0308 	sub.w	r3, r0, r8
 80063d8:	fa09 f303 	lsl.w	r3, r9, r3
 80063dc:	4313      	orrs	r3, r2
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	46a2      	mov	sl, r4
 80063e2:	e7d2      	b.n	800638a <_vfiprintf_r+0xc6>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	1d19      	adds	r1, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	9103      	str	r1, [sp, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfbb      	ittet	lt
 80063f0:	425b      	neglt	r3, r3
 80063f2:	f042 0202 	orrlt.w	r2, r2, #2
 80063f6:	9307      	strge	r3, [sp, #28]
 80063f8:	9307      	strlt	r3, [sp, #28]
 80063fa:	bfb8      	it	lt
 80063fc:	9204      	strlt	r2, [sp, #16]
 80063fe:	7823      	ldrb	r3, [r4, #0]
 8006400:	2b2e      	cmp	r3, #46	@ 0x2e
 8006402:	d10a      	bne.n	800641a <_vfiprintf_r+0x156>
 8006404:	7863      	ldrb	r3, [r4, #1]
 8006406:	2b2a      	cmp	r3, #42	@ 0x2a
 8006408:	d132      	bne.n	8006470 <_vfiprintf_r+0x1ac>
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	9203      	str	r2, [sp, #12]
 8006412:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006416:	3402      	adds	r4, #2
 8006418:	9305      	str	r3, [sp, #20]
 800641a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064f0 <_vfiprintf_r+0x22c>
 800641e:	7821      	ldrb	r1, [r4, #0]
 8006420:	2203      	movs	r2, #3
 8006422:	4650      	mov	r0, sl
 8006424:	f7f9 fee4 	bl	80001f0 <memchr>
 8006428:	b138      	cbz	r0, 800643a <_vfiprintf_r+0x176>
 800642a:	9b04      	ldr	r3, [sp, #16]
 800642c:	eba0 000a 	sub.w	r0, r0, sl
 8006430:	2240      	movs	r2, #64	@ 0x40
 8006432:	4082      	lsls	r2, r0
 8006434:	4313      	orrs	r3, r2
 8006436:	3401      	adds	r4, #1
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643e:	4829      	ldr	r0, [pc, #164]	@ (80064e4 <_vfiprintf_r+0x220>)
 8006440:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006444:	2206      	movs	r2, #6
 8006446:	f7f9 fed3 	bl	80001f0 <memchr>
 800644a:	2800      	cmp	r0, #0
 800644c:	d03f      	beq.n	80064ce <_vfiprintf_r+0x20a>
 800644e:	4b26      	ldr	r3, [pc, #152]	@ (80064e8 <_vfiprintf_r+0x224>)
 8006450:	bb1b      	cbnz	r3, 800649a <_vfiprintf_r+0x1d6>
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	3307      	adds	r3, #7
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	3308      	adds	r3, #8
 800645c:	9303      	str	r3, [sp, #12]
 800645e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006460:	443b      	add	r3, r7
 8006462:	9309      	str	r3, [sp, #36]	@ 0x24
 8006464:	e76a      	b.n	800633c <_vfiprintf_r+0x78>
 8006466:	fb0c 3202 	mla	r2, ip, r2, r3
 800646a:	460c      	mov	r4, r1
 800646c:	2001      	movs	r0, #1
 800646e:	e7a8      	b.n	80063c2 <_vfiprintf_r+0xfe>
 8006470:	2300      	movs	r3, #0
 8006472:	3401      	adds	r4, #1
 8006474:	9305      	str	r3, [sp, #20]
 8006476:	4619      	mov	r1, r3
 8006478:	f04f 0c0a 	mov.w	ip, #10
 800647c:	4620      	mov	r0, r4
 800647e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006482:	3a30      	subs	r2, #48	@ 0x30
 8006484:	2a09      	cmp	r2, #9
 8006486:	d903      	bls.n	8006490 <_vfiprintf_r+0x1cc>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0c6      	beq.n	800641a <_vfiprintf_r+0x156>
 800648c:	9105      	str	r1, [sp, #20]
 800648e:	e7c4      	b.n	800641a <_vfiprintf_r+0x156>
 8006490:	fb0c 2101 	mla	r1, ip, r1, r2
 8006494:	4604      	mov	r4, r0
 8006496:	2301      	movs	r3, #1
 8006498:	e7f0      	b.n	800647c <_vfiprintf_r+0x1b8>
 800649a:	ab03      	add	r3, sp, #12
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	462a      	mov	r2, r5
 80064a0:	4b12      	ldr	r3, [pc, #72]	@ (80064ec <_vfiprintf_r+0x228>)
 80064a2:	a904      	add	r1, sp, #16
 80064a4:	4630      	mov	r0, r6
 80064a6:	f3af 8000 	nop.w
 80064aa:	4607      	mov	r7, r0
 80064ac:	1c78      	adds	r0, r7, #1
 80064ae:	d1d6      	bne.n	800645e <_vfiprintf_r+0x19a>
 80064b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064b2:	07d9      	lsls	r1, r3, #31
 80064b4:	d405      	bmi.n	80064c2 <_vfiprintf_r+0x1fe>
 80064b6:	89ab      	ldrh	r3, [r5, #12]
 80064b8:	059a      	lsls	r2, r3, #22
 80064ba:	d402      	bmi.n	80064c2 <_vfiprintf_r+0x1fe>
 80064bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064be:	f7ff fddd 	bl	800607c <__retarget_lock_release_recursive>
 80064c2:	89ab      	ldrh	r3, [r5, #12]
 80064c4:	065b      	lsls	r3, r3, #25
 80064c6:	f53f af1f 	bmi.w	8006308 <_vfiprintf_r+0x44>
 80064ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064cc:	e71e      	b.n	800630c <_vfiprintf_r+0x48>
 80064ce:	ab03      	add	r3, sp, #12
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	462a      	mov	r2, r5
 80064d4:	4b05      	ldr	r3, [pc, #20]	@ (80064ec <_vfiprintf_r+0x228>)
 80064d6:	a904      	add	r1, sp, #16
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 f879 	bl	80065d0 <_printf_i>
 80064de:	e7e4      	b.n	80064aa <_vfiprintf_r+0x1e6>
 80064e0:	08006f50 	.word	0x08006f50
 80064e4:	08006f5a 	.word	0x08006f5a
 80064e8:	00000000 	.word	0x00000000
 80064ec:	0800629f 	.word	0x0800629f
 80064f0:	08006f56 	.word	0x08006f56

080064f4 <_printf_common>:
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	4616      	mov	r6, r2
 80064fa:	4698      	mov	r8, r3
 80064fc:	688a      	ldr	r2, [r1, #8]
 80064fe:	690b      	ldr	r3, [r1, #16]
 8006500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006504:	4293      	cmp	r3, r2
 8006506:	bfb8      	it	lt
 8006508:	4613      	movlt	r3, r2
 800650a:	6033      	str	r3, [r6, #0]
 800650c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006510:	4607      	mov	r7, r0
 8006512:	460c      	mov	r4, r1
 8006514:	b10a      	cbz	r2, 800651a <_printf_common+0x26>
 8006516:	3301      	adds	r3, #1
 8006518:	6033      	str	r3, [r6, #0]
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	0699      	lsls	r1, r3, #26
 800651e:	bf42      	ittt	mi
 8006520:	6833      	ldrmi	r3, [r6, #0]
 8006522:	3302      	addmi	r3, #2
 8006524:	6033      	strmi	r3, [r6, #0]
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	f015 0506 	ands.w	r5, r5, #6
 800652c:	d106      	bne.n	800653c <_printf_common+0x48>
 800652e:	f104 0a19 	add.w	sl, r4, #25
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	6832      	ldr	r2, [r6, #0]
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	42ab      	cmp	r3, r5
 800653a:	dc26      	bgt.n	800658a <_printf_common+0x96>
 800653c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	3b00      	subs	r3, #0
 8006544:	bf18      	it	ne
 8006546:	2301      	movne	r3, #1
 8006548:	0692      	lsls	r2, r2, #26
 800654a:	d42b      	bmi.n	80065a4 <_printf_common+0xb0>
 800654c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006550:	4641      	mov	r1, r8
 8006552:	4638      	mov	r0, r7
 8006554:	47c8      	blx	r9
 8006556:	3001      	adds	r0, #1
 8006558:	d01e      	beq.n	8006598 <_printf_common+0xa4>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	6922      	ldr	r2, [r4, #16]
 800655e:	f003 0306 	and.w	r3, r3, #6
 8006562:	2b04      	cmp	r3, #4
 8006564:	bf02      	ittt	eq
 8006566:	68e5      	ldreq	r5, [r4, #12]
 8006568:	6833      	ldreq	r3, [r6, #0]
 800656a:	1aed      	subeq	r5, r5, r3
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	bf0c      	ite	eq
 8006570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006574:	2500      	movne	r5, #0
 8006576:	4293      	cmp	r3, r2
 8006578:	bfc4      	itt	gt
 800657a:	1a9b      	subgt	r3, r3, r2
 800657c:	18ed      	addgt	r5, r5, r3
 800657e:	2600      	movs	r6, #0
 8006580:	341a      	adds	r4, #26
 8006582:	42b5      	cmp	r5, r6
 8006584:	d11a      	bne.n	80065bc <_printf_common+0xc8>
 8006586:	2000      	movs	r0, #0
 8006588:	e008      	b.n	800659c <_printf_common+0xa8>
 800658a:	2301      	movs	r3, #1
 800658c:	4652      	mov	r2, sl
 800658e:	4641      	mov	r1, r8
 8006590:	4638      	mov	r0, r7
 8006592:	47c8      	blx	r9
 8006594:	3001      	adds	r0, #1
 8006596:	d103      	bne.n	80065a0 <_printf_common+0xac>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a0:	3501      	adds	r5, #1
 80065a2:	e7c6      	b.n	8006532 <_printf_common+0x3e>
 80065a4:	18e1      	adds	r1, r4, r3
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	2030      	movs	r0, #48	@ 0x30
 80065aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ae:	4422      	add	r2, r4
 80065b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065b8:	3302      	adds	r3, #2
 80065ba:	e7c7      	b.n	800654c <_printf_common+0x58>
 80065bc:	2301      	movs	r3, #1
 80065be:	4622      	mov	r2, r4
 80065c0:	4641      	mov	r1, r8
 80065c2:	4638      	mov	r0, r7
 80065c4:	47c8      	blx	r9
 80065c6:	3001      	adds	r0, #1
 80065c8:	d0e6      	beq.n	8006598 <_printf_common+0xa4>
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7d9      	b.n	8006582 <_printf_common+0x8e>
	...

080065d0 <_printf_i>:
 80065d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	7e0f      	ldrb	r7, [r1, #24]
 80065d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065d8:	2f78      	cmp	r7, #120	@ 0x78
 80065da:	4691      	mov	r9, r2
 80065dc:	4680      	mov	r8, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	469a      	mov	sl, r3
 80065e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065e6:	d807      	bhi.n	80065f8 <_printf_i+0x28>
 80065e8:	2f62      	cmp	r7, #98	@ 0x62
 80065ea:	d80a      	bhi.n	8006602 <_printf_i+0x32>
 80065ec:	2f00      	cmp	r7, #0
 80065ee:	f000 80d1 	beq.w	8006794 <_printf_i+0x1c4>
 80065f2:	2f58      	cmp	r7, #88	@ 0x58
 80065f4:	f000 80b8 	beq.w	8006768 <_printf_i+0x198>
 80065f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006600:	e03a      	b.n	8006678 <_printf_i+0xa8>
 8006602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006606:	2b15      	cmp	r3, #21
 8006608:	d8f6      	bhi.n	80065f8 <_printf_i+0x28>
 800660a:	a101      	add	r1, pc, #4	@ (adr r1, 8006610 <_printf_i+0x40>)
 800660c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006610:	08006669 	.word	0x08006669
 8006614:	0800667d 	.word	0x0800667d
 8006618:	080065f9 	.word	0x080065f9
 800661c:	080065f9 	.word	0x080065f9
 8006620:	080065f9 	.word	0x080065f9
 8006624:	080065f9 	.word	0x080065f9
 8006628:	0800667d 	.word	0x0800667d
 800662c:	080065f9 	.word	0x080065f9
 8006630:	080065f9 	.word	0x080065f9
 8006634:	080065f9 	.word	0x080065f9
 8006638:	080065f9 	.word	0x080065f9
 800663c:	0800677b 	.word	0x0800677b
 8006640:	080066a7 	.word	0x080066a7
 8006644:	08006735 	.word	0x08006735
 8006648:	080065f9 	.word	0x080065f9
 800664c:	080065f9 	.word	0x080065f9
 8006650:	0800679d 	.word	0x0800679d
 8006654:	080065f9 	.word	0x080065f9
 8006658:	080066a7 	.word	0x080066a7
 800665c:	080065f9 	.word	0x080065f9
 8006660:	080065f9 	.word	0x080065f9
 8006664:	0800673d 	.word	0x0800673d
 8006668:	6833      	ldr	r3, [r6, #0]
 800666a:	1d1a      	adds	r2, r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6032      	str	r2, [r6, #0]
 8006670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006678:	2301      	movs	r3, #1
 800667a:	e09c      	b.n	80067b6 <_printf_i+0x1e6>
 800667c:	6833      	ldr	r3, [r6, #0]
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	1d19      	adds	r1, r3, #4
 8006682:	6031      	str	r1, [r6, #0]
 8006684:	0606      	lsls	r6, r0, #24
 8006686:	d501      	bpl.n	800668c <_printf_i+0xbc>
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	e003      	b.n	8006694 <_printf_i+0xc4>
 800668c:	0645      	lsls	r5, r0, #25
 800668e:	d5fb      	bpl.n	8006688 <_printf_i+0xb8>
 8006690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006694:	2d00      	cmp	r5, #0
 8006696:	da03      	bge.n	80066a0 <_printf_i+0xd0>
 8006698:	232d      	movs	r3, #45	@ 0x2d
 800669a:	426d      	negs	r5, r5
 800669c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a0:	4858      	ldr	r0, [pc, #352]	@ (8006804 <_printf_i+0x234>)
 80066a2:	230a      	movs	r3, #10
 80066a4:	e011      	b.n	80066ca <_printf_i+0xfa>
 80066a6:	6821      	ldr	r1, [r4, #0]
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	0608      	lsls	r0, r1, #24
 80066ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80066b0:	d402      	bmi.n	80066b8 <_printf_i+0xe8>
 80066b2:	0649      	lsls	r1, r1, #25
 80066b4:	bf48      	it	mi
 80066b6:	b2ad      	uxthmi	r5, r5
 80066b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ba:	4852      	ldr	r0, [pc, #328]	@ (8006804 <_printf_i+0x234>)
 80066bc:	6033      	str	r3, [r6, #0]
 80066be:	bf14      	ite	ne
 80066c0:	230a      	movne	r3, #10
 80066c2:	2308      	moveq	r3, #8
 80066c4:	2100      	movs	r1, #0
 80066c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066ca:	6866      	ldr	r6, [r4, #4]
 80066cc:	60a6      	str	r6, [r4, #8]
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	db05      	blt.n	80066de <_printf_i+0x10e>
 80066d2:	6821      	ldr	r1, [r4, #0]
 80066d4:	432e      	orrs	r6, r5
 80066d6:	f021 0104 	bic.w	r1, r1, #4
 80066da:	6021      	str	r1, [r4, #0]
 80066dc:	d04b      	beq.n	8006776 <_printf_i+0x1a6>
 80066de:	4616      	mov	r6, r2
 80066e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80066e4:	fb03 5711 	mls	r7, r3, r1, r5
 80066e8:	5dc7      	ldrb	r7, [r0, r7]
 80066ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066ee:	462f      	mov	r7, r5
 80066f0:	42bb      	cmp	r3, r7
 80066f2:	460d      	mov	r5, r1
 80066f4:	d9f4      	bls.n	80066e0 <_printf_i+0x110>
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d10b      	bne.n	8006712 <_printf_i+0x142>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	07df      	lsls	r7, r3, #31
 80066fe:	d508      	bpl.n	8006712 <_printf_i+0x142>
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	6861      	ldr	r1, [r4, #4]
 8006704:	4299      	cmp	r1, r3
 8006706:	bfde      	ittt	le
 8006708:	2330      	movle	r3, #48	@ 0x30
 800670a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800670e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006712:	1b92      	subs	r2, r2, r6
 8006714:	6122      	str	r2, [r4, #16]
 8006716:	f8cd a000 	str.w	sl, [sp]
 800671a:	464b      	mov	r3, r9
 800671c:	aa03      	add	r2, sp, #12
 800671e:	4621      	mov	r1, r4
 8006720:	4640      	mov	r0, r8
 8006722:	f7ff fee7 	bl	80064f4 <_printf_common>
 8006726:	3001      	adds	r0, #1
 8006728:	d14a      	bne.n	80067c0 <_printf_i+0x1f0>
 800672a:	f04f 30ff 	mov.w	r0, #4294967295
 800672e:	b004      	add	sp, #16
 8006730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	f043 0320 	orr.w	r3, r3, #32
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	4832      	ldr	r0, [pc, #200]	@ (8006808 <_printf_i+0x238>)
 800673e:	2778      	movs	r7, #120	@ 0x78
 8006740:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	6831      	ldr	r1, [r6, #0]
 8006748:	061f      	lsls	r7, r3, #24
 800674a:	f851 5b04 	ldr.w	r5, [r1], #4
 800674e:	d402      	bmi.n	8006756 <_printf_i+0x186>
 8006750:	065f      	lsls	r7, r3, #25
 8006752:	bf48      	it	mi
 8006754:	b2ad      	uxthmi	r5, r5
 8006756:	6031      	str	r1, [r6, #0]
 8006758:	07d9      	lsls	r1, r3, #31
 800675a:	bf44      	itt	mi
 800675c:	f043 0320 	orrmi.w	r3, r3, #32
 8006760:	6023      	strmi	r3, [r4, #0]
 8006762:	b11d      	cbz	r5, 800676c <_printf_i+0x19c>
 8006764:	2310      	movs	r3, #16
 8006766:	e7ad      	b.n	80066c4 <_printf_i+0xf4>
 8006768:	4826      	ldr	r0, [pc, #152]	@ (8006804 <_printf_i+0x234>)
 800676a:	e7e9      	b.n	8006740 <_printf_i+0x170>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	f023 0320 	bic.w	r3, r3, #32
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	e7f6      	b.n	8006764 <_printf_i+0x194>
 8006776:	4616      	mov	r6, r2
 8006778:	e7bd      	b.n	80066f6 <_printf_i+0x126>
 800677a:	6833      	ldr	r3, [r6, #0]
 800677c:	6825      	ldr	r5, [r4, #0]
 800677e:	6961      	ldr	r1, [r4, #20]
 8006780:	1d18      	adds	r0, r3, #4
 8006782:	6030      	str	r0, [r6, #0]
 8006784:	062e      	lsls	r6, r5, #24
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	d501      	bpl.n	800678e <_printf_i+0x1be>
 800678a:	6019      	str	r1, [r3, #0]
 800678c:	e002      	b.n	8006794 <_printf_i+0x1c4>
 800678e:	0668      	lsls	r0, r5, #25
 8006790:	d5fb      	bpl.n	800678a <_printf_i+0x1ba>
 8006792:	8019      	strh	r1, [r3, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	4616      	mov	r6, r2
 800679a:	e7bc      	b.n	8006716 <_printf_i+0x146>
 800679c:	6833      	ldr	r3, [r6, #0]
 800679e:	1d1a      	adds	r2, r3, #4
 80067a0:	6032      	str	r2, [r6, #0]
 80067a2:	681e      	ldr	r6, [r3, #0]
 80067a4:	6862      	ldr	r2, [r4, #4]
 80067a6:	2100      	movs	r1, #0
 80067a8:	4630      	mov	r0, r6
 80067aa:	f7f9 fd21 	bl	80001f0 <memchr>
 80067ae:	b108      	cbz	r0, 80067b4 <_printf_i+0x1e4>
 80067b0:	1b80      	subs	r0, r0, r6
 80067b2:	6060      	str	r0, [r4, #4]
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	2300      	movs	r3, #0
 80067ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067be:	e7aa      	b.n	8006716 <_printf_i+0x146>
 80067c0:	6923      	ldr	r3, [r4, #16]
 80067c2:	4632      	mov	r2, r6
 80067c4:	4649      	mov	r1, r9
 80067c6:	4640      	mov	r0, r8
 80067c8:	47d0      	blx	sl
 80067ca:	3001      	adds	r0, #1
 80067cc:	d0ad      	beq.n	800672a <_printf_i+0x15a>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	079b      	lsls	r3, r3, #30
 80067d2:	d413      	bmi.n	80067fc <_printf_i+0x22c>
 80067d4:	68e0      	ldr	r0, [r4, #12]
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	4298      	cmp	r0, r3
 80067da:	bfb8      	it	lt
 80067dc:	4618      	movlt	r0, r3
 80067de:	e7a6      	b.n	800672e <_printf_i+0x15e>
 80067e0:	2301      	movs	r3, #1
 80067e2:	4632      	mov	r2, r6
 80067e4:	4649      	mov	r1, r9
 80067e6:	4640      	mov	r0, r8
 80067e8:	47d0      	blx	sl
 80067ea:	3001      	adds	r0, #1
 80067ec:	d09d      	beq.n	800672a <_printf_i+0x15a>
 80067ee:	3501      	adds	r5, #1
 80067f0:	68e3      	ldr	r3, [r4, #12]
 80067f2:	9903      	ldr	r1, [sp, #12]
 80067f4:	1a5b      	subs	r3, r3, r1
 80067f6:	42ab      	cmp	r3, r5
 80067f8:	dcf2      	bgt.n	80067e0 <_printf_i+0x210>
 80067fa:	e7eb      	b.n	80067d4 <_printf_i+0x204>
 80067fc:	2500      	movs	r5, #0
 80067fe:	f104 0619 	add.w	r6, r4, #25
 8006802:	e7f5      	b.n	80067f0 <_printf_i+0x220>
 8006804:	08006f61 	.word	0x08006f61
 8006808:	08006f72 	.word	0x08006f72

0800680c <__sflush_r>:
 800680c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	0716      	lsls	r6, r2, #28
 8006816:	4605      	mov	r5, r0
 8006818:	460c      	mov	r4, r1
 800681a:	d454      	bmi.n	80068c6 <__sflush_r+0xba>
 800681c:	684b      	ldr	r3, [r1, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	dc02      	bgt.n	8006828 <__sflush_r+0x1c>
 8006822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	dd48      	ble.n	80068ba <__sflush_r+0xae>
 8006828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800682a:	2e00      	cmp	r6, #0
 800682c:	d045      	beq.n	80068ba <__sflush_r+0xae>
 800682e:	2300      	movs	r3, #0
 8006830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006834:	682f      	ldr	r7, [r5, #0]
 8006836:	6a21      	ldr	r1, [r4, #32]
 8006838:	602b      	str	r3, [r5, #0]
 800683a:	d030      	beq.n	800689e <__sflush_r+0x92>
 800683c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	0759      	lsls	r1, r3, #29
 8006842:	d505      	bpl.n	8006850 <__sflush_r+0x44>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800684a:	b10b      	cbz	r3, 8006850 <__sflush_r+0x44>
 800684c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800684e:	1ad2      	subs	r2, r2, r3
 8006850:	2300      	movs	r3, #0
 8006852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006854:	6a21      	ldr	r1, [r4, #32]
 8006856:	4628      	mov	r0, r5
 8006858:	47b0      	blx	r6
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	d106      	bne.n	800686e <__sflush_r+0x62>
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	291d      	cmp	r1, #29
 8006864:	d82b      	bhi.n	80068be <__sflush_r+0xb2>
 8006866:	4a2a      	ldr	r2, [pc, #168]	@ (8006910 <__sflush_r+0x104>)
 8006868:	40ca      	lsrs	r2, r1
 800686a:	07d6      	lsls	r6, r2, #31
 800686c:	d527      	bpl.n	80068be <__sflush_r+0xb2>
 800686e:	2200      	movs	r2, #0
 8006870:	6062      	str	r2, [r4, #4]
 8006872:	04d9      	lsls	r1, r3, #19
 8006874:	6922      	ldr	r2, [r4, #16]
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	d504      	bpl.n	8006884 <__sflush_r+0x78>
 800687a:	1c42      	adds	r2, r0, #1
 800687c:	d101      	bne.n	8006882 <__sflush_r+0x76>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	b903      	cbnz	r3, 8006884 <__sflush_r+0x78>
 8006882:	6560      	str	r0, [r4, #84]	@ 0x54
 8006884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006886:	602f      	str	r7, [r5, #0]
 8006888:	b1b9      	cbz	r1, 80068ba <__sflush_r+0xae>
 800688a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800688e:	4299      	cmp	r1, r3
 8006890:	d002      	beq.n	8006898 <__sflush_r+0x8c>
 8006892:	4628      	mov	r0, r5
 8006894:	f7ff fbf4 	bl	8006080 <_free_r>
 8006898:	2300      	movs	r3, #0
 800689a:	6363      	str	r3, [r4, #52]	@ 0x34
 800689c:	e00d      	b.n	80068ba <__sflush_r+0xae>
 800689e:	2301      	movs	r3, #1
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b0      	blx	r6
 80068a4:	4602      	mov	r2, r0
 80068a6:	1c50      	adds	r0, r2, #1
 80068a8:	d1c9      	bne.n	800683e <__sflush_r+0x32>
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0c6      	beq.n	800683e <__sflush_r+0x32>
 80068b0:	2b1d      	cmp	r3, #29
 80068b2:	d001      	beq.n	80068b8 <__sflush_r+0xac>
 80068b4:	2b16      	cmp	r3, #22
 80068b6:	d11e      	bne.n	80068f6 <__sflush_r+0xea>
 80068b8:	602f      	str	r7, [r5, #0]
 80068ba:	2000      	movs	r0, #0
 80068bc:	e022      	b.n	8006904 <__sflush_r+0xf8>
 80068be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c2:	b21b      	sxth	r3, r3
 80068c4:	e01b      	b.n	80068fe <__sflush_r+0xf2>
 80068c6:	690f      	ldr	r7, [r1, #16]
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	d0f6      	beq.n	80068ba <__sflush_r+0xae>
 80068cc:	0793      	lsls	r3, r2, #30
 80068ce:	680e      	ldr	r6, [r1, #0]
 80068d0:	bf08      	it	eq
 80068d2:	694b      	ldreq	r3, [r1, #20]
 80068d4:	600f      	str	r7, [r1, #0]
 80068d6:	bf18      	it	ne
 80068d8:	2300      	movne	r3, #0
 80068da:	eba6 0807 	sub.w	r8, r6, r7
 80068de:	608b      	str	r3, [r1, #8]
 80068e0:	f1b8 0f00 	cmp.w	r8, #0
 80068e4:	dde9      	ble.n	80068ba <__sflush_r+0xae>
 80068e6:	6a21      	ldr	r1, [r4, #32]
 80068e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068ea:	4643      	mov	r3, r8
 80068ec:	463a      	mov	r2, r7
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b0      	blx	r6
 80068f2:	2800      	cmp	r0, #0
 80068f4:	dc08      	bgt.n	8006908 <__sflush_r+0xfc>
 80068f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	4407      	add	r7, r0
 800690a:	eba8 0800 	sub.w	r8, r8, r0
 800690e:	e7e7      	b.n	80068e0 <__sflush_r+0xd4>
 8006910:	20400001 	.word	0x20400001

08006914 <_fflush_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	690b      	ldr	r3, [r1, #16]
 8006918:	4605      	mov	r5, r0
 800691a:	460c      	mov	r4, r1
 800691c:	b913      	cbnz	r3, 8006924 <_fflush_r+0x10>
 800691e:	2500      	movs	r5, #0
 8006920:	4628      	mov	r0, r5
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	b118      	cbz	r0, 800692e <_fflush_r+0x1a>
 8006926:	6a03      	ldr	r3, [r0, #32]
 8006928:	b90b      	cbnz	r3, 800692e <_fflush_r+0x1a>
 800692a:	f7ff f9af 	bl	8005c8c <__sinit>
 800692e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f3      	beq.n	800691e <_fflush_r+0xa>
 8006936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006938:	07d0      	lsls	r0, r2, #31
 800693a:	d404      	bmi.n	8006946 <_fflush_r+0x32>
 800693c:	0599      	lsls	r1, r3, #22
 800693e:	d402      	bmi.n	8006946 <_fflush_r+0x32>
 8006940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006942:	f7ff fb9a 	bl	800607a <__retarget_lock_acquire_recursive>
 8006946:	4628      	mov	r0, r5
 8006948:	4621      	mov	r1, r4
 800694a:	f7ff ff5f 	bl	800680c <__sflush_r>
 800694e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006950:	07da      	lsls	r2, r3, #31
 8006952:	4605      	mov	r5, r0
 8006954:	d4e4      	bmi.n	8006920 <_fflush_r+0xc>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	059b      	lsls	r3, r3, #22
 800695a:	d4e1      	bmi.n	8006920 <_fflush_r+0xc>
 800695c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800695e:	f7ff fb8d 	bl	800607c <__retarget_lock_release_recursive>
 8006962:	e7dd      	b.n	8006920 <_fflush_r+0xc>

08006964 <__swhatbuf_r>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	460c      	mov	r4, r1
 8006968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696c:	2900      	cmp	r1, #0
 800696e:	b096      	sub	sp, #88	@ 0x58
 8006970:	4615      	mov	r5, r2
 8006972:	461e      	mov	r6, r3
 8006974:	da0d      	bge.n	8006992 <__swhatbuf_r+0x2e>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	bf14      	ite	ne
 8006982:	2340      	movne	r3, #64	@ 0x40
 8006984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006988:	2000      	movs	r0, #0
 800698a:	6031      	str	r1, [r6, #0]
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	b016      	add	sp, #88	@ 0x58
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	466a      	mov	r2, sp
 8006994:	f000 f848 	bl	8006a28 <_fstat_r>
 8006998:	2800      	cmp	r0, #0
 800699a:	dbec      	blt.n	8006976 <__swhatbuf_r+0x12>
 800699c:	9901      	ldr	r1, [sp, #4]
 800699e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069a6:	4259      	negs	r1, r3
 80069a8:	4159      	adcs	r1, r3
 80069aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069ae:	e7eb      	b.n	8006988 <__swhatbuf_r+0x24>

080069b0 <__smakebuf_r>:
 80069b0:	898b      	ldrh	r3, [r1, #12]
 80069b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069b4:	079d      	lsls	r5, r3, #30
 80069b6:	4606      	mov	r6, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	d507      	bpl.n	80069cc <__smakebuf_r+0x1c>
 80069bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	2301      	movs	r3, #1
 80069c6:	6163      	str	r3, [r4, #20]
 80069c8:	b003      	add	sp, #12
 80069ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069cc:	ab01      	add	r3, sp, #4
 80069ce:	466a      	mov	r2, sp
 80069d0:	f7ff ffc8 	bl	8006964 <__swhatbuf_r>
 80069d4:	9f00      	ldr	r7, [sp, #0]
 80069d6:	4605      	mov	r5, r0
 80069d8:	4639      	mov	r1, r7
 80069da:	4630      	mov	r0, r6
 80069dc:	f7ff fbbc 	bl	8006158 <_malloc_r>
 80069e0:	b948      	cbnz	r0, 80069f6 <__smakebuf_r+0x46>
 80069e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e6:	059a      	lsls	r2, r3, #22
 80069e8:	d4ee      	bmi.n	80069c8 <__smakebuf_r+0x18>
 80069ea:	f023 0303 	bic.w	r3, r3, #3
 80069ee:	f043 0302 	orr.w	r3, r3, #2
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	e7e2      	b.n	80069bc <__smakebuf_r+0xc>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	6020      	str	r0, [r4, #0]
 80069fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a06:	b15b      	cbz	r3, 8006a20 <__smakebuf_r+0x70>
 8006a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 f81d 	bl	8006a4c <_isatty_r>
 8006a12:	b128      	cbz	r0, 8006a20 <__smakebuf_r+0x70>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	431d      	orrs	r5, r3
 8006a24:	81a5      	strh	r5, [r4, #12]
 8006a26:	e7cf      	b.n	80069c8 <__smakebuf_r+0x18>

08006a28 <_fstat_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	@ (8006a48 <_fstat_r+0x20>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	f7fa fb30 	bl	800109a <_fstat>
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	d102      	bne.n	8006a44 <_fstat_r+0x1c>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	b103      	cbz	r3, 8006a44 <_fstat_r+0x1c>
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	2000071c 	.word	0x2000071c

08006a4c <_isatty_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d06      	ldr	r5, [pc, #24]	@ (8006a68 <_isatty_r+0x1c>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	602b      	str	r3, [r5, #0]
 8006a58:	f7fa fb2f 	bl	80010ba <_isatty>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_isatty_r+0x1a>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_isatty_r+0x1a>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	2000071c 	.word	0x2000071c

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	@ (8006a88 <_sbrk_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fa fb38 	bl	80010ec <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	2000071c 	.word	0x2000071c

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
