
voiceRecorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08008f9c  08008f9c  00009f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098dc  080098dc  0000b08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098dc  080098dc  0000a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e4  080098e4  0000b08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098e8  080098e8  0000a8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080098ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b50  2000008c  08009978  0000b08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003bdc  08009978  0000bbdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001199a  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003101  00000000  00000000  0001ca56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c06  00000000  00000000  00020b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019178  00000000  00000000  00021716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164bf  00000000  00000000  0003a88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbbe  00000000  00000000  00050d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd90b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004740  00000000  00000000  000dd950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e2090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f84 	.word	0x08008f84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08008f84 	.word	0x08008f84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <sd_card_init>:

}

//////////////////////// recording data functions

void sd_card_init(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	sd_result = f_mount(&sdCard, "", 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	490c      	ldr	r1, [pc, #48]	@ (80005f4 <sd_card_init+0x38>)
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <sd_card_init+0x3c>)
 80005c6:	f006 ff73 	bl	80074b0 <f_mount>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <sd_card_init+0x40>)
 80005d0:	701a      	strb	r2, [r3, #0]

	if (sd_result != 0){
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <sd_card_init+0x40>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <sd_card_init+0x2c>
		printf("error in mounting sd card %d \r\n", sd_result);
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <sd_card_init+0x40>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <sd_card_init+0x44>)
 80005e2:	f007 fe05 	bl	80081f0 <iprintf>
	}
	else printf("success in mounting sd card\r\n");

}
 80005e6:	e002      	b.n	80005ee <sd_card_init+0x32>
	else printf("success in mounting sd card\r\n");
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <sd_card_init+0x48>)
 80005ea:	f007 fe69 	bl	80082c0 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08008fbc 	.word	0x08008fbc
 80005f8:	20003620 	.word	0x20003620
 80005fc:	2000361c 	.word	0x2000361c
 8000600:	08009230 	.word	0x08009230
 8000604:	08009250 	.word	0x08009250

08000608 <SDcardPlaySetup>:
}


////////////////////////////// playback functions

void SDcardPlaySetup(uint8_t playSong){
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	@ 0x58
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	  fresult = f_mount(&fatfs, "", 1);
 8000612:	2201      	movs	r2, #1
 8000614:	49a5      	ldr	r1, [pc, #660]	@ (80008ac <SDcardPlaySetup+0x2a4>)
 8000616:	48a6      	ldr	r0, [pc, #664]	@ (80008b0 <SDcardPlaySetup+0x2a8>)
 8000618:	f006 ff4a 	bl	80074b0 <f_mount>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4ba4      	ldr	r3, [pc, #656]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000622:	701a      	strb	r2, [r3, #0]

	  if (fresult != FR_OK){
 8000624:	4ba3      	ldr	r3, [pc, #652]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <SDcardPlaySetup+0x2c>
		  // do something
		  printf("there was an error with the mounting");
 800062c:	48a2      	ldr	r0, [pc, #648]	@ (80008b8 <SDcardPlaySetup+0x2b0>)
 800062e:	f007 fddf 	bl	80081f0 <iprintf>
 8000632:	e002      	b.n	800063a <SDcardPlaySetup+0x32>

	  }
	  else{
		  printf("successfully mounted\r\n");
 8000634:	48a1      	ldr	r0, [pc, #644]	@ (80008bc <SDcardPlaySetup+0x2b4>)
 8000636:	f007 fe43 	bl	80082c0 <puts>
	  }


	  if (playSong) fresult = f_open(&fil, "a.wav", FA_OPEN_EXISTING | FA_READ);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d009      	beq.n	8000654 <SDcardPlaySetup+0x4c>
 8000640:	2201      	movs	r2, #1
 8000642:	499f      	ldr	r1, [pc, #636]	@ (80008c0 <SDcardPlaySetup+0x2b8>)
 8000644:	489f      	ldr	r0, [pc, #636]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 8000646:	f006 ff79 	bl	800753c <f_open>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b99      	ldr	r3, [pc, #612]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e008      	b.n	8000666 <SDcardPlaySetup+0x5e>
	  else  fresult = f_open(&fil, playbackFile, FA_OPEN_EXISTING | FA_READ);
 8000654:	2201      	movs	r2, #1
 8000656:	499c      	ldr	r1, [pc, #624]	@ (80008c8 <SDcardPlaySetup+0x2c0>)
 8000658:	489a      	ldr	r0, [pc, #616]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 800065a:	f006 ff6f 	bl	800753c <f_open>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b94      	ldr	r3, [pc, #592]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000664:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 8000666:	4b93      	ldr	r3, [pc, #588]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d007      	beq.n	800067e <SDcardPlaySetup+0x76>
		  // do something
		  printf("could not read file, fresult is %d \r\n", fresult);
 800066e:	4b91      	ldr	r3, [pc, #580]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	4895      	ldr	r0, [pc, #596]	@ (80008cc <SDcardPlaySetup+0x2c4>)
 8000676:	f007 fdbb 	bl	80081f0 <iprintf>
		  while (1);
 800067a:	bf00      	nop
 800067c:	e7fd      	b.n	800067a <SDcardPlaySetup+0x72>
	  }
	  else{
		  printf("successfully opened file!\r\n");
 800067e:	4894      	ldr	r0, [pc, #592]	@ (80008d0 <SDcardPlaySetup+0x2c8>)
 8000680:	f007 fe1e 	bl	80082c0 <puts>
	  }

	  // added for playing back voice recording
	  printf("-----------------------------\r\n");
 8000684:	4893      	ldr	r0, [pc, #588]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000686:	f007 fe1b 	bl	80082c0 <puts>
	  FILINFO finfo;
	  FRESULT res;

	  if (playSong) res = f_stat("a.wav", &finfo);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d009      	beq.n	80006a4 <SDcardPlaySetup+0x9c>
 8000690:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000694:	4619      	mov	r1, r3
 8000696:	488a      	ldr	r0, [pc, #552]	@ (80008c0 <SDcardPlaySetup+0x2b8>)
 8000698:	f007 fc52 	bl	8007f40 <f_stat>
 800069c:	4603      	mov	r3, r0
 800069e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80006a2:	e008      	b.n	80006b6 <SDcardPlaySetup+0xae>
	  else res = f_stat(playbackFile, &finfo);
 80006a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006a8:	4619      	mov	r1, r3
 80006aa:	4887      	ldr	r0, [pc, #540]	@ (80008c8 <SDcardPlaySetup+0x2c0>)
 80006ac:	f007 fc48 	bl	8007f40 <f_stat>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  if (res == FR_OK) {
 80006b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d105      	bne.n	80006ca <SDcardPlaySetup+0xc2>
	      printf("Size from f_stat: %lu bytes\r\n", finfo.fsize);
 80006be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006c0:	4619      	mov	r1, r3
 80006c2:	4885      	ldr	r0, [pc, #532]	@ (80008d8 <SDcardPlaySetup+0x2d0>)
 80006c4:	f007 fd94 	bl	80081f0 <iprintf>
 80006c8:	e005      	b.n	80006d6 <SDcardPlaySetup+0xce>
	  } else {
	      printf("f_stat failed: %d\r\n", res);
 80006ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80006ce:	4619      	mov	r1, r3
 80006d0:	4882      	ldr	r0, [pc, #520]	@ (80008dc <SDcardPlaySetup+0x2d4>)
 80006d2:	f007 fd8d 	bl	80081f0 <iprintf>
	  }

	  UINT file_size = f_size(&fil);
 80006d6:	4b7b      	ldr	r3, [pc, #492]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	653b      	str	r3, [r7, #80]	@ 0x50
	  printf("File size from f_size: %lu\r\n", file_size);
 80006dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80006de:	4880      	ldr	r0, [pc, #512]	@ (80008e0 <SDcardPlaySetup+0x2d8>)
 80006e0:	f007 fd86 	bl	80081f0 <iprintf>

	  WAVHeader header;
	  UINT br;

	  f_lseek(&fil, 0); // Go to start
 80006e4:	2100      	movs	r1, #0
 80006e6:	4877      	ldr	r0, [pc, #476]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 80006e8:	f007 fa21 	bl	8007b2e <f_lseek>
	  if (f_read(&fil, &header, sizeof(WAVHeader), &br) != FR_OK){
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	f107 010c 	add.w	r1, r7, #12
 80006f4:	222c      	movs	r2, #44	@ 0x2c
 80006f6:	4873      	ldr	r0, [pc, #460]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 80006f8:	f007 f8da 	bl	80078b0 <f_read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d004      	beq.n	800070c <SDcardPlaySetup+0x104>
		  printf("failed to read into header\r\n");
 8000702:	4878      	ldr	r0, [pc, #480]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 8000704:	f007 fddc 	bl	80082c0 <puts>
		  while(1);
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <SDcardPlaySetup+0x100>
	  }


	  printf("ChunkID: %.4s\r\n", header.ChunkID);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4875      	ldr	r0, [pc, #468]	@ (80008e8 <SDcardPlaySetup+0x2e0>)
 8000714:	f007 fd6c 	bl	80081f0 <iprintf>
	  printf("ChunkSize: %lu\r\n", header.ChunkSize);
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	4619      	mov	r1, r3
 800071c:	4873      	ldr	r0, [pc, #460]	@ (80008ec <SDcardPlaySetup+0x2e4>)
 800071e:	f007 fd67 	bl	80081f0 <iprintf>
	  printf("Format: %.4s\r\n", header.Format);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	3308      	adds	r3, #8
 8000728:	4619      	mov	r1, r3
 800072a:	4871      	ldr	r0, [pc, #452]	@ (80008f0 <SDcardPlaySetup+0x2e8>)
 800072c:	f007 fd60 	bl	80081f0 <iprintf>

	  printf("Subchunk1ID: %.4s\r\n", header.Subchunk1ID);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	330c      	adds	r3, #12
 8000736:	4619      	mov	r1, r3
 8000738:	486e      	ldr	r0, [pc, #440]	@ (80008f4 <SDcardPlaySetup+0x2ec>)
 800073a:	f007 fd59 	bl	80081f0 <iprintf>
	  printf("Subchunk1Size: %lu\r\n", header.Subchunk1Size);
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	4619      	mov	r1, r3
 8000742:	486d      	ldr	r0, [pc, #436]	@ (80008f8 <SDcardPlaySetup+0x2f0>)
 8000744:	f007 fd54 	bl	80081f0 <iprintf>
	  printf("AudioFormat: %u\r\n", header.AudioFormat);
 8000748:	8c3b      	ldrh	r3, [r7, #32]
 800074a:	4619      	mov	r1, r3
 800074c:	486b      	ldr	r0, [pc, #428]	@ (80008fc <SDcardPlaySetup+0x2f4>)
 800074e:	f007 fd4f 	bl	80081f0 <iprintf>
	  printf("NumChannels: %u\r\n", header.NumChannels);
 8000752:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000754:	4619      	mov	r1, r3
 8000756:	486a      	ldr	r0, [pc, #424]	@ (8000900 <SDcardPlaySetup+0x2f8>)
 8000758:	f007 fd4a 	bl	80081f0 <iprintf>
	  printf("SampleRate: %lu\r\n", header.SampleRate);
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	4868      	ldr	r0, [pc, #416]	@ (8000904 <SDcardPlaySetup+0x2fc>)
 8000762:	f007 fd45 	bl	80081f0 <iprintf>
	  printf("ByteRate: %lu\r\n", header.ByteRate);
 8000766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000768:	4619      	mov	r1, r3
 800076a:	4867      	ldr	r0, [pc, #412]	@ (8000908 <SDcardPlaySetup+0x300>)
 800076c:	f007 fd40 	bl	80081f0 <iprintf>
	  printf("BlockAlign: %u\r\n", header.BlockAlign);
 8000770:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000772:	4619      	mov	r1, r3
 8000774:	4865      	ldr	r0, [pc, #404]	@ (800090c <SDcardPlaySetup+0x304>)
 8000776:	f007 fd3b 	bl	80081f0 <iprintf>
	  printf("BitsPerSample: %u\r\n", header.BitsPerSample);
 800077a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800077c:	4619      	mov	r1, r3
 800077e:	4864      	ldr	r0, [pc, #400]	@ (8000910 <SDcardPlaySetup+0x308>)
 8000780:	f007 fd36 	bl	80081f0 <iprintf>

	  printf("Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	3324      	adds	r3, #36	@ 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	4861      	ldr	r0, [pc, #388]	@ (8000914 <SDcardPlaySetup+0x30c>)
 800078e:	f007 fd2f 	bl	80081f0 <iprintf>
	  printf("Subchunk2Size: %lu\r\n", header.Subchunk2Size);
 8000792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000794:	4619      	mov	r1, r3
 8000796:	4860      	ldr	r0, [pc, #384]	@ (8000918 <SDcardPlaySetup+0x310>)
 8000798:	f007 fd2a 	bl	80081f0 <iprintf>



	  printf("seeking file size......\r\n");
 800079c:	485f      	ldr	r0, [pc, #380]	@ (800091c <SDcardPlaySetup+0x314>)
 800079e:	f007 fd8f 	bl	80082c0 <puts>
	  fresult = f_lseek(&fil, 40);
 80007a2:	2128      	movs	r1, #40	@ 0x28
 80007a4:	4847      	ldr	r0, [pc, #284]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 80007a6:	f007 f9c2 	bl	8007b2e <f_lseek>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b41      	ldr	r3, [pc, #260]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 80007b0:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK) printf("there was an error seeking\r\n");
 80007b2:	4b40      	ldr	r3, [pc, #256]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <SDcardPlaySetup+0x1b8>
 80007ba:	4859      	ldr	r0, [pc, #356]	@ (8000920 <SDcardPlaySetup+0x318>)
 80007bc:	f007 fd80 	bl	80082c0 <puts>



	  fresult = f_read(&fil, &recording_size, 4, (UINT *)fread_size);
 80007c0:	4b58      	ldr	r3, [pc, #352]	@ (8000924 <SDcardPlaySetup+0x31c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2204      	movs	r2, #4
 80007c6:	4958      	ldr	r1, [pc, #352]	@ (8000928 <SDcardPlaySetup+0x320>)
 80007c8:	483e      	ldr	r0, [pc, #248]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 80007ca:	f007 f871 	bl	80078b0 <f_read>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b38      	ldr	r3, [pc, #224]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 80007d4:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 80007d6:	4b37      	ldr	r3, [pc, #220]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d007      	beq.n	80007ee <SDcardPlaySetup+0x1e6>
		  // do something
		  printf("could not read file, fresult is %d \r\n", fresult);
 80007de:	4b35      	ldr	r3, [pc, #212]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	4839      	ldr	r0, [pc, #228]	@ (80008cc <SDcardPlaySetup+0x2c4>)
 80007e6:	f007 fd03 	bl	80081f0 <iprintf>
		  while (1);
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <SDcardPlaySetup+0x1e2>
	  }
	  else{
		  printf("successfully read file!\r\n");
 80007ee:	484f      	ldr	r0, [pc, #316]	@ (800092c <SDcardPlaySetup+0x324>)
 80007f0:	f007 fd66 	bl	80082c0 <puts>
		  printf("the recording size is: %lu \r\n", recording_size);
 80007f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000928 <SDcardPlaySetup+0x320>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	484d      	ldr	r0, [pc, #308]	@ (8000930 <SDcardPlaySetup+0x328>)
 80007fc:	f007 fcf8 	bl	80081f0 <iprintf>
	  }

	  printf("-----------------------------------\r\n");
 8000800:	484c      	ldr	r0, [pc, #304]	@ (8000934 <SDcardPlaySetup+0x32c>)
 8000802:	f007 fd5d 	bl	80082c0 <puts>
	  HAL_Delay(10000);
 8000806:	f242 7010 	movw	r0, #10000	@ 0x2710
 800080a:	f000 ff89 	bl	8001720 <HAL_Delay>
	  // end of voice recording code
//	  if (playSong){
	  if (playSong){
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d036      	beq.n	8000882 <SDcardPlaySetup+0x27a>
		  fresult = f_lseek(&fil, 44);
 8000814:	212c      	movs	r1, #44	@ 0x2c
 8000816:	482b      	ldr	r0, [pc, #172]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 8000818:	f007 f989 	bl	8007b2e <f_lseek>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000822:	701a      	strb	r2, [r3, #0]
		  if (fresult != FR_OK){
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d007      	beq.n	800083c <SDcardPlaySetup+0x234>
			  // do something
			  printf("could not seek file, fresult is %d \r\n", fresult);
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	4841      	ldr	r0, [pc, #260]	@ (8000938 <SDcardPlaySetup+0x330>)
 8000834:	f007 fcdc 	bl	80081f0 <iprintf>
			  while (1);
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <SDcardPlaySetup+0x230>
		  }
		  else{
			  printf("successfully seek within file!\r\n");
 800083c:	483f      	ldr	r0, [pc, #252]	@ (800093c <SDcardPlaySetup+0x334>)
 800083e:	f007 fd3f 	bl	80082c0 <puts>
		  }

		  fresult = f_read(&fil, &recording_size, 4, (UINT *)fread_size);
 8000842:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <SDcardPlaySetup+0x31c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2204      	movs	r2, #4
 8000848:	4937      	ldr	r1, [pc, #220]	@ (8000928 <SDcardPlaySetup+0x320>)
 800084a:	481e      	ldr	r0, [pc, #120]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 800084c:	f007 f830 	bl	80078b0 <f_read>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000856:	701a      	strb	r2, [r3, #0]
		  if (fresult != FR_OK){
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <SDcardPlaySetup+0x268>
			  // do something
			  printf("could not read file, fresult is %d \r\n", fresult);
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	4819      	ldr	r0, [pc, #100]	@ (80008cc <SDcardPlaySetup+0x2c4>)
 8000868:	f007 fcc2 	bl	80081f0 <iprintf>
			  while (1);
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <SDcardPlaySetup+0x264>
		  }
		  else{
			  printf("successfully read file!\r\n");
 8000870:	482e      	ldr	r0, [pc, #184]	@ (800092c <SDcardPlaySetup+0x324>)
 8000872:	f007 fd25 	bl	80082c0 <puts>
			  printf("the recording size is: %lu \r\n", recording_size);
 8000876:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <SDcardPlaySetup+0x320>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	482c      	ldr	r0, [pc, #176]	@ (8000930 <SDcardPlaySetup+0x328>)
 800087e:	f007 fcb7 	bl	80081f0 <iprintf>

	  // from playback video, I think this was done wrong



	  fresult = f_lseek(&fil, 44);
 8000882:	212c      	movs	r1, #44	@ 0x2c
 8000884:	480f      	ldr	r0, [pc, #60]	@ (80008c4 <SDcardPlaySetup+0x2bc>)
 8000886:	f007 f952 	bl	8007b2e <f_lseek>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000890:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d052      	beq.n	8000940 <SDcardPlaySetup+0x338>
		  // do something
		  printf("could not seek file, fresult is %d \r\n", fresult);
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <SDcardPlaySetup+0x2ac>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <SDcardPlaySetup+0x330>)
 80008a2:	f007 fca5 	bl	80081f0 <iprintf>
		  while (1);
 80008a6:	bf00      	nop
 80008a8:	e7fd      	b.n	80008a6 <SDcardPlaySetup+0x29e>
 80008aa:	bf00      	nop
 80008ac:	08008fbc 	.word	0x08008fbc
 80008b0:	200000a8 	.word	0x200000a8
 80008b4:	20000508 	.word	0x20000508
 80008b8:	0800934c 	.word	0x0800934c
 80008bc:	08009374 	.word	0x08009374
 80008c0:	0800938c 	.word	0x0800938c
 80008c4:	200002d8 	.word	0x200002d8
 80008c8:	20000004 	.word	0x20000004
 80008cc:	08009394 	.word	0x08009394
 80008d0:	080093bc 	.word	0x080093bc
 80008d4:	080093d8 	.word	0x080093d8
 80008d8:	080093f8 	.word	0x080093f8
 80008dc:	08009418 	.word	0x08009418
 80008e0:	0800942c 	.word	0x0800942c
 80008e4:	0800944c 	.word	0x0800944c
 80008e8:	08009468 	.word	0x08009468
 80008ec:	08009478 	.word	0x08009478
 80008f0:	0800948c 	.word	0x0800948c
 80008f4:	0800949c 	.word	0x0800949c
 80008f8:	080094b0 	.word	0x080094b0
 80008fc:	080094c8 	.word	0x080094c8
 8000900:	080094dc 	.word	0x080094dc
 8000904:	080094f0 	.word	0x080094f0
 8000908:	08009504 	.word	0x08009504
 800090c:	08009514 	.word	0x08009514
 8000910:	08009528 	.word	0x08009528
 8000914:	0800953c 	.word	0x0800953c
 8000918:	08009550 	.word	0x08009550
 800091c:	08009568 	.word	0x08009568
 8000920:	08009584 	.word	0x08009584
 8000924:	20001e0c 	.word	0x20001e0c
 8000928:	20001e10 	.word	0x20001e10
 800092c:	080095a0 	.word	0x080095a0
 8000930:	080095bc 	.word	0x080095bc
 8000934:	080095dc 	.word	0x080095dc
 8000938:	08009604 	.word	0x08009604
 800093c:	0800962c 	.word	0x0800962c
	  }
	  else{
		  printf("successfully seek within file!\r\n");
 8000940:	4817      	ldr	r0, [pc, #92]	@ (80009a0 <SDcardPlaySetup+0x398>)
 8000942:	f007 fcbd 	bl	80082c0 <puts>
	  }
	  fresult = f_read(&fil, samples, WAV_READ_SAMPLE_COUNT*2, (UINT *)fread_size);
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <SDcardPlaySetup+0x39c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 800094e:	4916      	ldr	r1, [pc, #88]	@ (80009a8 <SDcardPlaySetup+0x3a0>)
 8000950:	4816      	ldr	r0, [pc, #88]	@ (80009ac <SDcardPlaySetup+0x3a4>)
 8000952:	f006 ffad 	bl	80078b0 <f_read>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <SDcardPlaySetup+0x3a8>)
 800095c:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <SDcardPlaySetup+0x3a8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d007      	beq.n	8000976 <SDcardPlaySetup+0x36e>
		  // do something
		  printf("could read file part 2, fresult is %d \r\n", fresult);
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <SDcardPlaySetup+0x3a8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <SDcardPlaySetup+0x3ac>)
 800096e:	f007 fc3f 	bl	80081f0 <iprintf>
		  while (1);
 8000972:	bf00      	nop
 8000974:	e7fd      	b.n	8000972 <SDcardPlaySetup+0x36a>
	  }
	  else{
		  printf("successfully read file part 2!\r\n");
 8000976:	4810      	ldr	r0, [pc, #64]	@ (80009b8 <SDcardPlaySetup+0x3b0>)
 8000978:	f007 fca2 	bl	80082c0 <puts>
	  }

	  recording_size /= 2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <SDcardPlaySetup+0x3b4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	4a0e      	ldr	r2, [pc, #56]	@ (80009bc <SDcardPlaySetup+0x3b4>)
 8000984:	6013      	str	r3, [r2, #0]

	  printf("============== done file operations!\r\n");
 8000986:	480e      	ldr	r0, [pc, #56]	@ (80009c0 <SDcardPlaySetup+0x3b8>)
 8000988:	f007 fc9a 	bl	80082c0 <puts>

	  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)samples, WAV_READ_SAMPLE_COUNT);
 800098c:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000990:	4905      	ldr	r1, [pc, #20]	@ (80009a8 <SDcardPlaySetup+0x3a0>)
 8000992:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <SDcardPlaySetup+0x3bc>)
 8000994:	f001 fed0 	bl	8002738 <HAL_I2S_Transmit_DMA>
}
 8000998:	bf00      	nop
 800099a:	3758      	adds	r7, #88	@ 0x58
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800962c 	.word	0x0800962c
 80009a4:	20001e0c 	.word	0x20001e0c
 80009a8:	2000050c 	.word	0x2000050c
 80009ac:	200002d8 	.word	0x200002d8
 80009b0:	20000508 	.word	0x20000508
 80009b4:	0800964c 	.word	0x0800964c
 80009b8:	08009678 	.word	0x08009678
 80009bc:	20001e10 	.word	0x20001e10
 80009c0:	08009698 	.word	0x08009698
 80009c4:	20003850 	.word	0x20003850

080009c8 <handleSDCardPlayback>:


void handleSDCardPlayback(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
    // original video code
  if (callback_result == FULL_COMPLETED){
 80009ce:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <handleSDCardPlayback+0x90>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d116      	bne.n	8000a06 <handleSDCardPlayback+0x3e>
	  UINT bytesRead = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
	  // finsihed transmitting I2S out of second half of array
	  // so ready data into second half of array

//		  f_read(&fil, &samples[16000], 32000, (UINT *) fread_size);
	  f_read(&fil, &samples[WAV_READ_SAMPLE_COUNT/2], WAV_READ_SAMPLE_COUNT, &bytesRead);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80009e2:	491e      	ldr	r1, [pc, #120]	@ (8000a5c <handleSDCardPlayback+0x94>)
 80009e4:	481e      	ldr	r0, [pc, #120]	@ (8000a60 <handleSDCardPlayback+0x98>)
 80009e6:	f006 ff63 	bl	80078b0 <f_read>
	  played_size += WAV_READ_SAMPLE_COUNT;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <handleSDCardPlayback+0x9c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 80009f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <handleSDCardPlayback+0x9c>)
 80009f4:	6013      	str	r3, [r2, #0]
	  printf("%u bytes, callback result full completed -> unknown \r\n", bytesRead);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4619      	mov	r1, r3
 80009fa:	481b      	ldr	r0, [pc, #108]	@ (8000a68 <handleSDCardPlayback+0xa0>)
 80009fc:	f007 fbf8 	bl	80081f0 <iprintf>
	  callback_result = UNKNOWN;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <handleSDCardPlayback+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
  }

  if (callback_result == HALF_COMPLETED){
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <handleSDCardPlayback+0x90>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d110      	bne.n	8000a32 <handleSDCardPlayback+0x6a>
	  UINT bytesRead = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
	  // finish transmitting I2S out of first half of array
	  // so read data into first half of array
	  f_read(&fil, &samples[0], WAV_READ_SAMPLE_COUNT, &bytesRead);
 8000a14:	463b      	mov	r3, r7
 8000a16:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000a1a:	4914      	ldr	r1, [pc, #80]	@ (8000a6c <handleSDCardPlayback+0xa4>)
 8000a1c:	4810      	ldr	r0, [pc, #64]	@ (8000a60 <handleSDCardPlayback+0x98>)
 8000a1e:	f006 ff47 	bl	80078b0 <f_read>
//		  f_read(&fil, &samples[0], 32000, (UINT *) fread_size);
	  printf("%u bytes read, callback result half completed -> unknown \r\n", bytesRead);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4812      	ldr	r0, [pc, #72]	@ (8000a70 <handleSDCardPlayback+0xa8>)
 8000a28:	f007 fbe2 	bl	80081f0 <iprintf>
	  callback_result = UNKNOWN;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <handleSDCardPlayback+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
  }


  if (played_size >= recording_size){
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <handleSDCardPlayback+0x9c>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <handleSDCardPlayback+0xac>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d308      	bcc.n	8000a50 <handleSDCardPlayback+0x88>
	  HAL_I2S_DMAStop(&hi2s2);
 8000a3e:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <handleSDCardPlayback+0xb0>)
 8000a40:	f001 ff1e 	bl	8002880 <HAL_I2S_DMAStop>
	  printf("done DMA transfer \r\n");
 8000a44:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <handleSDCardPlayback+0xb4>)
 8000a46:	f007 fc3b 	bl	80082c0 <puts>
	  donePlayback = 1;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <handleSDCardPlayback+0xb8>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
  }

}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20001e19 	.word	0x20001e19
 8000a5c:	2000118c 	.word	0x2000118c
 8000a60:	200002d8 	.word	0x200002d8
 8000a64:	20001e14 	.word	0x20001e14
 8000a68:	080096c0 	.word	0x080096c0
 8000a6c:	2000050c 	.word	0x2000050c
 8000a70:	080096f8 	.word	0x080096f8
 8000a74:	20001e10 	.word	0x20001e10
 8000a78:	20003850 	.word	0x20003850
 8000a7c:	08009734 	.word	0x08009734
 8000a80:	20001e18 	.word	0x20001e18

08000a84 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)  // Replace with your pin
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a94:	d118      	bne.n	8000ac8 <HAL_GPIO_EXTI_Callback+0x44>
    {
        // Your interrupt handling code here
    	char str[] = "button pressed \r\n";
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a98:	f107 040c 	add.w	r4, r7, #12
 8000a9c:	461d      	mov	r5, r3
 8000a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	8023      	strh	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, (const uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fb98 	bl	80001e0 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f107 010c 	add.w	r1, r7, #12
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000abe:	f003 ff1b 	bl	80048f8 <HAL_UART_Transmit>

    	button_flag = 1;
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]

    }
}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad0:	08009748 	.word	0x08009748
 8000ad4:	200039f8 	.word	0x200039f8
 8000ad8:	20001e1b 	.word	0x20001e1b

08000adc <_write>:

int _write(int file, char *ptr, int len) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <_write+0x28>)
 8000af4:	f003 ff00 	bl	80048f8 <HAL_UART_Transmit>
    return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200039f8 	.word	0x200039f8

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f000 fd96 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f83c 	bl	8000b8c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b14:	f000 f8a4 	bl	8000c60 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 f9a4 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1c:	f000 f97a 	bl	8000e14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b20:	f000 f94e 	bl	8000dc0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000b24:	f000 f916 	bl	8000d54 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000b28:	f004 faa2 	bl	8005070 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000b2c:	f000 f8b6 	bl	8000c9c <MX_I2S2_Init>
  MX_I2S3_Init();
 8000b30:	f000 f8e2 	bl	8000cf8 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000b34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b38:	f000 fdf2 	bl	8001720 <HAL_Delay>
  sd_card_init();
 8000b3c:	f7ff fd3e 	bl	80005bc <sd_card_init>

  printf("start...\r\n");
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <main+0x6c>)
 8000b42:	f007 fbbd 	bl	80082c0 <puts>
//  testSDCard();


  playback = 0;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <main+0x70>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
//
//  printf("done recording, saved to file %s", recordingFile);
//
//  playback = 1;

  SDcardPlaySetup(0);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fd5b 	bl	8000608 <SDcardPlaySetup>
  printf("done setup, about to play file %s \r\n", playbackFile);
 8000b52:	490a      	ldr	r1, [pc, #40]	@ (8000b7c <main+0x74>)
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <main+0x78>)
 8000b56:	f007 fb4b 	bl	80081f0 <iprintf>


  while (!donePlayback){
 8000b5a:	e001      	b.n	8000b60 <main+0x58>
	  handleSDCardPlayback();
 8000b5c:	f7ff ff34 	bl	80009c8 <handleSDCardPlayback>
  while (!donePlayback){
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <main+0x7c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <main+0x54>
  }

  printf("done everything\r\n");
 8000b68:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <main+0x80>)
 8000b6a:	f007 fba9 	bl	80082c0 <puts>
  while(1);
 8000b6e:	bf00      	nop
 8000b70:	e7fd      	b.n	8000b6e <main+0x66>
 8000b72:	bf00      	nop
 8000b74:	0800975c 	.word	0x0800975c
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	08009768 	.word	0x08009768
 8000b84:	20001e18 	.word	0x20001e18
 8000b88:	08009790 	.word	0x08009790

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	@ 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	2230      	movs	r2, #48	@ 0x30
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f007 fc70 	bl	8008480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a27      	ldr	r2, [pc, #156]	@ (8000c58 <SystemClock_Config+0xcc>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <SystemClock_Config+0xcc>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd8:	4a20      	ldr	r2, [pc, #128]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c00:	2308      	movs	r3, #8
 8000c02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c04:	2354      	movs	r3, #84	@ 0x54
 8000c06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 fbe7 	bl	80033e8 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c20:	f000 f9e6 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2102      	movs	r1, #2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fe49 	bl	80038d8 <HAL_RCC_ClockConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c4c:	f000 f9d0 	bl	8000ff0 <Error_Handler>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3750      	adds	r7, #80	@ 0x50
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000

08000c60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c74:	2301      	movs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000c78:	2360      	movs	r3, #96	@ 0x60
 8000c7a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 f848 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000c8e:	f000 f9af 	bl	8000ff0 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000ca2:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <MX_I2S2_Init+0x58>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cc0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000cc4:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000cc8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_I2S2_Init+0x54>)
 8000cde:	f001 fbeb 	bl	80024b8 <HAL_I2S_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ce8:	f000 f982 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20003850 	.word	0x20003850
 8000cf4:	40003800 	.word	0x40003800

08000cf8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000cfe:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <MX_I2S3_Init+0x58>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d04:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d08:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d1e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d22:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_I2S3_Init+0x54>)
 8000d38:	f001 fbbe 	bl	80024b8 <HAL_I2S_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d42:	f000 f955 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20003898 	.word	0x20003898
 8000d50:	40003c00 	.word	0x40003c00

08000d54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	@ (8000dbc <MX_SPI1_Init+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d88:	2218      	movs	r2, #24
 8000d8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000da0:	220a      	movs	r2, #10
 8000da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <MX_SPI1_Init+0x64>)
 8000da6:	f003 f905 	bl	8003fb4 <HAL_SPI_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db0:	f000 f91e 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200039a0 	.word	0x200039a0
 8000dbc:	40013000 	.word	0x40013000

08000dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000df8:	f003 fd2e 	bl	8004858 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e02:	f000 f8f5 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200039f8 	.word	0x200039f8
 8000e10:	40004400 	.word	0x40004400

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_DMA_Init+0x4c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a0f      	ldr	r2, [pc, #60]	@ (8000e60 <MX_DMA_Init+0x4c>)
 8000e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_DMA_Init+0x4c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200b      	movs	r0, #11
 8000e3c:	f000 fd6f 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e40:	200b      	movs	r0, #11
 8000e42:	f000 fd88 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 fd67 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e50:	200f      	movs	r0, #15
 8000e52:	f000 fd80 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b34      	ldr	r3, [pc, #208]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a33      	ldr	r2, [pc, #204]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a25      	ldr	r2, [pc, #148]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_GPIO_Init+0xec>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	4819      	ldr	r0, [pc, #100]	@ (8000f54 <MX_GPIO_Init+0xf0>)
 8000ef0:	f001 fab0 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	4816      	ldr	r0, [pc, #88]	@ (8000f54 <MX_GPIO_Init+0xf0>)
 8000efa:	f001 faab 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_PB_Pin */
  GPIO_InitStruct.Pin = BLUE_PB_Pin;
 8000efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_PB_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4810      	ldr	r0, [pc, #64]	@ (8000f58 <MX_GPIO_Init+0xf4>)
 8000f16:	f001 f919 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LD3_Pin;
 8000f1a:	2330      	movs	r3, #48	@ 0x30
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <MX_GPIO_Init+0xf0>)
 8000f32:	f001 f90b 	bl	800214c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2028      	movs	r0, #40	@ 0x28
 8000f3c:	f000 fcef 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f40:	2028      	movs	r0, #40	@ 0x28
 8000f42:	f000 fd08 	bl	8001956 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	@ 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020800 	.word	0x40020800

08000f5c <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef * hi2s){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	callback_result = HALF_COMPLETED;
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
	printf("HALF callback\r\n");
 8000f6a:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000f6c:	f007 f9a8 	bl	80082c0 <puts>


}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20001e19 	.word	0x20001e19
 8000f7c:	080097a4 	.word	0x080097a4

08000f80 <HAL_I2S_TxCpltCallback>:



void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef * hi2s){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	// whenever called, 32000 samples already got played
	callback_result = FULL_COMPLETED;
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <HAL_I2S_TxCpltCallback+0x1c>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
//	played_size += WAV_READ_SAMPLE_COUNT;
	printf("FULL callback\r\n");
 8000f8e:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <HAL_I2S_TxCpltCallback+0x20>)
 8000f90:	f007 f996 	bl	80082c0 <puts>


}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20001e19 	.word	0x20001e19
 8000fa0:	080097b4 	.word	0x080097b4

08000fa4 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef * hi2s){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < WAV_WRITE_SAMPLE_COUNT/2; i++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e00b      	b.n	8000fca <HAL_I2S_RxCpltCallback+0x26>
	    mono_sample_i2s[i] = data_i2s[2 * i];  // Keep every other (left)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <HAL_I2S_RxCpltCallback+0x40>)
 8000fb8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_I2S_RxCpltCallback+0x44>)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < WAV_WRITE_SAMPLE_COUNT/2; i++) {
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fd0:	dbef      	blt.n	8000fb2 <HAL_I2S_RxCpltCallback+0xe>
	}

	full_i2s = 1;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_I2S_RxCpltCallback+0x48>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20001e1c 	.word	0x20001e1c
 8000fe8:	20002e1c 	.word	0x20002e1c
 8000fec:	20001e1a 	.word	0x20001e1a

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <HAL_MspInit+0x4c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	@ 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a8a      	ldr	r2, [pc, #552]	@ (8001294 <HAL_I2S_MspInit+0x248>)
 800106a:	4293      	cmp	r3, r2
 800106c:	f040 808c 	bne.w	8001188 <HAL_I2S_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	4b88      	ldr	r3, [pc, #544]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a87      	ldr	r2, [pc, #540]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001080:	4b85      	ldr	r3, [pc, #532]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	4b81      	ldr	r3, [pc, #516]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	4a80      	ldr	r2, [pc, #512]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6313      	str	r3, [r2, #48]	@ 0x30
 800109c:	4b7e      	ldr	r3, [pc, #504]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	4b7a      	ldr	r3, [pc, #488]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	4a79      	ldr	r2, [pc, #484]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b8:	4b77      	ldr	r3, [pc, #476]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010c4:	2304      	movs	r3, #4
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80010d4:	2306      	movs	r3, #6
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	486f      	ldr	r0, [pc, #444]	@ (800129c <HAL_I2S_MspInit+0x250>)
 80010e0:	f001 f834 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80010e4:	2348      	movs	r3, #72	@ 0x48
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f4:	2305      	movs	r3, #5
 80010f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	4867      	ldr	r0, [pc, #412]	@ (800129c <HAL_I2S_MspInit+0x250>)
 8001100:	f001 f824 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001104:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001116:	2305      	movs	r3, #5
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	485f      	ldr	r0, [pc, #380]	@ (80012a0 <HAL_I2S_MspInit+0x254>)
 8001122:	f001 f813 	bl	800214c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001126:	4b5f      	ldr	r3, [pc, #380]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001128:	4a5f      	ldr	r2, [pc, #380]	@ (80012a8 <HAL_I2S_MspInit+0x25c>)
 800112a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800112c:	4b5d      	ldr	r3, [pc, #372]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001132:	4b5c      	ldr	r3, [pc, #368]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001134:	2240      	movs	r2, #64	@ 0x40
 8001136:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b5a      	ldr	r3, [pc, #360]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b59      	ldr	r3, [pc, #356]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001146:	4b57      	ldr	r3, [pc, #348]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001148:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800114c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114e:	4b55      	ldr	r3, [pc, #340]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001154:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001156:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800115e:	4b51      	ldr	r3, [pc, #324]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001164:	4b4f      	ldr	r3, [pc, #316]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800116a:	484e      	ldr	r0, [pc, #312]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 800116c:	f000 fc0e 	bl	800198c <HAL_DMA_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2S_MspInit+0x12e>
    {
      Error_Handler();
 8001176:	f7ff ff3b 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a49      	ldr	r2, [pc, #292]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 800117e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001180:	4a48      	ldr	r2, [pc, #288]	@ (80012a4 <HAL_I2S_MspInit+0x258>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001186:	e080      	b.n	800128a <HAL_I2S_MspInit+0x23e>
  else if(hi2s->Instance==SPI3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a47      	ldr	r2, [pc, #284]	@ (80012ac <HAL_I2S_MspInit+0x260>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d17b      	bne.n	800128a <HAL_I2S_MspInit+0x23e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a3f      	ldr	r2, [pc, #252]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 800119c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a38      	ldr	r2, [pc, #224]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a31      	ldr	r2, [pc, #196]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_I2S_MspInit+0x24c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f8:	2306      	movs	r3, #6
 80011fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	482b      	ldr	r0, [pc, #172]	@ (80012b0 <HAL_I2S_MspInit+0x264>)
 8001204:	f000 ffa2 	bl	800214c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001208:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800121a:	2306      	movs	r3, #6
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	481d      	ldr	r0, [pc, #116]	@ (800129c <HAL_I2S_MspInit+0x250>)
 8001226:	f000 ff91 	bl	800214c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 800122c:	4a22      	ldr	r2, [pc, #136]	@ (80012b8 <HAL_I2S_MspInit+0x26c>)
 800122e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001230:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001242:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001244:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001248:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 800124c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001250:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001258:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 800125c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001260:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800126e:	4811      	ldr	r0, [pc, #68]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001270:	f000 fb8c 	bl	800198c <HAL_DMA_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_I2S_MspInit+0x232>
      Error_Handler();
 800127a:	f7ff feb9 	bl	8000ff0 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001282:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <HAL_I2S_MspInit+0x268>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800128a:	bf00      	nop
 800128c:	3738      	adds	r7, #56	@ 0x38
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40003800 	.word	0x40003800
 8001298:	40023800 	.word	0x40023800
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020400 	.word	0x40020400
 80012a4:	200038e0 	.word	0x200038e0
 80012a8:	40026070 	.word	0x40026070
 80012ac:	40003c00 	.word	0x40003c00
 80012b0:	40020000 	.word	0x40020000
 80012b4:	20003940 	.word	0x20003940
 80012b8:	40026010 	.word	0x40026010

080012bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <HAL_SPI_MspInit+0xc0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d149      	bne.n	8001372 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a26      	ldr	r2, [pc, #152]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b24      	ldr	r3, [pc, #144]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_SPI_MspInit+0xc4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001332:	23c0      	movs	r3, #192	@ 0xc0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <HAL_SPI_MspInit+0xc8>)
 800134e:	f000 fefd 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001352:	2308      	movs	r3, #8
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001362:	2305      	movs	r3, #5
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4806      	ldr	r0, [pc, #24]	@ (8001388 <HAL_SPI_MspInit+0xcc>)
 800136e:	f000 feed 	bl	800214c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40013000 	.word	0x40013000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400

0800138c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_UART_MspInit+0x84>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_UART_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x88>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_UART_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_UART_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <HAL_UART_MspInit+0x88>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HAL_UART_MspInit+0x88>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013e6:	230c      	movs	r3, #12
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f6:	2307      	movs	r3, #7
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <HAL_UART_MspInit+0x8c>)
 8001402:	f000 fea3 	bl	800214c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40004400 	.word	0x40004400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 f935 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA1_Stream0_IRQHandler+0x10>)
 8001482:	f000 fbf9 	bl	8001c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20003940 	.word	0x20003940

08001490 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Stream4_IRQHandler+0x10>)
 8001496:	f000 fbef 	bl	8001c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200038e0 	.word	0x200038e0

080014a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_PB_Pin);
 80014a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014ac:	f000 ffec 	bl	8002488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
  }

  return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001516:	605a      	str	r2, [r3, #4]
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <_isatty>:

int _isatty(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f006 ffc8 	bl	800851c <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20018000 	.word	0x20018000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	20003a40 	.word	0x20003a40
 80015c0:	20003be0 	.word	0x20003be0

080015c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001620 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015ec:	f7ff ffea 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f0:	480c      	ldr	r0, [pc, #48]	@ (8001624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f2:	490d      	ldr	r1, [pc, #52]	@ (8001628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001608:	4c0a      	ldr	r4, [pc, #40]	@ (8001634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001616:	f006 ff87 	bl	8008528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161a:	f7ff fa75 	bl	8000b08 <main>
  bx  lr    
 800161e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001620:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800162c:	080098ec 	.word	0x080098ec
  ldr r2, =_sbss
 8001630:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001634:	20003bdc 	.word	0x20003bdc

08001638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <HAL_Init+0x40>)
 8001646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <HAL_Init+0x40>)
 8001652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	@ (800167c <HAL_Init+0x40>)
 800165e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f94f 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff fcc4 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f967 	bl	8001972 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f92f 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	@ (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	20000014 	.word	0x20000014
 80016dc:	20000010 	.word	0x20000010

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000014 	.word	0x20000014
 8001704:	20003a44 	.word	0x20003a44

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20003a44 	.word	0x20003a44

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000014 	.word	0x20000014

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	@ (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	@ (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	@ (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	@ 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff feb6 	bl	8001708 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e099      	b.n	8001adc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c8:	e00f      	b.n	80019ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ca:	f7ff fe9d 	bl	8001708 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d908      	bls.n	80019ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e078      	b.n	8001adc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e8      	bne.n	80019ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_DMA_Init+0x158>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d107      	bne.n	8001a54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d117      	bne.n	8001aae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fadf 	bl	8002054 <DMA_CheckFifoParam>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2240      	movs	r2, #64	@ 0x40
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e016      	b.n	8001adc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fa96 	bl	8001fe8 <DMA_CalcBaseAndBitshift>
 8001abc:	4603      	mov	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	223f      	movs	r2, #63	@ 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	f010803f 	.word	0xf010803f

08001ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_DMA_Start_IT+0x26>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e040      	b.n	8001b90 <HAL_DMA_Start_IT+0xa8>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d12f      	bne.n	8001b82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa28 	bl	8001f8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b40:	223f      	movs	r2, #63	@ 0x3f
 8001b42:	409a      	lsls	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0216 	orr.w	r2, r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e005      	b.n	8001b8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba6:	f7ff fdaf 	bl	8001708 <HAL_GetTick>
 8001baa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d008      	beq.n	8001bca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e052      	b.n	8001c70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0216 	bic.w	r2, r2, #22
 8001bd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001be8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <HAL_DMA_Abort+0x62>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0208 	bic.w	r2, r2, #8
 8001c08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1a:	e013      	b.n	8001c44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1c:	f7ff fd74 	bl	8001708 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d90c      	bls.n	8001c44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e015      	b.n	8001c70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1e4      	bne.n	8001c1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c56:	223f      	movs	r2, #63	@ 0x3f
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c84:	4b8e      	ldr	r3, [pc, #568]	@ (8001ec0 <HAL_DMA_IRQHandler+0x248>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec4 <HAL_DMA_IRQHandler+0x24c>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0a9b      	lsrs	r3, r3, #10
 8001c90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01a      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0204 	bic.w	r2, r2, #4
 8001cca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce8:	2201      	movs	r2, #1
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	2201      	movs	r2, #1
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d12:	f043 0202 	orr.w	r2, r3, #2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	2204      	movs	r2, #4
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d012      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d48:	f043 0204 	orr.w	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d54:	2210      	movs	r2, #16
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d043      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03c      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	2210      	movs	r2, #16
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d018      	beq.n	8001dba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d108      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d024      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
 8001da6:	e01f      	b.n	8001de8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e016      	b.n	8001de8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0208 	bic.w	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2220      	movs	r2, #32
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 808f 	beq.w	8001f18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8087 	beq.w	8001f18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0e:	2220      	movs	r2, #32
 8001e10:	409a      	lsls	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d136      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0216 	bic.w	r2, r2, #22
 8001e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <HAL_DMA_IRQHandler+0x1da>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0208 	bic.w	r2, r2, #8
 8001e60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	223f      	movs	r2, #63	@ 0x3f
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d07e      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	4798      	blx	r3
        }
        return;
 8001e8e:	e079      	b.n	8001f84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d01d      	beq.n	8001eda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d031      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
 8001ebc:	e02c      	b.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
 8001ebe:	bf00      	nop
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e01e      	b.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10f      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0210 	bic.w	r2, r2, #16
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d032      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d022      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2205      	movs	r2, #5
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3301      	adds	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d307      	bcc.n	8001f60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f2      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x2cc>
 8001f5e:	e000      	b.n	8001f62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
 8001f82:	e000      	b.n	8001f86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f84:	bf00      	nop
    }
  }
}
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b40      	cmp	r3, #64	@ 0x40
 8001fb8:	d108      	bne.n	8001fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fca:	e007      	b.n	8001fdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	60da      	str	r2, [r3, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3b10      	subs	r3, #16
 8001ff8:	4a14      	ldr	r2, [pc, #80]	@ (800204c <DMA_CalcBaseAndBitshift+0x64>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002002:	4a13      	ldr	r2, [pc, #76]	@ (8002050 <DMA_CalcBaseAndBitshift+0x68>)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d909      	bls.n	800202a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	1d1a      	adds	r2, r3, #4
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	659a      	str	r2, [r3, #88]	@ 0x58
 8002028:	e007      	b.n	800203a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	aaaaaaab 	.word	0xaaaaaaab
 8002050:	08009820 	.word	0x08009820

08002054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d11f      	bne.n	80020ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d856      	bhi.n	8002122 <DMA_CheckFifoParam+0xce>
 8002074:	a201      	add	r2, pc, #4	@ (adr r2, 800207c <DMA_CheckFifoParam+0x28>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	0800209f 	.word	0x0800209f
 8002084:	0800208d 	.word	0x0800208d
 8002088:	08002123 	.word	0x08002123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d046      	beq.n	8002126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209c:	e043      	b.n	8002126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020a6:	d140      	bne.n	800212a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e03d      	b.n	800212a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b6:	d121      	bne.n	80020fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d837      	bhi.n	800212e <DMA_CheckFifoParam+0xda>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <DMA_CheckFifoParam+0x70>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020db 	.word	0x080020db
 80020cc:	080020d5 	.word	0x080020d5
 80020d0:	080020ed 	.word	0x080020ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      break;
 80020d8:	e030      	b.n	800213c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d025      	beq.n	8002132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ea:	e022      	b.n	8002132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020f4:	d11f      	bne.n	8002136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020fa:	e01c      	b.n	8002136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d903      	bls.n	800210a <DMA_CheckFifoParam+0xb6>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d003      	beq.n	8002110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002108:	e018      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
      break;
 800210e:	e015      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      break;
 8002120:	e00b      	b.n	800213a <DMA_CheckFifoParam+0xe6>
      break;
 8002122:	bf00      	nop
 8002124:	e00a      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e008      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e006      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e004      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e002      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;   
 8002136:	bf00      	nop
 8002138:	e000      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
    }
  } 
  
  return status; 
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e159      	b.n	800241c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8148 	bne.w	8002416 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d005      	beq.n	800219e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	2b02      	cmp	r3, #2
 800219c:	d130      	bne.n	8002200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 0201 	and.w	r2, r3, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b03      	cmp	r3, #3
 800220a:	d017      	beq.n	800223c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d123      	bne.n	8002290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a2 	beq.w	8002416 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b57      	ldr	r3, [pc, #348]	@ (8002434 <HAL_GPIO_Init+0x2e8>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a56      	ldr	r2, [pc, #344]	@ (8002434 <HAL_GPIO_Init+0x2e8>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <HAL_GPIO_Init+0x2e8>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ee:	4a52      	ldr	r2, [pc, #328]	@ (8002438 <HAL_GPIO_Init+0x2ec>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a49      	ldr	r2, [pc, #292]	@ (800243c <HAL_GPIO_Init+0x2f0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x202>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a48      	ldr	r2, [pc, #288]	@ (8002440 <HAL_GPIO_Init+0x2f4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x1fe>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a47      	ldr	r2, [pc, #284]	@ (8002444 <HAL_GPIO_Init+0x2f8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x1fa>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a46      	ldr	r2, [pc, #280]	@ (8002448 <HAL_GPIO_Init+0x2fc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x1f6>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a45      	ldr	r2, [pc, #276]	@ (800244c <HAL_GPIO_Init+0x300>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x1f2>
 800233a:	2304      	movs	r3, #4
 800233c:	e008      	b.n	8002350 <HAL_GPIO_Init+0x204>
 800233e:	2307      	movs	r3, #7
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x204>
 8002342:	2303      	movs	r3, #3
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x204>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x204>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x204>
 800234e:	2300      	movs	r3, #0
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	4093      	lsls	r3, r2
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002360:	4935      	ldr	r1, [pc, #212]	@ (8002438 <HAL_GPIO_Init+0x2ec>)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <HAL_GPIO_Init+0x304>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002392:	4a2f      	ldr	r2, [pc, #188]	@ (8002450 <HAL_GPIO_Init+0x304>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002398:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_GPIO_Init+0x304>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023bc:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <HAL_GPIO_Init+0x304>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c2:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_GPIO_Init+0x304>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002450 <HAL_GPIO_Init+0x304>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ec:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <HAL_GPIO_Init+0x304>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002410:	4a0f      	ldr	r2, [pc, #60]	@ (8002450 <HAL_GPIO_Init+0x304>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3301      	adds	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b0f      	cmp	r3, #15
 8002420:	f67f aea2 	bls.w	8002168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3724      	adds	r7, #36	@ 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40013800 	.word	0x40013800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020400 	.word	0x40020400
 8002444:	40020800 	.word	0x40020800
 8002448:	40020c00 	.word	0x40020c00
 800244c:	40021000 	.word	0x40021000
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002470:	e003      	b.n	800247a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe faec 	bl	8000a84 <HAL_GPIO_EXTI_Callback>
  }
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e128      	b.n	800271c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a90      	ldr	r2, [pc, #576]	@ (8002724 <HAL_I2S_Init+0x26c>)
 80024e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7fe fdb1 	bl	800104c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002500:	f023 030f 	bic.w	r3, r3, #15
 8002504:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2202      	movs	r2, #2
 800250c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d060      	beq.n	80025d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800251e:	2310      	movs	r3, #16
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e001      	b.n	8002528 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b20      	cmp	r3, #32
 800252e:	d802      	bhi.n	8002536 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002536:	2001      	movs	r0, #1
 8002538:	f001 fcdc 	bl	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq>
 800253c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002546:	d125      	bne.n	8002594 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d010      	beq.n	8002572 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	fbb2 f2f3 	udiv	r2, r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	3305      	adds	r3, #5
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e01f      	b.n	80025b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	fbb2 f2f3 	udiv	r2, r2, r3
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	3305      	adds	r3, #5
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	e00e      	b.n	80025b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	fbb2 f2f3 	udiv	r2, r2, r3
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ae:	3305      	adds	r3, #5
 80025b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002728 <HAL_I2S_Init+0x270>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	08db      	lsrs	r3, r3, #3
 80025bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e003      	b.n	80025e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025d8:	2302      	movs	r3, #2
 80025da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d902      	bls.n	80025ec <HAL_I2S_Init+0x134>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2bff      	cmp	r3, #255	@ 0xff
 80025ea:	d907      	bls.n	80025fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f0:	f043 0210 	orr.w	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e08f      	b.n	800271c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	ea42 0103 	orr.w	r1, r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	430a      	orrs	r2, r1
 800260e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800261a:	f023 030f 	bic.w	r3, r3, #15
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6851      	ldr	r1, [r2, #4]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6892      	ldr	r2, [r2, #8]
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68d2      	ldr	r2, [r2, #12]
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6992      	ldr	r2, [r2, #24]
 8002632:	430a      	orrs	r2, r1
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800263e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d161      	bne.n	800270c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a38      	ldr	r2, [pc, #224]	@ (800272c <HAL_I2S_Init+0x274>)
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a37      	ldr	r2, [pc, #220]	@ (8002730 <HAL_I2S_Init+0x278>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_I2S_Init+0x1a4>
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <HAL_I2S_Init+0x27c>)
 800265a:	e001      	b.n	8002660 <HAL_I2S_Init+0x1a8>
 800265c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	4932      	ldr	r1, [pc, #200]	@ (8002730 <HAL_I2S_Init+0x278>)
 8002668:	428a      	cmp	r2, r1
 800266a:	d101      	bne.n	8002670 <HAL_I2S_Init+0x1b8>
 800266c:	4a31      	ldr	r2, [pc, #196]	@ (8002734 <HAL_I2S_Init+0x27c>)
 800266e:	e001      	b.n	8002674 <HAL_I2S_Init+0x1bc>
 8002670:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002674:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002678:	f023 030f 	bic.w	r3, r3, #15
 800267c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2b      	ldr	r2, [pc, #172]	@ (8002730 <HAL_I2S_Init+0x278>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_I2S_Init+0x1d4>
 8002688:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_I2S_Init+0x27c>)
 800268a:	e001      	b.n	8002690 <HAL_I2S_Init+0x1d8>
 800268c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002690:	2202      	movs	r2, #2
 8002692:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <HAL_I2S_Init+0x278>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_I2S_Init+0x1ea>
 800269e:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_I2S_Init+0x27c>)
 80026a0:	e001      	b.n	80026a6 <HAL_I2S_Init+0x1ee>
 80026a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b2:	d003      	beq.n	80026bc <HAL_I2S_Init+0x204>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	e001      	b.n	80026c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026dc:	4313      	orrs	r3, r2
 80026de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026e6:	4313      	orrs	r3, r2
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <HAL_I2S_Init+0x278>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_I2S_Init+0x24c>
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <HAL_I2S_Init+0x27c>)
 8002702:	e001      	b.n	8002708 <HAL_I2S_Init+0x250>
 8002704:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002708:	897a      	ldrh	r2, [r7, #10]
 800270a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	08002dad 	.word	0x08002dad
 8002728:	cccccccd 	.word	0xcccccccd
 800272c:	08002f35 	.word	0x08002f35
 8002730:	40003800 	.word	0x40003800
 8002734:	40003400 	.word	0x40003400

08002738 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_I2S_Transmit_DMA+0x1a>
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e08a      	b.n	800286c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d001      	beq.n	8002766 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	e082      	b.n	800286c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_I2S_Transmit_DMA+0x3e>
 8002772:	2302      	movs	r3, #2
 8002774:	e07a      	b.n	800286c <HAL_I2S_Transmit_DMA+0x134>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2203      	movs	r2, #3
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d002      	beq.n	80027aa <HAL_I2S_Transmit_DMA+0x72>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d10a      	bne.n	80027c0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027be:	e005      	b.n	80027cc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d0:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <HAL_I2S_Transmit_DMA+0x13c>)
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d8:	4a27      	ldr	r2, [pc, #156]	@ (8002878 <HAL_I2S_Transmit_DMA+0x140>)
 80027da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	4a26      	ldr	r2, [pc, #152]	@ (800287c <HAL_I2S_Transmit_DMA+0x144>)
 80027e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027ec:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027f4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027fc:	f7ff f974 	bl	8001ae8 <HAL_DMA_Start_IT>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00f      	beq.n	8002826 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	f043 0208 	orr.w	r2, r3, #8
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0202 	orr.w	r2, r2, #2
 800284a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002868:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	08002c8b 	.word	0x08002c8b
 8002878:	08002c49 	.word	0x08002c49
 800287c:	08002ca7 	.word	0x08002ca7

08002880 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002894:	d004      	beq.n	80028a0 <HAL_I2S_DMAStop+0x20>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 80d1 	bne.w	8002a42 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00f      	beq.n	80028c8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f973 	bl	8001b98 <HAL_DMA_Abort>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f043 0208 	orr.w	r2, r3, #8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80028c8:	2364      	movs	r3, #100	@ 0x64
 80028ca:	2201      	movs	r2, #1
 80028cc:	2102      	movs	r1, #2
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 faf6 	bl	8002ec0 <I2S_WaitFlagStateUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80028f2:	2364      	movs	r3, #100	@ 0x64
 80028f4:	2200      	movs	r2, #0
 80028f6:	2180      	movs	r1, #128	@ 0x80
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fae1 	bl	8002ec0 <I2S_WaitFlagStateUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800292a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0202 	bic.w	r2, r2, #2
 8002948:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b05      	cmp	r3, #5
 8002954:	f040 8165 	bne.w	8002c22 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00f      	beq.n	8002980 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff f917 	bl	8001b98 <HAL_DMA_Abort>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	f043 0208 	orr.w	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a8a      	ldr	r2, [pc, #552]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <HAL_I2S_DMAStop+0x10e>
 800298a:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 800298c:	e001      	b.n	8002992 <HAL_I2S_DMAStop+0x112>
 800298e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4985      	ldr	r1, [pc, #532]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 800299a:	428b      	cmp	r3, r1
 800299c:	d101      	bne.n	80029a2 <HAL_I2S_DMAStop+0x122>
 800299e:	4b85      	ldr	r3, [pc, #532]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 80029a0:	e001      	b.n	80029a6 <HAL_I2S_DMAStop+0x126>
 80029a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029aa:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_I2S_DMAStop+0x13e>
 80029ba:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 80029bc:	e001      	b.n	80029c2 <HAL_I2S_DMAStop+0x142>
 80029be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a79      	ldr	r2, [pc, #484]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_I2S_DMAStop+0x154>
 80029d0:	4b78      	ldr	r3, [pc, #480]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 80029d2:	e001      	b.n	80029d8 <HAL_I2S_DMAStop+0x158>
 80029d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a73      	ldr	r2, [pc, #460]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_I2S_DMAStop+0x16c>
 80029e8:	4b72      	ldr	r3, [pc, #456]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 80029ea:	e001      	b.n	80029f0 <HAL_I2S_DMAStop+0x170>
 80029ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	496e      	ldr	r1, [pc, #440]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d101      	bne.n	8002a00 <HAL_I2S_DMAStop+0x180>
 80029fc:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 80029fe:	e001      	b.n	8002a04 <HAL_I2S_DMAStop+0x184>
 8002a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a2a:	e0fa      	b.n	8002c22 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_I2S_DMAStop+0x1ba>
 8002a36:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002a38:	e001      	b.n	8002a3e <HAL_I2S_DMAStop+0x1be>
 8002a3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a3e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a40:	e0ef      	b.n	8002c22 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a4a:	d005      	beq.n	8002a58 <HAL_I2S_DMAStop+0x1d8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a54:	f040 80e5 	bne.w	8002c22 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00f      	beq.n	8002a80 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f897 	bl	8001b98 <HAL_DMA_Abort>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a74:	f043 0208 	orr.w	r2, r3, #8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	f040 809a 	bne.w	8002bc2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00f      	beq.n	8002ab6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f87c 	bl	8001b98 <HAL_DMA_Abort>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f043 0208 	orr.w	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002ab6:	f7fe fe27 	bl	8001708 <HAL_GetTick>
 8002aba:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002abc:	e012      	b.n	8002ae4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002abe:	f7fe fe23 	bl	8001708 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	@ 0x64
 8002aca:	d90b      	bls.n	8002ae4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_I2S_DMAStop+0x272>
 8002aee:	4b31      	ldr	r3, [pc, #196]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002af0:	e001      	b.n	8002af6 <HAL_I2S_DMAStop+0x276>
 8002af2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d1de      	bne.n	8002abe <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002b00:	e012      	b.n	8002b28 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002b02:	f7fe fe01 	bl	8001708 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	@ 0x64
 8002b0e:	d90b      	bls.n	8002b28 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_I2S_DMAStop+0x2b6>
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002b34:	e001      	b.n	8002b3a <HAL_I2S_DMAStop+0x2ba>
 8002b36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b80      	cmp	r3, #128	@ 0x80
 8002b42:	d0de      	beq.n	8002b02 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2S_DMAStop+0x2d2>
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002b50:	e001      	b.n	8002b56 <HAL_I2S_DMAStop+0x2d6>
 8002b52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4914      	ldr	r1, [pc, #80]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002b5e:	428b      	cmp	r3, r1
 8002b60:	d101      	bne.n	8002b66 <HAL_I2S_DMAStop+0x2e6>
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002b64:	e001      	b.n	8002b6a <HAL_I2S_DMAStop+0x2ea>
 8002b66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b6e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2S_DMAStop+0x302>
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002b80:	e001      	b.n	8002b86 <HAL_I2S_DMAStop+0x306>
 8002b82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_I2S_DMAStop+0x31a>
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002b98:	e001      	b.n	8002b9e <HAL_I2S_DMAStop+0x31e>
 8002b9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4902      	ldr	r1, [pc, #8]	@ (8002bb0 <HAL_I2S_DMAStop+0x330>)
 8002ba6:	428b      	cmp	r3, r1
 8002ba8:	d106      	bne.n	8002bb8 <HAL_I2S_DMAStop+0x338>
 8002baa:	4b02      	ldr	r3, [pc, #8]	@ (8002bb4 <HAL_I2S_DMAStop+0x334>)
 8002bac:	e006      	b.n	8002bbc <HAL_I2S_DMAStop+0x33c>
 8002bae:	bf00      	nop
 8002bb0:	40003800 	.word	0x40003800
 8002bb4:	40003400 	.word	0x40003400
 8002bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bbc:	f022 0202 	bic.w	r2, r2, #2
 8002bc0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c00:	d10c      	bne.n	8002c1c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e002      	b.n	8002c22 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10e      	bne.n	8002c7c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0202 	bic.w	r2, r2, #2
 8002c6c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7fe f97f 	bl	8000f80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7fe f95f 	bl	8000f5c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0203 	bic.w	r2, r2, #3
 8002cc2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	f043 0208 	orr.w	r2, r3, #8
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff ffa5 	bl	8002c34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10e      	bne.n	8002d46 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe f91d 	bl	8000f80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	b292      	uxth	r2, r2
 8002d62:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	1c9a      	adds	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10e      	bne.n	8002da4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe f900 	bl	8000fa4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d13a      	bne.n	8002e3e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d109      	bne.n	8002de6 <I2S_IRQHandler+0x3a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b40      	cmp	r3, #64	@ 0x40
 8002dde:	d102      	bne.n	8002de6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ffb4 	bl	8002d4e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b40      	cmp	r3, #64	@ 0x40
 8002dee:	d126      	bne.n	8002e3e <I2S_IRQHandler+0x92>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d11f      	bne.n	8002e3e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e0c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	f043 0202 	orr.w	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fefb 	bl	8002c34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d136      	bne.n	8002eb8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d109      	bne.n	8002e68 <I2S_IRQHandler+0xbc>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5e:	2b80      	cmp	r3, #128	@ 0x80
 8002e60:	d102      	bne.n	8002e68 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ff45 	bl	8002cf2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d122      	bne.n	8002eb8 <I2S_IRQHandler+0x10c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d11b      	bne.n	8002eb8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e8e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f043 0204 	orr.w	r2, r3, #4
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff febe 	bl	8002c34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed0:	f7fe fc1a 	bl	8001708 <HAL_GetTick>
 8002ed4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002ed6:	e018      	b.n	8002f0a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d014      	beq.n	8002f0a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002ee0:	f7fe fc12 	bl	8001708 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d902      	bls.n	8002ef6 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e00f      	b.n	8002f2a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d1d7      	bne.n	8002ed8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a92      	ldr	r2, [pc, #584]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002f4e:	4b92      	ldr	r3, [pc, #584]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f50:	e001      	b.n	8002f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a8b      	ldr	r2, [pc, #556]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f6c:	4b8a      	ldr	r3, [pc, #552]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f6e:	e001      	b.n	8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f80:	d004      	beq.n	8002f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8099 	bne.w	80030be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f925 	bl	80031f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f9c8 	bl	8003350 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	d13a      	bne.n	8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d035      	beq.n	8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002fde:	4b6e      	ldr	r3, [pc, #440]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fe0:	e001      	b.n	8002fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4969      	ldr	r1, [pc, #420]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fee:	428b      	cmp	r3, r1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002ff2:	4b69      	ldr	r3, [pc, #420]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ff4:	e001      	b.n	8002ffa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ffa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ffe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800300e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fdfa 	bl	8002c34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b08      	cmp	r3, #8
 8003048:	f040 80c3 	bne.w	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80bd 	beq.w	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003066:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a49      	ldr	r2, [pc, #292]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003072:	4b49      	ldr	r3, [pc, #292]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003074:	e001      	b.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4944      	ldr	r1, [pc, #272]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003082:	428b      	cmp	r3, r1
 8003084:	d101      	bne.n	800308a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003086:	4b44      	ldr	r3, [pc, #272]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003088:	e001      	b.n	800308e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800308a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800308e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003092:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f043 0204 	orr.w	r2, r3, #4
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fdbc 	bl	8002c34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030bc:	e089      	b.n	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d107      	bne.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8be 	bl	8003254 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8fd 	bl	80032ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d12f      	bne.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02a      	beq.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003114:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003120:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003122:	e001      	b.n	8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4919      	ldr	r1, [pc, #100]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003130:	428b      	cmp	r3, r1
 8003132:	d101      	bne.n	8003138 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003134:	4b18      	ldr	r3, [pc, #96]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003136:	e001      	b.n	800313c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800313c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003140:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fd6c 	bl	8002c34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b08      	cmp	r3, #8
 8003164:	d136      	bne.n	80031d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d031      	beq.n	80031d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a07      	ldr	r2, [pc, #28]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800317c:	e001      	b.n	8003182 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800317e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4902      	ldr	r1, [pc, #8]	@ (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800318a:	428b      	cmp	r3, r1
 800318c:	d106      	bne.n	800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800318e:	4b02      	ldr	r3, [pc, #8]	@ (8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003190:	e006      	b.n	80031a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003192:	bf00      	nop
 8003194:	40003800 	.word	0x40003800
 8003198:	40003400 	.word	0x40003400
 800319c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f043 0204 	orr.w	r2, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fd32 	bl	8002c34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031d0:	e000      	b.n	80031d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031d2:	bf00      	nop
}
 80031d4:	bf00      	nop
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	1c99      	adds	r1, r3, #2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6251      	str	r1, [r2, #36]	@ 0x24
 8003202:	881a      	ldrh	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003230:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ffc9 	bl	80031dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	1c99      	adds	r1, r3, #2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6251      	str	r1, [r2, #36]	@ 0x24
 8003266:	8819      	ldrh	r1, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1d      	ldr	r2, [pc, #116]	@ (80032e4 <I2SEx_TxISR_I2SExt+0x90>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <I2SEx_TxISR_I2SExt+0x22>
 8003272:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <I2SEx_TxISR_I2SExt+0x94>)
 8003274:	e001      	b.n	800327a <I2SEx_TxISR_I2SExt+0x26>
 8003276:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800327a:	460a      	mov	r2, r1
 800327c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d121      	bne.n	80032da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a12      	ldr	r2, [pc, #72]	@ (80032e4 <I2SEx_TxISR_I2SExt+0x90>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <I2SEx_TxISR_I2SExt+0x50>
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <I2SEx_TxISR_I2SExt+0x94>)
 80032a2:	e001      	b.n	80032a8 <I2SEx_TxISR_I2SExt+0x54>
 80032a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	490d      	ldr	r1, [pc, #52]	@ (80032e4 <I2SEx_TxISR_I2SExt+0x90>)
 80032b0:	428b      	cmp	r3, r1
 80032b2:	d101      	bne.n	80032b8 <I2SEx_TxISR_I2SExt+0x64>
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <I2SEx_TxISR_I2SExt+0x94>)
 80032b6:	e001      	b.n	80032bc <I2SEx_TxISR_I2SExt+0x68>
 80032b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80032c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ff81 	bl	80031dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40003800 	.word	0x40003800
 80032e8:	40003400 	.word	0x40003400

080032ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68d8      	ldr	r0, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	1c99      	adds	r1, r3, #2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003304:	b282      	uxth	r2, r0
 8003306:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d113      	bne.n	8003348 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800332e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff4a 	bl	80031dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a20      	ldr	r2, [pc, #128]	@ (80033e0 <I2SEx_RxISR_I2SExt+0x90>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <I2SEx_RxISR_I2SExt+0x16>
 8003362:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <I2SEx_RxISR_I2SExt+0x94>)
 8003364:	e001      	b.n	800336a <I2SEx_RxISR_I2SExt+0x1a>
 8003366:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800336a:	68d8      	ldr	r0, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	1c99      	adds	r1, r3, #2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003376:	b282      	uxth	r2, r0
 8003378:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d121      	bne.n	80033d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a12      	ldr	r2, [pc, #72]	@ (80033e0 <I2SEx_RxISR_I2SExt+0x90>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <I2SEx_RxISR_I2SExt+0x50>
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <I2SEx_RxISR_I2SExt+0x94>)
 800339e:	e001      	b.n	80033a4 <I2SEx_RxISR_I2SExt+0x54>
 80033a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	490d      	ldr	r1, [pc, #52]	@ (80033e0 <I2SEx_RxISR_I2SExt+0x90>)
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d101      	bne.n	80033b4 <I2SEx_RxISR_I2SExt+0x64>
 80033b0:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <I2SEx_RxISR_I2SExt+0x94>)
 80033b2:	e001      	b.n	80033b8 <I2SEx_RxISR_I2SExt+0x68>
 80033b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff03 	bl	80031dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40003800 	.word	0x40003800
 80033e4:	40003400 	.word	0x40003400

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e267      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003406:	4b88      	ldr	r3, [pc, #544]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d00c      	beq.n	800342c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003412:	4b85      	ldr	r3, [pc, #532]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800341a:	2b08      	cmp	r3, #8
 800341c:	d112      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b82      	ldr	r3, [pc, #520]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800342a:	d10b      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	4b7e      	ldr	r3, [pc, #504]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e242      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344c:	d106      	bne.n	800345c <HAL_RCC_OscConfig+0x74>
 800344e:	4b76      	ldr	r3, [pc, #472]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01d      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b70      	ldr	r3, [pc, #448]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6f      	ldr	r2, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b6d      	ldr	r3, [pc, #436]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6c      	ldr	r2, [pc, #432]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 8003480:	4b69      	ldr	r3, [pc, #420]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a68      	ldr	r2, [pc, #416]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b66      	ldr	r3, [pc, #408]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a65      	ldr	r2, [pc, #404]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fe f932 	bl	8001708 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a8:	f7fe f92e 	bl	8001708 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	@ 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e207      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fe f91e 	bl	8001708 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fe f91a 	bl	8001708 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	@ 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1f3      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	4b51      	ldr	r3, [pc, #324]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d063      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350a:	4b47      	ldr	r3, [pc, #284]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003512:	2b08      	cmp	r3, #8
 8003514:	d11c      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b44      	ldr	r3, [pc, #272]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e1c7      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4937      	ldr	r1, [pc, #220]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	e03a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003558:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_RCC_OscConfig+0x244>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7fe f8d3 	bl	8001708 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003566:	f7fe f8cf 	bl	8001708 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1a8      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	4b2b      	ldr	r3, [pc, #172]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003584:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4925      	ldr	r1, [pc, #148]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCC_OscConfig+0x244>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f8b2 	bl	8001708 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fe f8ae 	bl	8001708 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e187      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d036      	beq.n	8003640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <HAL_RCC_OscConfig+0x248>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe f892 	bl	8001708 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fe f88e 	bl	8001708 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e167      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_OscConfig+0x240>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x200>
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_RCC_OscConfig+0x248>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7fe f87b 	bl	8001708 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00e      	b.n	8003634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7fe f877 	bl	8001708 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d907      	bls.n	8003634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e150      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003628:	40023800 	.word	0x40023800
 800362c:	42470000 	.word	0x42470000
 8003630:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	4b88      	ldr	r3, [pc, #544]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ea      	bne.n	8003616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8097 	beq.w	800377c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b81      	ldr	r3, [pc, #516]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b7d      	ldr	r3, [pc, #500]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4a7c      	ldr	r2, [pc, #496]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	@ 0x40
 800366e:	4b7a      	ldr	r3, [pc, #488]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b77      	ldr	r3, [pc, #476]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d118      	bne.n	80036bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368a:	4b74      	ldr	r3, [pc, #464]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a73      	ldr	r2, [pc, #460]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7fe f837 	bl	8001708 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fe f833 	bl	8001708 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e10c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b6a      	ldr	r3, [pc, #424]	@ (800385c <HAL_RCC_OscConfig+0x474>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2ea>
 80036c4:	4b64      	ldr	r3, [pc, #400]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	4a63      	ldr	r2, [pc, #396]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d0:	e01c      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x30c>
 80036da:	4b5f      	ldr	r3, [pc, #380]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	4a5e      	ldr	r2, [pc, #376]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036f4:	4b58      	ldr	r3, [pc, #352]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	4a57      	ldr	r2, [pc, #348]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003700:	4b55      	ldr	r3, [pc, #340]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a54      	ldr	r2, [pc, #336]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fff8 	bl	8001708 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd fff4 	bl	8001708 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0cb      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	4b49      	ldr	r3, [pc, #292]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ee      	beq.n	800371c <HAL_RCC_OscConfig+0x334>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fd ffe2 	bl	8001708 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fd ffde 	bl	8001708 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0b5      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	4b3e      	ldr	r3, [pc, #248]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ee      	bne.n	8003748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4b39      	ldr	r3, [pc, #228]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	4a38      	ldr	r2, [pc, #224]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a1 	beq.w	80038c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003786:	4b34      	ldr	r3, [pc, #208]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d05c      	beq.n	800384c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d141      	bne.n	800381e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd ffb2 	bl	8001708 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fd ffae 	bl	8001708 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e087      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b27      	ldr	r3, [pc, #156]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	491b      	ldr	r1, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fd ff87 	bl	8001708 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fd ff83 	bl	8001708 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e05c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x416>
 800381c:	e054      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <HAL_RCC_OscConfig+0x478>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fd ff70 	bl	8001708 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd ff6c 	bl	8001708 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e045      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <HAL_RCC_OscConfig+0x470>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x444>
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e038      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
 8003860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <HAL_RCC_OscConfig+0x4ec>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d028      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d121      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800389a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	d111      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cc      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b68      	ldr	r3, [pc, #416]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90c      	bls.n	8003914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d119      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e067      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b37      	ldr	r3, [pc, #220]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4934      	ldr	r1, [pc, #208]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fd fe9e 	bl	8001708 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fd fe9a 	bl	8001708 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20c      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f821 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490a      	ldr	r1, [pc, #40]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fdfe 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08009808 	.word	0x08009808
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	20000010 	.word	0x20000010

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b094      	sub	sp, #80	@ 0x50
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abc:	4b79      	ldr	r3, [pc, #484]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f200 80e1 	bhi.w	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad6:	e0db      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b73      	ldr	r3, [pc, #460]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003adc:	e0db      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ade:	4b73      	ldr	r3, [pc, #460]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x208>)
 8003ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aee:	4b6d      	ldr	r3, [pc, #436]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	2200      	movs	r2, #0
 8003b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	0159      	lsls	r1, r3, #5
 8003b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b28:	0150      	lsls	r0, r2, #5
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4621      	mov	r1, r4
 8003b30:	1a51      	subs	r1, r2, r1
 8003b32:	6139      	str	r1, [r7, #16]
 8003b34:	4629      	mov	r1, r5
 8003b36:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b52:	4651      	mov	r1, sl
 8003b54:	018a      	lsls	r2, r1, #6
 8003b56:	4651      	mov	r1, sl
 8003b58:	ebb2 0801 	subs.w	r8, r2, r1
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b76:	4690      	mov	r8, r2
 8003b78:	4699      	mov	r9, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	eb18 0303 	adds.w	r3, r8, r3
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	462b      	mov	r3, r5
 8003b84:	eb49 0303 	adc.w	r3, r9, r3
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b96:	4629      	mov	r1, r5
 8003b98:	024b      	lsls	r3, r1, #9
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	024a      	lsls	r2, r1, #9
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bb4:	f7fc fb6c 	bl	8000290 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc0:	e058      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b38      	ldr	r3, [pc, #224]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	4611      	mov	r1, r2
 8003bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bd2:	623b      	str	r3, [r7, #32]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	f04f 0000 	mov.w	r0, #0
 8003be4:	f04f 0100 	mov.w	r1, #0
 8003be8:	0159      	lsls	r1, r3, #5
 8003bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bee:	0150      	lsls	r0, r2, #5
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c14:	ebb2 040a 	subs.w	r4, r2, sl
 8003c18:	eb63 050b 	sbc.w	r5, r3, fp
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	00eb      	lsls	r3, r5, #3
 8003c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2a:	00e2      	lsls	r2, r4, #3
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	18e3      	adds	r3, r4, r3
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	464b      	mov	r3, r9
 8003c38:	eb45 0303 	adc.w	r3, r5, r3
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	028b      	lsls	r3, r1, #10
 8003c4e:	4621      	mov	r1, r4
 8003c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c54:	4621      	mov	r1, r4
 8003c56:	028a      	lsls	r2, r1, #10
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	61fa      	str	r2, [r7, #28]
 8003c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c68:	f7fc fb12 	bl	8000290 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3750      	adds	r7, #80	@ 0x50
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	2000000c 	.word	0x2000000c

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ccc:	f7ff fff0 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	@ (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	08009818 	.word	0x08009818

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf4:	f7ff ffdc 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0b5b      	lsrs	r3, r3, #13
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	@ (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08009818 	.word	0x08009818

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d035      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d40:	4b67      	ldr	r3, [pc, #412]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d46:	f7fd fcdf 	bl	8001708 <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d4e:	f7fd fcdb 	bl	8001708 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0ba      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d60:	4b60      	ldr	r3, [pc, #384]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	019a      	lsls	r2, r3, #6
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	071b      	lsls	r3, r3, #28
 8003d78:	495a      	ldr	r1, [pc, #360]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d80:	4b57      	ldr	r3, [pc, #348]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d86:	f7fd fcbf 	bl	8001708 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d8e:	f7fd fcbb 	bl	8001708 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e09a      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003da0:	4b50      	ldr	r3, [pc, #320]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8083 	beq.w	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	4b49      	ldr	r3, [pc, #292]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	4a48      	ldr	r2, [pc, #288]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dca:	4b46      	ldr	r3, [pc, #280]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dd6:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a43      	ldr	r2, [pc, #268]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003de2:	f7fd fc91 	bl	8001708 <HAL_GetTick>
 8003de6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dea:	f7fd fc8d 	bl	8001708 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e06c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e08:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e10:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d02f      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d028      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e30:	4b2e      	ldr	r3, [pc, #184]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e36:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e3c:	4a29      	ldr	r2, [pc, #164]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e42:	4b28      	ldr	r3, [pc, #160]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d114      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fc5b 	bl	8001708 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fc57 	bl	8001708 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e034      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e84:	d10d      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e86:	4b17      	ldr	r3, [pc, #92]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9a:	4912      	ldr	r1, [pc, #72]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]
 8003ea0:	e005      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ea8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003eac:	6093      	str	r3, [r2, #8]
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	490a      	ldr	r1, [pc, #40]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7c1a      	ldrb	r2, [r3, #16]
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ed2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	42470068 	.word	0x42470068
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	42470e40 	.word	0x42470e40
 8003ef0:	424711e0 	.word	0x424711e0

08003ef4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d13f      	bne.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f12:	4b24      	ldr	r3, [pc, #144]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f1a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f28:	d12f      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f2c:	617b      	str	r3, [r7, #20]
          break;
 8003f2e:	e02f      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f30:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f3e:	4b19      	ldr	r3, [pc, #100]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f46:	4a19      	ldr	r2, [pc, #100]	@ (8003fac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e007      	b.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f50:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f58:	4a15      	ldr	r2, [pc, #84]	@ (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f60:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f74:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f7a:	0f1b      	lsrs	r3, r3, #28
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	617b      	str	r3, [r7, #20]
          break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
          break;
 8003f8e:	bf00      	nop
        }
      }
      break;
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003f92:	bf00      	nop
    }
  }
  return frequency;
 8003f94:	697b      	ldr	r3, [r7, #20]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	00bb8000 	.word	0x00bb8000
 8003fac:	007a1200 	.word	0x007a1200
 8003fb0:	00f42400 	.word	0x00f42400

08003fb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e07b      	b.n	80040be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d108      	bne.n	8003fe0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fd6:	d009      	beq.n	8003fec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61da      	str	r2, [r3, #28]
 8003fde:	e005      	b.n	8003fec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd f958 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004022:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004070:	ea42 0103 	orr.w	r1, r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f003 0104 	and.w	r1, r3, #4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f003 0210 	and.w	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b088      	sub	sp, #32
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d6:	f7fd fb17 	bl	8001708 <HAL_GetTick>
 80040da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
 80040ee:	e12a      	b.n	8004346 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_SPI_Transmit+0x36>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e122      	b.n	8004346 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_SPI_Transmit+0x48>
 800410a:	2302      	movs	r3, #2
 800410c:	e11b      	b.n	8004346 <HAL_SPI_Transmit+0x280>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2203      	movs	r2, #3
 800411a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	88fa      	ldrh	r2, [r7, #6]
 800412e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415c:	d10f      	bne.n	800417e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800416c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800417c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d007      	beq.n	800419c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800419a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a4:	d152      	bne.n	800424c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Transmit+0xee>
 80041ae:	8b7b      	ldrh	r3, [r7, #26]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d145      	bne.n	8004240 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041d8:	e032      	b.n	8004240 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d112      	bne.n	800420e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ec:	881a      	ldrh	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800420c:	e018      	b.n	8004240 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420e:	f7fd fa7b 	bl	8001708 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d803      	bhi.n	8004226 <HAL_SPI_Transmit+0x160>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d102      	bne.n	800422c <HAL_SPI_Transmit+0x166>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e082      	b.n	8004346 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1c7      	bne.n	80041da <HAL_SPI_Transmit+0x114>
 800424a:	e053      	b.n	80042f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_SPI_Transmit+0x194>
 8004254:	8b7b      	ldrh	r3, [r7, #26]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d147      	bne.n	80042ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	7812      	ldrb	r2, [r2, #0]
 8004266:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004280:	e033      	b.n	80042ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b02      	cmp	r3, #2
 800428e:	d113      	bne.n	80042b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	7812      	ldrb	r2, [r2, #0]
 800429c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042b6:	e018      	b.n	80042ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b8:	f7fd fa26 	bl	8001708 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d803      	bhi.n	80042d0 <HAL_SPI_Transmit+0x20a>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d102      	bne.n	80042d6 <HAL_SPI_Transmit+0x210>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e02d      	b.n	8004346 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1c6      	bne.n	8004282 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fa59 	bl	80047b0 <SPI_EndRxTxTransaction>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004344:	2300      	movs	r3, #0
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b08a      	sub	sp, #40	@ 0x28
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800435c:	2301      	movs	r3, #1
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004360:	f7fd f9d2 	bl	8001708 <HAL_GetTick>
 8004364:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800436c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004374:	887b      	ldrh	r3, [r7, #2]
 8004376:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004378:	7ffb      	ldrb	r3, [r7, #31]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d00c      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x4a>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004384:	d106      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x46>
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d001      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
 8004396:	e17f      	b.n	8004698 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x5c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x5c>
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e174      	b.n	8004698 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x6e>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e16d      	b.n	8004698 <HAL_SPI_TransmitReceive+0x34a>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d003      	beq.n	80043d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2205      	movs	r2, #5
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	887a      	ldrh	r2, [r7, #2]
 80043ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	887a      	ldrh	r2, [r7, #2]
 80043fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b40      	cmp	r3, #64	@ 0x40
 800441a:	d007      	beq.n	800442c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800442a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004434:	d17e      	bne.n	8004534 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_SPI_TransmitReceive+0xf6>
 800443e:	8afb      	ldrh	r3, [r7, #22]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d16c      	bne.n	800451e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004468:	e059      	b.n	800451e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d11b      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x162>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x162>
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	2b01      	cmp	r3, #1
 8004486:	d113      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004498:	1c9a      	adds	r2, r3, #2
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d119      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x1a4>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d014      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	b292      	uxth	r2, r2
 80044d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044da:	1c9a      	adds	r2, r3, #2
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ee:	2301      	movs	r3, #1
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044f2:	f7fd f909 	bl	8001708 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fe:	429a      	cmp	r2, r3
 8004500:	d80d      	bhi.n	800451e <HAL_SPI_TransmitReceive+0x1d0>
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d009      	beq.n	800451e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0bc      	b.n	8004698 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1a0      	bne.n	800446a <HAL_SPI_TransmitReceive+0x11c>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d19b      	bne.n	800446a <HAL_SPI_TransmitReceive+0x11c>
 8004532:	e082      	b.n	800463a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x1f4>
 800453c:	8afb      	ldrh	r3, [r7, #22]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d171      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004568:	e05d      	b.n	8004626 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d11c      	bne.n	80045b2 <HAL_SPI_TransmitReceive+0x264>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d017      	beq.n	80045b2 <HAL_SPI_TransmitReceive+0x264>
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	2b01      	cmp	r3, #1
 8004586:	d114      	bne.n	80045b2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	7812      	ldrb	r2, [r2, #0]
 8004594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d119      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x2a6>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045f0:	2301      	movs	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045f4:	f7fd f888 	bl	8001708 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004600:	429a      	cmp	r2, r3
 8004602:	d803      	bhi.n	800460c <HAL_SPI_TransmitReceive+0x2be>
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d102      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x2c4>
 800460c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e038      	b.n	8004698 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d19c      	bne.n	800456a <HAL_SPI_TransmitReceive+0x21c>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d197      	bne.n	800456a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8b6 	bl	80047b0 <SPI_EndRxTxTransaction>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e01d      	b.n	8004698 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004696:	2300      	movs	r3, #0
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3728      	adds	r7, #40	@ 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046b0:	f7fd f82a 	bl	8001708 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046c0:	f7fd f822 	bl	8001708 <HAL_GetTick>
 80046c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046c6:	4b39      	ldr	r3, [pc, #228]	@ (80047ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	015b      	lsls	r3, r3, #5
 80046cc:	0d1b      	lsrs	r3, r3, #20
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d6:	e055      	b.n	8004784 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d051      	beq.n	8004784 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e0:	f7fd f812 	bl	8001708 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d902      	bls.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d13d      	bne.n	8004772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800470e:	d111      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004718:	d004      	beq.n	8004724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004722:	d107      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800473c:	d10f      	bne.n	800475e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800475c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e018      	b.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e002      	b.n	8004784 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	3b01      	subs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d19a      	bne.n	80046d8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	2000000c 	.word	0x2000000c

080047b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2201      	movs	r2, #1
 80047c4:	2102      	movs	r1, #2
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff ff6a 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e032      	b.n	8004848 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <SPI_EndRxTxTransaction+0xa0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004854 <SPI_EndRxTxTransaction+0xa4>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	0d5b      	lsrs	r3, r3, #21
 80047ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004800:	d112      	bne.n	8004828 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	@ 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff47 	bl	80046a0 <SPI_WaitFlagStateUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d016      	beq.n	8004846 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e00f      	b.n	8004848 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3b01      	subs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483e:	2b80      	cmp	r3, #128	@ 0x80
 8004840:	d0f2      	beq.n	8004828 <SPI_EndRxTxTransaction+0x78>
 8004842:	e000      	b.n	8004846 <SPI_EndRxTxTransaction+0x96>
        break;
 8004844:	bf00      	nop
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	2000000c 	.word	0x2000000c
 8004854:	165e9f81 	.word	0x165e9f81

08004858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e042      	b.n	80048f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc fd84 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2224      	movs	r2, #36	@ 0x24
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800489a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f973 	bl	8004b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	@ 0x28
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b20      	cmp	r3, #32
 8004916:	d175      	bne.n	8004a04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_UART_Transmit+0x2c>
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e06e      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2221      	movs	r2, #33	@ 0x21
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004936:	f7fc fee7 	bl	8001708 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x6c>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800496c:	e02e      	b.n	80049cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	2180      	movs	r1, #128	@ 0x80
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f848 	bl	8004a0e <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e03a      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3302      	adds	r3, #2
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e007      	b.n	80049be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1cb      	bne.n	800496e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	2140      	movs	r1, #64	@ 0x40
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f814 	bl	8004a0e <UART_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e006      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
  }
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1e:	e03b      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d037      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a28:	f7fc fe6e 	bl	8001708 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	6a3a      	ldr	r2, [r7, #32]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d302      	bcc.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e03a      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d023      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b80      	cmp	r3, #128	@ 0x80
 8004a54:	d020      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b40      	cmp	r3, #64	@ 0x40
 8004a5a:	d01d      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d116      	bne.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f81d 	bl	8004ac0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e00f      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d0b4      	beq.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b095      	sub	sp, #84	@ 0x54
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ae8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3314      	adds	r3, #20
 8004b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d119      	bne.n	8004b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b58:	61ba      	str	r2, [r7, #24]
 8004b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b7a:	bf00      	nop
 8004b7c:	3754      	adds	r7, #84	@ 0x54
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b0c0      	sub	sp, #256	@ 0x100
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	68d9      	ldr	r1, [r3, #12]
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	ea40 0301 	orr.w	r3, r0, r1
 8004bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004be0:	f021 010c 	bic.w	r1, r1, #12
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	6999      	ldr	r1, [r3, #24]
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	ea40 0301 	orr.w	r3, r0, r1
 8004c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b8f      	ldr	r3, [pc, #572]	@ (8004e54 <UART_SetConfig+0x2cc>)
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d005      	beq.n	8004c28 <UART_SetConfig+0xa0>
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b8d      	ldr	r3, [pc, #564]	@ (8004e58 <UART_SetConfig+0x2d0>)
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d104      	bne.n	8004c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7ff f862 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c30:	e003      	b.n	8004c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c32:	f7ff f849 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8004c36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c44:	f040 810c 	bne.w	8004e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	1891      	adds	r1, r2, r2
 8004c60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c62:	415b      	adcs	r3, r3
 8004c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	eb12 0801 	adds.w	r8, r2, r1
 8004c70:	4629      	mov	r1, r5
 8004c72:	eb43 0901 	adc.w	r9, r3, r1
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c8a:	4690      	mov	r8, r2
 8004c8c:	4699      	mov	r9, r3
 8004c8e:	4623      	mov	r3, r4
 8004c90:	eb18 0303 	adds.w	r3, r8, r3
 8004c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c98:	462b      	mov	r3, r5
 8004c9a:	eb49 0303 	adc.w	r3, r9, r3
 8004c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	18db      	adds	r3, r3, r3
 8004cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	eb42 0303 	adc.w	r3, r2, r3
 8004cc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ccc:	f7fb fae0 	bl	8000290 <__aeabi_uldivmod>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4b61      	ldr	r3, [pc, #388]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	011c      	lsls	r4, r3, #4
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	1891      	adds	r1, r2, r2
 8004cf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cf8:	415b      	adcs	r3, r3
 8004cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d00:	4641      	mov	r1, r8
 8004d02:	eb12 0a01 	adds.w	sl, r2, r1
 8004d06:	4649      	mov	r1, r9
 8004d08:	eb43 0b01 	adc.w	fp, r3, r1
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d20:	4692      	mov	sl, r2
 8004d22:	469b      	mov	fp, r3
 8004d24:	4643      	mov	r3, r8
 8004d26:	eb1a 0303 	adds.w	r3, sl, r3
 8004d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	eb4b 0303 	adc.w	r3, fp, r3
 8004d34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	18db      	adds	r3, r3, r3
 8004d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d52:	4613      	mov	r3, r2
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d62:	f7fb fa95 	bl	8000290 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2264      	movs	r2, #100	@ 0x64
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	1acb      	subs	r3, r1, r3
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d82:	4b36      	ldr	r3, [pc, #216]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004d84:	fba3 2302 	umull	r2, r3, r3, r2
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d90:	441c      	add	r4, r3
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dac:	415b      	adcs	r3, r3
 8004dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004db4:	4641      	mov	r1, r8
 8004db6:	1851      	adds	r1, r2, r1
 8004db8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dba:	4649      	mov	r1, r9
 8004dbc:	414b      	adcs	r3, r1
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dcc:	4659      	mov	r1, fp
 8004dce:	00cb      	lsls	r3, r1, #3
 8004dd0:	4651      	mov	r1, sl
 8004dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	00ca      	lsls	r2, r1, #3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	4642      	mov	r2, r8
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004de8:	464b      	mov	r3, r9
 8004dea:	460a      	mov	r2, r1
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e08:	460b      	mov	r3, r1
 8004e0a:	18db      	adds	r3, r3, r3
 8004e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e0e:	4613      	mov	r3, r2
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e1e:	f7fb fa37 	bl	8000290 <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004e28:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	2164      	movs	r1, #100	@ 0x64
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	3332      	adds	r3, #50	@ 0x32
 8004e3a:	4a08      	ldr	r2, [pc, #32]	@ (8004e5c <UART_SetConfig+0x2d4>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	f003 0207 	and.w	r2, r3, #7
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4422      	add	r2, r4
 8004e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e50:	e106      	b.n	8005060 <UART_SetConfig+0x4d8>
 8004e52:	bf00      	nop
 8004e54:	40011000 	.word	0x40011000
 8004e58:	40011400 	.word	0x40011400
 8004e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e72:	4642      	mov	r2, r8
 8004e74:	464b      	mov	r3, r9
 8004e76:	1891      	adds	r1, r2, r2
 8004e78:	6239      	str	r1, [r7, #32]
 8004e7a:	415b      	adcs	r3, r3
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e82:	4641      	mov	r1, r8
 8004e84:	1854      	adds	r4, r2, r1
 8004e86:	4649      	mov	r1, r9
 8004e88:	eb43 0501 	adc.w	r5, r3, r1
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	00eb      	lsls	r3, r5, #3
 8004e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e9a:	00e2      	lsls	r2, r4, #3
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	4643      	mov	r3, r8
 8004ea2:	18e3      	adds	r3, r4, r3
 8004ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	eb45 0303 	adc.w	r3, r5, r3
 8004eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ebe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ece:	4629      	mov	r1, r5
 8004ed0:	008b      	lsls	r3, r1, #2
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed8:	4621      	mov	r1, r4
 8004eda:	008a      	lsls	r2, r1, #2
 8004edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ee0:	f7fb f9d6 	bl	8000290 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4b60      	ldr	r3, [pc, #384]	@ (800506c <UART_SetConfig+0x4e4>)
 8004eea:	fba3 2302 	umull	r2, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	011c      	lsls	r4, r3, #4
 8004ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004efc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	61b9      	str	r1, [r7, #24]
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6139      	str	r1, [r7, #16]
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f48:	464b      	mov	r3, r9
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	008b      	lsls	r3, r1, #2
 8004f70:	4641      	mov	r1, r8
 8004f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f76:	4641      	mov	r1, r8
 8004f78:	008a      	lsls	r2, r1, #2
 8004f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f7e:	f7fb f987 	bl	8000290 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	4b38      	ldr	r3, [pc, #224]	@ (800506c <UART_SetConfig+0x4e4>)
 8004f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2264      	movs	r2, #100	@ 0x64
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	1acb      	subs	r3, r1, r3
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	3332      	adds	r3, #50	@ 0x32
 8004f9c:	4a33      	ldr	r2, [pc, #204]	@ (800506c <UART_SetConfig+0x4e4>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fa8:	441c      	add	r4, r3
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fae:	2200      	movs	r2, #0
 8004fb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	1891      	adds	r1, r2, r2
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	415b      	adcs	r3, r3
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fc8:	4641      	mov	r1, r8
 8004fca:	1851      	adds	r1, r2, r1
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	4649      	mov	r1, r9
 8004fd0:	414b      	adcs	r3, r1
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fe0:	4659      	mov	r1, fp
 8004fe2:	00cb      	lsls	r3, r1, #3
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fea:	4651      	mov	r1, sl
 8004fec:	00ca      	lsls	r2, r1, #3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	460a      	mov	r2, r1
 8004ffe:	eb42 0303 	adc.w	r3, r2, r3
 8005002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	663b      	str	r3, [r7, #96]	@ 0x60
 800500e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800501c:	4649      	mov	r1, r9
 800501e:	008b      	lsls	r3, r1, #2
 8005020:	4641      	mov	r1, r8
 8005022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005026:	4641      	mov	r1, r8
 8005028:	008a      	lsls	r2, r1, #2
 800502a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800502e:	f7fb f92f 	bl	8000290 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <UART_SetConfig+0x4e4>)
 8005038:	fba3 1302 	umull	r1, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	2164      	movs	r1, #100	@ 0x64
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	3332      	adds	r3, #50	@ 0x32
 800504a:	4a08      	ldr	r2, [pc, #32]	@ (800506c <UART_SetConfig+0x4e4>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 020f 	and.w	r2, r3, #15
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4422      	add	r2, r4
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005066:	46bd      	mov	sp, r7
 8005068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800506c:	51eb851f 	.word	0x51eb851f

08005070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005074:	4904      	ldr	r1, [pc, #16]	@ (8005088 <MX_FATFS_Init+0x18>)
 8005076:	4805      	ldr	r0, [pc, #20]	@ (800508c <MX_FATFS_Init+0x1c>)
 8005078:	f002 ffe8 	bl	800804c <FATFS_LinkDriver>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	4b03      	ldr	r3, [pc, #12]	@ (8005090 <MX_FATFS_Init+0x20>)
 8005082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005084:	bf00      	nop
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20003a4c 	.word	0x20003a4c
 800508c:	20000018 	.word	0x20000018
 8005090:	20003a48 	.word	0x20003a48

08005094 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005098:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;

	return USER_SPI_initialize(pdrv);
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f9d3 	bl	800545c <USER_SPI_initialize>
 80050b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fab1 	bl	8005634 <USER_SPI_status>
 80050d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4603      	mov	r3, r0
 80050ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;

	return USER_SPI_read(pdrv, buff, sector, count);
 80050ec:	7bf8      	ldrb	r0, [r7, #15]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	f000 fab4 	bl	8005660 <USER_SPI_read>
 80050f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff,  sector, count);
 8005112:	7bf8      	ldrb	r0, [r7, #15]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	f000 fb07 	bl	800572c <USER_SPI_write>
 800511e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	603a      	str	r2, [r7, #0]
 8005132:	71fb      	strb	r3, [r7, #7]
 8005134:	460b      	mov	r3, r1
 8005136:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005138:	79b9      	ldrb	r1, [r7, #6]
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fb70 	bl	8005824 <USER_SPI_ioctl>
 8005144:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005158:	f7fc fad6 	bl	8001708 <HAL_GetTick>
 800515c:	4603      	mov	r3, r0
 800515e:	4a04      	ldr	r2, [pc, #16]	@ (8005170 <SPI_Timer_On+0x20>)
 8005160:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005162:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <SPI_Timer_On+0x24>)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20003a54 	.word	0x20003a54
 8005174:	20003a58 	.word	0x20003a58

08005178 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800517c:	f7fc fac4 	bl	8001708 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	4b06      	ldr	r3, [pc, #24]	@ (800519c <SPI_Timer_Status+0x24>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	1ad2      	subs	r2, r2, r3
 8005188:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <SPI_Timer_Status+0x28>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	bf34      	ite	cc
 8005190:	2301      	movcc	r3, #1
 8005192:	2300      	movcs	r3, #0
 8005194:	b2db      	uxtb	r3, r3
}
 8005196:	4618      	mov	r0, r3
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20003a54 	.word	0x20003a54
 80051a0:	20003a58 	.word	0x20003a58

080051a4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80051ae:	f107 020f 	add.w	r2, r7, #15
 80051b2:	1df9      	adds	r1, r7, #7
 80051b4:	2332      	movs	r3, #50	@ 0x32
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2301      	movs	r3, #1
 80051ba:	4804      	ldr	r0, [pc, #16]	@ (80051cc <xchg_spi+0x28>)
 80051bc:	f7ff f8c7 	bl	800434e <HAL_SPI_TransmitReceive>
    return rxDat;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	200039a0 	.word	0x200039a0

080051d0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e00a      	b.n	80051f6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	18d4      	adds	r4, r2, r3
 80051e6:	20ff      	movs	r0, #255	@ 0xff
 80051e8:	f7ff ffdc 	bl	80051a4 <xchg_spi>
 80051ec:	4603      	mov	r3, r0
 80051ee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3f0      	bcc.n	80051e0 <rcvr_spi_multi+0x10>
	}
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}

08005208 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	b29a      	uxth	r2, r3
 8005216:	f04f 33ff 	mov.w	r3, #4294967295
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4803      	ldr	r0, [pc, #12]	@ (800522c <xmit_spi_multi+0x24>)
 800521e:	f7fe ff52 	bl	80040c6 <HAL_SPI_Transmit>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200039a0 	.word	0x200039a0

08005230 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005238:	f7fc fa66 	bl	8001708 <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005242:	20ff      	movs	r0, #255	@ 0xff
 8005244:	f7ff ffae 	bl	80051a4 <xchg_spi>
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2bff      	cmp	r3, #255	@ 0xff
 8005250:	d007      	beq.n	8005262 <wait_ready+0x32>
 8005252:	f7fc fa59 	bl	8001708 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	429a      	cmp	r2, r3
 8005260:	d8ef      	bhi.n	8005242 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2bff      	cmp	r3, #255	@ 0xff
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800527c:	2201      	movs	r2, #1
 800527e:	2110      	movs	r1, #16
 8005280:	4803      	ldr	r0, [pc, #12]	@ (8005290 <despiselect+0x18>)
 8005282:	f7fd f8e7 	bl	8002454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005286:	20ff      	movs	r0, #255	@ 0xff
 8005288:	f7ff ff8c 	bl	80051a4 <xchg_spi>

}
 800528c:	bf00      	nop
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40020000 	.word	0x40020000

08005294 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005298:	2200      	movs	r2, #0
 800529a:	2110      	movs	r1, #16
 800529c:	4809      	ldr	r0, [pc, #36]	@ (80052c4 <spiselect+0x30>)
 800529e:	f7fd f8d9 	bl	8002454 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80052a2:	20ff      	movs	r0, #255	@ 0xff
 80052a4:	f7ff ff7e 	bl	80051a4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80052a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80052ac:	f7ff ffc0 	bl	8005230 <wait_ready>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <spiselect+0x26>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e002      	b.n	80052c0 <spiselect+0x2c>

	despiselect();
 80052ba:	f7ff ffdd 	bl	8005278 <despiselect>
	return 0;	/* Timeout */
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40020000 	.word	0x40020000

080052c8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80052d2:	20c8      	movs	r0, #200	@ 0xc8
 80052d4:	f7ff ff3c 	bl	8005150 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80052d8:	20ff      	movs	r0, #255	@ 0xff
 80052da:	f7ff ff63 	bl	80051a4 <xchg_spi>
 80052de:	4603      	mov	r3, r0
 80052e0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2bff      	cmp	r3, #255	@ 0xff
 80052e6:	d104      	bne.n	80052f2 <rcvr_datablock+0x2a>
 80052e8:	f7ff ff46 	bl	8005178 <SPI_Timer_Status>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f2      	bne.n	80052d8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80052f6:	d001      	beq.n	80052fc <rcvr_datablock+0x34>
 80052f8:	2300      	movs	r3, #0
 80052fa:	e00a      	b.n	8005312 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff66 	bl	80051d0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005304:	20ff      	movs	r0, #255	@ 0xff
 8005306:	f7ff ff4d 	bl	80051a4 <xchg_spi>
 800530a:	20ff      	movs	r0, #255	@ 0xff
 800530c:	f7ff ff4a 	bl	80051a4 <xchg_spi>

	return 1;						/* Function succeeded */
 8005310:	2301      	movs	r3, #1
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005326:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800532a:	f7ff ff81 	bl	8005230 <wait_ready>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <xmit_datablock+0x1e>
 8005334:	2300      	movs	r3, #0
 8005336:	e01e      	b.n	8005376 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff ff32 	bl	80051a4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	2bfd      	cmp	r3, #253	@ 0xfd
 8005344:	d016      	beq.n	8005374 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005346:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ff5c 	bl	8005208 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005350:	20ff      	movs	r0, #255	@ 0xff
 8005352:	f7ff ff27 	bl	80051a4 <xchg_spi>
 8005356:	20ff      	movs	r0, #255	@ 0xff
 8005358:	f7ff ff24 	bl	80051a4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800535c:	20ff      	movs	r0, #255	@ 0xff
 800535e:	f7ff ff21 	bl	80051a4 <xchg_spi>
 8005362:	4603      	mov	r3, r0
 8005364:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2b05      	cmp	r3, #5
 800536e:	d001      	beq.n	8005374 <xmit_datablock+0x5a>
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <xmit_datablock+0x5c>
	}
	return 1;
 8005374:	2301      	movs	r3, #1
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	4603      	mov	r3, r0
 8005386:	6039      	str	r1, [r7, #0]
 8005388:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	da0e      	bge.n	80053b0 <send_cmd+0x32>
		cmd &= 0x7F;
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005398:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800539a:	2100      	movs	r1, #0
 800539c:	2037      	movs	r0, #55	@ 0x37
 800539e:	f7ff ffee 	bl	800537e <send_cmd>
 80053a2:	4603      	mov	r3, r0
 80053a4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80053a6:	7bbb      	ldrb	r3, [r7, #14]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d901      	bls.n	80053b0 <send_cmd+0x32>
 80053ac:	7bbb      	ldrb	r3, [r7, #14]
 80053ae:	e051      	b.n	8005454 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d008      	beq.n	80053c8 <send_cmd+0x4a>
		despiselect();
 80053b6:	f7ff ff5f 	bl	8005278 <despiselect>
		if (!spiselect()) return 0xFF;
 80053ba:	f7ff ff6b 	bl	8005294 <spiselect>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <send_cmd+0x4a>
 80053c4:	23ff      	movs	r3, #255	@ 0xff
 80053c6:	e045      	b.n	8005454 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fee7 	bl	80051a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	0e1b      	lsrs	r3, r3, #24
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fee1 	bl	80051a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fedb 	bl	80051a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fed5 	bl	80051a4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fed0 	bl	80051a4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <send_cmd+0x94>
 800540e:	2395      	movs	r3, #149	@ 0x95
 8005410:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d101      	bne.n	800541c <send_cmd+0x9e>
 8005418:	2387      	movs	r3, #135	@ 0x87
 800541a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fec0 	bl	80051a4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d102      	bne.n	8005430 <send_cmd+0xb2>
 800542a:	20ff      	movs	r0, #255	@ 0xff
 800542c:	f7ff feba 	bl	80051a4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005430:	230a      	movs	r3, #10
 8005432:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005434:	20ff      	movs	r0, #255	@ 0xff
 8005436:	f7ff feb5 	bl	80051a4 <xchg_spi>
 800543a:	4603      	mov	r3, r0
 800543c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800543e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005442:	2b00      	cmp	r3, #0
 8005444:	da05      	bge.n	8005452 <send_cmd+0xd4>
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	3b01      	subs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005452:	7bbb      	ldrb	r3, [r7, #14]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <USER_SPI_initialize+0x14>
 800546c:	2301      	movs	r3, #1
 800546e:	e0d6      	b.n	800561e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005470:	4b6d      	ldr	r3, [pc, #436]	@ (8005628 <USER_SPI_initialize+0x1cc>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <USER_SPI_initialize+0x2a>
 800547e:	4b6a      	ldr	r3, [pc, #424]	@ (8005628 <USER_SPI_initialize+0x1cc>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	e0cb      	b.n	800561e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005486:	4b69      	ldr	r3, [pc, #420]	@ (800562c <USER_SPI_initialize+0x1d0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005490:	4b66      	ldr	r3, [pc, #408]	@ (800562c <USER_SPI_initialize+0x1d0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005498:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800549a:	230a      	movs	r3, #10
 800549c:	73fb      	strb	r3, [r7, #15]
 800549e:	e005      	b.n	80054ac <USER_SPI_initialize+0x50>
 80054a0:	20ff      	movs	r0, #255	@ 0xff
 80054a2:	f7ff fe7f 	bl	80051a4 <xchg_spi>
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f6      	bne.n	80054a0 <USER_SPI_initialize+0x44>

	ty = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80054b6:	2100      	movs	r1, #0
 80054b8:	2000      	movs	r0, #0
 80054ba:	f7ff ff60 	bl	800537e <send_cmd>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	f040 808b 	bne.w	80055dc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80054c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054ca:	f7ff fe41 	bl	8005150 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80054ce:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80054d2:	2008      	movs	r0, #8
 80054d4:	f7ff ff53 	bl	800537e <send_cmd>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d151      	bne.n	8005582 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
 80054e2:	e00d      	b.n	8005500 <USER_SPI_initialize+0xa4>
 80054e4:	7bfc      	ldrb	r4, [r7, #15]
 80054e6:	20ff      	movs	r0, #255	@ 0xff
 80054e8:	f7ff fe5c 	bl	80051a4 <xchg_spi>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	f104 0310 	add.w	r3, r4, #16
 80054f4:	443b      	add	r3, r7
 80054f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	3301      	adds	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d9ee      	bls.n	80054e4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005506:	7abb      	ldrb	r3, [r7, #10]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d167      	bne.n	80055dc <USER_SPI_initialize+0x180>
 800550c:	7afb      	ldrb	r3, [r7, #11]
 800550e:	2baa      	cmp	r3, #170	@ 0xaa
 8005510:	d164      	bne.n	80055dc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005512:	bf00      	nop
 8005514:	f7ff fe30 	bl	8005178 <SPI_Timer_Status>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <USER_SPI_initialize+0xd2>
 800551e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005522:	20a9      	movs	r0, #169	@ 0xa9
 8005524:	f7ff ff2b 	bl	800537e <send_cmd>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f2      	bne.n	8005514 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800552e:	f7ff fe23 	bl	8005178 <SPI_Timer_Status>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d051      	beq.n	80055dc <USER_SPI_initialize+0x180>
 8005538:	2100      	movs	r1, #0
 800553a:	203a      	movs	r0, #58	@ 0x3a
 800553c:	f7ff ff1f 	bl	800537e <send_cmd>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d14a      	bne.n	80055dc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
 800554a:	e00d      	b.n	8005568 <USER_SPI_initialize+0x10c>
 800554c:	7bfc      	ldrb	r4, [r7, #15]
 800554e:	20ff      	movs	r0, #255	@ 0xff
 8005550:	f7ff fe28 	bl	80051a4 <xchg_spi>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	f104 0310 	add.w	r3, r4, #16
 800555c:	443b      	add	r3, r7
 800555e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	3301      	adds	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d9ee      	bls.n	800554c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800556e:	7a3b      	ldrb	r3, [r7, #8]
 8005570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <USER_SPI_initialize+0x120>
 8005578:	230c      	movs	r3, #12
 800557a:	e000      	b.n	800557e <USER_SPI_initialize+0x122>
 800557c:	2304      	movs	r3, #4
 800557e:	737b      	strb	r3, [r7, #13]
 8005580:	e02c      	b.n	80055dc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005582:	2100      	movs	r1, #0
 8005584:	20a9      	movs	r0, #169	@ 0xa9
 8005586:	f7ff fefa 	bl	800537e <send_cmd>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d804      	bhi.n	800559a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005590:	2302      	movs	r3, #2
 8005592:	737b      	strb	r3, [r7, #13]
 8005594:	23a9      	movs	r3, #169	@ 0xa9
 8005596:	73bb      	strb	r3, [r7, #14]
 8005598:	e003      	b.n	80055a2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800559a:	2301      	movs	r3, #1
 800559c:	737b      	strb	r3, [r7, #13]
 800559e:	2301      	movs	r3, #1
 80055a0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80055a2:	bf00      	nop
 80055a4:	f7ff fde8 	bl	8005178 <SPI_Timer_Status>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <USER_SPI_initialize+0x162>
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff fee3 	bl	800537e <send_cmd>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f2      	bne.n	80055a4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80055be:	f7ff fddb 	bl	8005178 <SPI_Timer_Status>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <USER_SPI_initialize+0x17c>
 80055c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055cc:	2010      	movs	r0, #16
 80055ce:	f7ff fed6 	bl	800537e <send_cmd>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <USER_SPI_initialize+0x180>
				ty = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80055dc:	4a14      	ldr	r2, [pc, #80]	@ (8005630 <USER_SPI_initialize+0x1d4>)
 80055de:	7b7b      	ldrb	r3, [r7, #13]
 80055e0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80055e2:	f7ff fe49 	bl	8005278 <despiselect>

	if (ty) {			/* OK */
 80055e6:	7b7b      	ldrb	r3, [r7, #13]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d012      	beq.n	8005612 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80055ec:	4b0f      	ldr	r3, [pc, #60]	@ (800562c <USER_SPI_initialize+0x1d0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80055f6:	4b0d      	ldr	r3, [pc, #52]	@ (800562c <USER_SPI_initialize+0x1d0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0210 	orr.w	r2, r2, #16
 80055fe:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005600:	4b09      	ldr	r3, [pc, #36]	@ (8005628 <USER_SPI_initialize+0x1cc>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f023 0301 	bic.w	r3, r3, #1
 800560a:	b2da      	uxtb	r2, r3
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <USER_SPI_initialize+0x1cc>)
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e002      	b.n	8005618 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005612:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <USER_SPI_initialize+0x1cc>)
 8005614:	2201      	movs	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005618:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <USER_SPI_initialize+0x1cc>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b2db      	uxtb	r3, r3
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bd90      	pop	{r4, r7, pc}
 8005626:	bf00      	nop
 8005628:	2000002c 	.word	0x2000002c
 800562c:	200039a0 	.word	0x200039a0
 8005630:	20003a50 	.word	0x20003a50

08005634 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <USER_SPI_status+0x14>
 8005644:	2301      	movs	r3, #1
 8005646:	e002      	b.n	800564e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005648:	4b04      	ldr	r3, [pc, #16]	@ (800565c <USER_SPI_status+0x28>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b2db      	uxtb	r3, r3
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000002c 	.word	0x2000002c

08005660 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <USER_SPI_read+0x1c>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <USER_SPI_read+0x20>
 800567c:	2304      	movs	r3, #4
 800567e:	e04d      	b.n	800571c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005680:	4b28      	ldr	r3, [pc, #160]	@ (8005724 <USER_SPI_read+0xc4>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <USER_SPI_read+0x32>
 800568e:	2303      	movs	r3, #3
 8005690:	e044      	b.n	800571c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005692:	4b25      	ldr	r3, [pc, #148]	@ (8005728 <USER_SPI_read+0xc8>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <USER_SPI_read+0x44>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	025b      	lsls	r3, r3, #9
 80056a2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d111      	bne.n	80056ce <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	2011      	movs	r0, #17
 80056ae:	f7ff fe66 	bl	800537e <send_cmd>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d129      	bne.n	800570c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80056b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80056bc:	68b8      	ldr	r0, [r7, #8]
 80056be:	f7ff fe03 	bl	80052c8 <rcvr_datablock>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d021      	beq.n	800570c <USER_SPI_read+0xac>
			count = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	e01e      	b.n	800570c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	2012      	movs	r0, #18
 80056d2:	f7ff fe54 	bl	800537e <send_cmd>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d117      	bne.n	800570c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80056dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80056e0:	68b8      	ldr	r0, [r7, #8]
 80056e2:	f7ff fdf1 	bl	80052c8 <rcvr_datablock>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <USER_SPI_read+0xa2>
				buff += 512;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80056f2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1ed      	bne.n	80056dc <USER_SPI_read+0x7c>
 8005700:	e000      	b.n	8005704 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005702:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005704:	2100      	movs	r1, #0
 8005706:	200c      	movs	r0, #12
 8005708:	f7ff fe39 	bl	800537e <send_cmd>
		}
	}
	despiselect();
 800570c:	f7ff fdb4 	bl	8005278 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	2000002c 	.word	0x2000002c
 8005728:	20003a50 	.word	0x20003a50

0800572c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <USER_SPI_write+0x1c>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <USER_SPI_write+0x20>
 8005748:	2304      	movs	r3, #4
 800574a:	e063      	b.n	8005814 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800574c:	4b33      	ldr	r3, [pc, #204]	@ (800581c <USER_SPI_write+0xf0>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <USER_SPI_write+0x32>
 800575a:	2303      	movs	r3, #3
 800575c:	e05a      	b.n	8005814 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800575e:	4b2f      	ldr	r3, [pc, #188]	@ (800581c <USER_SPI_write+0xf0>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <USER_SPI_write+0x44>
 800576c:	2302      	movs	r3, #2
 800576e:	e051      	b.n	8005814 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005770:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <USER_SPI_write+0xf4>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <USER_SPI_write+0x56>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d110      	bne.n	80057aa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	2018      	movs	r0, #24
 800578c:	f7ff fdf7 	bl	800537e <send_cmd>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d136      	bne.n	8005804 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005796:	21fe      	movs	r1, #254	@ 0xfe
 8005798:	68b8      	ldr	r0, [r7, #8]
 800579a:	f7ff fdbe 	bl	800531a <xmit_datablock>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02f      	beq.n	8005804 <USER_SPI_write+0xd8>
			count = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	e02c      	b.n	8005804 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80057aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005820 <USER_SPI_write+0xf4>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <USER_SPI_write+0x92>
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	2097      	movs	r0, #151	@ 0x97
 80057ba:	f7ff fde0 	bl	800537e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	2019      	movs	r0, #25
 80057c2:	f7ff fddc 	bl	800537e <send_cmd>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11b      	bne.n	8005804 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80057cc:	21fc      	movs	r1, #252	@ 0xfc
 80057ce:	68b8      	ldr	r0, [r7, #8]
 80057d0:	f7ff fda3 	bl	800531a <xmit_datablock>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <USER_SPI_write+0xc4>
				buff += 512;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80057e0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1ee      	bne.n	80057cc <USER_SPI_write+0xa0>
 80057ee:	e000      	b.n	80057f2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80057f0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80057f2:	21fd      	movs	r1, #253	@ 0xfd
 80057f4:	2000      	movs	r0, #0
 80057f6:	f7ff fd90 	bl	800531a <xmit_datablock>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <USER_SPI_write+0xd8>
 8005800:	2301      	movs	r3, #1
 8005802:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005804:	f7ff fd38 	bl	8005278 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	bf14      	ite	ne
 800580e:	2301      	movne	r3, #1
 8005810:	2300      	moveq	r3, #0
 8005812:	b2db      	uxtb	r3, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	2000002c 	.word	0x2000002c
 8005820:	20003a50 	.word	0x20003a50

08005824 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	@ 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	603a      	str	r2, [r7, #0]
 800582e:	71fb      	strb	r3, [r7, #7]
 8005830:	460b      	mov	r3, r1
 8005832:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <USER_SPI_ioctl+0x1a>
 800583a:	2304      	movs	r3, #4
 800583c:	e15a      	b.n	8005af4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800583e:	4baf      	ldr	r3, [pc, #700]	@ (8005afc <USER_SPI_ioctl+0x2d8>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <USER_SPI_ioctl+0x2c>
 800584c:	2303      	movs	r3, #3
 800584e:	e151      	b.n	8005af4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005856:	79bb      	ldrb	r3, [r7, #6]
 8005858:	2b04      	cmp	r3, #4
 800585a:	f200 8136 	bhi.w	8005aca <USER_SPI_ioctl+0x2a6>
 800585e:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <USER_SPI_ioctl+0x40>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	08005879 	.word	0x08005879
 8005868:	0800588d 	.word	0x0800588d
 800586c:	08005acb 	.word	0x08005acb
 8005870:	08005939 	.word	0x08005939
 8005874:	08005a2f 	.word	0x08005a2f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005878:	f7ff fd0c 	bl	8005294 <spiselect>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8127 	beq.w	8005ad2 <USER_SPI_ioctl+0x2ae>
 8005884:	2300      	movs	r3, #0
 8005886:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800588a:	e122      	b.n	8005ad2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800588c:	2100      	movs	r1, #0
 800588e:	2009      	movs	r0, #9
 8005890:	f7ff fd75 	bl	800537e <send_cmd>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	f040 811d 	bne.w	8005ad6 <USER_SPI_ioctl+0x2b2>
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	2110      	movs	r1, #16
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fd10 	bl	80052c8 <rcvr_datablock>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8113 	beq.w	8005ad6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80058b0:	7b3b      	ldrb	r3, [r7, #12]
 80058b2:	099b      	lsrs	r3, r3, #6
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d111      	bne.n	80058de <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80058ba:	7d7b      	ldrb	r3, [r7, #21]
 80058bc:	461a      	mov	r2, r3
 80058be:	7d3b      	ldrb	r3, [r7, #20]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	4413      	add	r3, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80058ce:	4413      	add	r3, r2
 80058d0:	3301      	adds	r3, #1
 80058d2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	029a      	lsls	r2, r3, #10
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e028      	b.n	8005930 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80058de:	7c7b      	ldrb	r3, [r7, #17]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	7dbb      	ldrb	r3, [r7, #22]
 80058e8:	09db      	lsrs	r3, r3, #7
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	7d7b      	ldrb	r3, [r7, #21]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 0306 	and.w	r3, r3, #6
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	4413      	add	r3, r2
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	3302      	adds	r3, #2
 8005902:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005906:	7d3b      	ldrb	r3, [r7, #20]
 8005908:	099b      	lsrs	r3, r3, #6
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	7cbb      	ldrb	r3, [r7, #18]
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800591c:	4413      	add	r3, r2
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005922:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005926:	3b09      	subs	r3, #9
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	409a      	lsls	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005936:	e0ce      	b.n	8005ad6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005938:	4b71      	ldr	r3, [pc, #452]	@ (8005b00 <USER_SPI_ioctl+0x2dc>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d031      	beq.n	80059a8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005944:	2100      	movs	r1, #0
 8005946:	208d      	movs	r0, #141	@ 0x8d
 8005948:	f7ff fd19 	bl	800537e <send_cmd>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 80c3 	bne.w	8005ada <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005954:	20ff      	movs	r0, #255	@ 0xff
 8005956:	f7ff fc25 	bl	80051a4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	2110      	movs	r1, #16
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fcb1 	bl	80052c8 <rcvr_datablock>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80b6 	beq.w	8005ada <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800596e:	2330      	movs	r3, #48	@ 0x30
 8005970:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005974:	e007      	b.n	8005986 <USER_SPI_ioctl+0x162>
 8005976:	20ff      	movs	r0, #255	@ 0xff
 8005978:	f7ff fc14 	bl	80051a4 <xchg_spi>
 800597c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005980:	3b01      	subs	r3, #1
 8005982:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005986:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f3      	bne.n	8005976 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800598e:	7dbb      	ldrb	r3, [r7, #22]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	b2db      	uxtb	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	2310      	movs	r3, #16
 8005998:	fa03 f202 	lsl.w	r2, r3, r2
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80059a6:	e098      	b.n	8005ada <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80059a8:	2100      	movs	r1, #0
 80059aa:	2009      	movs	r0, #9
 80059ac:	f7ff fce7 	bl	800537e <send_cmd>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 8091 	bne.w	8005ada <USER_SPI_ioctl+0x2b6>
 80059b8:	f107 030c 	add.w	r3, r7, #12
 80059bc:	2110      	movs	r1, #16
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fc82 	bl	80052c8 <rcvr_datablock>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8087 	beq.w	8005ada <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80059cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005b00 <USER_SPI_ioctl+0x2dc>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d012      	beq.n	80059fe <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80059d8:	7dbb      	ldrb	r3, [r7, #22]
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80059e0:	7dfa      	ldrb	r2, [r7, #23]
 80059e2:	09d2      	lsrs	r2, r2, #7
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	4413      	add	r3, r2
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	7e7b      	ldrb	r3, [r7, #25]
 80059ec:	099b      	lsrs	r3, r3, #6
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e013      	b.n	8005a26 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80059fe:	7dbb      	ldrb	r3, [r7, #22]
 8005a00:	109b      	asrs	r3, r3, #2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	3301      	adds	r3, #1
 8005a0a:	7dfa      	ldrb	r2, [r7, #23]
 8005a0c:	00d2      	lsls	r2, r2, #3
 8005a0e:	f002 0218 	and.w	r2, r2, #24
 8005a12:	7df9      	ldrb	r1, [r7, #23]
 8005a14:	0949      	lsrs	r1, r1, #5
 8005a16:	b2c9      	uxtb	r1, r1
 8005a18:	440a      	add	r2, r1
 8005a1a:	3201      	adds	r2, #1
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005a2c:	e055      	b.n	8005ada <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005a2e:	4b34      	ldr	r3, [pc, #208]	@ (8005b00 <USER_SPI_ioctl+0x2dc>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f003 0306 	and.w	r3, r3, #6
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d051      	beq.n	8005ade <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005a3a:	f107 020c 	add.w	r2, r7, #12
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	210b      	movs	r1, #11
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff feee 	bl	8005824 <USER_SPI_ioctl>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d149      	bne.n	8005ae2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005a4e:	7b3b      	ldrb	r3, [r7, #12]
 8005a50:	099b      	lsrs	r3, r3, #6
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <USER_SPI_ioctl+0x23e>
 8005a58:	7dbb      	ldrb	r3, [r7, #22]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d041      	beq.n	8005ae6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005a72:	4b23      	ldr	r3, [pc, #140]	@ (8005b00 <USER_SPI_ioctl+0x2dc>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a80:	025b      	lsls	r3, r3, #9
 8005a82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	025b      	lsls	r3, r3, #9
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8c:	2020      	movs	r0, #32
 8005a8e:	f7ff fc76 	bl	800537e <send_cmd>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d128      	bne.n	8005aea <USER_SPI_ioctl+0x2c6>
 8005a98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a9a:	2021      	movs	r0, #33	@ 0x21
 8005a9c:	f7ff fc6f 	bl	800537e <send_cmd>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d121      	bne.n	8005aea <USER_SPI_ioctl+0x2c6>
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	2026      	movs	r0, #38	@ 0x26
 8005aaa:	f7ff fc68 	bl	800537e <send_cmd>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11a      	bne.n	8005aea <USER_SPI_ioctl+0x2c6>
 8005ab4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005ab8:	f7ff fbba 	bl	8005230 <wait_ready>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005ac8:	e00f      	b.n	8005aea <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005aca:	2304      	movs	r3, #4
 8005acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005ad0:	e00c      	b.n	8005aec <USER_SPI_ioctl+0x2c8>
		break;
 8005ad2:	bf00      	nop
 8005ad4:	e00a      	b.n	8005aec <USER_SPI_ioctl+0x2c8>
		break;
 8005ad6:	bf00      	nop
 8005ad8:	e008      	b.n	8005aec <USER_SPI_ioctl+0x2c8>
		break;
 8005ada:	bf00      	nop
 8005adc:	e006      	b.n	8005aec <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005ade:	bf00      	nop
 8005ae0:	e004      	b.n	8005aec <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005ae2:	bf00      	nop
 8005ae4:	e002      	b.n	8005aec <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <USER_SPI_ioctl+0x2c8>
		break;
 8005aea:	bf00      	nop
	}

	despiselect();
 8005aec:	f7ff fbc4 	bl	8005278 <despiselect>

	return res;
 8005af0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3730      	adds	r7, #48	@ 0x30
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	2000002c 	.word	0x2000002c
 8005b00:	20003a50 	.word	0x20003a50

08005b04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	4a08      	ldr	r2, [pc, #32]	@ (8005b34 <disk_status+0x30>)
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	79fa      	ldrb	r2, [r7, #7]
 8005b1c:	4905      	ldr	r1, [pc, #20]	@ (8005b34 <disk_status+0x30>)
 8005b1e:	440a      	add	r2, r1
 8005b20:	7a12      	ldrb	r2, [r2, #8]
 8005b22:	4610      	mov	r0, r2
 8005b24:	4798      	blx	r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20003a84 	.word	0x20003a84

08005b38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	4a0e      	ldr	r2, [pc, #56]	@ (8005b84 <disk_initialize+0x4c>)
 8005b4a:	5cd3      	ldrb	r3, [r2, r3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d114      	bne.n	8005b7a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	@ (8005b84 <disk_initialize+0x4c>)
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	79fa      	ldrb	r2, [r7, #7]
 8005b5e:	4909      	ldr	r1, [pc, #36]	@ (8005b84 <disk_initialize+0x4c>)
 8005b60:	440a      	add	r2, r1
 8005b62:	7a12      	ldrb	r2, [r2, #8]
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	4a03      	ldr	r2, [pc, #12]	@ (8005b84 <disk_initialize+0x4c>)
 8005b76:	2101      	movs	r1, #1
 8005b78:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20003a84 	.word	0x20003a84

08005b88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b88:	b590      	push	{r4, r7, lr}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc4 <disk_read+0x3c>)
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	689c      	ldr	r4, [r3, #8]
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	4a07      	ldr	r2, [pc, #28]	@ (8005bc4 <disk_read+0x3c>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	7a18      	ldrb	r0, [r3, #8]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	47a0      	blx	r4
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd90      	pop	{r4, r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20003a84 	.word	0x20003a84

08005bc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <disk_write+0x3c>)
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68dc      	ldr	r4, [r3, #12]
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	4a07      	ldr	r2, [pc, #28]	@ (8005c04 <disk_write+0x3c>)
 8005be8:	4413      	add	r3, r2
 8005bea:	7a18      	ldrb	r0, [r3, #8]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	47a0      	blx	r4
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd90      	pop	{r4, r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20003a84 	.word	0x20003a84

08005c08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3301      	adds	r3, #1
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	b21a      	sxth	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	b21b      	sxth	r3, r3
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b21b      	sxth	r3, r3
 8005c2a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3303      	adds	r3, #3
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	3202      	adds	r2, #2
 8005c52:	7812      	ldrb	r2, [r2, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	3201      	adds	r2, #1
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c72:	68fb      	ldr	r3, [r7, #12]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	887a      	ldrh	r2, [r7, #2]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	607a      	str	r2, [r7, #4]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d0e:	b480      	push	{r7}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00d      	beq.n	8005d44 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	1c53      	adds	r3, r2, #1
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	1c59      	adds	r1, r3, #1
 8005d32:	6179      	str	r1, [r7, #20]
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f1      	bne.n	8005d28 <mem_cpy+0x1a>
	}
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	617a      	str	r2, [r7, #20]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f3      	bne.n	8005d60 <mem_set+0x10>
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005d86:	b480      	push	{r7}
 8005d88:	b089      	sub	sp, #36	@ 0x24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	61fa      	str	r2, [r7, #28]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	61ba      	str	r2, [r7, #24]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	1acb      	subs	r3, r1, r3
 8005db2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	607b      	str	r3, [r7, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <mem_cmp+0x40>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0eb      	beq.n	8005d9e <mem_cmp+0x18>

	return r;
 8005dc6:	697b      	ldr	r3, [r7, #20]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3724      	adds	r7, #36	@ 0x24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005dde:	e002      	b.n	8005de6 <chk_chr+0x12>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3301      	adds	r3, #1
 8005de4:	607b      	str	r3, [r7, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <chk_chr+0x26>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d1f2      	bne.n	8005de0 <chk_chr+0xc>
	return *str;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e029      	b.n	8005e74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e20:	4a27      	ldr	r2, [pc, #156]	@ (8005ec0 <chk_lock+0xb4>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	4413      	add	r3, r2
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01d      	beq.n	8005e6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e2e:	4a24      	ldr	r2, [pc, #144]	@ (8005ec0 <chk_lock+0xb4>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	4413      	add	r3, r2
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d116      	bne.n	8005e6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e40:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec0 <chk_lock+0xb4>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	4413      	add	r3, r2
 8005e48:	3304      	adds	r3, #4
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d10c      	bne.n	8005e6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e54:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec0 <chk_lock+0xb4>)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d102      	bne.n	8005e6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e68:	e007      	b.n	8005e7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3301      	adds	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d9d2      	bls.n	8005e20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d109      	bne.n	8005e94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d102      	bne.n	8005e8c <chk_lock+0x80>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d101      	bne.n	8005e90 <chk_lock+0x84>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e010      	b.n	8005eb2 <chk_lock+0xa6>
 8005e90:	2312      	movs	r3, #18
 8005e92:	e00e      	b.n	8005eb2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d108      	bne.n	8005eac <chk_lock+0xa0>
 8005e9a:	4a09      	ldr	r2, [pc, #36]	@ (8005ec0 <chk_lock+0xb4>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	4413      	add	r3, r2
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eaa:	d101      	bne.n	8005eb0 <chk_lock+0xa4>
 8005eac:	2310      	movs	r3, #16
 8005eae:	e000      	b.n	8005eb2 <chk_lock+0xa6>
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20003a64 	.word	0x20003a64

08005ec4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	607b      	str	r3, [r7, #4]
 8005ece:	e002      	b.n	8005ed6 <enq_lock+0x12>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d806      	bhi.n	8005eea <enq_lock+0x26>
 8005edc:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <enq_lock+0x40>)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	4413      	add	r3, r2
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f2      	bne.n	8005ed0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20003a64 	.word	0x20003a64

08005f08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e01f      	b.n	8005f58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f18:	4a41      	ldr	r2, [pc, #260]	@ (8006020 <inc_lock+0x118>)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	4413      	add	r3, r2
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d113      	bne.n	8005f52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8006020 <inc_lock+0x118>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	4413      	add	r3, r2
 8005f32:	3304      	adds	r3, #4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d109      	bne.n	8005f52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f3e:	4a38      	ldr	r2, [pc, #224]	@ (8006020 <inc_lock+0x118>)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	4413      	add	r3, r2
 8005f46:	3308      	adds	r3, #8
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d006      	beq.n	8005f60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d9dc      	bls.n	8005f18 <inc_lock+0x10>
 8005f5e:	e000      	b.n	8005f62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005f60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d132      	bne.n	8005fce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	e002      	b.n	8005f74 <inc_lock+0x6c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3301      	adds	r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d806      	bhi.n	8005f88 <inc_lock+0x80>
 8005f7a:	4a29      	ldr	r2, [pc, #164]	@ (8006020 <inc_lock+0x118>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	4413      	add	r3, r2
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f2      	bne.n	8005f6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d101      	bne.n	8005f92 <inc_lock+0x8a>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e040      	b.n	8006014 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4922      	ldr	r1, [pc, #136]	@ (8006020 <inc_lock+0x118>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	440b      	add	r3, r1
 8005f9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	491e      	ldr	r1, [pc, #120]	@ (8006020 <inc_lock+0x118>)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	440b      	add	r3, r1
 8005fac:	3304      	adds	r3, #4
 8005fae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	491a      	ldr	r1, [pc, #104]	@ (8006020 <inc_lock+0x118>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	440b      	add	r3, r1
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005fc0:	4a17      	ldr	r2, [pc, #92]	@ (8006020 <inc_lock+0x118>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	4413      	add	r3, r2
 8005fc8:	330c      	adds	r3, #12
 8005fca:	2200      	movs	r2, #0
 8005fcc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <inc_lock+0xe0>
 8005fd4:	4a12      	ldr	r2, [pc, #72]	@ (8006020 <inc_lock+0x118>)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4413      	add	r3, r2
 8005fdc:	330c      	adds	r3, #12
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <inc_lock+0xe0>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e015      	b.n	8006014 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <inc_lock+0xf8>
 8005fee:	4a0c      	ldr	r2, [pc, #48]	@ (8006020 <inc_lock+0x118>)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	4413      	add	r3, r2
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	e001      	b.n	8006004 <inc_lock+0xfc>
 8006000:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006004:	4906      	ldr	r1, [pc, #24]	@ (8006020 <inc_lock+0x118>)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	440b      	add	r3, r1
 800600c:	330c      	adds	r3, #12
 800600e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20003a64 	.word	0x20003a64

08006024 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e010      	b.n	8006054 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006032:	4a0d      	ldr	r2, [pc, #52]	@ (8006068 <clear_lock+0x44>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4413      	add	r3, r2
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	429a      	cmp	r2, r3
 8006040:	d105      	bne.n	800604e <clear_lock+0x2a>
 8006042:	4a09      	ldr	r2, [pc, #36]	@ (8006068 <clear_lock+0x44>)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	4413      	add	r3, r2
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d9eb      	bls.n	8006032 <clear_lock+0xe>
	}
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20003a64 	.word	0x20003a64

0800606c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	78db      	ldrb	r3, [r3, #3]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d034      	beq.n	80060ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	7858      	ldrb	r0, [r3, #1]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006090:	2301      	movs	r3, #1
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	f7ff fd98 	bl	8005bc8 <disk_write>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800609e:	2301      	movs	r3, #1
 80060a0:	73fb      	strb	r3, [r7, #15]
 80060a2:	e022      	b.n	80060ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	1ad2      	subs	r2, r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d217      	bcs.n	80060ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	789b      	ldrb	r3, [r3, #2]
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e010      	b.n	80060e4 <sync_window+0x78>
					wsect += fs->fsize;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7858      	ldrb	r0, [r3, #1]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060d6:	2301      	movs	r3, #1
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	f7ff fd75 	bl	8005bc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d8eb      	bhi.n	80060c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d01b      	beq.n	8006144 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ffad 	bl	800606c <sync_window>
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d113      	bne.n	8006144 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	7858      	ldrb	r0, [r3, #1]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006126:	2301      	movs	r3, #1
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	f7ff fd2d 	bl	8005b88 <disk_read>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006134:	f04f 33ff 	mov.w	r3, #4294967295
 8006138:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800613a:	2301      	movs	r3, #1
 800613c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	3b02      	subs	r3, #2
 800615c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	3b02      	subs	r3, #2
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d301      	bcc.n	800616e <clust2sect+0x20>
 800616a:	2300      	movs	r3, #0
 800616c:	e008      	b.n	8006180 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	895b      	ldrh	r3, [r3, #10]
 8006172:	461a      	mov	r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	fb03 f202 	mul.w	r2, r3, r2
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	4413      	add	r3, r2
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d904      	bls.n	80061ac <get_fat+0x20>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d302      	bcc.n	80061b2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80061ac:	2301      	movs	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e08e      	b.n	80062d0 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295
 80061b6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d061      	beq.n	8006284 <get_fat+0xf8>
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	dc7b      	bgt.n	80062bc <get_fat+0x130>
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d002      	beq.n	80061ce <get_fat+0x42>
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d041      	beq.n	8006250 <get_fat+0xc4>
 80061cc:	e076      	b.n	80062bc <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	0a5b      	lsrs	r3, r3, #9
 80061e4:	4413      	add	r3, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	6938      	ldr	r0, [r7, #16]
 80061ea:	f7ff ff83 	bl	80060f4 <move_window>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d166      	bne.n	80062c2 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	60fa      	str	r2, [r7, #12]
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006206:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	0a5b      	lsrs	r3, r3, #9
 8006210:	4413      	add	r3, r2
 8006212:	4619      	mov	r1, r3
 8006214:	6938      	ldr	r0, [r7, #16]
 8006216:	f7ff ff6d 	bl	80060f4 <move_window>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d152      	bne.n	80062c6 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <get_fat+0xba>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	e002      	b.n	800624c <get_fat+0xc0>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800624c:	617b      	str	r3, [r7, #20]
			break;
 800624e:	e03f      	b.n	80062d0 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	4413      	add	r3, r2
 800625a:	4619      	mov	r1, r3
 800625c:	6938      	ldr	r0, [r7, #16]
 800625e:	f7ff ff49 	bl	80060f4 <move_window>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d130      	bne.n	80062ca <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006276:	4413      	add	r3, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fcc5 	bl	8005c08 <ld_word>
 800627e:	4603      	mov	r3, r0
 8006280:	617b      	str	r3, [r7, #20]
			break;
 8006282:	e025      	b.n	80062d0 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	09db      	lsrs	r3, r3, #7
 800628c:	4413      	add	r3, r2
 800628e:	4619      	mov	r1, r3
 8006290:	6938      	ldr	r0, [r7, #16]
 8006292:	f7ff ff2f 	bl	80060f4 <move_window>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d118      	bne.n	80062ce <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80062aa:	4413      	add	r3, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fcc4 	bl	8005c3a <ld_dword>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80062b8:	617b      	str	r3, [r7, #20]
			break;
 80062ba:	e009      	b.n	80062d0 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e006      	b.n	80062d0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062c2:	bf00      	nop
 80062c4:	e004      	b.n	80062d0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062c6:	bf00      	nop
 80062c8:	e002      	b.n	80062d0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062ca:	bf00      	nop
 80062cc:	e000      	b.n	80062d0 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062ce:	bf00      	nop
		}
	}

	return val;
 80062d0:	697b      	ldr	r3, [r7, #20]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80062da:	b590      	push	{r4, r7, lr}
 80062dc:	b089      	sub	sp, #36	@ 0x24
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80062e6:	2302      	movs	r3, #2
 80062e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	f240 80d9 	bls.w	80064a4 <put_fat+0x1ca>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	f080 80d3 	bcs.w	80064a4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b03      	cmp	r3, #3
 8006304:	f000 8096 	beq.w	8006434 <put_fat+0x15a>
 8006308:	2b03      	cmp	r3, #3
 800630a:	f300 80cb 	bgt.w	80064a4 <put_fat+0x1ca>
 800630e:	2b01      	cmp	r3, #1
 8006310:	d002      	beq.n	8006318 <put_fat+0x3e>
 8006312:	2b02      	cmp	r3, #2
 8006314:	d06e      	beq.n	80063f4 <put_fat+0x11a>
 8006316:	e0c5      	b.n	80064a4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4413      	add	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	0a5b      	lsrs	r3, r3, #9
 800632e:	4413      	add	r3, r2
 8006330:	4619      	mov	r1, r3
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff fede 	bl	80060f4 <move_window>
 8006338:	4603      	mov	r3, r0
 800633a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800633c:	7ffb      	ldrb	r3, [r7, #31]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 80a9 	bne.w	8006496 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	1c59      	adds	r1, r3, #1
 800634e:	61b9      	str	r1, [r7, #24]
 8006350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006354:	4413      	add	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <put_fat+0xa4>
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	b25b      	sxtb	r3, r3
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	b25a      	sxtb	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	b25b      	sxtb	r3, r3
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	b25b      	sxtb	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b25b      	sxtb	r3, r3
 800637a:	b2db      	uxtb	r3, r3
 800637c:	e001      	b.n	8006382 <put_fat+0xa8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a1a      	ldr	r2, [r3, #32]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	0a5b      	lsrs	r3, r3, #9
 8006394:	4413      	add	r3, r2
 8006396:	4619      	mov	r1, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff feab 	bl	80060f4 <move_window>
 800639e:	4603      	mov	r3, r0
 80063a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063a2:	7ffb      	ldrb	r3, [r7, #31]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d178      	bne.n	800649a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b4:	4413      	add	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <put_fat+0xf0>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	e00e      	b.n	80063e8 <put_fat+0x10e>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	f023 030f 	bic.w	r3, r3, #15
 80063d4:	b25a      	sxtb	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	b25b      	sxtb	r3, r3
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	b25b      	sxtb	r3, r3
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	70da      	strb	r2, [r3, #3]
			break;
 80063f2:	e057      	b.n	80064a4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	4413      	add	r3, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff fe77 	bl	80060f4 <move_window>
 8006406:	4603      	mov	r3, r0
 8006408:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800640a:	7ffb      	ldrb	r3, [r7, #31]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d146      	bne.n	800649e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800641e:	4413      	add	r3, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	b292      	uxth	r2, r2
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fc2a 	bl	8005c80 <st_word>
			fs->wflag = 1;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	70da      	strb	r2, [r3, #3]
			break;
 8006432:	e037      	b.n	80064a4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	4413      	add	r3, r2
 800643e:	4619      	mov	r1, r3
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff fe57 	bl	80060f4 <move_window>
 8006446:	4603      	mov	r3, r0
 8006448:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800644a:	7ffb      	ldrb	r3, [r7, #31]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d128      	bne.n	80064a2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006464:	4413      	add	r3, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fbe7 	bl	8005c3a <ld_dword>
 800646c:	4603      	mov	r3, r0
 800646e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006472:	4323      	orrs	r3, r4
 8006474:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006484:	4413      	add	r3, r2
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fc14 	bl	8005cb6 <st_dword>
			fs->wflag = 1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	70da      	strb	r2, [r3, #3]
			break;
 8006494:	e006      	b.n	80064a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006496:	bf00      	nop
 8006498:	e004      	b.n	80064a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800649a:	bf00      	nop
 800649c:	e002      	b.n	80064a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800649e:	bf00      	nop
 80064a0:	e000      	b.n	80064a4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80064a2:	bf00      	nop
		}
	}
	return res;
 80064a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	@ 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd90      	pop	{r4, r7, pc}

080064ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b088      	sub	sp, #32
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d904      	bls.n	80064d4 <remove_chain+0x26>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d301      	bcc.n	80064d8 <remove_chain+0x2a>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e04b      	b.n	8006570 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00c      	beq.n	80064f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80064de:	f04f 32ff 	mov.w	r2, #4294967295
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	69b8      	ldr	r0, [r7, #24]
 80064e6:	f7ff fef8 	bl	80062da <put_fat>
 80064ea:	4603      	mov	r3, r0
 80064ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <remove_chain+0x4a>
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	e03b      	b.n	8006570 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff fe46 	bl	800618c <get_fat>
 8006500:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d031      	beq.n	800656c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <remove_chain+0x64>
 800650e:	2302      	movs	r3, #2
 8006510:	e02e      	b.n	8006570 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d101      	bne.n	800651e <remove_chain+0x70>
 800651a:	2301      	movs	r3, #1
 800651c:	e028      	b.n	8006570 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800651e:	2200      	movs	r2, #0
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	69b8      	ldr	r0, [r7, #24]
 8006524:	f7ff fed9 	bl	80062da <put_fat>
 8006528:	4603      	mov	r3, r0
 800652a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800652c:	7ffb      	ldrb	r3, [r7, #31]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <remove_chain+0x88>
 8006532:	7ffb      	ldrb	r3, [r7, #31]
 8006534:	e01c      	b.n	8006570 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	3b02      	subs	r3, #2
 8006540:	429a      	cmp	r2, r3
 8006542:	d20b      	bcs.n	800655c <remove_chain+0xae>
			fs->free_clst++;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	791b      	ldrb	r3, [r3, #4]
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	b2da      	uxtb	r2, r3
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	d3c6      	bcc.n	80064f8 <remove_chain+0x4a>
 800656a:	e000      	b.n	800656e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800656c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10d      	bne.n	80065aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <create_chain+0x2c>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d31b      	bcc.n	80065dc <create_chain+0x64>
 80065a4:	2301      	movs	r3, #1
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	e018      	b.n	80065dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fded 	bl	800618c <get_fat>
 80065b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d801      	bhi.n	80065be <create_chain+0x46>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e070      	b.n	80066a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d101      	bne.n	80065ca <create_chain+0x52>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	e06a      	b.n	80066a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d201      	bcs.n	80065d8 <create_chain+0x60>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	e063      	b.n	80066a0 <create_chain+0x128>
		scl = clst;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	3301      	adds	r3, #1
 80065e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d307      	bcc.n	8006600 <create_chain+0x88>
				ncl = 2;
 80065f0:	2302      	movs	r3, #2
 80065f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d901      	bls.n	8006600 <create_chain+0x88>
 80065fc:	2300      	movs	r3, #0
 80065fe:	e04f      	b.n	80066a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006600:	69f9      	ldr	r1, [r7, #28]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fdc2 	bl	800618c <get_fat>
 8006608:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d003      	beq.n	800661e <create_chain+0xa6>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d101      	bne.n	8006622 <create_chain+0xaa>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	e03e      	b.n	80066a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	429a      	cmp	r2, r3
 8006628:	d1da      	bne.n	80065e0 <create_chain+0x68>
 800662a:	2300      	movs	r3, #0
 800662c:	e038      	b.n	80066a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800662e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006630:	f04f 32ff 	mov.w	r2, #4294967295
 8006634:	69f9      	ldr	r1, [r7, #28]
 8006636:	6938      	ldr	r0, [r7, #16]
 8006638:	f7ff fe4f 	bl	80062da <put_fat>
 800663c:	4603      	mov	r3, r0
 800663e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <create_chain+0xe2>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d006      	beq.n	800665a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6938      	ldr	r0, [r7, #16]
 8006652:	f7ff fe42 	bl	80062da <put_fat>
 8006656:	4603      	mov	r3, r0
 8006658:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d116      	bne.n	800668e <create_chain+0x116>
		fs->last_clst = ncl;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	3b02      	subs	r3, #2
 8006670:	429a      	cmp	r2, r3
 8006672:	d804      	bhi.n	800667e <create_chain+0x106>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	1e5a      	subs	r2, r3, #1
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	711a      	strb	r2, [r3, #4]
 800668c:	e007      	b.n	800669e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d102      	bne.n	800669a <create_chain+0x122>
 8006694:	f04f 33ff 	mov.w	r3, #4294967295
 8006698:	e000      	b.n	800669c <create_chain+0x124>
 800669a:	2301      	movs	r3, #1
 800669c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800669e:	69fb      	ldr	r3, [r7, #28]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	3304      	adds	r3, #4
 80066be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	0a5b      	lsrs	r3, r3, #9
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	8952      	ldrh	r2, [r2, #10]
 80066c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1d1a      	adds	r2, r3, #4
 80066d2:	613a      	str	r2, [r7, #16]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <clmt_clust+0x3a>
 80066de:	2300      	movs	r3, #0
 80066e0:	e010      	b.n	8006704 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d307      	bcc.n	80066fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3304      	adds	r3, #4
 80066f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066f8:	e7e9      	b.n	80066ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80066fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4413      	add	r3, r2
}
 8006704:	4618      	mov	r0, r3
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006726:	d204      	bcs.n	8006732 <dir_sdi+0x22>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006732:	2302      	movs	r3, #2
 8006734:	e063      	b.n	80067fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <dir_sdi+0x46>
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d902      	bls.n	8006756 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10c      	bne.n	8006776 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	8912      	ldrh	r2, [r2, #8]
 8006764:	4293      	cmp	r3, r2
 8006766:	d301      	bcc.n	800676c <dir_sdi+0x5c>
 8006768:	2302      	movs	r3, #2
 800676a:	e048      	b.n	80067fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	61da      	str	r2, [r3, #28]
 8006774:	e029      	b.n	80067ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	895b      	ldrh	r3, [r3, #10]
 800677a:	025b      	lsls	r3, r3, #9
 800677c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800677e:	e019      	b.n	80067b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6979      	ldr	r1, [r7, #20]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fd01 	bl	800618c <get_fat>
 800678a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d101      	bne.n	8006798 <dir_sdi+0x88>
 8006794:	2301      	movs	r3, #1
 8006796:	e032      	b.n	80067fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d904      	bls.n	80067a8 <dir_sdi+0x98>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d301      	bcc.n	80067ac <dir_sdi+0x9c>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e028      	b.n	80067fe <dir_sdi+0xee>
			ofs -= csz;
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d2e1      	bcs.n	8006780 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80067bc:	6979      	ldr	r1, [r7, #20]
 80067be:	6938      	ldr	r0, [r7, #16]
 80067c0:	f7ff fcc5 	bl	800614e <clust2sect>
 80067c4:	4602      	mov	r2, r0
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <dir_sdi+0xcc>
 80067d8:	2302      	movs	r3, #2
 80067da:	e010      	b.n	80067fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	0a5b      	lsrs	r3, r3, #9
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	441a      	add	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	3320      	adds	r3, #32
 800681c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <dir_next+0x28>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800682c:	d301      	bcc.n	8006832 <dir_next+0x2c>
 800682e:	2304      	movs	r3, #4
 8006830:	e0aa      	b.n	8006988 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006838:	2b00      	cmp	r3, #0
 800683a:	f040 8098 	bne.w	800696e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	8912      	ldrh	r2, [r2, #8]
 8006858:	4293      	cmp	r3, r2
 800685a:	f0c0 8088 	bcc.w	800696e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	61da      	str	r2, [r3, #28]
 8006864:	2304      	movs	r3, #4
 8006866:	e08f      	b.n	8006988 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	0a5b      	lsrs	r3, r3, #9
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	8952      	ldrh	r2, [r2, #10]
 8006870:	3a01      	subs	r2, #1
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d17a      	bne.n	800696e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f7ff fc83 	bl	800618c <get_fat>
 8006886:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d801      	bhi.n	8006892 <dir_next+0x8c>
 800688e:	2302      	movs	r3, #2
 8006890:	e07a      	b.n	8006988 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d101      	bne.n	800689e <dir_next+0x98>
 800689a:	2301      	movs	r3, #1
 800689c:	e074      	b.n	8006988 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d358      	bcc.n	800695a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d104      	bne.n	80068b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	61da      	str	r2, [r3, #28]
 80068b4:	2304      	movs	r3, #4
 80068b6:	e067      	b.n	8006988 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f7ff fe59 	bl	8006578 <create_chain>
 80068c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <dir_next+0xcc>
 80068ce:	2307      	movs	r3, #7
 80068d0:	e05a      	b.n	8006988 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <dir_next+0xd6>
 80068d8:	2302      	movs	r3, #2
 80068da:	e055      	b.n	8006988 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d101      	bne.n	80068e8 <dir_next+0xe2>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e04f      	b.n	8006988 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7ff fbbf 	bl	800606c <sync_window>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <dir_next+0xf2>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e047      	b.n	8006988 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3330      	adds	r3, #48	@ 0x30
 80068fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff fa24 	bl	8005d50 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	6979      	ldr	r1, [r7, #20]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff fc1d 	bl	800614e <clust2sect>
 8006914:	4602      	mov	r2, r0
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	62da      	str	r2, [r3, #44]	@ 0x2c
 800691a:	e012      	b.n	8006942 <dir_next+0x13c>
						fs->wflag = 1;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff fba2 	bl	800606c <sync_window>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <dir_next+0x12c>
 800692e:	2301      	movs	r3, #1
 8006930:	e02a      	b.n	8006988 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3301      	adds	r3, #1
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	895b      	ldrh	r3, [r3, #10]
 8006946:	461a      	mov	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	4293      	cmp	r3, r2
 800694c:	d3e6      	bcc.n	800691c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad2      	subs	r2, r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006960:	6979      	ldr	r1, [r7, #20]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff fbf3 	bl	800614e <clust2sect>
 8006968:	4602      	mov	r2, r0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006980:	441a      	add	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80069a0:	2100      	movs	r1, #0
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff feb4 	bl	8006710 <dir_sdi>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d12b      	bne.n	8006a0a <dir_alloc+0x7a>
		n = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4619      	mov	r1, r3
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff fb99 	bl	80060f4 <move_window>
 80069c2:	4603      	mov	r3, r0
 80069c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d11d      	bne.n	8006a08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2be5      	cmp	r3, #229	@ 0xe5
 80069d4:	d004      	beq.n	80069e0 <dir_alloc+0x50>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d107      	bne.n	80069f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3301      	adds	r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d102      	bne.n	80069f4 <dir_alloc+0x64>
 80069ee:	e00c      	b.n	8006a0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80069f4:	2101      	movs	r1, #1
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ff05 	bl	8006806 <dir_next>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0d7      	beq.n	80069b6 <dir_alloc+0x26>
 8006a06:	e000      	b.n	8006a0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d101      	bne.n	8006a14 <dir_alloc+0x84>
 8006a10:	2307      	movs	r3, #7
 8006a12:	75fb      	strb	r3, [r7, #23]
	return res;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	331a      	adds	r3, #26
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff f8eb 	bl	8005c08 <ld_word>
 8006a32:	4603      	mov	r3, r0
 8006a34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d109      	bne.n	8006a52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	3314      	adds	r3, #20
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff f8e0 	bl	8005c08 <ld_word>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	041b      	lsls	r3, r3, #16
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	331a      	adds	r3, #26
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff f904 	bl	8005c80 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d109      	bne.n	8006a94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f103 0214 	add.w	r2, r3, #20
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f7ff f8f6 	bl	8005c80 <st_word>
	}
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006aaa:	2100      	movs	r1, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe2f 	bl	8006710 <dir_sdi>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <dir_find+0x24>
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	e03e      	b.n	8006b3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6938      	ldr	r0, [r7, #16]
 8006ac8:	f7ff fb14 	bl	80060f4 <move_window>
 8006acc:	4603      	mov	r3, r0
 8006ace:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d12f      	bne.n	8006b36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <dir_find+0x4e>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	75fb      	strb	r3, [r7, #23]
 8006ae8:	e028      	b.n	8006b3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	330b      	adds	r3, #11
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	330b      	adds	r3, #11
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <dir_find+0x86>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a18      	ldr	r0, [r3, #32]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3324      	adds	r3, #36	@ 0x24
 8006b14:	220b      	movs	r2, #11
 8006b16:	4619      	mov	r1, r3
 8006b18:	f7ff f935 	bl	8005d86 <mem_cmp>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b22:	2100      	movs	r1, #0
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fe6e 	bl	8006806 <dir_next>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0c5      	beq.n	8006ac0 <dir_find+0x24>
 8006b34:	e002      	b.n	8006b3c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b3a:	bf00      	nop

	return res;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b54:	2101      	movs	r1, #1
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff ff1a 	bl	8006990 <dir_alloc>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11c      	bne.n	8006ba0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	68b8      	ldr	r0, [r7, #8]
 8006b6e:	f7ff fac1 	bl	80060f4 <move_window>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d111      	bne.n	8006ba0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	2220      	movs	r2, #32
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff f8e3 	bl	8005d50 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a18      	ldr	r0, [r3, #32]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3324      	adds	r3, #36	@ 0x24
 8006b92:	220b      	movs	r2, #11
 8006b94:	4619      	mov	r1, r3
 8006b96:	f7ff f8ba 	bl	8005d0e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b086      	sub	sp, #24
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d04f      	beq.n	8006c62 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006bca:	e022      	b.n	8006c12 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1a      	ldr	r2, [r3, #32]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	1c59      	adds	r1, r3, #1
 8006bd4:	6179      	str	r1, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d016      	beq.n	8006c10 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d101      	bne.n	8006bec <get_fileinfo+0x42>
 8006be8:	23e5      	movs	r3, #229	@ 0xe5
 8006bea:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2b09      	cmp	r3, #9
 8006bf0:	d106      	bne.n	8006c00 <get_fileinfo+0x56>
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	613a      	str	r2, [r7, #16]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	222e      	movs	r2, #46	@ 0x2e
 8006bfe:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	613a      	str	r2, [r7, #16]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4413      	add	r3, r2
 8006c0a:	7bfa      	ldrb	r2, [r7, #15]
 8006c0c:	725a      	strb	r2, [r3, #9]
 8006c0e:	e000      	b.n	8006c12 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006c10:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b0a      	cmp	r3, #10
 8006c16:	d9d9      	bls.n	8006bcc <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3309      	adds	r3, #9
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	7ada      	ldrb	r2, [r3, #11]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	331c      	adds	r3, #28
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff f800 	bl	8005c3a <ld_dword>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	3316      	adds	r3, #22
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fff7 	bl	8005c3a <ld_dword>
 8006c4c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	80da      	strh	r2, [r3, #6]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	0c1b      	lsrs	r3, r3, #16
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	809a      	strh	r2, [r3, #4]
 8006c60:	e000      	b.n	8006c64 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c62:	bf00      	nop
}
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3324      	adds	r3, #36	@ 0x24
 8006c80:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c82:	220b      	movs	r2, #11
 8006c84:	2120      	movs	r1, #32
 8006c86:	68b8      	ldr	r0, [r7, #8]
 8006c88:	f7ff f862 	bl	8005d50 <mem_set>
	si = i = 0; ni = 8;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	2308      	movs	r3, #8
 8006c96:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	61fa      	str	r2, [r7, #28]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006ca6:	7efb      	ldrb	r3, [r7, #27]
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d94e      	bls.n	8006d4a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006cac:	7efb      	ldrb	r3, [r7, #27]
 8006cae:	2b2f      	cmp	r3, #47	@ 0x2f
 8006cb0:	d006      	beq.n	8006cc0 <create_name+0x54>
 8006cb2:	7efb      	ldrb	r3, [r7, #27]
 8006cb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006cb6:	d110      	bne.n	8006cda <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006cb8:	e002      	b.n	8006cc0 <create_name+0x54>
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8006cca:	d0f6      	beq.n	8006cba <create_name+0x4e>
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006cd6:	d0f0      	beq.n	8006cba <create_name+0x4e>
			break;
 8006cd8:	e038      	b.n	8006d4c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006cda:	7efb      	ldrb	r3, [r7, #27]
 8006cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cde:	d003      	beq.n	8006ce8 <create_name+0x7c>
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d30c      	bcc.n	8006d02 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b0b      	cmp	r3, #11
 8006cec:	d002      	beq.n	8006cf4 <create_name+0x88>
 8006cee:	7efb      	ldrb	r3, [r7, #27]
 8006cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cf2:	d001      	beq.n	8006cf8 <create_name+0x8c>
 8006cf4:	2306      	movs	r3, #6
 8006cf6:	e044      	b.n	8006d82 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	230b      	movs	r3, #11
 8006cfe:	617b      	str	r3, [r7, #20]
			continue;
 8006d00:	e022      	b.n	8006d48 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006d02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da04      	bge.n	8006d14 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006d0a:	7efb      	ldrb	r3, [r7, #27]
 8006d0c:	3b80      	subs	r3, #128	@ 0x80
 8006d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006d8c <create_name+0x120>)
 8006d10:	5cd3      	ldrb	r3, [r2, r3]
 8006d12:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006d14:	7efb      	ldrb	r3, [r7, #27]
 8006d16:	4619      	mov	r1, r3
 8006d18:	481d      	ldr	r0, [pc, #116]	@ (8006d90 <create_name+0x124>)
 8006d1a:	f7ff f85b 	bl	8005dd4 <chk_chr>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <create_name+0xbc>
 8006d24:	2306      	movs	r3, #6
 8006d26:	e02c      	b.n	8006d82 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006d28:	7efb      	ldrb	r3, [r7, #27]
 8006d2a:	2b60      	cmp	r3, #96	@ 0x60
 8006d2c:	d905      	bls.n	8006d3a <create_name+0xce>
 8006d2e:	7efb      	ldrb	r3, [r7, #27]
 8006d30:	2b7a      	cmp	r3, #122	@ 0x7a
 8006d32:	d802      	bhi.n	8006d3a <create_name+0xce>
 8006d34:	7efb      	ldrb	r3, [r7, #27]
 8006d36:	3b20      	subs	r3, #32
 8006d38:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	613a      	str	r2, [r7, #16]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	4413      	add	r3, r2
 8006d44:	7efa      	ldrb	r2, [r7, #27]
 8006d46:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d48:	e7a6      	b.n	8006c98 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d4a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	441a      	add	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <create_name+0xf4>
 8006d5c:	2306      	movs	r3, #6
 8006d5e:	e010      	b.n	8006d82 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2be5      	cmp	r3, #229	@ 0xe5
 8006d66:	d102      	bne.n	8006d6e <create_name+0x102>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d6e:	7efb      	ldrb	r3, [r7, #27]
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d801      	bhi.n	8006d78 <create_name+0x10c>
 8006d74:	2204      	movs	r2, #4
 8006d76:	e000      	b.n	8006d7a <create_name+0x10e>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	330b      	adds	r3, #11
 8006d7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d80:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	08009828 	.word	0x08009828
 8006d90:	080097c4 	.word	0x080097c4

08006d94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006da8:	e002      	b.n	8006db0 <follow_path+0x1c>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006db6:	d0f8      	beq.n	8006daa <follow_path+0x16>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8006dbe:	d0f4      	beq.n	8006daa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b1f      	cmp	r3, #31
 8006dcc:	d80a      	bhi.n	8006de4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2280      	movs	r2, #128	@ 0x80
 8006dd2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fc99 	bl	8006710 <dir_sdi>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]
 8006de2:	e043      	b.n	8006e6c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006de4:	463b      	mov	r3, r7
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff ff3f 	bl	8006c6c <create_name>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d134      	bne.n	8006e62 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fe4f 	bl	8006a9c <dir_find>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d127      	bne.n	8006e66 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d122      	bne.n	8006e66 <follow_path+0xd2>
 8006e20:	2305      	movs	r3, #5
 8006e22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e24:	e01f      	b.n	8006e66 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11c      	bne.n	8006e6a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	799b      	ldrb	r3, [r3, #6]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e3c:	2305      	movs	r3, #5
 8006e3e:	75fb      	strb	r3, [r7, #23]
 8006e40:	e014      	b.n	8006e6c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e50:	4413      	add	r3, r2
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fde2 	bl	8006a1e <ld_clust>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e60:	e7c0      	b.n	8006de4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e62:	bf00      	nop
 8006e64:	e002      	b.n	8006e6c <follow_path+0xd8>
				break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e6a:	bf00      	nop
			}
		}
	}

	return res;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e82:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d031      	beq.n	8006ef0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	e002      	b.n	8006e9a <get_ldnumber+0x24>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	3301      	adds	r3, #1
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d903      	bls.n	8006eaa <get_ldnumber+0x34>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b3a      	cmp	r3, #58	@ 0x3a
 8006ea8:	d1f4      	bne.n	8006e94 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b3a      	cmp	r3, #58	@ 0x3a
 8006eb0:	d11c      	bne.n	8006eec <get_ldnumber+0x76>
			tp = *path;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	60fa      	str	r2, [r7, #12]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	3b30      	subs	r3, #48	@ 0x30
 8006ec2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d80e      	bhi.n	8006ee8 <get_ldnumber+0x72>
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d10a      	bne.n	8006ee8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d107      	bne.n	8006ee8 <get_ldnumber+0x72>
					vol = (int)i;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	e002      	b.n	8006ef2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ef0:	693b      	ldr	r3, [r7, #16]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	70da      	strb	r2, [r3, #3]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff f8ea 	bl	80060f4 <move_window>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <check_fs+0x2a>
 8006f26:	2304      	movs	r3, #4
 8006f28:	e038      	b.n	8006f9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3330      	adds	r3, #48	@ 0x30
 8006f2e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fe68 	bl	8005c08 <ld_word>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d001      	beq.n	8006f48 <check_fs+0x48>
 8006f44:	2303      	movs	r3, #3
 8006f46:	e029      	b.n	8006f9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f4e:	2be9      	cmp	r3, #233	@ 0xe9
 8006f50:	d009      	beq.n	8006f66 <check_fs+0x66>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f58:	2beb      	cmp	r3, #235	@ 0xeb
 8006f5a:	d11e      	bne.n	8006f9a <check_fs+0x9a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006f62:	2b90      	cmp	r3, #144	@ 0x90
 8006f64:	d119      	bne.n	8006f9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3330      	adds	r3, #48	@ 0x30
 8006f6a:	3336      	adds	r3, #54	@ 0x36
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fe64 	bl	8005c3a <ld_dword>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f78:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <check_fs+0xa4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <check_fs+0x82>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e00c      	b.n	8006f9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3330      	adds	r3, #48	@ 0x30
 8006f86:	3352      	adds	r3, #82	@ 0x52
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fe56 	bl	8005c3a <ld_dword>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4a05      	ldr	r2, [pc, #20]	@ (8006fa8 <check_fs+0xa8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d101      	bne.n	8006f9a <check_fs+0x9a>
 8006f96:	2300      	movs	r3, #0
 8006f98:	e000      	b.n	8006f9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f9a:	2302      	movs	r3, #2
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	00544146 	.word	0x00544146
 8006fa8:	33544146 	.word	0x33544146

08006fac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b096      	sub	sp, #88	@ 0x58
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff ff58 	bl	8006e76 <get_ldnumber>
 8006fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da01      	bge.n	8006fd2 <find_volume+0x26>
 8006fce:	230b      	movs	r3, #11
 8006fd0:	e22d      	b.n	800742e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fd2:	4aa1      	ldr	r2, [pc, #644]	@ (8007258 <find_volume+0x2ac>)
 8006fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fda:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <find_volume+0x3a>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	e223      	b.n	800742e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	f023 0301 	bic.w	r3, r3, #1
 8006ff2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01a      	beq.n	8007032 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fd7f 	bl	8005b04 <disk_status>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800700c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10c      	bne.n	8007032 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <find_volume+0x82>
 800701e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800702a:	230a      	movs	r3, #10
 800702c:	e1ff      	b.n	800742e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800702e:	2300      	movs	r3, #0
 8007030:	e1fd      	b.n	800742e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800703a:	b2da      	uxtb	r2, r3
 800703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fd77 	bl	8005b38 <disk_initialize>
 800704a:	4603      	mov	r3, r0
 800704c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007050:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800705c:	2303      	movs	r3, #3
 800705e:	e1e6      	b.n	800742e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <find_volume+0xca>
 8007066:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007072:	230a      	movs	r3, #10
 8007074:	e1db      	b.n	800742e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800707a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800707c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800707e:	f7ff ff3f 	bl	8006f00 <check_fs>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800708c:	2b02      	cmp	r3, #2
 800708e:	d149      	bne.n	8007124 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007090:	2300      	movs	r3, #0
 8007092:	643b      	str	r3, [r7, #64]	@ 0x40
 8007094:	e01e      	b.n	80070d4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800709c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80070a4:	4413      	add	r3, r2
 80070a6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	3304      	adds	r3, #4
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d006      	beq.n	80070c0 <find_volume+0x114>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	3308      	adds	r3, #8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fdbf 	bl	8005c3a <ld_dword>
 80070bc:	4602      	mov	r2, r0
 80070be:	e000      	b.n	80070c2 <find_volume+0x116>
 80070c0:	2200      	movs	r2, #0
 80070c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	3358      	adds	r3, #88	@ 0x58
 80070c8:	443b      	add	r3, r7
 80070ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d0:	3301      	adds	r3, #1
 80070d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d9dd      	bls.n	8007096 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070da:	2300      	movs	r3, #0
 80070dc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80070de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <find_volume+0x13e>
 80070e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070e6:	3b01      	subs	r3, #1
 80070e8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	3358      	adds	r3, #88	@ 0x58
 80070f0:	443b      	add	r3, r7
 80070f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070f6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <find_volume+0x15e>
 80070fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007100:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007102:	f7ff fefd 	bl	8006f00 <check_fs>
 8007106:	4603      	mov	r3, r0
 8007108:	e000      	b.n	800710c <find_volume+0x160>
 800710a:	2303      	movs	r3, #3
 800710c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007114:	2b01      	cmp	r3, #1
 8007116:	d905      	bls.n	8007124 <find_volume+0x178>
 8007118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711a:	3301      	adds	r3, #1
 800711c:	643b      	str	r3, [r7, #64]	@ 0x40
 800711e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007120:	2b03      	cmp	r3, #3
 8007122:	d9e2      	bls.n	80070ea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007124:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007128:	2b04      	cmp	r3, #4
 800712a:	d101      	bne.n	8007130 <find_volume+0x184>
 800712c:	2301      	movs	r3, #1
 800712e:	e17e      	b.n	800742e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007134:	2b01      	cmp	r3, #1
 8007136:	d901      	bls.n	800713c <find_volume+0x190>
 8007138:	230d      	movs	r3, #13
 800713a:	e178      	b.n	800742e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	3330      	adds	r3, #48	@ 0x30
 8007140:	330b      	adds	r3, #11
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fd60 	bl	8005c08 <ld_word>
 8007148:	4603      	mov	r3, r0
 800714a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800714e:	d001      	beq.n	8007154 <find_volume+0x1a8>
 8007150:	230d      	movs	r3, #13
 8007152:	e16c      	b.n	800742e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	3330      	adds	r3, #48	@ 0x30
 8007158:	3316      	adds	r3, #22
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fd54 	bl	8005c08 <ld_word>
 8007160:	4603      	mov	r3, r0
 8007162:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <find_volume+0x1cc>
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	3330      	adds	r3, #48	@ 0x30
 800716e:	3324      	adds	r3, #36	@ 0x24
 8007170:	4618      	mov	r0, r3
 8007172:	f7fe fd62 	bl	8005c3a <ld_dword>
 8007176:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800717c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718a:	789b      	ldrb	r3, [r3, #2]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d005      	beq.n	800719c <find_volume+0x1f0>
 8007190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007192:	789b      	ldrb	r3, [r3, #2]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d001      	beq.n	800719c <find_volume+0x1f0>
 8007198:	230d      	movs	r3, #13
 800719a:	e148      	b.n	800742e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800719c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719e:	789b      	ldrb	r3, [r3, #2]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
 80071a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b0:	461a      	mov	r2, r3
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	895b      	ldrh	r3, [r3, #10]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <find_volume+0x224>
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	895b      	ldrh	r3, [r3, #10]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c6:	895b      	ldrh	r3, [r3, #10]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <find_volume+0x228>
 80071d0:	230d      	movs	r3, #13
 80071d2:	e12c      	b.n	800742e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d6:	3330      	adds	r3, #48	@ 0x30
 80071d8:	3311      	adds	r3, #17
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fd14 	bl	8005c08 <ld_word>
 80071e0:	4603      	mov	r3, r0
 80071e2:	461a      	mov	r2, r3
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ea:	891b      	ldrh	r3, [r3, #8]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <find_volume+0x24e>
 80071f6:	230d      	movs	r3, #13
 80071f8:	e119      	b.n	800742e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	3330      	adds	r3, #48	@ 0x30
 80071fe:	3313      	adds	r3, #19
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe fd01 	bl	8005c08 <ld_word>
 8007206:	4603      	mov	r3, r0
 8007208:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800720a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800720c:	2b00      	cmp	r3, #0
 800720e:	d106      	bne.n	800721e <find_volume+0x272>
 8007210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007212:	3330      	adds	r3, #48	@ 0x30
 8007214:	3320      	adds	r3, #32
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fd0f 	bl	8005c3a <ld_dword>
 800721c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	3330      	adds	r3, #48	@ 0x30
 8007222:	330e      	adds	r3, #14
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fcef 	bl	8005c08 <ld_word>
 800722a:	4603      	mov	r3, r0
 800722c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800722e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <find_volume+0x28c>
 8007234:	230d      	movs	r3, #13
 8007236:	e0fa      	b.n	800742e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007238:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800723a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723c:	4413      	add	r3, r2
 800723e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007240:	8912      	ldrh	r2, [r2, #8]
 8007242:	0912      	lsrs	r2, r2, #4
 8007244:	b292      	uxth	r2, r2
 8007246:	4413      	add	r3, r2
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800724a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	429a      	cmp	r2, r3
 8007250:	d204      	bcs.n	800725c <find_volume+0x2b0>
 8007252:	230d      	movs	r3, #13
 8007254:	e0eb      	b.n	800742e <find_volume+0x482>
 8007256:	bf00      	nop
 8007258:	20003a5c 	.word	0x20003a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800725c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007264:	8952      	ldrh	r2, [r2, #10]
 8007266:	fbb3 f3f2 	udiv	r3, r3, r2
 800726a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <find_volume+0x2ca>
 8007272:	230d      	movs	r3, #13
 8007274:	e0db      	b.n	800742e <find_volume+0x482>
		fmt = FS_FAT32;
 8007276:	2303      	movs	r3, #3
 8007278:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007282:	4293      	cmp	r3, r2
 8007284:	d802      	bhi.n	800728c <find_volume+0x2e0>
 8007286:	2302      	movs	r3, #2
 8007288:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007292:	4293      	cmp	r3, r2
 8007294:	d802      	bhi.n	800729c <find_volume+0x2f0>
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	1c9a      	adds	r2, r3, #2
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072a8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80072ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ae:	441a      	add	r2, r3
 80072b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80072b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	441a      	add	r2, r3
 80072ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072bc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80072be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d11e      	bne.n	8007304 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c8:	3330      	adds	r3, #48	@ 0x30
 80072ca:	332a      	adds	r3, #42	@ 0x2a
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe fc9b 	bl	8005c08 <ld_word>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <find_volume+0x330>
 80072d8:	230d      	movs	r3, #13
 80072da:	e0a8      	b.n	800742e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	891b      	ldrh	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <find_volume+0x33c>
 80072e4:	230d      	movs	r3, #13
 80072e6:	e0a2      	b.n	800742e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	3330      	adds	r3, #48	@ 0x30
 80072ec:	332c      	adds	r3, #44	@ 0x2c
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fca3 	bl	8005c3a <ld_dword>
 80072f4:	4602      	mov	r2, r0
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	647b      	str	r3, [r7, #68]	@ 0x44
 8007302:	e01f      	b.n	8007344 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007306:	891b      	ldrh	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <find_volume+0x364>
 800730c:	230d      	movs	r3, #13
 800730e:	e08e      	b.n	800742e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007316:	441a      	add	r2, r3
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800731c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007320:	2b02      	cmp	r3, #2
 8007322:	d103      	bne.n	800732c <find_volume+0x380>
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	e00a      	b.n	8007342 <find_volume+0x396>
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	4613      	mov	r3, r2
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	4413      	add	r3, r2
 8007336:	085a      	lsrs	r2, r3, #1
 8007338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007342:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800734a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800734e:	0a5b      	lsrs	r3, r3, #9
 8007350:	429a      	cmp	r2, r3
 8007352:	d201      	bcs.n	8007358 <find_volume+0x3ac>
 8007354:	230d      	movs	r3, #13
 8007356:	e06a      	b.n	800742e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	f04f 32ff 	mov.w	r2, #4294967295
 800735e:	611a      	str	r2, [r3, #16]
 8007360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	2280      	movs	r2, #128	@ 0x80
 800736c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800736e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007372:	2b03      	cmp	r3, #3
 8007374:	d149      	bne.n	800740a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007378:	3330      	adds	r3, #48	@ 0x30
 800737a:	3330      	adds	r3, #48	@ 0x30
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fc43 	bl	8005c08 <ld_word>
 8007382:	4603      	mov	r3, r0
 8007384:	2b01      	cmp	r3, #1
 8007386:	d140      	bne.n	800740a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800738a:	3301      	adds	r3, #1
 800738c:	4619      	mov	r1, r3
 800738e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007390:	f7fe feb0 	bl	80060f4 <move_window>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d137      	bne.n	800740a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800739a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739c:	2200      	movs	r2, #0
 800739e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a2:	3330      	adds	r3, #48	@ 0x30
 80073a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe fc2d 	bl	8005c08 <ld_word>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d127      	bne.n	800740a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80073ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073bc:	3330      	adds	r3, #48	@ 0x30
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fc3b 	bl	8005c3a <ld_dword>
 80073c4:	4603      	mov	r3, r0
 80073c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007438 <find_volume+0x48c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d11e      	bne.n	800740a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80073cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ce:	3330      	adds	r3, #48	@ 0x30
 80073d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fc30 	bl	8005c3a <ld_dword>
 80073da:	4603      	mov	r3, r0
 80073dc:	4a17      	ldr	r2, [pc, #92]	@ (800743c <find_volume+0x490>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d113      	bne.n	800740a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80073e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e4:	3330      	adds	r3, #48	@ 0x30
 80073e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fc25 	bl	8005c3a <ld_dword>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f8:	3330      	adds	r3, #48	@ 0x30
 80073fa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fc1b 	bl	8005c3a <ld_dword>
 8007404:	4602      	mov	r2, r0
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007410:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007412:	4b0b      	ldr	r3, [pc, #44]	@ (8007440 <find_volume+0x494>)
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <find_volume+0x494>)
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	4b08      	ldr	r3, [pc, #32]	@ (8007440 <find_volume+0x494>)
 8007420:	881a      	ldrh	r2, [r3, #0]
 8007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007424:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007426:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007428:	f7fe fdfc 	bl	8006024 <clear_lock>
#endif
	return FR_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3758      	adds	r7, #88	@ 0x58
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	41615252 	.word	0x41615252
 800743c:	61417272 	.word	0x61417272
 8007440:	20003a60 	.word	0x20003a60

08007444 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800744e:	2309      	movs	r3, #9
 8007450:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01c      	beq.n	8007492 <validate+0x4e>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d018      	beq.n	8007492 <validate+0x4e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d013      	beq.n	8007492 <validate+0x4e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	889a      	ldrh	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	88db      	ldrh	r3, [r3, #6]
 8007474:	429a      	cmp	r2, r3
 8007476:	d10c      	bne.n	8007492 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fb40 	bl	8005b04 <disk_status>
 8007484:	4603      	mov	r3, r0
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <validate+0x4e>
			res = FR_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <validate+0x5a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	e000      	b.n	80074a0 <validate+0x5c>
 800749e:	2300      	movs	r3, #0
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	6013      	str	r3, [r2, #0]
	return res;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80074c2:	f107 0310 	add.w	r3, r7, #16
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fcd5 	bl	8006e76 <get_ldnumber>
 80074cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da01      	bge.n	80074d8 <f_mount+0x28>
 80074d4:	230b      	movs	r3, #11
 80074d6:	e02b      	b.n	8007530 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074d8:	4a17      	ldr	r2, [pc, #92]	@ (8007538 <f_mount+0x88>)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074e8:	69b8      	ldr	r0, [r7, #24]
 80074ea:	f7fe fd9b 	bl	8006024 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	490d      	ldr	r1, [pc, #52]	@ (8007538 <f_mount+0x88>)
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <f_mount+0x66>
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d001      	beq.n	800751a <f_mount+0x6a>
 8007516:	2300      	movs	r3, #0
 8007518:	e00a      	b.n	8007530 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800751a:	f107 010c 	add.w	r1, r7, #12
 800751e:	f107 0308 	add.w	r3, r7, #8
 8007522:	2200      	movs	r2, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fd41 	bl	8006fac <find_volume>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800752e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3720      	adds	r7, #32
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20003a5c 	.word	0x20003a5c

0800753c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b098      	sub	sp, #96	@ 0x60
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <f_open+0x18>
 8007550:	2309      	movs	r3, #9
 8007552:	e1a9      	b.n	80078a8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800755a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800755c:	79fa      	ldrb	r2, [r7, #7]
 800755e:	f107 0110 	add.w	r1, r7, #16
 8007562:	f107 0308 	add.w	r3, r7, #8
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff fd20 	bl	8006fac <find_volume>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007572:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 818d 	bne.w	8007896 <f_open+0x35a>
		dj.obj.fs = fs;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	f107 0314 	add.w	r3, r7, #20
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fc03 	bl	8006d94 <follow_path>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007594:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007598:	2b00      	cmp	r3, #0
 800759a:	d118      	bne.n	80075ce <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800759c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	da03      	bge.n	80075ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80075a6:	2306      	movs	r3, #6
 80075a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80075ac:	e00f      	b.n	80075ce <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf8c      	ite	hi
 80075b4:	2301      	movhi	r3, #1
 80075b6:	2300      	movls	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	461a      	mov	r2, r3
 80075bc:	f107 0314 	add.w	r3, r7, #20
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fc22 	bl	8005e0c <chk_lock>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	f003 031c 	and.w	r3, r3, #28
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d07f      	beq.n	80076d8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80075d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d017      	beq.n	8007610 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80075e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d10e      	bne.n	8007606 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075e8:	f7fe fc6c 	bl	8005ec4 <enq_lock>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d006      	beq.n	8007600 <f_open+0xc4>
 80075f2:	f107 0314 	add.w	r3, r7, #20
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff faa5 	bl	8006b46 <dir_register>
 80075fc:	4603      	mov	r3, r0
 80075fe:	e000      	b.n	8007602 <f_open+0xc6>
 8007600:	2312      	movs	r3, #18
 8007602:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f043 0308 	orr.w	r3, r3, #8
 800760c:	71fb      	strb	r3, [r7, #7]
 800760e:	e010      	b.n	8007632 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007610:	7ebb      	ldrb	r3, [r7, #26]
 8007612:	f003 0311 	and.w	r3, r3, #17
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <f_open+0xe6>
					res = FR_DENIED;
 800761a:	2307      	movs	r3, #7
 800761c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007620:	e007      	b.n	8007632 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <f_open+0xf6>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007632:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007636:	2b00      	cmp	r3, #0
 8007638:	d168      	bne.n	800770c <f_open+0x1d0>
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d063      	beq.n	800770c <f_open+0x1d0>
				dw = GET_FATTIME();
 8007644:	f7fd fd26 	bl	8005094 <get_fattime>
 8007648:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800764a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764c:	330e      	adds	r3, #14
 800764e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe fb30 	bl	8005cb6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007658:	3316      	adds	r3, #22
 800765a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800765c:	4618      	mov	r0, r3
 800765e:	f7fe fb2a 	bl	8005cb6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007664:	330b      	adds	r3, #11
 8007666:	2220      	movs	r2, #32
 8007668:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff f9d4 	bl	8006a1e <ld_clust>
 8007676:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800767c:	2200      	movs	r2, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff f9ec 	bl	8006a5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007686:	331c      	adds	r3, #28
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fb13 	bl	8005cb6 <st_dword>
					fs->wflag = 1;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2201      	movs	r2, #1
 8007694:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d037      	beq.n	800770c <f_open+0x1d0>
						dw = fs->winsect;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80076a2:	f107 0314 	add.w	r3, r7, #20
 80076a6:	2200      	movs	r2, #0
 80076a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe feff 	bl	80064ae <remove_chain>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80076b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d126      	bne.n	800770c <f_open+0x1d0>
							res = move_window(fs, dw);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fd16 	bl	80060f4 <move_window>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076d2:	3a01      	subs	r2, #1
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	e019      	b.n	800770c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80076d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d115      	bne.n	800770c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80076e0:	7ebb      	ldrb	r3, [r7, #26]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80076ea:	2304      	movs	r3, #4
 80076ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80076f0:	e00c      	b.n	800770c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <f_open+0x1d0>
 80076fc:	7ebb      	ldrb	r3, [r7, #26]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <f_open+0x1d0>
						res = FR_DENIED;
 8007706:	2307      	movs	r3, #7
 8007708:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800770c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007710:	2b00      	cmp	r3, #0
 8007712:	d126      	bne.n	8007762 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007724:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800772e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	2b01      	cmp	r3, #1
 8007738:	bf8c      	ite	hi
 800773a:	2301      	movhi	r3, #1
 800773c:	2300      	movls	r3, #0
 800773e:	b2db      	uxtb	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	f107 0314 	add.w	r3, r7, #20
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fbdd 	bl	8005f08 <inc_lock>
 800774e:	4602      	mov	r2, r0
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <f_open+0x226>
 800775c:	2302      	movs	r3, #2
 800775e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007762:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 8095 	bne.w	8007896 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff f953 	bl	8006a1e <ld_clust>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800777e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007780:	331c      	adds	r3, #28
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fa59 	bl	8005c3a <ld_dword>
 8007788:	4602      	mov	r2, r0
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	88da      	ldrh	r2, [r3, #6]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	79fa      	ldrb	r2, [r7, #7]
 80077a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3330      	adds	r3, #48	@ 0x30
 80077be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe fac3 	bl	8005d50 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d060      	beq.n	8007896 <f_open+0x35a>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d05c      	beq.n	8007896 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	895b      	ldrh	r3, [r3, #10]
 80077e8:	025b      	lsls	r3, r3, #9
 80077ea:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80077f8:	e016      	b.n	8007828 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fcc4 	bl	800618c <get_fat>
 8007804:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007808:	2b01      	cmp	r3, #1
 800780a:	d802      	bhi.n	8007812 <f_open+0x2d6>
 800780c:	2302      	movs	r3, #2
 800780e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d102      	bne.n	8007820 <f_open+0x2e4>
 800781a:	2301      	movs	r3, #1
 800781c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007820:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	657b      	str	r3, [r7, #84]	@ 0x54
 8007828:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <f_open+0x2fc>
 8007830:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007834:	429a      	cmp	r2, r3
 8007836:	d8e0      	bhi.n	80077fa <f_open+0x2be>
				}
				fp->clust = clst;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800783c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800783e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007842:	2b00      	cmp	r3, #0
 8007844:	d127      	bne.n	8007896 <f_open+0x35a>
 8007846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784c:	2b00      	cmp	r3, #0
 800784e:	d022      	beq.n	8007896 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fc7a 	bl	800614e <clust2sect>
 800785a:	6478      	str	r0, [r7, #68]	@ 0x44
 800785c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <f_open+0x32e>
						res = FR_INT_ERR;
 8007862:	2302      	movs	r3, #2
 8007864:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007868:	e015      	b.n	8007896 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800786a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800786c:	0a5a      	lsrs	r2, r3, #9
 800786e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007870:	441a      	add	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	7858      	ldrb	r0, [r3, #1]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	2301      	movs	r3, #1
 8007886:	f7fe f97f 	bl	8005b88 <disk_read>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <f_open+0x35a>
 8007890:	2301      	movs	r3, #1
 8007892:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007896:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <f_open+0x368>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80078a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3760      	adds	r7, #96	@ 0x60
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08e      	sub	sp, #56	@ 0x38
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f107 0214 	add.w	r2, r7, #20
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff fdb7 	bl	8007444 <validate>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80078dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d107      	bne.n	80078f4 <f_read+0x44>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	7d5b      	ldrb	r3, [r3, #21]
 80078e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80078ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <f_read+0x4a>
 80078f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80078f8:	e115      	b.n	8007b26 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	7d1b      	ldrb	r3, [r3, #20]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <f_read+0x5a>
 8007906:	2307      	movs	r3, #7
 8007908:	e10d      	b.n	8007b26 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	429a      	cmp	r2, r3
 800791c:	f240 80fe 	bls.w	8007b1c <f_read+0x26c>
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007924:	e0fa      	b.n	8007b1c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	2b00      	cmp	r3, #0
 8007930:	f040 80c6 	bne.w	8007ac0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	0a5b      	lsrs	r3, r3, #9
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	8952      	ldrh	r2, [r2, #10]
 800793e:	3a01      	subs	r2, #1
 8007940:	4013      	ands	r3, r2
 8007942:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d12f      	bne.n	80079aa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	633b      	str	r3, [r7, #48]	@ 0x30
 8007958:	e013      	b.n	8007982 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	4619      	mov	r1, r3
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7fe fe9d 	bl	80066a8 <clmt_clust>
 800796e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007970:	e007      	b.n	8007982 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f7fe fc06 	bl	800618c <get_fat>
 8007980:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	2b01      	cmp	r3, #1
 8007986:	d804      	bhi.n	8007992 <f_read+0xe2>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2202      	movs	r2, #2
 800798c:	755a      	strb	r2, [r3, #21]
 800798e:	2302      	movs	r3, #2
 8007990:	e0c9      	b.n	8007b26 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d104      	bne.n	80079a4 <f_read+0xf4>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	755a      	strb	r2, [r3, #21]
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0c0      	b.n	8007b26 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7fe fbcb 	bl	800614e <clust2sect>
 80079b8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d104      	bne.n	80079ca <f_read+0x11a>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2202      	movs	r2, #2
 80079c4:	755a      	strb	r2, [r3, #21]
 80079c6:	2302      	movs	r3, #2
 80079c8:	e0ad      	b.n	8007b26 <f_read+0x276>
			sect += csect;
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	0a5b      	lsrs	r3, r3, #9
 80079d6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80079d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d039      	beq.n	8007a52 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	4413      	add	r3, r2
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	8952      	ldrh	r2, [r2, #10]
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d905      	bls.n	80079f8 <f_read+0x148>
					cc = fs->csize - csect;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	895b      	ldrh	r3, [r3, #10]
 80079f0:	461a      	mov	r2, r3
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	7858      	ldrb	r0, [r3, #1]
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a02:	f7fe f8c1 	bl	8005b88 <disk_read>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <f_read+0x166>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	755a      	strb	r2, [r3, #21]
 8007a12:	2301      	movs	r3, #1
 8007a14:	e087      	b.n	8007b26 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	7d1b      	ldrb	r3, [r3, #20]
 8007a1a:	b25b      	sxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da14      	bge.n	8007a4a <f_read+0x19a>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a1a      	ldr	r2, [r3, #32]
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d90d      	bls.n	8007a4a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a1a      	ldr	r2, [r3, #32]
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	025b      	lsls	r3, r3, #9
 8007a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a3a:	18d0      	adds	r0, r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3330      	adds	r3, #48	@ 0x30
 8007a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a44:	4619      	mov	r1, r3
 8007a46:	f7fe f962 	bl	8005d0e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4c:	025b      	lsls	r3, r3, #9
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007a50:	e050      	b.n	8007af4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d02e      	beq.n	8007aba <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	7d1b      	ldrb	r3, [r3, #20]
 8007a60:	b25b      	sxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	da18      	bge.n	8007a98 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	7858      	ldrb	r0, [r3, #1]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1a      	ldr	r2, [r3, #32]
 8007a74:	2301      	movs	r3, #1
 8007a76:	f7fe f8a7 	bl	8005bc8 <disk_write>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <f_read+0x1da>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	755a      	strb	r2, [r3, #21]
 8007a86:	2301      	movs	r3, #1
 8007a88:	e04d      	b.n	8007b26 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	7d1b      	ldrb	r3, [r3, #20]
 8007a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	7858      	ldrb	r0, [r3, #1]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	f7fe f86f 	bl	8005b88 <disk_read>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <f_read+0x20a>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	755a      	strb	r2, [r3, #21]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e035      	b.n	8007b26 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d901      	bls.n	8007ada <f_read+0x22a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae8:	4413      	add	r3, r2
 8007aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aec:	4619      	mov	r1, r3
 8007aee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007af0:	f7fe f90d 	bl	8005d0e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	4413      	add	r3, r2
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b02:	441a      	add	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	619a      	str	r2, [r3, #24]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0e:	441a      	add	r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f47f af01 	bne.w	8007926 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3738      	adds	r7, #56	@ 0x38
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b090      	sub	sp, #64	@ 0x40
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f107 0208 	add.w	r2, r7, #8
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fc7f 	bl	8007444 <validate>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <f_lseek+0x2e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7d5b      	ldrb	r3, [r3, #21]
 8007b58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <f_lseek+0x3c>
 8007b64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b68:	e1e6      	b.n	8007f38 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80d1 	beq.w	8007d16 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d15a      	bne.n	8007c32 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	1d1a      	adds	r2, r3, #4
 8007b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d03a      	beq.n	8007c12 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fae7 	bl	800618c <get_fat>
 8007bbe:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d804      	bhi.n	8007bd0 <f_lseek+0xa2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	755a      	strb	r2, [r3, #21]
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e1b3      	b.n	8007f38 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd6:	d104      	bne.n	8007be2 <f_lseek+0xb4>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	755a      	strb	r2, [r3, #21]
 8007bde:	2301      	movs	r3, #1
 8007be0:	e1aa      	b.n	8007f38 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d0de      	beq.n	8007baa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d809      	bhi.n	8007c08 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	1d1a      	adds	r2, r3, #4
 8007c02:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d3c4      	bcc.n	8007b9c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c18:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d803      	bhi.n	8007c2a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	e184      	b.n	8007f34 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007c2a:	2311      	movs	r3, #17
 8007c2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007c30:	e180      	b.n	8007f34 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d902      	bls.n	8007c42 <f_lseek+0x114>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 8172 	beq.w	8007f34 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fe fd26 	bl	80066a8 <clmt_clust>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	f7fe fa6f 	bl	800614e <clust2sect>
 8007c70:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <f_lseek+0x154>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	755a      	strb	r2, [r3, #21]
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e15a      	b.n	8007f38 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	0a5b      	lsrs	r3, r3, #9
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	8952      	ldrh	r2, [r2, #10]
 8007c8c:	3a01      	subs	r2, #1
 8007c8e:	4013      	ands	r3, r2
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4413      	add	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 8148 	beq.w	8007f34 <f_lseek+0x406>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	f000 8142 	beq.w	8007f34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7d1b      	ldrb	r3, [r3, #20]
 8007cb4:	b25b      	sxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da18      	bge.n	8007cec <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	7858      	ldrb	r0, [r3, #1]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a1a      	ldr	r2, [r3, #32]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f7fd ff7d 	bl	8005bc8 <disk_write>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <f_lseek+0x1b0>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	755a      	strb	r2, [r3, #21]
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e12c      	b.n	8007f38 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7d1b      	ldrb	r3, [r3, #20]
 8007ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	7858      	ldrb	r0, [r3, #1]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	f7fd ff45 	bl	8005b88 <disk_read>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <f_lseek+0x1e0>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	755a      	strb	r2, [r3, #21]
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e114      	b.n	8007f38 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	621a      	str	r2, [r3, #32]
 8007d14:	e10e      	b.n	8007f34 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d908      	bls.n	8007d32 <f_lseek+0x204>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7d1b      	ldrb	r3, [r3, #20]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d40:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80a7 	beq.w	8007e98 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	895b      	ldrh	r3, [r3, #10]
 8007d4e:	025b      	lsls	r3, r3, #9
 8007d50:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01b      	beq.n	8007d90 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	1e5a      	subs	r2, r3, #1
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	1e59      	subs	r1, r3, #1
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d30f      	bcc.n	8007d90 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	1e5a      	subs	r2, r3, #1
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	425b      	negs	r3, r3
 8007d78:	401a      	ands	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d8e:	e022      	b.n	8007dd6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d119      	bne.n	8007dd0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fbe9 	bl	8006578 <create_chain>
 8007da6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d104      	bne.n	8007db8 <f_lseek+0x28a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	755a      	strb	r2, [r3, #21]
 8007db4:	2302      	movs	r3, #2
 8007db6:	e0bf      	b.n	8007f38 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbe:	d104      	bne.n	8007dca <f_lseek+0x29c>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	755a      	strb	r2, [r3, #21]
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e0b6      	b.n	8007f38 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dce:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dd4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d05d      	beq.n	8007e98 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007ddc:	e03a      	b.n	8007e54 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	441a      	add	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7d1b      	ldrb	r3, [r3, #20]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fbb8 	bl	8006578 <create_chain>
 8007e08:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d108      	bne.n	8007e22 <f_lseek+0x2f4>
							ofs = 0; break;
 8007e10:	2300      	movs	r3, #0
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	e022      	b.n	8007e5c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe f9b6 	bl	800618c <get_fat>
 8007e20:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e28:	d104      	bne.n	8007e34 <f_lseek+0x306>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	755a      	strb	r2, [r3, #21]
 8007e30:	2301      	movs	r3, #1
 8007e32:	e081      	b.n	8007f38 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d904      	bls.n	8007e44 <f_lseek+0x316>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d304      	bcc.n	8007e4e <f_lseek+0x320>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	755a      	strb	r2, [r3, #21]
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e074      	b.n	8007f38 <f_lseek+0x40a>
					fp->clust = clst;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e52:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d8c0      	bhi.n	8007dde <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699a      	ldr	r2, [r3, #24]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	441a      	add	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d012      	beq.n	8007e98 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe f969 	bl	800614e <clust2sect>
 8007e7c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <f_lseek+0x360>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	755a      	strb	r2, [r3, #21]
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e054      	b.n	8007f38 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	0a5b      	lsrs	r3, r3, #9
 8007e92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e94:	4413      	add	r3, r2
 8007e96:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699a      	ldr	r2, [r3, #24]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d90a      	bls.n	8007eba <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699a      	ldr	r2, [r3, #24]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7d1b      	ldrb	r3, [r3, #20]
 8007eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d036      	beq.n	8007f34 <f_lseek+0x406>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d031      	beq.n	8007f34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7d1b      	ldrb	r3, [r3, #20]
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	da18      	bge.n	8007f0c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	7858      	ldrb	r0, [r3, #1]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a1a      	ldr	r2, [r3, #32]
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f7fd fe6d 	bl	8005bc8 <disk_write>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <f_lseek+0x3d0>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	755a      	strb	r2, [r3, #21]
 8007efa:	2301      	movs	r3, #1
 8007efc:	e01c      	b.n	8007f38 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	7d1b      	ldrb	r3, [r3, #20]
 8007f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	7858      	ldrb	r0, [r3, #1]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f16:	2301      	movs	r3, #1
 8007f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1a:	f7fd fe35 	bl	8005b88 <disk_read>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <f_lseek+0x400>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	755a      	strb	r2, [r3, #21]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e004      	b.n	8007f38 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f32:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007f34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3740      	adds	r7, #64	@ 0x40
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b090      	sub	sp, #64	@ 0x40
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007f4a:	f107 010c 	add.w	r1, r7, #12
 8007f4e:	1d3b      	adds	r3, r7, #4
 8007f50:	2200      	movs	r2, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f82a 	bl	8006fac <find_volume>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8007f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d11f      	bne.n	8007fa6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe ff10 	bl	8006d94 <follow_path>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007f7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d111      	bne.n	8007fa6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007f82:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007f86:	b25b      	sxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	da03      	bge.n	8007f94 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007f8c:	2306      	movs	r3, #6
 8007f8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007f92:	e008      	b.n	8007fa6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <f_stat+0x66>
 8007f9a:	f107 030c 	add.w	r3, r7, #12
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fe02 	bl	8006baa <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3740      	adds	r7, #64	@ 0x40
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007fca:	4b1f      	ldr	r3, [pc, #124]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8007fcc:	7a5b      	ldrb	r3, [r3, #9]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d131      	bne.n	8008038 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8007fd6:	7a5b      	ldrb	r3, [r3, #9]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	461a      	mov	r2, r3
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8007fde:	2100      	movs	r1, #0
 8007fe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007fe2:	4b19      	ldr	r3, [pc, #100]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8007fe4:	7a5b      	ldrb	r3, [r3, #9]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	4a17      	ldr	r2, [pc, #92]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007ff2:	4b15      	ldr	r3, [pc, #84]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8007ff4:	7a5b      	ldrb	r3, [r3, #9]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4b13      	ldr	r3, [pc, #76]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8007ffc:	4413      	add	r3, r2
 8007ffe:	79fa      	ldrb	r2, [r7, #7]
 8008000:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008002:	4b11      	ldr	r3, [pc, #68]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 8008004:	7a5b      	ldrb	r3, [r3, #9]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	b2d1      	uxtb	r1, r2
 800800c:	4a0e      	ldr	r2, [pc, #56]	@ (8008048 <FATFS_LinkDriverEx+0x94>)
 800800e:	7251      	strb	r1, [r2, #9]
 8008010:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008012:	7dbb      	ldrb	r3, [r7, #22]
 8008014:	3330      	adds	r3, #48	@ 0x30
 8008016:	b2da      	uxtb	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	3301      	adds	r3, #1
 8008020:	223a      	movs	r2, #58	@ 0x3a
 8008022:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3302      	adds	r3, #2
 8008028:	222f      	movs	r2, #47	@ 0x2f
 800802a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	3303      	adds	r3, #3
 8008030:	2200      	movs	r2, #0
 8008032:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20003a84 	.word	0x20003a84

0800804c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008056:	2200      	movs	r2, #0
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff ffaa 	bl	8007fb4 <FATFS_LinkDriverEx>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <std>:
 800806c:	2300      	movs	r3, #0
 800806e:	b510      	push	{r4, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	e9c0 3300 	strd	r3, r3, [r0]
 8008076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800807a:	6083      	str	r3, [r0, #8]
 800807c:	8181      	strh	r1, [r0, #12]
 800807e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008080:	81c2      	strh	r2, [r0, #14]
 8008082:	6183      	str	r3, [r0, #24]
 8008084:	4619      	mov	r1, r3
 8008086:	2208      	movs	r2, #8
 8008088:	305c      	adds	r0, #92	@ 0x5c
 800808a:	f000 f9f9 	bl	8008480 <memset>
 800808e:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <std+0x58>)
 8008090:	6263      	str	r3, [r4, #36]	@ 0x24
 8008092:	4b0d      	ldr	r3, [pc, #52]	@ (80080c8 <std+0x5c>)
 8008094:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <std+0x60>)
 8008098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800809a:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <std+0x64>)
 800809c:	6323      	str	r3, [r4, #48]	@ 0x30
 800809e:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <std+0x68>)
 80080a0:	6224      	str	r4, [r4, #32]
 80080a2:	429c      	cmp	r4, r3
 80080a4:	d006      	beq.n	80080b4 <std+0x48>
 80080a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080aa:	4294      	cmp	r4, r2
 80080ac:	d002      	beq.n	80080b4 <std+0x48>
 80080ae:	33d0      	adds	r3, #208	@ 0xd0
 80080b0:	429c      	cmp	r4, r3
 80080b2:	d105      	bne.n	80080c0 <std+0x54>
 80080b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080bc:	f000 ba58 	b.w	8008570 <__retarget_lock_init_recursive>
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	bf00      	nop
 80080c4:	080082d1 	.word	0x080082d1
 80080c8:	080082f3 	.word	0x080082f3
 80080cc:	0800832b 	.word	0x0800832b
 80080d0:	0800834f 	.word	0x0800834f
 80080d4:	20003a90 	.word	0x20003a90

080080d8 <stdio_exit_handler>:
 80080d8:	4a02      	ldr	r2, [pc, #8]	@ (80080e4 <stdio_exit_handler+0xc>)
 80080da:	4903      	ldr	r1, [pc, #12]	@ (80080e8 <stdio_exit_handler+0x10>)
 80080dc:	4803      	ldr	r0, [pc, #12]	@ (80080ec <stdio_exit_handler+0x14>)
 80080de:	f000 b869 	b.w	80081b4 <_fwalk_sglue>
 80080e2:	bf00      	nop
 80080e4:	20000030 	.word	0x20000030
 80080e8:	08008e0d 	.word	0x08008e0d
 80080ec:	20000040 	.word	0x20000040

080080f0 <cleanup_stdio>:
 80080f0:	6841      	ldr	r1, [r0, #4]
 80080f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008124 <cleanup_stdio+0x34>)
 80080f4:	4299      	cmp	r1, r3
 80080f6:	b510      	push	{r4, lr}
 80080f8:	4604      	mov	r4, r0
 80080fa:	d001      	beq.n	8008100 <cleanup_stdio+0x10>
 80080fc:	f000 fe86 	bl	8008e0c <_fflush_r>
 8008100:	68a1      	ldr	r1, [r4, #8]
 8008102:	4b09      	ldr	r3, [pc, #36]	@ (8008128 <cleanup_stdio+0x38>)
 8008104:	4299      	cmp	r1, r3
 8008106:	d002      	beq.n	800810e <cleanup_stdio+0x1e>
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fe7f 	bl	8008e0c <_fflush_r>
 800810e:	68e1      	ldr	r1, [r4, #12]
 8008110:	4b06      	ldr	r3, [pc, #24]	@ (800812c <cleanup_stdio+0x3c>)
 8008112:	4299      	cmp	r1, r3
 8008114:	d004      	beq.n	8008120 <cleanup_stdio+0x30>
 8008116:	4620      	mov	r0, r4
 8008118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800811c:	f000 be76 	b.w	8008e0c <_fflush_r>
 8008120:	bd10      	pop	{r4, pc}
 8008122:	bf00      	nop
 8008124:	20003a90 	.word	0x20003a90
 8008128:	20003af8 	.word	0x20003af8
 800812c:	20003b60 	.word	0x20003b60

08008130 <global_stdio_init.part.0>:
 8008130:	b510      	push	{r4, lr}
 8008132:	4b0b      	ldr	r3, [pc, #44]	@ (8008160 <global_stdio_init.part.0+0x30>)
 8008134:	4c0b      	ldr	r4, [pc, #44]	@ (8008164 <global_stdio_init.part.0+0x34>)
 8008136:	4a0c      	ldr	r2, [pc, #48]	@ (8008168 <global_stdio_init.part.0+0x38>)
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	4620      	mov	r0, r4
 800813c:	2200      	movs	r2, #0
 800813e:	2104      	movs	r1, #4
 8008140:	f7ff ff94 	bl	800806c <std>
 8008144:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008148:	2201      	movs	r2, #1
 800814a:	2109      	movs	r1, #9
 800814c:	f7ff ff8e 	bl	800806c <std>
 8008150:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008154:	2202      	movs	r2, #2
 8008156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815a:	2112      	movs	r1, #18
 800815c:	f7ff bf86 	b.w	800806c <std>
 8008160:	20003bc8 	.word	0x20003bc8
 8008164:	20003a90 	.word	0x20003a90
 8008168:	080080d9 	.word	0x080080d9

0800816c <__sfp_lock_acquire>:
 800816c:	4801      	ldr	r0, [pc, #4]	@ (8008174 <__sfp_lock_acquire+0x8>)
 800816e:	f000 ba00 	b.w	8008572 <__retarget_lock_acquire_recursive>
 8008172:	bf00      	nop
 8008174:	20003bd1 	.word	0x20003bd1

08008178 <__sfp_lock_release>:
 8008178:	4801      	ldr	r0, [pc, #4]	@ (8008180 <__sfp_lock_release+0x8>)
 800817a:	f000 b9fb 	b.w	8008574 <__retarget_lock_release_recursive>
 800817e:	bf00      	nop
 8008180:	20003bd1 	.word	0x20003bd1

08008184 <__sinit>:
 8008184:	b510      	push	{r4, lr}
 8008186:	4604      	mov	r4, r0
 8008188:	f7ff fff0 	bl	800816c <__sfp_lock_acquire>
 800818c:	6a23      	ldr	r3, [r4, #32]
 800818e:	b11b      	cbz	r3, 8008198 <__sinit+0x14>
 8008190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008194:	f7ff bff0 	b.w	8008178 <__sfp_lock_release>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__sinit+0x28>)
 800819a:	6223      	str	r3, [r4, #32]
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <__sinit+0x2c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f5      	bne.n	8008190 <__sinit+0xc>
 80081a4:	f7ff ffc4 	bl	8008130 <global_stdio_init.part.0>
 80081a8:	e7f2      	b.n	8008190 <__sinit+0xc>
 80081aa:	bf00      	nop
 80081ac:	080080f1 	.word	0x080080f1
 80081b0:	20003bc8 	.word	0x20003bc8

080081b4 <_fwalk_sglue>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	4607      	mov	r7, r0
 80081ba:	4688      	mov	r8, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	2600      	movs	r6, #0
 80081c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081c4:	f1b9 0901 	subs.w	r9, r9, #1
 80081c8:	d505      	bpl.n	80081d6 <_fwalk_sglue+0x22>
 80081ca:	6824      	ldr	r4, [r4, #0]
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	d1f7      	bne.n	80081c0 <_fwalk_sglue+0xc>
 80081d0:	4630      	mov	r0, r6
 80081d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d907      	bls.n	80081ec <_fwalk_sglue+0x38>
 80081dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081e0:	3301      	adds	r3, #1
 80081e2:	d003      	beq.n	80081ec <_fwalk_sglue+0x38>
 80081e4:	4629      	mov	r1, r5
 80081e6:	4638      	mov	r0, r7
 80081e8:	47c0      	blx	r8
 80081ea:	4306      	orrs	r6, r0
 80081ec:	3568      	adds	r5, #104	@ 0x68
 80081ee:	e7e9      	b.n	80081c4 <_fwalk_sglue+0x10>

080081f0 <iprintf>:
 80081f0:	b40f      	push	{r0, r1, r2, r3}
 80081f2:	b507      	push	{r0, r1, r2, lr}
 80081f4:	4906      	ldr	r1, [pc, #24]	@ (8008210 <iprintf+0x20>)
 80081f6:	ab04      	add	r3, sp, #16
 80081f8:	6808      	ldr	r0, [r1, #0]
 80081fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fe:	6881      	ldr	r1, [r0, #8]
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	f000 fadb 	bl	80087bc <_vfiprintf_r>
 8008206:	b003      	add	sp, #12
 8008208:	f85d eb04 	ldr.w	lr, [sp], #4
 800820c:	b004      	add	sp, #16
 800820e:	4770      	bx	lr
 8008210:	2000003c 	.word	0x2000003c

08008214 <_puts_r>:
 8008214:	6a03      	ldr	r3, [r0, #32]
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	6884      	ldr	r4, [r0, #8]
 800821a:	4605      	mov	r5, r0
 800821c:	460e      	mov	r6, r1
 800821e:	b90b      	cbnz	r3, 8008224 <_puts_r+0x10>
 8008220:	f7ff ffb0 	bl	8008184 <__sinit>
 8008224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008226:	07db      	lsls	r3, r3, #31
 8008228:	d405      	bmi.n	8008236 <_puts_r+0x22>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	0598      	lsls	r0, r3, #22
 800822e:	d402      	bmi.n	8008236 <_puts_r+0x22>
 8008230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008232:	f000 f99e 	bl	8008572 <__retarget_lock_acquire_recursive>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	0719      	lsls	r1, r3, #28
 800823a:	d502      	bpl.n	8008242 <_puts_r+0x2e>
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d135      	bne.n	80082ae <_puts_r+0x9a>
 8008242:	4621      	mov	r1, r4
 8008244:	4628      	mov	r0, r5
 8008246:	f000 f8c5 	bl	80083d4 <__swsetup_r>
 800824a:	b380      	cbz	r0, 80082ae <_puts_r+0x9a>
 800824c:	f04f 35ff 	mov.w	r5, #4294967295
 8008250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008252:	07da      	lsls	r2, r3, #31
 8008254:	d405      	bmi.n	8008262 <_puts_r+0x4e>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	059b      	lsls	r3, r3, #22
 800825a:	d402      	bmi.n	8008262 <_puts_r+0x4e>
 800825c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800825e:	f000 f989 	bl	8008574 <__retarget_lock_release_recursive>
 8008262:	4628      	mov	r0, r5
 8008264:	bd70      	pop	{r4, r5, r6, pc}
 8008266:	2b00      	cmp	r3, #0
 8008268:	da04      	bge.n	8008274 <_puts_r+0x60>
 800826a:	69a2      	ldr	r2, [r4, #24]
 800826c:	429a      	cmp	r2, r3
 800826e:	dc17      	bgt.n	80082a0 <_puts_r+0x8c>
 8008270:	290a      	cmp	r1, #10
 8008272:	d015      	beq.n	80082a0 <_puts_r+0x8c>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	7019      	strb	r1, [r3, #0]
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008282:	3b01      	subs	r3, #1
 8008284:	60a3      	str	r3, [r4, #8]
 8008286:	2900      	cmp	r1, #0
 8008288:	d1ed      	bne.n	8008266 <_puts_r+0x52>
 800828a:	2b00      	cmp	r3, #0
 800828c:	da11      	bge.n	80082b2 <_puts_r+0x9e>
 800828e:	4622      	mov	r2, r4
 8008290:	210a      	movs	r1, #10
 8008292:	4628      	mov	r0, r5
 8008294:	f000 f85f 	bl	8008356 <__swbuf_r>
 8008298:	3001      	adds	r0, #1
 800829a:	d0d7      	beq.n	800824c <_puts_r+0x38>
 800829c:	250a      	movs	r5, #10
 800829e:	e7d7      	b.n	8008250 <_puts_r+0x3c>
 80082a0:	4622      	mov	r2, r4
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 f857 	bl	8008356 <__swbuf_r>
 80082a8:	3001      	adds	r0, #1
 80082aa:	d1e7      	bne.n	800827c <_puts_r+0x68>
 80082ac:	e7ce      	b.n	800824c <_puts_r+0x38>
 80082ae:	3e01      	subs	r6, #1
 80082b0:	e7e4      	b.n	800827c <_puts_r+0x68>
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	6022      	str	r2, [r4, #0]
 80082b8:	220a      	movs	r2, #10
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e7ee      	b.n	800829c <_puts_r+0x88>
	...

080082c0 <puts>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	@ (80082cc <puts+0xc>)
 80082c2:	4601      	mov	r1, r0
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	f7ff bfa5 	b.w	8008214 <_puts_r>
 80082ca:	bf00      	nop
 80082cc:	2000003c 	.word	0x2000003c

080082d0 <__sread>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	460c      	mov	r4, r1
 80082d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d8:	f000 f8fc 	bl	80084d4 <_read_r>
 80082dc:	2800      	cmp	r0, #0
 80082de:	bfab      	itete	ge
 80082e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082e2:	89a3      	ldrhlt	r3, [r4, #12]
 80082e4:	181b      	addge	r3, r3, r0
 80082e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082ea:	bfac      	ite	ge
 80082ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082ee:	81a3      	strhlt	r3, [r4, #12]
 80082f0:	bd10      	pop	{r4, pc}

080082f2 <__swrite>:
 80082f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f6:	461f      	mov	r7, r3
 80082f8:	898b      	ldrh	r3, [r1, #12]
 80082fa:	05db      	lsls	r3, r3, #23
 80082fc:	4605      	mov	r5, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	4616      	mov	r6, r2
 8008302:	d505      	bpl.n	8008310 <__swrite+0x1e>
 8008304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008308:	2302      	movs	r3, #2
 800830a:	2200      	movs	r2, #0
 800830c:	f000 f8d0 	bl	80084b0 <_lseek_r>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	4632      	mov	r2, r6
 800831e:	463b      	mov	r3, r7
 8008320:	4628      	mov	r0, r5
 8008322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008326:	f000 b8e7 	b.w	80084f8 <_write_r>

0800832a <__sseek>:
 800832a:	b510      	push	{r4, lr}
 800832c:	460c      	mov	r4, r1
 800832e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008332:	f000 f8bd 	bl	80084b0 <_lseek_r>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	bf15      	itete	ne
 800833c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800833e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008342:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008346:	81a3      	strheq	r3, [r4, #12]
 8008348:	bf18      	it	ne
 800834a:	81a3      	strhne	r3, [r4, #12]
 800834c:	bd10      	pop	{r4, pc}

0800834e <__sclose>:
 800834e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008352:	f000 b89d 	b.w	8008490 <_close_r>

08008356 <__swbuf_r>:
 8008356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008358:	460e      	mov	r6, r1
 800835a:	4614      	mov	r4, r2
 800835c:	4605      	mov	r5, r0
 800835e:	b118      	cbz	r0, 8008368 <__swbuf_r+0x12>
 8008360:	6a03      	ldr	r3, [r0, #32]
 8008362:	b90b      	cbnz	r3, 8008368 <__swbuf_r+0x12>
 8008364:	f7ff ff0e 	bl	8008184 <__sinit>
 8008368:	69a3      	ldr	r3, [r4, #24]
 800836a:	60a3      	str	r3, [r4, #8]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	071a      	lsls	r2, r3, #28
 8008370:	d501      	bpl.n	8008376 <__swbuf_r+0x20>
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	b943      	cbnz	r3, 8008388 <__swbuf_r+0x32>
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f000 f82b 	bl	80083d4 <__swsetup_r>
 800837e:	b118      	cbz	r0, 8008388 <__swbuf_r+0x32>
 8008380:	f04f 37ff 	mov.w	r7, #4294967295
 8008384:	4638      	mov	r0, r7
 8008386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	6922      	ldr	r2, [r4, #16]
 800838c:	1a98      	subs	r0, r3, r2
 800838e:	6963      	ldr	r3, [r4, #20]
 8008390:	b2f6      	uxtb	r6, r6
 8008392:	4283      	cmp	r3, r0
 8008394:	4637      	mov	r7, r6
 8008396:	dc05      	bgt.n	80083a4 <__swbuf_r+0x4e>
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f000 fd36 	bl	8008e0c <_fflush_r>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d1ed      	bne.n	8008380 <__swbuf_r+0x2a>
 80083a4:	68a3      	ldr	r3, [r4, #8]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	60a3      	str	r3, [r4, #8]
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	6022      	str	r2, [r4, #0]
 80083b0:	701e      	strb	r6, [r3, #0]
 80083b2:	6962      	ldr	r2, [r4, #20]
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d004      	beq.n	80083c4 <__swbuf_r+0x6e>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	07db      	lsls	r3, r3, #31
 80083be:	d5e1      	bpl.n	8008384 <__swbuf_r+0x2e>
 80083c0:	2e0a      	cmp	r6, #10
 80083c2:	d1df      	bne.n	8008384 <__swbuf_r+0x2e>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 fd20 	bl	8008e0c <_fflush_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d0d9      	beq.n	8008384 <__swbuf_r+0x2e>
 80083d0:	e7d6      	b.n	8008380 <__swbuf_r+0x2a>
	...

080083d4 <__swsetup_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4b29      	ldr	r3, [pc, #164]	@ (800847c <__swsetup_r+0xa8>)
 80083d8:	4605      	mov	r5, r0
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	460c      	mov	r4, r1
 80083de:	b118      	cbz	r0, 80083e8 <__swsetup_r+0x14>
 80083e0:	6a03      	ldr	r3, [r0, #32]
 80083e2:	b90b      	cbnz	r3, 80083e8 <__swsetup_r+0x14>
 80083e4:	f7ff fece 	bl	8008184 <__sinit>
 80083e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ec:	0719      	lsls	r1, r3, #28
 80083ee:	d422      	bmi.n	8008436 <__swsetup_r+0x62>
 80083f0:	06da      	lsls	r2, r3, #27
 80083f2:	d407      	bmi.n	8008404 <__swsetup_r+0x30>
 80083f4:	2209      	movs	r2, #9
 80083f6:	602a      	str	r2, [r5, #0]
 80083f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008402:	e033      	b.n	800846c <__swsetup_r+0x98>
 8008404:	0758      	lsls	r0, r3, #29
 8008406:	d512      	bpl.n	800842e <__swsetup_r+0x5a>
 8008408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800840a:	b141      	cbz	r1, 800841e <__swsetup_r+0x4a>
 800840c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008410:	4299      	cmp	r1, r3
 8008412:	d002      	beq.n	800841a <__swsetup_r+0x46>
 8008414:	4628      	mov	r0, r5
 8008416:	f000 f8af 	bl	8008578 <_free_r>
 800841a:	2300      	movs	r3, #0
 800841c:	6363      	str	r3, [r4, #52]	@ 0x34
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	2300      	movs	r3, #0
 8008428:	6063      	str	r3, [r4, #4]
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f043 0308 	orr.w	r3, r3, #8
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	b94b      	cbnz	r3, 800844e <__swsetup_r+0x7a>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008444:	d003      	beq.n	800844e <__swsetup_r+0x7a>
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 fd2d 	bl	8008ea8 <__smakebuf_r>
 800844e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008452:	f013 0201 	ands.w	r2, r3, #1
 8008456:	d00a      	beq.n	800846e <__swsetup_r+0x9a>
 8008458:	2200      	movs	r2, #0
 800845a:	60a2      	str	r2, [r4, #8]
 800845c:	6962      	ldr	r2, [r4, #20]
 800845e:	4252      	negs	r2, r2
 8008460:	61a2      	str	r2, [r4, #24]
 8008462:	6922      	ldr	r2, [r4, #16]
 8008464:	b942      	cbnz	r2, 8008478 <__swsetup_r+0xa4>
 8008466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800846a:	d1c5      	bne.n	80083f8 <__swsetup_r+0x24>
 800846c:	bd38      	pop	{r3, r4, r5, pc}
 800846e:	0799      	lsls	r1, r3, #30
 8008470:	bf58      	it	pl
 8008472:	6962      	ldrpl	r2, [r4, #20]
 8008474:	60a2      	str	r2, [r4, #8]
 8008476:	e7f4      	b.n	8008462 <__swsetup_r+0x8e>
 8008478:	2000      	movs	r0, #0
 800847a:	e7f7      	b.n	800846c <__swsetup_r+0x98>
 800847c:	2000003c 	.word	0x2000003c

08008480 <memset>:
 8008480:	4402      	add	r2, r0
 8008482:	4603      	mov	r3, r0
 8008484:	4293      	cmp	r3, r2
 8008486:	d100      	bne.n	800848a <memset+0xa>
 8008488:	4770      	bx	lr
 800848a:	f803 1b01 	strb.w	r1, [r3], #1
 800848e:	e7f9      	b.n	8008484 <memset+0x4>

08008490 <_close_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d06      	ldr	r5, [pc, #24]	@ (80084ac <_close_r+0x1c>)
 8008494:	2300      	movs	r3, #0
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	f7f9 f827 	bl	80014ee <_close>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_close_r+0x1a>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_close_r+0x1a>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20003bcc 	.word	0x20003bcc

080084b0 <_lseek_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	@ (80084d0 <_lseek_r+0x20>)
 80084b4:	4604      	mov	r4, r0
 80084b6:	4608      	mov	r0, r1
 80084b8:	4611      	mov	r1, r2
 80084ba:	2200      	movs	r2, #0
 80084bc:	602a      	str	r2, [r5, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	f7f9 f83c 	bl	800153c <_lseek>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_lseek_r+0x1e>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_lseek_r+0x1e>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20003bcc 	.word	0x20003bcc

080084d4 <_read_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d07      	ldr	r5, [pc, #28]	@ (80084f4 <_read_r+0x20>)
 80084d8:	4604      	mov	r4, r0
 80084da:	4608      	mov	r0, r1
 80084dc:	4611      	mov	r1, r2
 80084de:	2200      	movs	r2, #0
 80084e0:	602a      	str	r2, [r5, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	f7f8 ffe6 	bl	80014b4 <_read>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_read_r+0x1e>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_read_r+0x1e>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	20003bcc 	.word	0x20003bcc

080084f8 <_write_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d07      	ldr	r5, [pc, #28]	@ (8008518 <_write_r+0x20>)
 80084fc:	4604      	mov	r4, r0
 80084fe:	4608      	mov	r0, r1
 8008500:	4611      	mov	r1, r2
 8008502:	2200      	movs	r2, #0
 8008504:	602a      	str	r2, [r5, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	f7f8 fae8 	bl	8000adc <_write>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_write_r+0x1e>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_write_r+0x1e>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	20003bcc 	.word	0x20003bcc

0800851c <__errno>:
 800851c:	4b01      	ldr	r3, [pc, #4]	@ (8008524 <__errno+0x8>)
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	2000003c 	.word	0x2000003c

08008528 <__libc_init_array>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	4d0d      	ldr	r5, [pc, #52]	@ (8008560 <__libc_init_array+0x38>)
 800852c:	4c0d      	ldr	r4, [pc, #52]	@ (8008564 <__libc_init_array+0x3c>)
 800852e:	1b64      	subs	r4, r4, r5
 8008530:	10a4      	asrs	r4, r4, #2
 8008532:	2600      	movs	r6, #0
 8008534:	42a6      	cmp	r6, r4
 8008536:	d109      	bne.n	800854c <__libc_init_array+0x24>
 8008538:	4d0b      	ldr	r5, [pc, #44]	@ (8008568 <__libc_init_array+0x40>)
 800853a:	4c0c      	ldr	r4, [pc, #48]	@ (800856c <__libc_init_array+0x44>)
 800853c:	f000 fd22 	bl	8008f84 <_init>
 8008540:	1b64      	subs	r4, r4, r5
 8008542:	10a4      	asrs	r4, r4, #2
 8008544:	2600      	movs	r6, #0
 8008546:	42a6      	cmp	r6, r4
 8008548:	d105      	bne.n	8008556 <__libc_init_array+0x2e>
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008550:	4798      	blx	r3
 8008552:	3601      	adds	r6, #1
 8008554:	e7ee      	b.n	8008534 <__libc_init_array+0xc>
 8008556:	f855 3b04 	ldr.w	r3, [r5], #4
 800855a:	4798      	blx	r3
 800855c:	3601      	adds	r6, #1
 800855e:	e7f2      	b.n	8008546 <__libc_init_array+0x1e>
 8008560:	080098e4 	.word	0x080098e4
 8008564:	080098e4 	.word	0x080098e4
 8008568:	080098e4 	.word	0x080098e4
 800856c:	080098e8 	.word	0x080098e8

08008570 <__retarget_lock_init_recursive>:
 8008570:	4770      	bx	lr

08008572 <__retarget_lock_acquire_recursive>:
 8008572:	4770      	bx	lr

08008574 <__retarget_lock_release_recursive>:
 8008574:	4770      	bx	lr
	...

08008578 <_free_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4605      	mov	r5, r0
 800857c:	2900      	cmp	r1, #0
 800857e:	d041      	beq.n	8008604 <_free_r+0x8c>
 8008580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008584:	1f0c      	subs	r4, r1, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfb8      	it	lt
 800858a:	18e4      	addlt	r4, r4, r3
 800858c:	f000 f8e0 	bl	8008750 <__malloc_lock>
 8008590:	4a1d      	ldr	r2, [pc, #116]	@ (8008608 <_free_r+0x90>)
 8008592:	6813      	ldr	r3, [r2, #0]
 8008594:	b933      	cbnz	r3, 80085a4 <_free_r+0x2c>
 8008596:	6063      	str	r3, [r4, #4]
 8008598:	6014      	str	r4, [r2, #0]
 800859a:	4628      	mov	r0, r5
 800859c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a0:	f000 b8dc 	b.w	800875c <__malloc_unlock>
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	d908      	bls.n	80085ba <_free_r+0x42>
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	1821      	adds	r1, r4, r0
 80085ac:	428b      	cmp	r3, r1
 80085ae:	bf01      	itttt	eq
 80085b0:	6819      	ldreq	r1, [r3, #0]
 80085b2:	685b      	ldreq	r3, [r3, #4]
 80085b4:	1809      	addeq	r1, r1, r0
 80085b6:	6021      	streq	r1, [r4, #0]
 80085b8:	e7ed      	b.n	8008596 <_free_r+0x1e>
 80085ba:	461a      	mov	r2, r3
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b10b      	cbz	r3, 80085c4 <_free_r+0x4c>
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d9fa      	bls.n	80085ba <_free_r+0x42>
 80085c4:	6811      	ldr	r1, [r2, #0]
 80085c6:	1850      	adds	r0, r2, r1
 80085c8:	42a0      	cmp	r0, r4
 80085ca:	d10b      	bne.n	80085e4 <_free_r+0x6c>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	4401      	add	r1, r0
 80085d0:	1850      	adds	r0, r2, r1
 80085d2:	4283      	cmp	r3, r0
 80085d4:	6011      	str	r1, [r2, #0]
 80085d6:	d1e0      	bne.n	800859a <_free_r+0x22>
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	6053      	str	r3, [r2, #4]
 80085de:	4408      	add	r0, r1
 80085e0:	6010      	str	r0, [r2, #0]
 80085e2:	e7da      	b.n	800859a <_free_r+0x22>
 80085e4:	d902      	bls.n	80085ec <_free_r+0x74>
 80085e6:	230c      	movs	r3, #12
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	e7d6      	b.n	800859a <_free_r+0x22>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	1821      	adds	r1, r4, r0
 80085f0:	428b      	cmp	r3, r1
 80085f2:	bf04      	itt	eq
 80085f4:	6819      	ldreq	r1, [r3, #0]
 80085f6:	685b      	ldreq	r3, [r3, #4]
 80085f8:	6063      	str	r3, [r4, #4]
 80085fa:	bf04      	itt	eq
 80085fc:	1809      	addeq	r1, r1, r0
 80085fe:	6021      	streq	r1, [r4, #0]
 8008600:	6054      	str	r4, [r2, #4]
 8008602:	e7ca      	b.n	800859a <_free_r+0x22>
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	20003bd8 	.word	0x20003bd8

0800860c <sbrk_aligned>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	4e0f      	ldr	r6, [pc, #60]	@ (800864c <sbrk_aligned+0x40>)
 8008610:	460c      	mov	r4, r1
 8008612:	6831      	ldr	r1, [r6, #0]
 8008614:	4605      	mov	r5, r0
 8008616:	b911      	cbnz	r1, 800861e <sbrk_aligned+0x12>
 8008618:	f000 fca4 	bl	8008f64 <_sbrk_r>
 800861c:	6030      	str	r0, [r6, #0]
 800861e:	4621      	mov	r1, r4
 8008620:	4628      	mov	r0, r5
 8008622:	f000 fc9f 	bl	8008f64 <_sbrk_r>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	d103      	bne.n	8008632 <sbrk_aligned+0x26>
 800862a:	f04f 34ff 	mov.w	r4, #4294967295
 800862e:	4620      	mov	r0, r4
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	1cc4      	adds	r4, r0, #3
 8008634:	f024 0403 	bic.w	r4, r4, #3
 8008638:	42a0      	cmp	r0, r4
 800863a:	d0f8      	beq.n	800862e <sbrk_aligned+0x22>
 800863c:	1a21      	subs	r1, r4, r0
 800863e:	4628      	mov	r0, r5
 8008640:	f000 fc90 	bl	8008f64 <_sbrk_r>
 8008644:	3001      	adds	r0, #1
 8008646:	d1f2      	bne.n	800862e <sbrk_aligned+0x22>
 8008648:	e7ef      	b.n	800862a <sbrk_aligned+0x1e>
 800864a:	bf00      	nop
 800864c:	20003bd4 	.word	0x20003bd4

08008650 <_malloc_r>:
 8008650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008654:	1ccd      	adds	r5, r1, #3
 8008656:	f025 0503 	bic.w	r5, r5, #3
 800865a:	3508      	adds	r5, #8
 800865c:	2d0c      	cmp	r5, #12
 800865e:	bf38      	it	cc
 8008660:	250c      	movcc	r5, #12
 8008662:	2d00      	cmp	r5, #0
 8008664:	4606      	mov	r6, r0
 8008666:	db01      	blt.n	800866c <_malloc_r+0x1c>
 8008668:	42a9      	cmp	r1, r5
 800866a:	d904      	bls.n	8008676 <_malloc_r+0x26>
 800866c:	230c      	movs	r3, #12
 800866e:	6033      	str	r3, [r6, #0]
 8008670:	2000      	movs	r0, #0
 8008672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800874c <_malloc_r+0xfc>
 800867a:	f000 f869 	bl	8008750 <__malloc_lock>
 800867e:	f8d8 3000 	ldr.w	r3, [r8]
 8008682:	461c      	mov	r4, r3
 8008684:	bb44      	cbnz	r4, 80086d8 <_malloc_r+0x88>
 8008686:	4629      	mov	r1, r5
 8008688:	4630      	mov	r0, r6
 800868a:	f7ff ffbf 	bl	800860c <sbrk_aligned>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	4604      	mov	r4, r0
 8008692:	d158      	bne.n	8008746 <_malloc_r+0xf6>
 8008694:	f8d8 4000 	ldr.w	r4, [r8]
 8008698:	4627      	mov	r7, r4
 800869a:	2f00      	cmp	r7, #0
 800869c:	d143      	bne.n	8008726 <_malloc_r+0xd6>
 800869e:	2c00      	cmp	r4, #0
 80086a0:	d04b      	beq.n	800873a <_malloc_r+0xea>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	4639      	mov	r1, r7
 80086a6:	4630      	mov	r0, r6
 80086a8:	eb04 0903 	add.w	r9, r4, r3
 80086ac:	f000 fc5a 	bl	8008f64 <_sbrk_r>
 80086b0:	4581      	cmp	r9, r0
 80086b2:	d142      	bne.n	800873a <_malloc_r+0xea>
 80086b4:	6821      	ldr	r1, [r4, #0]
 80086b6:	1a6d      	subs	r5, r5, r1
 80086b8:	4629      	mov	r1, r5
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff ffa6 	bl	800860c <sbrk_aligned>
 80086c0:	3001      	adds	r0, #1
 80086c2:	d03a      	beq.n	800873a <_malloc_r+0xea>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	442b      	add	r3, r5
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	f8d8 3000 	ldr.w	r3, [r8]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	bb62      	cbnz	r2, 800872c <_malloc_r+0xdc>
 80086d2:	f8c8 7000 	str.w	r7, [r8]
 80086d6:	e00f      	b.n	80086f8 <_malloc_r+0xa8>
 80086d8:	6822      	ldr	r2, [r4, #0]
 80086da:	1b52      	subs	r2, r2, r5
 80086dc:	d420      	bmi.n	8008720 <_malloc_r+0xd0>
 80086de:	2a0b      	cmp	r2, #11
 80086e0:	d917      	bls.n	8008712 <_malloc_r+0xc2>
 80086e2:	1961      	adds	r1, r4, r5
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	6025      	str	r5, [r4, #0]
 80086e8:	bf18      	it	ne
 80086ea:	6059      	strne	r1, [r3, #4]
 80086ec:	6863      	ldr	r3, [r4, #4]
 80086ee:	bf08      	it	eq
 80086f0:	f8c8 1000 	streq.w	r1, [r8]
 80086f4:	5162      	str	r2, [r4, r5]
 80086f6:	604b      	str	r3, [r1, #4]
 80086f8:	4630      	mov	r0, r6
 80086fa:	f000 f82f 	bl	800875c <__malloc_unlock>
 80086fe:	f104 000b 	add.w	r0, r4, #11
 8008702:	1d23      	adds	r3, r4, #4
 8008704:	f020 0007 	bic.w	r0, r0, #7
 8008708:	1ac2      	subs	r2, r0, r3
 800870a:	bf1c      	itt	ne
 800870c:	1a1b      	subne	r3, r3, r0
 800870e:	50a3      	strne	r3, [r4, r2]
 8008710:	e7af      	b.n	8008672 <_malloc_r+0x22>
 8008712:	6862      	ldr	r2, [r4, #4]
 8008714:	42a3      	cmp	r3, r4
 8008716:	bf0c      	ite	eq
 8008718:	f8c8 2000 	streq.w	r2, [r8]
 800871c:	605a      	strne	r2, [r3, #4]
 800871e:	e7eb      	b.n	80086f8 <_malloc_r+0xa8>
 8008720:	4623      	mov	r3, r4
 8008722:	6864      	ldr	r4, [r4, #4]
 8008724:	e7ae      	b.n	8008684 <_malloc_r+0x34>
 8008726:	463c      	mov	r4, r7
 8008728:	687f      	ldr	r7, [r7, #4]
 800872a:	e7b6      	b.n	800869a <_malloc_r+0x4a>
 800872c:	461a      	mov	r2, r3
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	42a3      	cmp	r3, r4
 8008732:	d1fb      	bne.n	800872c <_malloc_r+0xdc>
 8008734:	2300      	movs	r3, #0
 8008736:	6053      	str	r3, [r2, #4]
 8008738:	e7de      	b.n	80086f8 <_malloc_r+0xa8>
 800873a:	230c      	movs	r3, #12
 800873c:	6033      	str	r3, [r6, #0]
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f80c 	bl	800875c <__malloc_unlock>
 8008744:	e794      	b.n	8008670 <_malloc_r+0x20>
 8008746:	6005      	str	r5, [r0, #0]
 8008748:	e7d6      	b.n	80086f8 <_malloc_r+0xa8>
 800874a:	bf00      	nop
 800874c:	20003bd8 	.word	0x20003bd8

08008750 <__malloc_lock>:
 8008750:	4801      	ldr	r0, [pc, #4]	@ (8008758 <__malloc_lock+0x8>)
 8008752:	f7ff bf0e 	b.w	8008572 <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	20003bd0 	.word	0x20003bd0

0800875c <__malloc_unlock>:
 800875c:	4801      	ldr	r0, [pc, #4]	@ (8008764 <__malloc_unlock+0x8>)
 800875e:	f7ff bf09 	b.w	8008574 <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	20003bd0 	.word	0x20003bd0

08008768 <__sfputc_r>:
 8008768:	6893      	ldr	r3, [r2, #8]
 800876a:	3b01      	subs	r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	b410      	push	{r4}
 8008770:	6093      	str	r3, [r2, #8]
 8008772:	da08      	bge.n	8008786 <__sfputc_r+0x1e>
 8008774:	6994      	ldr	r4, [r2, #24]
 8008776:	42a3      	cmp	r3, r4
 8008778:	db01      	blt.n	800877e <__sfputc_r+0x16>
 800877a:	290a      	cmp	r1, #10
 800877c:	d103      	bne.n	8008786 <__sfputc_r+0x1e>
 800877e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008782:	f7ff bde8 	b.w	8008356 <__swbuf_r>
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	1c58      	adds	r0, r3, #1
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	7019      	strb	r1, [r3, #0]
 800878e:	4608      	mov	r0, r1
 8008790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008794:	4770      	bx	lr

08008796 <__sfputs_r>:
 8008796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008798:	4606      	mov	r6, r0
 800879a:	460f      	mov	r7, r1
 800879c:	4614      	mov	r4, r2
 800879e:	18d5      	adds	r5, r2, r3
 80087a0:	42ac      	cmp	r4, r5
 80087a2:	d101      	bne.n	80087a8 <__sfputs_r+0x12>
 80087a4:	2000      	movs	r0, #0
 80087a6:	e007      	b.n	80087b8 <__sfputs_r+0x22>
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	463a      	mov	r2, r7
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff ffda 	bl	8008768 <__sfputc_r>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d1f3      	bne.n	80087a0 <__sfputs_r+0xa>
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087bc <_vfiprintf_r>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	460d      	mov	r5, r1
 80087c2:	b09d      	sub	sp, #116	@ 0x74
 80087c4:	4614      	mov	r4, r2
 80087c6:	4698      	mov	r8, r3
 80087c8:	4606      	mov	r6, r0
 80087ca:	b118      	cbz	r0, 80087d4 <_vfiprintf_r+0x18>
 80087cc:	6a03      	ldr	r3, [r0, #32]
 80087ce:	b90b      	cbnz	r3, 80087d4 <_vfiprintf_r+0x18>
 80087d0:	f7ff fcd8 	bl	8008184 <__sinit>
 80087d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087d6:	07d9      	lsls	r1, r3, #31
 80087d8:	d405      	bmi.n	80087e6 <_vfiprintf_r+0x2a>
 80087da:	89ab      	ldrh	r3, [r5, #12]
 80087dc:	059a      	lsls	r2, r3, #22
 80087de:	d402      	bmi.n	80087e6 <_vfiprintf_r+0x2a>
 80087e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087e2:	f7ff fec6 	bl	8008572 <__retarget_lock_acquire_recursive>
 80087e6:	89ab      	ldrh	r3, [r5, #12]
 80087e8:	071b      	lsls	r3, r3, #28
 80087ea:	d501      	bpl.n	80087f0 <_vfiprintf_r+0x34>
 80087ec:	692b      	ldr	r3, [r5, #16]
 80087ee:	b99b      	cbnz	r3, 8008818 <_vfiprintf_r+0x5c>
 80087f0:	4629      	mov	r1, r5
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff fdee 	bl	80083d4 <__swsetup_r>
 80087f8:	b170      	cbz	r0, 8008818 <_vfiprintf_r+0x5c>
 80087fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087fc:	07dc      	lsls	r4, r3, #31
 80087fe:	d504      	bpl.n	800880a <_vfiprintf_r+0x4e>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	b01d      	add	sp, #116	@ 0x74
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880a:	89ab      	ldrh	r3, [r5, #12]
 800880c:	0598      	lsls	r0, r3, #22
 800880e:	d4f7      	bmi.n	8008800 <_vfiprintf_r+0x44>
 8008810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008812:	f7ff feaf 	bl	8008574 <__retarget_lock_release_recursive>
 8008816:	e7f3      	b.n	8008800 <_vfiprintf_r+0x44>
 8008818:	2300      	movs	r3, #0
 800881a:	9309      	str	r3, [sp, #36]	@ 0x24
 800881c:	2320      	movs	r3, #32
 800881e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008822:	f8cd 800c 	str.w	r8, [sp, #12]
 8008826:	2330      	movs	r3, #48	@ 0x30
 8008828:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089d8 <_vfiprintf_r+0x21c>
 800882c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008830:	f04f 0901 	mov.w	r9, #1
 8008834:	4623      	mov	r3, r4
 8008836:	469a      	mov	sl, r3
 8008838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800883c:	b10a      	cbz	r2, 8008842 <_vfiprintf_r+0x86>
 800883e:	2a25      	cmp	r2, #37	@ 0x25
 8008840:	d1f9      	bne.n	8008836 <_vfiprintf_r+0x7a>
 8008842:	ebba 0b04 	subs.w	fp, sl, r4
 8008846:	d00b      	beq.n	8008860 <_vfiprintf_r+0xa4>
 8008848:	465b      	mov	r3, fp
 800884a:	4622      	mov	r2, r4
 800884c:	4629      	mov	r1, r5
 800884e:	4630      	mov	r0, r6
 8008850:	f7ff ffa1 	bl	8008796 <__sfputs_r>
 8008854:	3001      	adds	r0, #1
 8008856:	f000 80a7 	beq.w	80089a8 <_vfiprintf_r+0x1ec>
 800885a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800885c:	445a      	add	r2, fp
 800885e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008860:	f89a 3000 	ldrb.w	r3, [sl]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 809f 	beq.w	80089a8 <_vfiprintf_r+0x1ec>
 800886a:	2300      	movs	r3, #0
 800886c:	f04f 32ff 	mov.w	r2, #4294967295
 8008870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008874:	f10a 0a01 	add.w	sl, sl, #1
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	9307      	str	r3, [sp, #28]
 800887c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008880:	931a      	str	r3, [sp, #104]	@ 0x68
 8008882:	4654      	mov	r4, sl
 8008884:	2205      	movs	r2, #5
 8008886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888a:	4853      	ldr	r0, [pc, #332]	@ (80089d8 <_vfiprintf_r+0x21c>)
 800888c:	f7f7 fcb0 	bl	80001f0 <memchr>
 8008890:	9a04      	ldr	r2, [sp, #16]
 8008892:	b9d8      	cbnz	r0, 80088cc <_vfiprintf_r+0x110>
 8008894:	06d1      	lsls	r1, r2, #27
 8008896:	bf44      	itt	mi
 8008898:	2320      	movmi	r3, #32
 800889a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800889e:	0713      	lsls	r3, r2, #28
 80088a0:	bf44      	itt	mi
 80088a2:	232b      	movmi	r3, #43	@ 0x2b
 80088a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a8:	f89a 3000 	ldrb.w	r3, [sl]
 80088ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ae:	d015      	beq.n	80088dc <_vfiprintf_r+0x120>
 80088b0:	9a07      	ldr	r2, [sp, #28]
 80088b2:	4654      	mov	r4, sl
 80088b4:	2000      	movs	r0, #0
 80088b6:	f04f 0c0a 	mov.w	ip, #10
 80088ba:	4621      	mov	r1, r4
 80088bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c0:	3b30      	subs	r3, #48	@ 0x30
 80088c2:	2b09      	cmp	r3, #9
 80088c4:	d94b      	bls.n	800895e <_vfiprintf_r+0x1a2>
 80088c6:	b1b0      	cbz	r0, 80088f6 <_vfiprintf_r+0x13a>
 80088c8:	9207      	str	r2, [sp, #28]
 80088ca:	e014      	b.n	80088f6 <_vfiprintf_r+0x13a>
 80088cc:	eba0 0308 	sub.w	r3, r0, r8
 80088d0:	fa09 f303 	lsl.w	r3, r9, r3
 80088d4:	4313      	orrs	r3, r2
 80088d6:	9304      	str	r3, [sp, #16]
 80088d8:	46a2      	mov	sl, r4
 80088da:	e7d2      	b.n	8008882 <_vfiprintf_r+0xc6>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	1d19      	adds	r1, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	9103      	str	r1, [sp, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bfbb      	ittet	lt
 80088e8:	425b      	neglt	r3, r3
 80088ea:	f042 0202 	orrlt.w	r2, r2, #2
 80088ee:	9307      	strge	r3, [sp, #28]
 80088f0:	9307      	strlt	r3, [sp, #28]
 80088f2:	bfb8      	it	lt
 80088f4:	9204      	strlt	r2, [sp, #16]
 80088f6:	7823      	ldrb	r3, [r4, #0]
 80088f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80088fa:	d10a      	bne.n	8008912 <_vfiprintf_r+0x156>
 80088fc:	7863      	ldrb	r3, [r4, #1]
 80088fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008900:	d132      	bne.n	8008968 <_vfiprintf_r+0x1ac>
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	1d1a      	adds	r2, r3, #4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	9203      	str	r2, [sp, #12]
 800890a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800890e:	3402      	adds	r4, #2
 8008910:	9305      	str	r3, [sp, #20]
 8008912:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089e8 <_vfiprintf_r+0x22c>
 8008916:	7821      	ldrb	r1, [r4, #0]
 8008918:	2203      	movs	r2, #3
 800891a:	4650      	mov	r0, sl
 800891c:	f7f7 fc68 	bl	80001f0 <memchr>
 8008920:	b138      	cbz	r0, 8008932 <_vfiprintf_r+0x176>
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	eba0 000a 	sub.w	r0, r0, sl
 8008928:	2240      	movs	r2, #64	@ 0x40
 800892a:	4082      	lsls	r2, r0
 800892c:	4313      	orrs	r3, r2
 800892e:	3401      	adds	r4, #1
 8008930:	9304      	str	r3, [sp, #16]
 8008932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008936:	4829      	ldr	r0, [pc, #164]	@ (80089dc <_vfiprintf_r+0x220>)
 8008938:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800893c:	2206      	movs	r2, #6
 800893e:	f7f7 fc57 	bl	80001f0 <memchr>
 8008942:	2800      	cmp	r0, #0
 8008944:	d03f      	beq.n	80089c6 <_vfiprintf_r+0x20a>
 8008946:	4b26      	ldr	r3, [pc, #152]	@ (80089e0 <_vfiprintf_r+0x224>)
 8008948:	bb1b      	cbnz	r3, 8008992 <_vfiprintf_r+0x1d6>
 800894a:	9b03      	ldr	r3, [sp, #12]
 800894c:	3307      	adds	r3, #7
 800894e:	f023 0307 	bic.w	r3, r3, #7
 8008952:	3308      	adds	r3, #8
 8008954:	9303      	str	r3, [sp, #12]
 8008956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008958:	443b      	add	r3, r7
 800895a:	9309      	str	r3, [sp, #36]	@ 0x24
 800895c:	e76a      	b.n	8008834 <_vfiprintf_r+0x78>
 800895e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008962:	460c      	mov	r4, r1
 8008964:	2001      	movs	r0, #1
 8008966:	e7a8      	b.n	80088ba <_vfiprintf_r+0xfe>
 8008968:	2300      	movs	r3, #0
 800896a:	3401      	adds	r4, #1
 800896c:	9305      	str	r3, [sp, #20]
 800896e:	4619      	mov	r1, r3
 8008970:	f04f 0c0a 	mov.w	ip, #10
 8008974:	4620      	mov	r0, r4
 8008976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800897a:	3a30      	subs	r2, #48	@ 0x30
 800897c:	2a09      	cmp	r2, #9
 800897e:	d903      	bls.n	8008988 <_vfiprintf_r+0x1cc>
 8008980:	2b00      	cmp	r3, #0
 8008982:	d0c6      	beq.n	8008912 <_vfiprintf_r+0x156>
 8008984:	9105      	str	r1, [sp, #20]
 8008986:	e7c4      	b.n	8008912 <_vfiprintf_r+0x156>
 8008988:	fb0c 2101 	mla	r1, ip, r1, r2
 800898c:	4604      	mov	r4, r0
 800898e:	2301      	movs	r3, #1
 8008990:	e7f0      	b.n	8008974 <_vfiprintf_r+0x1b8>
 8008992:	ab03      	add	r3, sp, #12
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	462a      	mov	r2, r5
 8008998:	4b12      	ldr	r3, [pc, #72]	@ (80089e4 <_vfiprintf_r+0x228>)
 800899a:	a904      	add	r1, sp, #16
 800899c:	4630      	mov	r0, r6
 800899e:	f3af 8000 	nop.w
 80089a2:	4607      	mov	r7, r0
 80089a4:	1c78      	adds	r0, r7, #1
 80089a6:	d1d6      	bne.n	8008956 <_vfiprintf_r+0x19a>
 80089a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089aa:	07d9      	lsls	r1, r3, #31
 80089ac:	d405      	bmi.n	80089ba <_vfiprintf_r+0x1fe>
 80089ae:	89ab      	ldrh	r3, [r5, #12]
 80089b0:	059a      	lsls	r2, r3, #22
 80089b2:	d402      	bmi.n	80089ba <_vfiprintf_r+0x1fe>
 80089b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089b6:	f7ff fddd 	bl	8008574 <__retarget_lock_release_recursive>
 80089ba:	89ab      	ldrh	r3, [r5, #12]
 80089bc:	065b      	lsls	r3, r3, #25
 80089be:	f53f af1f 	bmi.w	8008800 <_vfiprintf_r+0x44>
 80089c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c4:	e71e      	b.n	8008804 <_vfiprintf_r+0x48>
 80089c6:	ab03      	add	r3, sp, #12
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	462a      	mov	r2, r5
 80089cc:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <_vfiprintf_r+0x228>)
 80089ce:	a904      	add	r1, sp, #16
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 f879 	bl	8008ac8 <_printf_i>
 80089d6:	e7e4      	b.n	80089a2 <_vfiprintf_r+0x1e6>
 80089d8:	080098a8 	.word	0x080098a8
 80089dc:	080098b2 	.word	0x080098b2
 80089e0:	00000000 	.word	0x00000000
 80089e4:	08008797 	.word	0x08008797
 80089e8:	080098ae 	.word	0x080098ae

080089ec <_printf_common>:
 80089ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f0:	4616      	mov	r6, r2
 80089f2:	4698      	mov	r8, r3
 80089f4:	688a      	ldr	r2, [r1, #8]
 80089f6:	690b      	ldr	r3, [r1, #16]
 80089f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089fc:	4293      	cmp	r3, r2
 80089fe:	bfb8      	it	lt
 8008a00:	4613      	movlt	r3, r2
 8008a02:	6033      	str	r3, [r6, #0]
 8008a04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a08:	4607      	mov	r7, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b10a      	cbz	r2, 8008a12 <_printf_common+0x26>
 8008a0e:	3301      	adds	r3, #1
 8008a10:	6033      	str	r3, [r6, #0]
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	0699      	lsls	r1, r3, #26
 8008a16:	bf42      	ittt	mi
 8008a18:	6833      	ldrmi	r3, [r6, #0]
 8008a1a:	3302      	addmi	r3, #2
 8008a1c:	6033      	strmi	r3, [r6, #0]
 8008a1e:	6825      	ldr	r5, [r4, #0]
 8008a20:	f015 0506 	ands.w	r5, r5, #6
 8008a24:	d106      	bne.n	8008a34 <_printf_common+0x48>
 8008a26:	f104 0a19 	add.w	sl, r4, #25
 8008a2a:	68e3      	ldr	r3, [r4, #12]
 8008a2c:	6832      	ldr	r2, [r6, #0]
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	42ab      	cmp	r3, r5
 8008a32:	dc26      	bgt.n	8008a82 <_printf_common+0x96>
 8008a34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	3b00      	subs	r3, #0
 8008a3c:	bf18      	it	ne
 8008a3e:	2301      	movne	r3, #1
 8008a40:	0692      	lsls	r2, r2, #26
 8008a42:	d42b      	bmi.n	8008a9c <_printf_common+0xb0>
 8008a44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c8      	blx	r9
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d01e      	beq.n	8008a90 <_printf_common+0xa4>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	f003 0306 	and.w	r3, r3, #6
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	bf02      	ittt	eq
 8008a5e:	68e5      	ldreq	r5, [r4, #12]
 8008a60:	6833      	ldreq	r3, [r6, #0]
 8008a62:	1aed      	subeq	r5, r5, r3
 8008a64:	68a3      	ldr	r3, [r4, #8]
 8008a66:	bf0c      	ite	eq
 8008a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a6c:	2500      	movne	r5, #0
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	bfc4      	itt	gt
 8008a72:	1a9b      	subgt	r3, r3, r2
 8008a74:	18ed      	addgt	r5, r5, r3
 8008a76:	2600      	movs	r6, #0
 8008a78:	341a      	adds	r4, #26
 8008a7a:	42b5      	cmp	r5, r6
 8008a7c:	d11a      	bne.n	8008ab4 <_printf_common+0xc8>
 8008a7e:	2000      	movs	r0, #0
 8008a80:	e008      	b.n	8008a94 <_printf_common+0xa8>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4652      	mov	r2, sl
 8008a86:	4641      	mov	r1, r8
 8008a88:	4638      	mov	r0, r7
 8008a8a:	47c8      	blx	r9
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d103      	bne.n	8008a98 <_printf_common+0xac>
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a98:	3501      	adds	r5, #1
 8008a9a:	e7c6      	b.n	8008a2a <_printf_common+0x3e>
 8008a9c:	18e1      	adds	r1, r4, r3
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	2030      	movs	r0, #48	@ 0x30
 8008aa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008aa6:	4422      	add	r2, r4
 8008aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ab0:	3302      	adds	r3, #2
 8008ab2:	e7c7      	b.n	8008a44 <_printf_common+0x58>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	4641      	mov	r1, r8
 8008aba:	4638      	mov	r0, r7
 8008abc:	47c8      	blx	r9
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d0e6      	beq.n	8008a90 <_printf_common+0xa4>
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7d9      	b.n	8008a7a <_printf_common+0x8e>
	...

08008ac8 <_printf_i>:
 8008ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008acc:	7e0f      	ldrb	r7, [r1, #24]
 8008ace:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ad0:	2f78      	cmp	r7, #120	@ 0x78
 8008ad2:	4691      	mov	r9, r2
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	469a      	mov	sl, r3
 8008ada:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ade:	d807      	bhi.n	8008af0 <_printf_i+0x28>
 8008ae0:	2f62      	cmp	r7, #98	@ 0x62
 8008ae2:	d80a      	bhi.n	8008afa <_printf_i+0x32>
 8008ae4:	2f00      	cmp	r7, #0
 8008ae6:	f000 80d1 	beq.w	8008c8c <_printf_i+0x1c4>
 8008aea:	2f58      	cmp	r7, #88	@ 0x58
 8008aec:	f000 80b8 	beq.w	8008c60 <_printf_i+0x198>
 8008af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008af4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008af8:	e03a      	b.n	8008b70 <_printf_i+0xa8>
 8008afa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008afe:	2b15      	cmp	r3, #21
 8008b00:	d8f6      	bhi.n	8008af0 <_printf_i+0x28>
 8008b02:	a101      	add	r1, pc, #4	@ (adr r1, 8008b08 <_printf_i+0x40>)
 8008b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b08:	08008b61 	.word	0x08008b61
 8008b0c:	08008b75 	.word	0x08008b75
 8008b10:	08008af1 	.word	0x08008af1
 8008b14:	08008af1 	.word	0x08008af1
 8008b18:	08008af1 	.word	0x08008af1
 8008b1c:	08008af1 	.word	0x08008af1
 8008b20:	08008b75 	.word	0x08008b75
 8008b24:	08008af1 	.word	0x08008af1
 8008b28:	08008af1 	.word	0x08008af1
 8008b2c:	08008af1 	.word	0x08008af1
 8008b30:	08008af1 	.word	0x08008af1
 8008b34:	08008c73 	.word	0x08008c73
 8008b38:	08008b9f 	.word	0x08008b9f
 8008b3c:	08008c2d 	.word	0x08008c2d
 8008b40:	08008af1 	.word	0x08008af1
 8008b44:	08008af1 	.word	0x08008af1
 8008b48:	08008c95 	.word	0x08008c95
 8008b4c:	08008af1 	.word	0x08008af1
 8008b50:	08008b9f 	.word	0x08008b9f
 8008b54:	08008af1 	.word	0x08008af1
 8008b58:	08008af1 	.word	0x08008af1
 8008b5c:	08008c35 	.word	0x08008c35
 8008b60:	6833      	ldr	r3, [r6, #0]
 8008b62:	1d1a      	adds	r2, r3, #4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6032      	str	r2, [r6, #0]
 8008b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b70:	2301      	movs	r3, #1
 8008b72:	e09c      	b.n	8008cae <_printf_i+0x1e6>
 8008b74:	6833      	ldr	r3, [r6, #0]
 8008b76:	6820      	ldr	r0, [r4, #0]
 8008b78:	1d19      	adds	r1, r3, #4
 8008b7a:	6031      	str	r1, [r6, #0]
 8008b7c:	0606      	lsls	r6, r0, #24
 8008b7e:	d501      	bpl.n	8008b84 <_printf_i+0xbc>
 8008b80:	681d      	ldr	r5, [r3, #0]
 8008b82:	e003      	b.n	8008b8c <_printf_i+0xc4>
 8008b84:	0645      	lsls	r5, r0, #25
 8008b86:	d5fb      	bpl.n	8008b80 <_printf_i+0xb8>
 8008b88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b8c:	2d00      	cmp	r5, #0
 8008b8e:	da03      	bge.n	8008b98 <_printf_i+0xd0>
 8008b90:	232d      	movs	r3, #45	@ 0x2d
 8008b92:	426d      	negs	r5, r5
 8008b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b98:	4858      	ldr	r0, [pc, #352]	@ (8008cfc <_printf_i+0x234>)
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	e011      	b.n	8008bc2 <_printf_i+0xfa>
 8008b9e:	6821      	ldr	r1, [r4, #0]
 8008ba0:	6833      	ldr	r3, [r6, #0]
 8008ba2:	0608      	lsls	r0, r1, #24
 8008ba4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ba8:	d402      	bmi.n	8008bb0 <_printf_i+0xe8>
 8008baa:	0649      	lsls	r1, r1, #25
 8008bac:	bf48      	it	mi
 8008bae:	b2ad      	uxthmi	r5, r5
 8008bb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bb2:	4852      	ldr	r0, [pc, #328]	@ (8008cfc <_printf_i+0x234>)
 8008bb4:	6033      	str	r3, [r6, #0]
 8008bb6:	bf14      	ite	ne
 8008bb8:	230a      	movne	r3, #10
 8008bba:	2308      	moveq	r3, #8
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bc2:	6866      	ldr	r6, [r4, #4]
 8008bc4:	60a6      	str	r6, [r4, #8]
 8008bc6:	2e00      	cmp	r6, #0
 8008bc8:	db05      	blt.n	8008bd6 <_printf_i+0x10e>
 8008bca:	6821      	ldr	r1, [r4, #0]
 8008bcc:	432e      	orrs	r6, r5
 8008bce:	f021 0104 	bic.w	r1, r1, #4
 8008bd2:	6021      	str	r1, [r4, #0]
 8008bd4:	d04b      	beq.n	8008c6e <_printf_i+0x1a6>
 8008bd6:	4616      	mov	r6, r2
 8008bd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bdc:	fb03 5711 	mls	r7, r3, r1, r5
 8008be0:	5dc7      	ldrb	r7, [r0, r7]
 8008be2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008be6:	462f      	mov	r7, r5
 8008be8:	42bb      	cmp	r3, r7
 8008bea:	460d      	mov	r5, r1
 8008bec:	d9f4      	bls.n	8008bd8 <_printf_i+0x110>
 8008bee:	2b08      	cmp	r3, #8
 8008bf0:	d10b      	bne.n	8008c0a <_printf_i+0x142>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	07df      	lsls	r7, r3, #31
 8008bf6:	d508      	bpl.n	8008c0a <_printf_i+0x142>
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	6861      	ldr	r1, [r4, #4]
 8008bfc:	4299      	cmp	r1, r3
 8008bfe:	bfde      	ittt	le
 8008c00:	2330      	movle	r3, #48	@ 0x30
 8008c02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c0a:	1b92      	subs	r2, r2, r6
 8008c0c:	6122      	str	r2, [r4, #16]
 8008c0e:	f8cd a000 	str.w	sl, [sp]
 8008c12:	464b      	mov	r3, r9
 8008c14:	aa03      	add	r2, sp, #12
 8008c16:	4621      	mov	r1, r4
 8008c18:	4640      	mov	r0, r8
 8008c1a:	f7ff fee7 	bl	80089ec <_printf_common>
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d14a      	bne.n	8008cb8 <_printf_i+0x1f0>
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295
 8008c26:	b004      	add	sp, #16
 8008c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	f043 0320 	orr.w	r3, r3, #32
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	4832      	ldr	r0, [pc, #200]	@ (8008d00 <_printf_i+0x238>)
 8008c36:	2778      	movs	r7, #120	@ 0x78
 8008c38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	6831      	ldr	r1, [r6, #0]
 8008c40:	061f      	lsls	r7, r3, #24
 8008c42:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c46:	d402      	bmi.n	8008c4e <_printf_i+0x186>
 8008c48:	065f      	lsls	r7, r3, #25
 8008c4a:	bf48      	it	mi
 8008c4c:	b2ad      	uxthmi	r5, r5
 8008c4e:	6031      	str	r1, [r6, #0]
 8008c50:	07d9      	lsls	r1, r3, #31
 8008c52:	bf44      	itt	mi
 8008c54:	f043 0320 	orrmi.w	r3, r3, #32
 8008c58:	6023      	strmi	r3, [r4, #0]
 8008c5a:	b11d      	cbz	r5, 8008c64 <_printf_i+0x19c>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	e7ad      	b.n	8008bbc <_printf_i+0xf4>
 8008c60:	4826      	ldr	r0, [pc, #152]	@ (8008cfc <_printf_i+0x234>)
 8008c62:	e7e9      	b.n	8008c38 <_printf_i+0x170>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	f023 0320 	bic.w	r3, r3, #32
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	e7f6      	b.n	8008c5c <_printf_i+0x194>
 8008c6e:	4616      	mov	r6, r2
 8008c70:	e7bd      	b.n	8008bee <_printf_i+0x126>
 8008c72:	6833      	ldr	r3, [r6, #0]
 8008c74:	6825      	ldr	r5, [r4, #0]
 8008c76:	6961      	ldr	r1, [r4, #20]
 8008c78:	1d18      	adds	r0, r3, #4
 8008c7a:	6030      	str	r0, [r6, #0]
 8008c7c:	062e      	lsls	r6, r5, #24
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	d501      	bpl.n	8008c86 <_printf_i+0x1be>
 8008c82:	6019      	str	r1, [r3, #0]
 8008c84:	e002      	b.n	8008c8c <_printf_i+0x1c4>
 8008c86:	0668      	lsls	r0, r5, #25
 8008c88:	d5fb      	bpl.n	8008c82 <_printf_i+0x1ba>
 8008c8a:	8019      	strh	r1, [r3, #0]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	4616      	mov	r6, r2
 8008c92:	e7bc      	b.n	8008c0e <_printf_i+0x146>
 8008c94:	6833      	ldr	r3, [r6, #0]
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	6032      	str	r2, [r6, #0]
 8008c9a:	681e      	ldr	r6, [r3, #0]
 8008c9c:	6862      	ldr	r2, [r4, #4]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7f7 faa5 	bl	80001f0 <memchr>
 8008ca6:	b108      	cbz	r0, 8008cac <_printf_i+0x1e4>
 8008ca8:	1b80      	subs	r0, r0, r6
 8008caa:	6060      	str	r0, [r4, #4]
 8008cac:	6863      	ldr	r3, [r4, #4]
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cb6:	e7aa      	b.n	8008c0e <_printf_i+0x146>
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	4632      	mov	r2, r6
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	47d0      	blx	sl
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d0ad      	beq.n	8008c22 <_printf_i+0x15a>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	079b      	lsls	r3, r3, #30
 8008cca:	d413      	bmi.n	8008cf4 <_printf_i+0x22c>
 8008ccc:	68e0      	ldr	r0, [r4, #12]
 8008cce:	9b03      	ldr	r3, [sp, #12]
 8008cd0:	4298      	cmp	r0, r3
 8008cd2:	bfb8      	it	lt
 8008cd4:	4618      	movlt	r0, r3
 8008cd6:	e7a6      	b.n	8008c26 <_printf_i+0x15e>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4649      	mov	r1, r9
 8008cde:	4640      	mov	r0, r8
 8008ce0:	47d0      	blx	sl
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d09d      	beq.n	8008c22 <_printf_i+0x15a>
 8008ce6:	3501      	adds	r5, #1
 8008ce8:	68e3      	ldr	r3, [r4, #12]
 8008cea:	9903      	ldr	r1, [sp, #12]
 8008cec:	1a5b      	subs	r3, r3, r1
 8008cee:	42ab      	cmp	r3, r5
 8008cf0:	dcf2      	bgt.n	8008cd8 <_printf_i+0x210>
 8008cf2:	e7eb      	b.n	8008ccc <_printf_i+0x204>
 8008cf4:	2500      	movs	r5, #0
 8008cf6:	f104 0619 	add.w	r6, r4, #25
 8008cfa:	e7f5      	b.n	8008ce8 <_printf_i+0x220>
 8008cfc:	080098b9 	.word	0x080098b9
 8008d00:	080098ca 	.word	0x080098ca

08008d04 <__sflush_r>:
 8008d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0c:	0716      	lsls	r6, r2, #28
 8008d0e:	4605      	mov	r5, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	d454      	bmi.n	8008dbe <__sflush_r+0xba>
 8008d14:	684b      	ldr	r3, [r1, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dc02      	bgt.n	8008d20 <__sflush_r+0x1c>
 8008d1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dd48      	ble.n	8008db2 <__sflush_r+0xae>
 8008d20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	d045      	beq.n	8008db2 <__sflush_r+0xae>
 8008d26:	2300      	movs	r3, #0
 8008d28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d2c:	682f      	ldr	r7, [r5, #0]
 8008d2e:	6a21      	ldr	r1, [r4, #32]
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	d030      	beq.n	8008d96 <__sflush_r+0x92>
 8008d34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	0759      	lsls	r1, r3, #29
 8008d3a:	d505      	bpl.n	8008d48 <__sflush_r+0x44>
 8008d3c:	6863      	ldr	r3, [r4, #4]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d42:	b10b      	cbz	r3, 8008d48 <__sflush_r+0x44>
 8008d44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	2300      	movs	r3, #0
 8008d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d4c:	6a21      	ldr	r1, [r4, #32]
 8008d4e:	4628      	mov	r0, r5
 8008d50:	47b0      	blx	r6
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	d106      	bne.n	8008d66 <__sflush_r+0x62>
 8008d58:	6829      	ldr	r1, [r5, #0]
 8008d5a:	291d      	cmp	r1, #29
 8008d5c:	d82b      	bhi.n	8008db6 <__sflush_r+0xb2>
 8008d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e08 <__sflush_r+0x104>)
 8008d60:	40ca      	lsrs	r2, r1
 8008d62:	07d6      	lsls	r6, r2, #31
 8008d64:	d527      	bpl.n	8008db6 <__sflush_r+0xb2>
 8008d66:	2200      	movs	r2, #0
 8008d68:	6062      	str	r2, [r4, #4]
 8008d6a:	04d9      	lsls	r1, r3, #19
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	6022      	str	r2, [r4, #0]
 8008d70:	d504      	bpl.n	8008d7c <__sflush_r+0x78>
 8008d72:	1c42      	adds	r2, r0, #1
 8008d74:	d101      	bne.n	8008d7a <__sflush_r+0x76>
 8008d76:	682b      	ldr	r3, [r5, #0]
 8008d78:	b903      	cbnz	r3, 8008d7c <__sflush_r+0x78>
 8008d7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d7e:	602f      	str	r7, [r5, #0]
 8008d80:	b1b9      	cbz	r1, 8008db2 <__sflush_r+0xae>
 8008d82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d86:	4299      	cmp	r1, r3
 8008d88:	d002      	beq.n	8008d90 <__sflush_r+0x8c>
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f7ff fbf4 	bl	8008578 <_free_r>
 8008d90:	2300      	movs	r3, #0
 8008d92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d94:	e00d      	b.n	8008db2 <__sflush_r+0xae>
 8008d96:	2301      	movs	r3, #1
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b0      	blx	r6
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	1c50      	adds	r0, r2, #1
 8008da0:	d1c9      	bne.n	8008d36 <__sflush_r+0x32>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0c6      	beq.n	8008d36 <__sflush_r+0x32>
 8008da8:	2b1d      	cmp	r3, #29
 8008daa:	d001      	beq.n	8008db0 <__sflush_r+0xac>
 8008dac:	2b16      	cmp	r3, #22
 8008dae:	d11e      	bne.n	8008dee <__sflush_r+0xea>
 8008db0:	602f      	str	r7, [r5, #0]
 8008db2:	2000      	movs	r0, #0
 8008db4:	e022      	b.n	8008dfc <__sflush_r+0xf8>
 8008db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dba:	b21b      	sxth	r3, r3
 8008dbc:	e01b      	b.n	8008df6 <__sflush_r+0xf2>
 8008dbe:	690f      	ldr	r7, [r1, #16]
 8008dc0:	2f00      	cmp	r7, #0
 8008dc2:	d0f6      	beq.n	8008db2 <__sflush_r+0xae>
 8008dc4:	0793      	lsls	r3, r2, #30
 8008dc6:	680e      	ldr	r6, [r1, #0]
 8008dc8:	bf08      	it	eq
 8008dca:	694b      	ldreq	r3, [r1, #20]
 8008dcc:	600f      	str	r7, [r1, #0]
 8008dce:	bf18      	it	ne
 8008dd0:	2300      	movne	r3, #0
 8008dd2:	eba6 0807 	sub.w	r8, r6, r7
 8008dd6:	608b      	str	r3, [r1, #8]
 8008dd8:	f1b8 0f00 	cmp.w	r8, #0
 8008ddc:	dde9      	ble.n	8008db2 <__sflush_r+0xae>
 8008dde:	6a21      	ldr	r1, [r4, #32]
 8008de0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008de2:	4643      	mov	r3, r8
 8008de4:	463a      	mov	r2, r7
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b0      	blx	r6
 8008dea:	2800      	cmp	r0, #0
 8008dec:	dc08      	bgt.n	8008e00 <__sflush_r+0xfc>
 8008dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e00:	4407      	add	r7, r0
 8008e02:	eba8 0800 	sub.w	r8, r8, r0
 8008e06:	e7e7      	b.n	8008dd8 <__sflush_r+0xd4>
 8008e08:	20400001 	.word	0x20400001

08008e0c <_fflush_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	690b      	ldr	r3, [r1, #16]
 8008e10:	4605      	mov	r5, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	b913      	cbnz	r3, 8008e1c <_fflush_r+0x10>
 8008e16:	2500      	movs	r5, #0
 8008e18:	4628      	mov	r0, r5
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	b118      	cbz	r0, 8008e26 <_fflush_r+0x1a>
 8008e1e:	6a03      	ldr	r3, [r0, #32]
 8008e20:	b90b      	cbnz	r3, 8008e26 <_fflush_r+0x1a>
 8008e22:	f7ff f9af 	bl	8008184 <__sinit>
 8008e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f3      	beq.n	8008e16 <_fflush_r+0xa>
 8008e2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e30:	07d0      	lsls	r0, r2, #31
 8008e32:	d404      	bmi.n	8008e3e <_fflush_r+0x32>
 8008e34:	0599      	lsls	r1, r3, #22
 8008e36:	d402      	bmi.n	8008e3e <_fflush_r+0x32>
 8008e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e3a:	f7ff fb9a 	bl	8008572 <__retarget_lock_acquire_recursive>
 8008e3e:	4628      	mov	r0, r5
 8008e40:	4621      	mov	r1, r4
 8008e42:	f7ff ff5f 	bl	8008d04 <__sflush_r>
 8008e46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e48:	07da      	lsls	r2, r3, #31
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	d4e4      	bmi.n	8008e18 <_fflush_r+0xc>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	059b      	lsls	r3, r3, #22
 8008e52:	d4e1      	bmi.n	8008e18 <_fflush_r+0xc>
 8008e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e56:	f7ff fb8d 	bl	8008574 <__retarget_lock_release_recursive>
 8008e5a:	e7dd      	b.n	8008e18 <_fflush_r+0xc>

08008e5c <__swhatbuf_r>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	460c      	mov	r4, r1
 8008e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e64:	2900      	cmp	r1, #0
 8008e66:	b096      	sub	sp, #88	@ 0x58
 8008e68:	4615      	mov	r5, r2
 8008e6a:	461e      	mov	r6, r3
 8008e6c:	da0d      	bge.n	8008e8a <__swhatbuf_r+0x2e>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e74:	f04f 0100 	mov.w	r1, #0
 8008e78:	bf14      	ite	ne
 8008e7a:	2340      	movne	r3, #64	@ 0x40
 8008e7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e80:	2000      	movs	r0, #0
 8008e82:	6031      	str	r1, [r6, #0]
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	b016      	add	sp, #88	@ 0x58
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	466a      	mov	r2, sp
 8008e8c:	f000 f848 	bl	8008f20 <_fstat_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	dbec      	blt.n	8008e6e <__swhatbuf_r+0x12>
 8008e94:	9901      	ldr	r1, [sp, #4]
 8008e96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e9e:	4259      	negs	r1, r3
 8008ea0:	4159      	adcs	r1, r3
 8008ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea6:	e7eb      	b.n	8008e80 <__swhatbuf_r+0x24>

08008ea8 <__smakebuf_r>:
 8008ea8:	898b      	ldrh	r3, [r1, #12]
 8008eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eac:	079d      	lsls	r5, r3, #30
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	d507      	bpl.n	8008ec4 <__smakebuf_r+0x1c>
 8008eb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	6123      	str	r3, [r4, #16]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	6163      	str	r3, [r4, #20]
 8008ec0:	b003      	add	sp, #12
 8008ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec4:	ab01      	add	r3, sp, #4
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	f7ff ffc8 	bl	8008e5c <__swhatbuf_r>
 8008ecc:	9f00      	ldr	r7, [sp, #0]
 8008ece:	4605      	mov	r5, r0
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff fbbc 	bl	8008650 <_malloc_r>
 8008ed8:	b948      	cbnz	r0, 8008eee <__smakebuf_r+0x46>
 8008eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ede:	059a      	lsls	r2, r3, #22
 8008ee0:	d4ee      	bmi.n	8008ec0 <__smakebuf_r+0x18>
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	f043 0302 	orr.w	r3, r3, #2
 8008eea:	81a3      	strh	r3, [r4, #12]
 8008eec:	e7e2      	b.n	8008eb4 <__smakebuf_r+0xc>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	6020      	str	r0, [r4, #0]
 8008ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	9b01      	ldr	r3, [sp, #4]
 8008efa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008efe:	b15b      	cbz	r3, 8008f18 <__smakebuf_r+0x70>
 8008f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f04:	4630      	mov	r0, r6
 8008f06:	f000 f81d 	bl	8008f44 <_isatty_r>
 8008f0a:	b128      	cbz	r0, 8008f18 <__smakebuf_r+0x70>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f023 0303 	bic.w	r3, r3, #3
 8008f12:	f043 0301 	orr.w	r3, r3, #1
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	431d      	orrs	r5, r3
 8008f1c:	81a5      	strh	r5, [r4, #12]
 8008f1e:	e7cf      	b.n	8008ec0 <__smakebuf_r+0x18>

08008f20 <_fstat_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	@ (8008f40 <_fstat_r+0x20>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	f7f8 faea 	bl	8001506 <_fstat>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d102      	bne.n	8008f3c <_fstat_r+0x1c>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b103      	cbz	r3, 8008f3c <_fstat_r+0x1c>
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop
 8008f40:	20003bcc 	.word	0x20003bcc

08008f44 <_isatty_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	@ (8008f60 <_isatty_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7f8 fae9 	bl	8001526 <_isatty>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_isatty_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_isatty_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20003bcc 	.word	0x20003bcc

08008f64 <_sbrk_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d06      	ldr	r5, [pc, #24]	@ (8008f80 <_sbrk_r+0x1c>)
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	f7f8 faf2 	bl	8001558 <_sbrk>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_sbrk_r+0x1a>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_sbrk_r+0x1a>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20003bcc 	.word	0x20003bcc

08008f84 <_init>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr

08008f90 <_fini>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	bf00      	nop
 8008f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f96:	bc08      	pop	{r3}
 8008f98:	469e      	mov	lr, r3
 8008f9a:	4770      	bx	lr
