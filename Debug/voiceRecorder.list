
voiceRecorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  08008f84  08008f84  00009f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009898  08009898  0000b08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098a0  080098a0  0000b08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a0  080098a0  0000a8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098a4  080098a4  0000a8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080098a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b50  2000008c  08009934  0000b08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003bdc  08009934  0000bbdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011996  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003101  00000000  00000000  0001ca52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c06  00000000  00000000  00020b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019178  00000000  00000000  00021716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164bd  00000000  00000000  0003a88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbbe  00000000  00000000  00050d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004740  00000000  00000000  000dd94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f6c 	.word	0x08008f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08008f6c 	.word	0x08008f6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <sd_card_init>:

}

//////////////////////// recording data functions

void sd_card_init(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	sd_result = f_mount(&sdCard, "", 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	490c      	ldr	r1, [pc, #48]	@ (80005f4 <sd_card_init+0x38>)
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <sd_card_init+0x3c>)
 80005c6:	f006 ff67 	bl	8007498 <f_mount>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <sd_card_init+0x40>)
 80005d0:	701a      	strb	r2, [r3, #0]

	if (sd_result != 0){
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <sd_card_init+0x40>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d006      	beq.n	80005e8 <sd_card_init+0x2c>
		printf("error in mounting sd card %d \r\n", sd_result);
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <sd_card_init+0x40>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <sd_card_init+0x44>)
 80005e2:	f007 fdf9 	bl	80081d8 <iprintf>
	}
	else printf("success in mounting sd card\r\n");

}
 80005e6:	e002      	b.n	80005ee <sd_card_init+0x32>
	else printf("success in mounting sd card\r\n");
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <sd_card_init+0x48>)
 80005ea:	f007 fe5d 	bl	80082a8 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08008fa4 	.word	0x08008fa4
 80005f8:	20003620 	.word	0x20003620
 80005fc:	2000361c 	.word	0x2000361c
 8000600:	08009218 	.word	0x08009218
 8000604:	08009238 	.word	0x08009238

08000608 <SDcardPlaySetup>:
}


////////////////////////////// playback functions

void SDcardPlaySetup(uint8_t playSong){
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	@ 0x58
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	  fresult = f_mount(&fatfs, "", 1);
 8000612:	2201      	movs	r2, #1
 8000614:	49ad      	ldr	r1, [pc, #692]	@ (80008cc <SDcardPlaySetup+0x2c4>)
 8000616:	48ae      	ldr	r0, [pc, #696]	@ (80008d0 <SDcardPlaySetup+0x2c8>)
 8000618:	f006 ff3e 	bl	8007498 <f_mount>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4bac      	ldr	r3, [pc, #688]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000622:	701a      	strb	r2, [r3, #0]

	  if (fresult != FR_OK){
 8000624:	4bab      	ldr	r3, [pc, #684]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <SDcardPlaySetup+0x2c>
		  // do something
		  printf("there was an error with the mounting");
 800062c:	48aa      	ldr	r0, [pc, #680]	@ (80008d8 <SDcardPlaySetup+0x2d0>)
 800062e:	f007 fdd3 	bl	80081d8 <iprintf>
 8000632:	e002      	b.n	800063a <SDcardPlaySetup+0x32>

	  }
	  else{
		  printf("successfully mounted\r\n");
 8000634:	48a9      	ldr	r0, [pc, #676]	@ (80008dc <SDcardPlaySetup+0x2d4>)
 8000636:	f007 fe37 	bl	80082a8 <puts>
	  }


	  if (playSong) fresult = f_open(&fil, "a.wav", FA_OPEN_EXISTING | FA_READ);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d009      	beq.n	8000654 <SDcardPlaySetup+0x4c>
 8000640:	2201      	movs	r2, #1
 8000642:	49a7      	ldr	r1, [pc, #668]	@ (80008e0 <SDcardPlaySetup+0x2d8>)
 8000644:	48a7      	ldr	r0, [pc, #668]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 8000646:	f006 ff6d 	bl	8007524 <f_open>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4ba1      	ldr	r3, [pc, #644]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e008      	b.n	8000666 <SDcardPlaySetup+0x5e>
	  else  fresult = f_open(&fil, playbackFile, FA_OPEN_EXISTING | FA_READ);
 8000654:	2201      	movs	r2, #1
 8000656:	49a4      	ldr	r1, [pc, #656]	@ (80008e8 <SDcardPlaySetup+0x2e0>)
 8000658:	48a2      	ldr	r0, [pc, #648]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 800065a:	f006 ff63 	bl	8007524 <f_open>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b9c      	ldr	r3, [pc, #624]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000664:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 8000666:	4b9b      	ldr	r3, [pc, #620]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d007      	beq.n	800067e <SDcardPlaySetup+0x76>
		  // do something
		  printf("could not read file, fresult is %d \r\n", fresult);
 800066e:	4b99      	ldr	r3, [pc, #612]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	489d      	ldr	r0, [pc, #628]	@ (80008ec <SDcardPlaySetup+0x2e4>)
 8000676:	f007 fdaf 	bl	80081d8 <iprintf>
		  while (1);
 800067a:	bf00      	nop
 800067c:	e7fd      	b.n	800067a <SDcardPlaySetup+0x72>
	  }
	  else{
		  printf("successfully opened file!\r\n");
 800067e:	489c      	ldr	r0, [pc, #624]	@ (80008f0 <SDcardPlaySetup+0x2e8>)
 8000680:	f007 fe12 	bl	80082a8 <puts>
	  }

	  // added for playing back voice recording
	  printf("-----------------------------\r\n");
 8000684:	489b      	ldr	r0, [pc, #620]	@ (80008f4 <SDcardPlaySetup+0x2ec>)
 8000686:	f007 fe0f 	bl	80082a8 <puts>
	  FILINFO finfo;
	  FRESULT res;
	  if (playSong) res = f_stat("a.wav", &finfo);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d009      	beq.n	80006a4 <SDcardPlaySetup+0x9c>
 8000690:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000694:	4619      	mov	r1, r3
 8000696:	4892      	ldr	r0, [pc, #584]	@ (80008e0 <SDcardPlaySetup+0x2d8>)
 8000698:	f007 fc46 	bl	8007f28 <f_stat>
 800069c:	4603      	mov	r3, r0
 800069e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80006a2:	e008      	b.n	80006b6 <SDcardPlaySetup+0xae>
	  else res = f_stat(playbackFile, &finfo);
 80006a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006a8:	4619      	mov	r1, r3
 80006aa:	488f      	ldr	r0, [pc, #572]	@ (80008e8 <SDcardPlaySetup+0x2e0>)
 80006ac:	f007 fc3c 	bl	8007f28 <f_stat>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  if (res == FR_OK) {
 80006b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d105      	bne.n	80006ca <SDcardPlaySetup+0xc2>
	      printf("Size: %lu bytes\r\n", finfo.fsize);
 80006be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006c0:	4619      	mov	r1, r3
 80006c2:	488d      	ldr	r0, [pc, #564]	@ (80008f8 <SDcardPlaySetup+0x2f0>)
 80006c4:	f007 fd88 	bl	80081d8 <iprintf>
 80006c8:	e005      	b.n	80006d6 <SDcardPlaySetup+0xce>
	  } else {
	      printf("f_stat failed: %d\r\n", res);
 80006ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80006ce:	4619      	mov	r1, r3
 80006d0:	488a      	ldr	r0, [pc, #552]	@ (80008fc <SDcardPlaySetup+0x2f4>)
 80006d2:	f007 fd81 	bl	80081d8 <iprintf>
	  }

	  WAVHeader header;
	  UINT br;

	  f_lseek(&fil, 0); // Go to start
 80006d6:	2100      	movs	r1, #0
 80006d8:	4882      	ldr	r0, [pc, #520]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 80006da:	f007 fa1c 	bl	8007b16 <f_lseek>
	  if (f_read(&fil, &header, sizeof(WAVHeader), &br) != FR_OK){
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	f107 0110 	add.w	r1, r7, #16
 80006e6:	222c      	movs	r2, #44	@ 0x2c
 80006e8:	487e      	ldr	r0, [pc, #504]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 80006ea:	f007 f8d5 	bl	8007898 <f_read>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <SDcardPlaySetup+0xf6>
		  printf("failed to read into header\r\n");
 80006f4:	4882      	ldr	r0, [pc, #520]	@ (8000900 <SDcardPlaySetup+0x2f8>)
 80006f6:	f007 fdd7 	bl	80082a8 <puts>
		  while(1);
 80006fa:	bf00      	nop
 80006fc:	e7fd      	b.n	80006fa <SDcardPlaySetup+0xf2>
	  }


	  printf("ChunkID: %.4s\r\n", header.ChunkID);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	487f      	ldr	r0, [pc, #508]	@ (8000904 <SDcardPlaySetup+0x2fc>)
 8000706:	f007 fd67 	bl	80081d8 <iprintf>
	  printf("ChunkSize: %lu\r\n", header.ChunkSize);
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4619      	mov	r1, r3
 800070e:	487e      	ldr	r0, [pc, #504]	@ (8000908 <SDcardPlaySetup+0x300>)
 8000710:	f007 fd62 	bl	80081d8 <iprintf>
	  printf("Format: %.4s\r\n", header.Format);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	3308      	adds	r3, #8
 800071a:	4619      	mov	r1, r3
 800071c:	487b      	ldr	r0, [pc, #492]	@ (800090c <SDcardPlaySetup+0x304>)
 800071e:	f007 fd5b 	bl	80081d8 <iprintf>

	  printf("Subchunk1ID: %.4s\r\n", header.Subchunk1ID);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	330c      	adds	r3, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4879      	ldr	r0, [pc, #484]	@ (8000910 <SDcardPlaySetup+0x308>)
 800072c:	f007 fd54 	bl	80081d8 <iprintf>
	  printf("Subchunk1Size: %lu\r\n", header.Subchunk1Size);
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	4619      	mov	r1, r3
 8000734:	4877      	ldr	r0, [pc, #476]	@ (8000914 <SDcardPlaySetup+0x30c>)
 8000736:	f007 fd4f 	bl	80081d8 <iprintf>
	  printf("AudioFormat: %u\r\n", header.AudioFormat);
 800073a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800073c:	4619      	mov	r1, r3
 800073e:	4876      	ldr	r0, [pc, #472]	@ (8000918 <SDcardPlaySetup+0x310>)
 8000740:	f007 fd4a 	bl	80081d8 <iprintf>
	  printf("NumChannels: %u\r\n", header.NumChannels);
 8000744:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000746:	4619      	mov	r1, r3
 8000748:	4874      	ldr	r0, [pc, #464]	@ (800091c <SDcardPlaySetup+0x314>)
 800074a:	f007 fd45 	bl	80081d8 <iprintf>
	  printf("SampleRate: %lu\r\n", header.SampleRate);
 800074e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000750:	4619      	mov	r1, r3
 8000752:	4873      	ldr	r0, [pc, #460]	@ (8000920 <SDcardPlaySetup+0x318>)
 8000754:	f007 fd40 	bl	80081d8 <iprintf>
	  printf("ByteRate: %lu\r\n", header.ByteRate);
 8000758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800075a:	4619      	mov	r1, r3
 800075c:	4871      	ldr	r0, [pc, #452]	@ (8000924 <SDcardPlaySetup+0x31c>)
 800075e:	f007 fd3b 	bl	80081d8 <iprintf>
	  printf("BlockAlign: %u\r\n", header.BlockAlign);
 8000762:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000764:	4619      	mov	r1, r3
 8000766:	4870      	ldr	r0, [pc, #448]	@ (8000928 <SDcardPlaySetup+0x320>)
 8000768:	f007 fd36 	bl	80081d8 <iprintf>
	  printf("BitsPerSample: %u\r\n", header.BitsPerSample);
 800076c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800076e:	4619      	mov	r1, r3
 8000770:	486e      	ldr	r0, [pc, #440]	@ (800092c <SDcardPlaySetup+0x324>)
 8000772:	f007 fd31 	bl	80081d8 <iprintf>

	  printf("Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	3324      	adds	r3, #36	@ 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	486c      	ldr	r0, [pc, #432]	@ (8000930 <SDcardPlaySetup+0x328>)
 8000780:	f007 fd2a 	bl	80081d8 <iprintf>
	  printf("Subchunk2Size: %lu\r\n", header.Subchunk2Size);
 8000784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000786:	4619      	mov	r1, r3
 8000788:	486a      	ldr	r0, [pc, #424]	@ (8000934 <SDcardPlaySetup+0x32c>)
 800078a:	f007 fd25 	bl	80081d8 <iprintf>



	  printf("seeking file size......\r\n");
 800078e:	486a      	ldr	r0, [pc, #424]	@ (8000938 <SDcardPlaySetup+0x330>)
 8000790:	f007 fd8a 	bl	80082a8 <puts>
	  fresult = f_lseek(&fil, 40);
 8000794:	2128      	movs	r1, #40	@ 0x28
 8000796:	4853      	ldr	r0, [pc, #332]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 8000798:	f007 f9bd 	bl	8007b16 <f_lseek>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b4c      	ldr	r3, [pc, #304]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80007a2:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK) printf("there was an error seeking\r\n");
 80007a4:	4b4b      	ldr	r3, [pc, #300]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <SDcardPlaySetup+0x1aa>
 80007ac:	4863      	ldr	r0, [pc, #396]	@ (800093c <SDcardPlaySetup+0x334>)
 80007ae:	f007 fd7b 	bl	80082a8 <puts>



	  fresult = f_read(&fil, &recording_size, 4, (UINT *)fread_size);
 80007b2:	4b63      	ldr	r3, [pc, #396]	@ (8000940 <SDcardPlaySetup+0x338>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2204      	movs	r2, #4
 80007b8:	4962      	ldr	r1, [pc, #392]	@ (8000944 <SDcardPlaySetup+0x33c>)
 80007ba:	484a      	ldr	r0, [pc, #296]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 80007bc:	f007 f86c 	bl	8007898 <f_read>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b43      	ldr	r3, [pc, #268]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80007c6:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 80007c8:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d007      	beq.n	80007e0 <SDcardPlaySetup+0x1d8>
		  // do something
		  printf("could not read file, fresult is %d \r\n", fresult);
 80007d0:	4b40      	ldr	r3, [pc, #256]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4845      	ldr	r0, [pc, #276]	@ (80008ec <SDcardPlaySetup+0x2e4>)
 80007d8:	f007 fcfe 	bl	80081d8 <iprintf>
		  while (1);
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <SDcardPlaySetup+0x1d4>
	  }
	  else{
		  printf("successfully read file!\r\n");
 80007e0:	4859      	ldr	r0, [pc, #356]	@ (8000948 <SDcardPlaySetup+0x340>)
 80007e2:	f007 fd61 	bl	80082a8 <puts>
		  printf("the recording size is: %lu \r\n", recording_size);
 80007e6:	4b57      	ldr	r3, [pc, #348]	@ (8000944 <SDcardPlaySetup+0x33c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4857      	ldr	r0, [pc, #348]	@ (800094c <SDcardPlaySetup+0x344>)
 80007ee:	f007 fcf3 	bl	80081d8 <iprintf>
	  }
	  printf("-----------------------------------\r\n");
 80007f2:	4857      	ldr	r0, [pc, #348]	@ (8000950 <SDcardPlaySetup+0x348>)
 80007f4:	f007 fd58 	bl	80082a8 <puts>
	  // end of voice recording code

	  if (playSong){
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d036      	beq.n	800086c <SDcardPlaySetup+0x264>
		  fresult = f_lseek(&fil, 44);
 80007fe:	212c      	movs	r1, #44	@ 0x2c
 8000800:	4838      	ldr	r0, [pc, #224]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 8000802:	f007 f988 	bl	8007b16 <f_lseek>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b32      	ldr	r3, [pc, #200]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 800080c:	701a      	strb	r2, [r3, #0]
		  if (fresult != FR_OK){
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d007      	beq.n	8000826 <SDcardPlaySetup+0x21e>
			  // do something
			  printf("could not seek file, fresult is %d \r\n", fresult);
 8000816:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	484d      	ldr	r0, [pc, #308]	@ (8000954 <SDcardPlaySetup+0x34c>)
 800081e:	f007 fcdb 	bl	80081d8 <iprintf>
			  while (1);
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <SDcardPlaySetup+0x21a>
		  }
		  else{
			  printf("successfully seek within file!\r\n");
 8000826:	484c      	ldr	r0, [pc, #304]	@ (8000958 <SDcardPlaySetup+0x350>)
 8000828:	f007 fd3e 	bl	80082a8 <puts>
		  }

		  fresult = f_read(&fil, &recording_size, 4, (UINT *)fread_size);
 800082c:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <SDcardPlaySetup+0x338>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2204      	movs	r2, #4
 8000832:	4944      	ldr	r1, [pc, #272]	@ (8000944 <SDcardPlaySetup+0x33c>)
 8000834:	482b      	ldr	r0, [pc, #172]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 8000836:	f007 f82f 	bl	8007898 <f_read>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000840:	701a      	strb	r2, [r3, #0]
		  if (fresult != FR_OK){
 8000842:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d007      	beq.n	800085a <SDcardPlaySetup+0x252>
			  // do something
			  printf("could not read file, fresult is %d \r\n", fresult);
 800084a:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	4826      	ldr	r0, [pc, #152]	@ (80008ec <SDcardPlaySetup+0x2e4>)
 8000852:	f007 fcc1 	bl	80081d8 <iprintf>
			  while (1);
 8000856:	bf00      	nop
 8000858:	e7fd      	b.n	8000856 <SDcardPlaySetup+0x24e>
		  }
		  else{
			  printf("successfully read file!\r\n");
 800085a:	483b      	ldr	r0, [pc, #236]	@ (8000948 <SDcardPlaySetup+0x340>)
 800085c:	f007 fd24 	bl	80082a8 <puts>
			  printf("the recording size is: %lu \r\n", recording_size);
 8000860:	4b38      	ldr	r3, [pc, #224]	@ (8000944 <SDcardPlaySetup+0x33c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	4839      	ldr	r0, [pc, #228]	@ (800094c <SDcardPlaySetup+0x344>)
 8000868:	f007 fcb6 	bl	80081d8 <iprintf>

	  // from playback video, I think this was done wrong



	  fresult = f_lseek(&fil, 44);
 800086c:	212c      	movs	r1, #44	@ 0x2c
 800086e:	481d      	ldr	r0, [pc, #116]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 8000870:	f007 f951 	bl	8007b16 <f_lseek>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 800087a:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d007      	beq.n	8000894 <SDcardPlaySetup+0x28c>
		  // do something
		  printf("could not seek file, fresult is %d \r\n", fresult);
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	4832      	ldr	r0, [pc, #200]	@ (8000954 <SDcardPlaySetup+0x34c>)
 800088c:	f007 fca4 	bl	80081d8 <iprintf>
		  while (1);
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <SDcardPlaySetup+0x288>
	  }
	  else{
		  printf("successfully seek within file!\r\n");
 8000894:	4830      	ldr	r0, [pc, #192]	@ (8000958 <SDcardPlaySetup+0x350>)
 8000896:	f007 fd07 	bl	80082a8 <puts>
	  }
	  fresult = f_read(&fil, samples, WAV_READ_SAMPLE_COUNT*2, (UINT *)fread_size);
 800089a:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <SDcardPlaySetup+0x338>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80008a2:	492e      	ldr	r1, [pc, #184]	@ (800095c <SDcardPlaySetup+0x354>)
 80008a4:	480f      	ldr	r0, [pc, #60]	@ (80008e4 <SDcardPlaySetup+0x2dc>)
 80008a6:	f006 fff7 	bl	8007898 <f_read>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80008b0:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK){
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d054      	beq.n	8000964 <SDcardPlaySetup+0x35c>
		  // do something
		  printf("could read file part 2, fresult is %d \r\n", fresult);
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <SDcardPlaySetup+0x2cc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	4827      	ldr	r0, [pc, #156]	@ (8000960 <SDcardPlaySetup+0x358>)
 80008c2:	f007 fc89 	bl	80081d8 <iprintf>
		  while (1);
 80008c6:	bf00      	nop
 80008c8:	e7fd      	b.n	80008c6 <SDcardPlaySetup+0x2be>
 80008ca:	bf00      	nop
 80008cc:	08008fa4 	.word	0x08008fa4
 80008d0:	200000a8 	.word	0x200000a8
 80008d4:	20000508 	.word	0x20000508
 80008d8:	08009334 	.word	0x08009334
 80008dc:	0800935c 	.word	0x0800935c
 80008e0:	08009374 	.word	0x08009374
 80008e4:	200002d8 	.word	0x200002d8
 80008e8:	20000004 	.word	0x20000004
 80008ec:	0800937c 	.word	0x0800937c
 80008f0:	080093a4 	.word	0x080093a4
 80008f4:	080093c0 	.word	0x080093c0
 80008f8:	080093e0 	.word	0x080093e0
 80008fc:	080093f4 	.word	0x080093f4
 8000900:	08009408 	.word	0x08009408
 8000904:	08009424 	.word	0x08009424
 8000908:	08009434 	.word	0x08009434
 800090c:	08009448 	.word	0x08009448
 8000910:	08009458 	.word	0x08009458
 8000914:	0800946c 	.word	0x0800946c
 8000918:	08009484 	.word	0x08009484
 800091c:	08009498 	.word	0x08009498
 8000920:	080094ac 	.word	0x080094ac
 8000924:	080094c0 	.word	0x080094c0
 8000928:	080094d0 	.word	0x080094d0
 800092c:	080094e4 	.word	0x080094e4
 8000930:	080094f8 	.word	0x080094f8
 8000934:	0800950c 	.word	0x0800950c
 8000938:	08009524 	.word	0x08009524
 800093c:	08009540 	.word	0x08009540
 8000940:	20001e0c 	.word	0x20001e0c
 8000944:	20001e10 	.word	0x20001e10
 8000948:	0800955c 	.word	0x0800955c
 800094c:	08009578 	.word	0x08009578
 8000950:	08009598 	.word	0x08009598
 8000954:	080095c0 	.word	0x080095c0
 8000958:	080095e8 	.word	0x080095e8
 800095c:	2000050c 	.word	0x2000050c
 8000960:	08009608 	.word	0x08009608
	  }
	  else{
		  printf("successfully read file part 2!\r\n");
 8000964:	480a      	ldr	r0, [pc, #40]	@ (8000990 <SDcardPlaySetup+0x388>)
 8000966:	f007 fc9f 	bl	80082a8 <puts>
	  }

	  recording_size /= 2;
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <SDcardPlaySetup+0x38c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	085b      	lsrs	r3, r3, #1
 8000970:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <SDcardPlaySetup+0x38c>)
 8000972:	6013      	str	r3, [r2, #0]

	  printf("============== done file operations!\r\n");
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <SDcardPlaySetup+0x390>)
 8000976:	f007 fc97 	bl	80082a8 <puts>

	  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)samples, WAV_READ_SAMPLE_COUNT);
 800097a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800097e:	4907      	ldr	r1, [pc, #28]	@ (800099c <SDcardPlaySetup+0x394>)
 8000980:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <SDcardPlaySetup+0x398>)
 8000982:	f001 fecd 	bl	8002720 <HAL_I2S_Transmit_DMA>
}
 8000986:	bf00      	nop
 8000988:	3758      	adds	r7, #88	@ 0x58
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	08009634 	.word	0x08009634
 8000994:	20001e10 	.word	0x20001e10
 8000998:	08009654 	.word	0x08009654
 800099c:	2000050c 	.word	0x2000050c
 80009a0:	20003850 	.word	0x20003850

080009a4 <handleSDCardPlayback>:


void handleSDCardPlayback(void){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
    // original video code
  if (callback_result == FULL_COMPLETED){
 80009aa:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <handleSDCardPlayback+0x8c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d115      	bne.n	80009e0 <handleSDCardPlayback+0x3c>
	  UINT bytesRead = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
	  // finsihed transmitting I2S out of second half of array
	  // so ready data into second half of array

//		  f_read(&fil, &samples[16000], 32000, (UINT *) fread_size);
	  f_read(&fil, &samples[WAV_READ_SAMPLE_COUNT/2], WAV_READ_SAMPLE_COUNT, bytesRead);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80009be:	491d      	ldr	r1, [pc, #116]	@ (8000a34 <handleSDCardPlayback+0x90>)
 80009c0:	481d      	ldr	r0, [pc, #116]	@ (8000a38 <handleSDCardPlayback+0x94>)
 80009c2:	f006 ff69 	bl	8007898 <f_read>
	  played_size += WAV_READ_SAMPLE_COUNT;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <handleSDCardPlayback+0x98>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 80009ce:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <handleSDCardPlayback+0x98>)
 80009d0:	6013      	str	r3, [r2, #0]
	  printf("%u bytes, callback result full completed -> unknown \r\n", bytesRead);
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	481a      	ldr	r0, [pc, #104]	@ (8000a40 <handleSDCardPlayback+0x9c>)
 80009d6:	f007 fbff 	bl	80081d8 <iprintf>
	  callback_result = UNKNOWN;
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <handleSDCardPlayback+0x8c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
  }

  if (callback_result == HALF_COMPLETED){
 80009e0:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <handleSDCardPlayback+0x8c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d10f      	bne.n	8000a0a <handleSDCardPlayback+0x66>
	  UINT bytesRead = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
	  // finish transmitting I2S out of first half of array
	  // so read data into first half of array
	  f_read(&fil, &samples[0], WAV_READ_SAMPLE_COUNT, bytesRead);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80009f4:	4913      	ldr	r1, [pc, #76]	@ (8000a44 <handleSDCardPlayback+0xa0>)
 80009f6:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <handleSDCardPlayback+0x94>)
 80009f8:	f006 ff4e 	bl	8007898 <f_read>
//		  f_read(&fil, &samples[0], 32000, (UINT *) fread_size);
	  printf("%u bytes read, callback result half completed -> unknown \r\n", bytesRead);
 80009fc:	6839      	ldr	r1, [r7, #0]
 80009fe:	4812      	ldr	r0, [pc, #72]	@ (8000a48 <handleSDCardPlayback+0xa4>)
 8000a00:	f007 fbea 	bl	80081d8 <iprintf>
	  callback_result = UNKNOWN;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <handleSDCardPlayback+0x8c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
  }


  if (played_size >= recording_size){
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <handleSDCardPlayback+0x98>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <handleSDCardPlayback+0xa8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d308      	bcc.n	8000a28 <handleSDCardPlayback+0x84>
	  HAL_I2S_DMAStop(&hi2s2);
 8000a16:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <handleSDCardPlayback+0xac>)
 8000a18:	f001 ff26 	bl	8002868 <HAL_I2S_DMAStop>
	  printf("done DMA transfer \r\n");
 8000a1c:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <handleSDCardPlayback+0xb0>)
 8000a1e:	f007 fc43 	bl	80082a8 <puts>
	  donePlayback = 1;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <handleSDCardPlayback+0xb4>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20001e19 	.word	0x20001e19
 8000a34:	2000118c 	.word	0x2000118c
 8000a38:	200002d8 	.word	0x200002d8
 8000a3c:	20001e14 	.word	0x20001e14
 8000a40:	0800967c 	.word	0x0800967c
 8000a44:	2000050c 	.word	0x2000050c
 8000a48:	080096b4 	.word	0x080096b4
 8000a4c:	20001e10 	.word	0x20001e10
 8000a50:	20003850 	.word	0x20003850
 8000a54:	080096f0 	.word	0x080096f0
 8000a58:	20001e18 	.word	0x20001e18

08000a5c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)  // Replace with your pin
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a6c:	d118      	bne.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x44>
    {
        // Your interrupt handling code here
    	char str[] = "button pressed \r\n";
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a70:	f107 040c 	add.w	r4, r7, #12
 8000a74:	461d      	mov	r5, r3
 8000a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7a:	682b      	ldr	r3, [r5, #0]
 8000a7c:	8023      	strh	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, (const uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fbac 	bl	80001e0 <strlen>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f107 010c 	add.w	r1, r7, #12
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_GPIO_EXTI_Callback+0x50>)
 8000a96:	f003 ff23 	bl	80048e0 <HAL_UART_Transmit>

    	button_flag = 1;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]

    }
}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa8:	08009704 	.word	0x08009704
 8000aac:	200039f8 	.word	0x200039f8
 8000ab0:	20001e1b 	.word	0x20001e1b

08000ab4 <_write>:

int _write(int file, char *ptr, int len) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	4804      	ldr	r0, [pc, #16]	@ (8000adc <_write+0x28>)
 8000acc:	f003 ff08 	bl	80048e0 <HAL_UART_Transmit>
    return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200039f8 	.word	0x200039f8

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 fd9e 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f83c 	bl	8000b64 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000aec:	f000 f8a4 	bl	8000c38 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af0:	f000 f9a4 	bl	8000e3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000af4:	f000 f97a 	bl	8000dec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 f94e 	bl	8000d98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000afc:	f000 f916 	bl	8000d2c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000b00:	f004 faaa 	bl	8005058 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000b04:	f000 f8b6 	bl	8000c74 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000b08:	f000 f8e2 	bl	8000cd0 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b10:	f000 fdfa 	bl	8001708 <HAL_Delay>
  sd_card_init();
 8000b14:	f7ff fd52 	bl	80005bc <sd_card_init>

  printf("start...\r\n");
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <main+0x6c>)
 8000b1a:	f007 fbc5 	bl	80082a8 <puts>
//  testSDCard();


  playback = 0;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <main+0x70>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
//
//  printf("done recording, saved to file %s", recordingFile);
//
//  playback = 1;

  SDcardPlaySetup(0);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fd6f 	bl	8000608 <SDcardPlaySetup>
  printf("done setup, about to play file %s \r\n", playbackFile);
 8000b2a:	490a      	ldr	r1, [pc, #40]	@ (8000b54 <main+0x74>)
 8000b2c:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <main+0x78>)
 8000b2e:	f007 fb53 	bl	80081d8 <iprintf>


  while (!donePlayback){
 8000b32:	e001      	b.n	8000b38 <main+0x58>
	  handleSDCardPlayback();
 8000b34:	f7ff ff36 	bl	80009a4 <handleSDCardPlayback>
  while (!donePlayback){
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <main+0x7c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f9      	beq.n	8000b34 <main+0x54>
  }

  printf("done everything\r\n");
 8000b40:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <main+0x80>)
 8000b42:	f007 fbb1 	bl	80082a8 <puts>
  while(1);
 8000b46:	bf00      	nop
 8000b48:	e7fd      	b.n	8000b46 <main+0x66>
 8000b4a:	bf00      	nop
 8000b4c:	08009718 	.word	0x08009718
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004
 8000b58:	08009724 	.word	0x08009724
 8000b5c:	20001e18 	.word	0x20001e18
 8000b60:	0800974c 	.word	0x0800974c

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	@ 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2230      	movs	r2, #48	@ 0x30
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 fc78 	bl	8008468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <SystemClock_Config+0xcc>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	4a27      	ldr	r2, [pc, #156]	@ (8000c30 <SystemClock_Config+0xcc>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b98:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <SystemClock_Config+0xcc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <SystemClock_Config+0xd0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb0:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <SystemClock_Config+0xd0>)
 8000bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <SystemClock_Config+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000bdc:	2354      	movs	r3, #84	@ 0x54
 8000bde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000be4:	2307      	movs	r3, #7
 8000be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fbef 	bl	80033d0 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bf8:	f000 f9ee 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2302      	movs	r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2102      	movs	r1, #2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fe51 	bl	80038c0 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c24:	f000 f9d8 	bl	8000fd8 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3750      	adds	r7, #80	@ 0x50
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000c50:	2360      	movs	r3, #96	@ 0x60
 8000c52:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 f850 	bl	8003d00 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000c66:	f000 f9b7 	bl	8000fd8 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000c7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <MX_I2S2_Init+0x58>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c84:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c98:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000c9c:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <MX_I2S2_Init+0x54>)
 8000cb6:	f001 fbf3 	bl	80024a0 <HAL_I2S_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000cc0:	f000 f98a 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20003850 	.word	0x20003850
 8000ccc:	40003800 	.word	0x40003800

08000cd0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000cd6:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <MX_I2S3_Init+0x58>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000cdc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ce0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000cf6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000cfa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_I2S3_Init+0x54>)
 8000d10:	f001 fbc6 	bl	80024a0 <HAL_I2S_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d1a:	f000 f95d 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20003898 	.word	0x20003898
 8000d28:	40003c00 	.word	0x40003c00

08000d2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <MX_SPI1_Init+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d60:	2218      	movs	r2, #24
 8000d62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d78:	220a      	movs	r2, #10
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_SPI1_Init+0x64>)
 8000d7e:	f003 f90d 	bl	8003f9c <HAL_SPI_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d88:	f000 f926 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200039a0 	.word	0x200039a0
 8000d94:	40013000 	.word	0x40013000

08000d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <MX_USART2_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f003 fd36 	bl	8004840 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f000 f8fd 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200039f8 	.word	0x200039f8
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <MX_DMA_Init+0x4c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <MX_DMA_Init+0x4c>)
 8000dfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <MX_DMA_Init+0x4c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	200b      	movs	r0, #11
 8000e14:	f000 fd77 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e18:	200b      	movs	r0, #11
 8000e1a:	f000 fd90 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	200f      	movs	r0, #15
 8000e24:	f000 fd6f 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e28:	200f      	movs	r0, #15
 8000e2a:	f000 fd88 	bl	800193e <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b34      	ldr	r3, [pc, #208]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a33      	ldr	r2, [pc, #204]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b31      	ldr	r3, [pc, #196]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a2c      	ldr	r2, [pc, #176]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a25      	ldr	r2, [pc, #148]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a1e      	ldr	r2, [pc, #120]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_GPIO_Init+0xec>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	4819      	ldr	r0, [pc, #100]	@ (8000f2c <MX_GPIO_Init+0xf0>)
 8000ec8:	f001 fab8 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4816      	ldr	r0, [pc, #88]	@ (8000f2c <MX_GPIO_Init+0xf0>)
 8000ed2:	f001 fab3 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_PB_Pin */
  GPIO_InitStruct.Pin = BLUE_PB_Pin;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000edc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_PB_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <MX_GPIO_Init+0xf4>)
 8000eee:	f001 f921 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LD3_Pin;
 8000ef2:	2330      	movs	r3, #48	@ 0x30
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <MX_GPIO_Init+0xf0>)
 8000f0a:	f001 f913 	bl	8002134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2028      	movs	r0, #40	@ 0x28
 8000f14:	f000 fcf7 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f18:	2028      	movs	r0, #40	@ 0x28
 8000f1a:	f000 fd10 	bl	800193e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020800 	.word	0x40020800

08000f34 <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef * hi2s){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	callback_result = HALF_COMPLETED;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
	printf("HALF callback\r\n");
 8000f42:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000f44:	f007 f9b0 	bl	80082a8 <puts>


}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20001e19 	.word	0x20001e19
 8000f54:	08009760 	.word	0x08009760

08000f58 <HAL_I2S_TxCpltCallback>:



void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef * hi2s){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

	// whenever called, 32000 samples already got played
	callback_result = FULL_COMPLETED;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <HAL_I2S_TxCpltCallback+0x28>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	701a      	strb	r2, [r3, #0]
	played_size += WAV_READ_SAMPLE_COUNT;
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <HAL_I2S_TxCpltCallback+0x2c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <HAL_I2S_TxCpltCallback+0x2c>)
 8000f70:	6013      	str	r3, [r2, #0]
	printf("FULL callback\r\n");
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <HAL_I2S_TxCpltCallback+0x30>)
 8000f74:	f007 f998 	bl	80082a8 <puts>

}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20001e19 	.word	0x20001e19
 8000f84:	20001e14 	.word	0x20001e14
 8000f88:	08009770 	.word	0x08009770

08000f8c <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef * hi2s){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < WAV_WRITE_SAMPLE_COUNT/2; i++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e00b      	b.n	8000fb2 <HAL_I2S_RxCpltCallback+0x26>
	    mono_sample_i2s[i] = data_i2s[2 * i];  // Keep every other (left)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_I2S_RxCpltCallback+0x40>)
 8000fa0:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_I2S_RxCpltCallback+0x44>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < WAV_WRITE_SAMPLE_COUNT/2; i++) {
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fb8:	dbef      	blt.n	8000f9a <HAL_I2S_RxCpltCallback+0xe>
	}

	full_i2s = 1;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_I2S_RxCpltCallback+0x48>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	20001e1c 	.word	0x20001e1c
 8000fd0:	20002e1c 	.word	0x20002e1c
 8000fd4:	20001e1a 	.word	0x20001e1a

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a8a      	ldr	r2, [pc, #552]	@ (800127c <HAL_I2S_MspInit+0x248>)
 8001052:	4293      	cmp	r3, r2
 8001054:	f040 808c 	bne.w	8001170 <HAL_I2S_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	4b88      	ldr	r3, [pc, #544]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a87      	ldr	r2, [pc, #540]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b85      	ldr	r3, [pc, #532]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001070:	623b      	str	r3, [r7, #32]
 8001072:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	4b81      	ldr	r3, [pc, #516]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	4a80      	ldr	r2, [pc, #512]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6313      	str	r3, [r2, #48]	@ 0x30
 8001084:	4b7e      	ldr	r3, [pc, #504]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	4b7a      	ldr	r3, [pc, #488]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	4a79      	ldr	r2, [pc, #484]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a0:	4b77      	ldr	r3, [pc, #476]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ac:	2304      	movs	r3, #4
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80010bc:	2306      	movs	r3, #6
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	486f      	ldr	r0, [pc, #444]	@ (8001284 <HAL_I2S_MspInit+0x250>)
 80010c8:	f001 f834 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80010cc:	2348      	movs	r3, #72	@ 0x48
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010dc:	2305      	movs	r3, #5
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	4867      	ldr	r0, [pc, #412]	@ (8001284 <HAL_I2S_MspInit+0x250>)
 80010e8:	f001 f824 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80010ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fe:	2305      	movs	r3, #5
 8001100:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	485f      	ldr	r0, [pc, #380]	@ (8001288 <HAL_I2S_MspInit+0x254>)
 800110a:	f001 f813 	bl	8002134 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800110e:	4b5f      	ldr	r3, [pc, #380]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001110:	4a5f      	ldr	r2, [pc, #380]	@ (8001290 <HAL_I2S_MspInit+0x25c>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001114:	4b5d      	ldr	r3, [pc, #372]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800111a:	4b5c      	ldr	r3, [pc, #368]	@ (800128c <HAL_I2S_MspInit+0x258>)
 800111c:	2240      	movs	r2, #64	@ 0x40
 800111e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b5a      	ldr	r3, [pc, #360]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b59      	ldr	r3, [pc, #356]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001128:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800112e:	4b57      	ldr	r3, [pc, #348]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001130:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001134:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001136:	4b55      	ldr	r3, [pc, #340]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001138:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800113c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800113e:	4b53      	ldr	r3, [pc, #332]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001144:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001146:	4b51      	ldr	r3, [pc, #324]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114c:	4b4f      	ldr	r3, [pc, #316]	@ (800128c <HAL_I2S_MspInit+0x258>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001152:	484e      	ldr	r0, [pc, #312]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001154:	f000 fc0e 	bl	8001974 <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2S_MspInit+0x12e>
    {
      Error_Handler();
 800115e:	f7ff ff3b 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a49      	ldr	r2, [pc, #292]	@ (800128c <HAL_I2S_MspInit+0x258>)
 8001166:	639a      	str	r2, [r3, #56]	@ 0x38
 8001168:	4a48      	ldr	r2, [pc, #288]	@ (800128c <HAL_I2S_MspInit+0x258>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800116e:	e080      	b.n	8001272 <HAL_I2S_MspInit+0x23e>
  else if(hi2s->Instance==SPI3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a47      	ldr	r2, [pc, #284]	@ (8001294 <HAL_I2S_MspInit+0x260>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d17b      	bne.n	8001272 <HAL_I2S_MspInit+0x23e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	4b40      	ldr	r3, [pc, #256]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a3f      	ldr	r2, [pc, #252]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 8001184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a38      	ldr	r2, [pc, #224]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a31      	ldr	r2, [pc, #196]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <HAL_I2S_MspInit+0x24c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e0:	2306      	movs	r3, #6
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	482b      	ldr	r0, [pc, #172]	@ (8001298 <HAL_I2S_MspInit+0x264>)
 80011ec:	f000 ffa2 	bl	8002134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80011f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001202:	2306      	movs	r3, #6
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	481d      	ldr	r0, [pc, #116]	@ (8001284 <HAL_I2S_MspInit+0x250>)
 800120e:	f000 ff91 	bl	8002134 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001212:	4b22      	ldr	r3, [pc, #136]	@ (800129c <HAL_I2S_MspInit+0x268>)
 8001214:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <HAL_I2S_MspInit+0x26c>)
 8001216:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <HAL_I2S_MspInit+0x268>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121e:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <HAL_I2S_MspInit+0x268>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001224:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_I2S_MspInit+0x268>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <HAL_I2S_MspInit+0x268>)
 800122c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001230:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <HAL_I2S_MspInit+0x268>)
 8001234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001238:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <HAL_I2S_MspInit+0x268>)
 800123c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001240:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_I2S_MspInit+0x268>)
 8001244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001248:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <HAL_I2S_MspInit+0x268>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_I2S_MspInit+0x268>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001256:	4811      	ldr	r0, [pc, #68]	@ (800129c <HAL_I2S_MspInit+0x268>)
 8001258:	f000 fb8c 	bl	8001974 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2S_MspInit+0x232>
      Error_Handler();
 8001262:	f7ff feb9 	bl	8000fd8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a0c      	ldr	r2, [pc, #48]	@ (800129c <HAL_I2S_MspInit+0x268>)
 800126a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_I2S_MspInit+0x268>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001272:	bf00      	nop
 8001274:	3738      	adds	r7, #56	@ 0x38
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40003800 	.word	0x40003800
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800
 8001288:	40020400 	.word	0x40020400
 800128c:	200038e0 	.word	0x200038e0
 8001290:	40026070 	.word	0x40026070
 8001294:	40003c00 	.word	0x40003c00
 8001298:	40020000 	.word	0x40020000
 800129c:	20003940 	.word	0x20003940
 80012a0:	40026010 	.word	0x40026010

080012a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a28      	ldr	r2, [pc, #160]	@ (8001364 <HAL_SPI_MspInit+0xc0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d149      	bne.n	800135a <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a26      	ldr	r2, [pc, #152]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 80012d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_SPI_MspInit+0xc4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800131a:	23c0      	movs	r3, #192	@ 0xc0
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132a:	2305      	movs	r3, #5
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	480d      	ldr	r0, [pc, #52]	@ (800136c <HAL_SPI_MspInit+0xc8>)
 8001336:	f000 fefd 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800133a:	2308      	movs	r3, #8
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800134a:	2305      	movs	r3, #5
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4806      	ldr	r0, [pc, #24]	@ (8001370 <HAL_SPI_MspInit+0xcc>)
 8001356:	f000 feed 	bl	8002134 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	@ 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40013000 	.word	0x40013000
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	@ (80013f8 <HAL_UART_MspInit+0x84>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12b      	bne.n	80013ee <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_UART_MspInit+0x88>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <HAL_UART_MspInit+0x88>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_UART_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_UART_MspInit+0x88>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a10      	ldr	r2, [pc, #64]	@ (80013fc <HAL_UART_MspInit+0x88>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_UART_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ce:	230c      	movs	r3, #12
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013de:	2307      	movs	r3, #7
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <HAL_UART_MspInit+0x8c>)
 80013ea:	f000 fea3 	bl	8002134 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40004400 	.word	0x40004400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 f935 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <DMA1_Stream0_IRQHandler+0x10>)
 800146a:	f000 fbf9 	bl	8001c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20003940 	.word	0x20003940

08001478 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <DMA1_Stream4_IRQHandler+0x10>)
 800147e:	f000 fbef 	bl	8001c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200038e0 	.word	0x200038e0

0800148c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_PB_Pin);
 8001490:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001494:	f000 ffec 	bl	8002470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e00a      	b.n	80014c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ae:	f3af 8000 	nop.w
 80014b2:	4601      	mov	r1, r0
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	60ba      	str	r2, [r7, #8]
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf0      	blt.n	80014ae <_read+0x12>
  }

  return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f006 ffc8 	bl	8008504 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20018000 	.word	0x20018000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	20003a40 	.word	0x20003a40
 80015a8:	20003be0 	.word	0x20003be0

080015ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001608 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015d4:	f7ff ffea 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	@ (8001610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	@ (800161c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f006 ff87 	bl	8008510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fa6d 	bl	8000ae0 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001608:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001614:	080098a8 	.word	0x080098a8
  ldr r2, =_sbss
 8001618:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800161c:	20003bdc 	.word	0x20003bdc

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <HAL_Init+0x40>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <HAL_Init+0x40>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_Init+0x40>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f94f 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fcc4 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f967 	bl	800195a <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f92f 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	20000014 	.word	0x20000014
 80016c4:	20000010 	.word	0x20000010

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000014 	.word	0x20000014
 80016ec:	20003a44 	.word	0x20003a44

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20003a44 	.word	0x20003a44

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000014 	.word	0x20000014

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	@ (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	@ (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	@ 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff3e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff31 	bl	80017b4 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff feb6 	bl	80016f0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e099      	b.n	8001ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	e00f      	b.n	80019d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fe9d 	bl	80016f0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d908      	bls.n	80019d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e078      	b.n	8001ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e8      	bne.n	80019b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <HAL_DMA_Init+0x158>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	4313      	orrs	r3, r2
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
 8001a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d117      	bne.n	8001a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fadf 	bl	800203c <DMA_CheckFifoParam>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2240      	movs	r2, #64	@ 0x40
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a92:	2301      	movs	r3, #1
 8001a94:	e016      	b.n	8001ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa96 	bl	8001fd0 <DMA_CalcBaseAndBitshift>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aac:	223f      	movs	r2, #63	@ 0x3f
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	f010803f 	.word	0xf010803f

08001ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Start_IT+0x26>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e040      	b.n	8001b78 <HAL_DMA_Start_IT+0xa8>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12f      	bne.n	8001b6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa28 	bl	8001f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b28:	223f      	movs	r2, #63	@ 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0216 	orr.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0208 	orr.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e005      	b.n	8001b76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b8e:	f7ff fdaf 	bl	80016f0 <HAL_GetTick>
 8001b92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d008      	beq.n	8001bb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2280      	movs	r2, #128	@ 0x80
 8001ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e052      	b.n	8001c58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0216 	bic.w	r2, r2, #22
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <HAL_DMA_Abort+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0208 	bic.w	r2, r2, #8
 8001bf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c02:	e013      	b.n	8001c2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c04:	f7ff fd74 	bl	80016f0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d90c      	bls.n	8001c2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e015      	b.n	8001c58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e4      	bne.n	8001c04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3e:	223f      	movs	r2, #63	@ 0x3f
 8001c40:	409a      	lsls	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ea8 <HAL_DMA_IRQHandler+0x248>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a8e      	ldr	r2, [pc, #568]	@ (8001eac <HAL_DMA_IRQHandler+0x24c>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0a9b      	lsrs	r3, r3, #10
 8001c78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01a      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb8:	2208      	movs	r2, #8
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d012      	beq.n	8001d02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	2201      	movs	r2, #1
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	2204      	movs	r2, #4
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d012      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00b      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d24:	2204      	movs	r2, #4
 8001d26:	409a      	lsls	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	f043 0204 	orr.w	r2, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d043      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03c      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d018      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d024      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
 8001d8e:	e01f      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
 8001da0:	e016      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0208 	bic.w	r2, r2, #8
 8001dbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 808f 	beq.w	8001f00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8087 	beq.w	8001f00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df6:	2220      	movs	r2, #32
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d136      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0216 	bic.w	r2, r2, #22
 8001e18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_DMA_IRQHandler+0x1da>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0208 	bic.w	r2, r2, #8
 8001e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4e:	223f      	movs	r2, #63	@ 0x3f
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d07e      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
        }
        return;
 8001e76:	e079      	b.n	8001f6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01d      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d031      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
 8001ea4:	e02c      	b.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c
 8001eac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d023      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e01e      	b.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10f      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0210 	bic.w	r2, r2, #16
 8001ede:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d032      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d022      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2205      	movs	r2, #5
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d307      	bcc.n	8001f48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f2      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x2cc>
 8001f46:	e000      	b.n	8001f4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	4798      	blx	r3
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f6c:	bf00      	nop
    }
  }
}
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b40      	cmp	r3, #64	@ 0x40
 8001fa0:	d108      	bne.n	8001fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fb2:	e007      	b.n	8001fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	60da      	str	r2, [r3, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3b10      	subs	r3, #16
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <DMA_CalcBaseAndBitshift+0x64>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fea:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <DMA_CalcBaseAndBitshift+0x68>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d909      	bls.n	8002012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002010:	e007      	b.n	8002022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	aaaaaaab 	.word	0xaaaaaaab
 8002038:	080097dc 	.word	0x080097dc

0800203c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d11f      	bne.n	8002096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d856      	bhi.n	800210a <DMA_CheckFifoParam+0xce>
 800205c:	a201      	add	r2, pc, #4	@ (adr r2, 8002064 <DMA_CheckFifoParam+0x28>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	08002075 	.word	0x08002075
 8002068:	08002087 	.word	0x08002087
 800206c:	08002075 	.word	0x08002075
 8002070:	0800210b 	.word	0x0800210b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d046      	beq.n	800210e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002084:	e043      	b.n	800210e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800208e:	d140      	bne.n	8002112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002094:	e03d      	b.n	8002112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800209e:	d121      	bne.n	80020e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d837      	bhi.n	8002116 <DMA_CheckFifoParam+0xda>
 80020a6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <DMA_CheckFifoParam+0x70>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	080020bd 	.word	0x080020bd
 80020b0:	080020c3 	.word	0x080020c3
 80020b4:	080020bd 	.word	0x080020bd
 80020b8:	080020d5 	.word	0x080020d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e030      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d025      	beq.n	800211a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d2:	e022      	b.n	800211a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020dc:	d11f      	bne.n	800211e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020e2:	e01c      	b.n	800211e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d903      	bls.n	80020f2 <DMA_CheckFifoParam+0xb6>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d003      	beq.n	80020f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020f0:	e018      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
      break;
 80020f6:	e015      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00e      	beq.n	8002122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      break;
 8002108:	e00b      	b.n	8002122 <DMA_CheckFifoParam+0xe6>
      break;
 800210a:	bf00      	nop
 800210c:	e00a      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 800210e:	bf00      	nop
 8002110:	e008      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 8002112:	bf00      	nop
 8002114:	e006      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 8002116:	bf00      	nop
 8002118:	e004      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e002      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;   
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
    }
  } 
  
  return status; 
 8002124:	7bfb      	ldrb	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e159      	b.n	8002404 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 8148 	bne.w	80023fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d005      	beq.n	8002186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	2b02      	cmp	r3, #2
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d017      	beq.n	8002224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d123      	bne.n	8002278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a2 	beq.w	80023fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b57      	ldr	r3, [pc, #348]	@ (800241c <HAL_GPIO_Init+0x2e8>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a56      	ldr	r2, [pc, #344]	@ (800241c <HAL_GPIO_Init+0x2e8>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b54      	ldr	r3, [pc, #336]	@ (800241c <HAL_GPIO_Init+0x2e8>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d6:	4a52      	ldr	r2, [pc, #328]	@ (8002420 <HAL_GPIO_Init+0x2ec>)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a49      	ldr	r2, [pc, #292]	@ (8002424 <HAL_GPIO_Init+0x2f0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d019      	beq.n	8002336 <HAL_GPIO_Init+0x202>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a48      	ldr	r2, [pc, #288]	@ (8002428 <HAL_GPIO_Init+0x2f4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x1fe>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a47      	ldr	r2, [pc, #284]	@ (800242c <HAL_GPIO_Init+0x2f8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x1fa>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a46      	ldr	r2, [pc, #280]	@ (8002430 <HAL_GPIO_Init+0x2fc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x1f6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a45      	ldr	r2, [pc, #276]	@ (8002434 <HAL_GPIO_Init+0x300>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x1f2>
 8002322:	2304      	movs	r3, #4
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x204>
 8002326:	2307      	movs	r3, #7
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x204>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x204>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x204>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x204>
 8002336:	2300      	movs	r3, #0
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002348:	4935      	ldr	r1, [pc, #212]	@ (8002420 <HAL_GPIO_Init+0x2ec>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002356:	4b38      	ldr	r3, [pc, #224]	@ (8002438 <HAL_GPIO_Init+0x304>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237a:	4a2f      	ldr	r2, [pc, #188]	@ (8002438 <HAL_GPIO_Init+0x304>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002380:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <HAL_GPIO_Init+0x304>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a4:	4a24      	ldr	r2, [pc, #144]	@ (8002438 <HAL_GPIO_Init+0x304>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023aa:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <HAL_GPIO_Init+0x304>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002438 <HAL_GPIO_Init+0x304>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d4:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <HAL_GPIO_Init+0x304>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002438 <HAL_GPIO_Init+0x304>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0f      	cmp	r3, #15
 8002408:	f67f aea2 	bls.w	8002150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3724      	adds	r7, #36	@ 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002486:	4a05      	ldr	r2, [pc, #20]	@ (800249c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fae4 	bl	8000a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e128      	b.n	8002704 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a90      	ldr	r2, [pc, #576]	@ (800270c <HAL_I2S_Init+0x26c>)
 80024ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fe fdb1 	bl	8001034 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80024e8:	f023 030f 	bic.w	r3, r3, #15
 80024ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2202      	movs	r2, #2
 80024f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d060      	beq.n	80025c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002506:	2310      	movs	r3, #16
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e001      	b.n	8002510 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b20      	cmp	r3, #32
 8002516:	d802      	bhi.n	800251e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800251e:	2001      	movs	r0, #1
 8002520:	f001 fcdc 	bl	8003edc <HAL_RCCEx_GetPeriphCLKFreq>
 8002524:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800252e:	d125      	bne.n	800257c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d010      	beq.n	800255a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	3305      	adds	r3, #5
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	e01f      	b.n	800259a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	fbb2 f2f3 	udiv	r2, r2, r3
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	3305      	adds	r3, #5
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e00e      	b.n	800259a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	3305      	adds	r3, #5
 8002598:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4a5c      	ldr	r2, [pc, #368]	@ (8002710 <HAL_I2S_Init+0x270>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e003      	b.n	80025c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d902      	bls.n	80025d4 <HAL_I2S_Init+0x134>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2bff      	cmp	r3, #255	@ 0xff
 80025d2:	d907      	bls.n	80025e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d8:	f043 0210 	orr.w	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e08f      	b.n	8002704 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002602:	f023 030f 	bic.w	r3, r3, #15
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6851      	ldr	r1, [r2, #4]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6892      	ldr	r2, [r2, #8]
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68d2      	ldr	r2, [r2, #12]
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6992      	ldr	r2, [r2, #24]
 800261a:	430a      	orrs	r2, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002626:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d161      	bne.n	80026f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a38      	ldr	r2, [pc, #224]	@ (8002714 <HAL_I2S_Init+0x274>)
 8002634:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a37      	ldr	r2, [pc, #220]	@ (8002718 <HAL_I2S_Init+0x278>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_I2S_Init+0x1a4>
 8002640:	4b36      	ldr	r3, [pc, #216]	@ (800271c <HAL_I2S_Init+0x27c>)
 8002642:	e001      	b.n	8002648 <HAL_I2S_Init+0x1a8>
 8002644:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	4932      	ldr	r1, [pc, #200]	@ (8002718 <HAL_I2S_Init+0x278>)
 8002650:	428a      	cmp	r2, r1
 8002652:	d101      	bne.n	8002658 <HAL_I2S_Init+0x1b8>
 8002654:	4a31      	ldr	r2, [pc, #196]	@ (800271c <HAL_I2S_Init+0x27c>)
 8002656:	e001      	b.n	800265c <HAL_I2S_Init+0x1bc>
 8002658:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800265c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002660:	f023 030f 	bic.w	r3, r3, #15
 8002664:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2b      	ldr	r2, [pc, #172]	@ (8002718 <HAL_I2S_Init+0x278>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d101      	bne.n	8002674 <HAL_I2S_Init+0x1d4>
 8002670:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_I2S_Init+0x27c>)
 8002672:	e001      	b.n	8002678 <HAL_I2S_Init+0x1d8>
 8002674:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002678:	2202      	movs	r2, #2
 800267a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a25      	ldr	r2, [pc, #148]	@ (8002718 <HAL_I2S_Init+0x278>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_I2S_Init+0x1ea>
 8002686:	4b25      	ldr	r3, [pc, #148]	@ (800271c <HAL_I2S_Init+0x27c>)
 8002688:	e001      	b.n	800268e <HAL_I2S_Init+0x1ee>
 800268a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800269a:	d003      	beq.n	80026a4 <HAL_I2S_Init+0x204>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	e001      	b.n	80026b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <HAL_I2S_Init+0x278>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_I2S_Init+0x24c>
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_I2S_Init+0x27c>)
 80026ea:	e001      	b.n	80026f0 <HAL_I2S_Init+0x250>
 80026ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026f0:	897a      	ldrh	r2, [r7, #10]
 80026f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	08002d95 	.word	0x08002d95
 8002710:	cccccccd 	.word	0xcccccccd
 8002714:	08002f1d 	.word	0x08002f1d
 8002718:	40003800 	.word	0x40003800
 800271c:	40003400 	.word	0x40003400

08002720 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_I2S_Transmit_DMA+0x1a>
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e08a      	b.n	8002854 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	e082      	b.n	8002854 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_I2S_Transmit_DMA+0x3e>
 800275a:	2302      	movs	r3, #2
 800275c:	e07a      	b.n	8002854 <HAL_I2S_Transmit_DMA+0x134>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2203      	movs	r2, #3
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d002      	beq.n	8002792 <HAL_I2S_Transmit_DMA+0x72>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d10a      	bne.n	80027a8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027a6:	e005      	b.n	80027b4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	88fa      	ldrh	r2, [r7, #6]
 80027b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	4a28      	ldr	r2, [pc, #160]	@ (800285c <HAL_I2S_Transmit_DMA+0x13c>)
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c0:	4a27      	ldr	r2, [pc, #156]	@ (8002860 <HAL_I2S_Transmit_DMA+0x140>)
 80027c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c8:	4a26      	ldr	r2, [pc, #152]	@ (8002864 <HAL_I2S_Transmit_DMA+0x144>)
 80027ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027d4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027dc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e4:	f7ff f974 	bl	8001ad0 <HAL_DMA_Start_IT>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00f      	beq.n	800280e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f043 0208 	orr.w	r2, r3, #8
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e022      	b.n	8002854 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0202 	orr.w	r2, r2, #2
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	2b00      	cmp	r3, #0
 8002840:	d107      	bne.n	8002852 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002850:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	08002c73 	.word	0x08002c73
 8002860:	08002c31 	.word	0x08002c31
 8002864:	08002c8f 	.word	0x08002c8f

08002868 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287c:	d004      	beq.n	8002888 <HAL_I2S_DMAStop+0x20>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 80d1 	bne.w	8002a2a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00f      	beq.n	80028b0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff f973 	bl	8001b80 <HAL_DMA_Abort>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a4:	f043 0208 	orr.w	r2, r3, #8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80028b0:	2364      	movs	r3, #100	@ 0x64
 80028b2:	2201      	movs	r2, #1
 80028b4:	2102      	movs	r1, #2
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 faf6 	bl	8002ea8 <I2S_WaitFlagStateUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80028da:	2364      	movs	r3, #100	@ 0x64
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	@ 0x80
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fae1 	bl	8002ea8 <I2S_WaitFlagStateUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00b      	beq.n	8002904 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002912:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0202 	bic.w	r2, r2, #2
 8002930:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b05      	cmp	r3, #5
 800293c:	f040 8165 	bne.w	8002c0a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00f      	beq.n	8002968 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f917 	bl	8001b80 <HAL_DMA_Abort>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	f043 0208 	orr.w	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a8a      	ldr	r2, [pc, #552]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_I2S_DMAStop+0x10e>
 8002972:	4b8a      	ldr	r3, [pc, #552]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002974:	e001      	b.n	800297a <HAL_I2S_DMAStop+0x112>
 8002976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4985      	ldr	r1, [pc, #532]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002982:	428b      	cmp	r3, r1
 8002984:	d101      	bne.n	800298a <HAL_I2S_DMAStop+0x122>
 8002986:	4b85      	ldr	r3, [pc, #532]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002988:	e001      	b.n	800298e <HAL_I2S_DMAStop+0x126>
 800298a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800298e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002992:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7e      	ldr	r2, [pc, #504]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_I2S_DMAStop+0x13e>
 80029a2:	4b7e      	ldr	r3, [pc, #504]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 80029a4:	e001      	b.n	80029aa <HAL_I2S_DMAStop+0x142>
 80029a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a79      	ldr	r2, [pc, #484]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_I2S_DMAStop+0x154>
 80029b8:	4b78      	ldr	r3, [pc, #480]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 80029ba:	e001      	b.n	80029c0 <HAL_I2S_DMAStop+0x158>
 80029bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a73      	ldr	r2, [pc, #460]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_I2S_DMAStop+0x16c>
 80029d0:	4b72      	ldr	r3, [pc, #456]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 80029d2:	e001      	b.n	80029d8 <HAL_I2S_DMAStop+0x170>
 80029d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	496e      	ldr	r1, [pc, #440]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2S_DMAStop+0x180>
 80029e4:	4b6d      	ldr	r3, [pc, #436]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 80029e6:	e001      	b.n	80029ec <HAL_I2S_DMAStop+0x184>
 80029e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a12:	e0fa      	b.n	8002c0a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5f      	ldr	r2, [pc, #380]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2S_DMAStop+0x1ba>
 8002a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002a20:	e001      	b.n	8002a26 <HAL_I2S_DMAStop+0x1be>
 8002a22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a26:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a28:	e0ef      	b.n	8002c0a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a32:	d005      	beq.n	8002a40 <HAL_I2S_DMAStop+0x1d8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3c:	f040 80e5 	bne.w	8002c0a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00f      	beq.n	8002a68 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff f897 	bl	8001b80 <HAL_DMA_Abort>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	f043 0208 	orr.w	r2, r3, #8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	f040 809a 	bne.w	8002baa <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00f      	beq.n	8002a9e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f87c 	bl	8001b80 <HAL_DMA_Abort>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f043 0208 	orr.w	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002a9e:	f7fe fe27 	bl	80016f0 <HAL_GetTick>
 8002aa2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002aa4:	e012      	b.n	8002acc <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002aa6:	f7fe fe23 	bl	80016f0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	@ 0x64
 8002ab2:	d90b      	bls.n	8002acc <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a31      	ldr	r2, [pc, #196]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_I2S_DMAStop+0x272>
 8002ad6:	4b31      	ldr	r3, [pc, #196]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002ad8:	e001      	b.n	8002ade <HAL_I2S_DMAStop+0x276>
 8002ada:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d1de      	bne.n	8002aa6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002ae8:	e012      	b.n	8002b10 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002aea:	f7fe fe01 	bl	80016f0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	@ 0x64
 8002af6:	d90b      	bls.n	8002b10 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a20      	ldr	r2, [pc, #128]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_I2S_DMAStop+0x2b6>
 8002b1a:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002b1c:	e001      	b.n	8002b22 <HAL_I2S_DMAStop+0x2ba>
 8002b1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b28:	2b80      	cmp	r3, #128	@ 0x80
 8002b2a:	d0de      	beq.n	8002aea <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a19      	ldr	r2, [pc, #100]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_I2S_DMAStop+0x2d2>
 8002b36:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002b38:	e001      	b.n	8002b3e <HAL_I2S_DMAStop+0x2d6>
 8002b3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4914      	ldr	r1, [pc, #80]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002b46:	428b      	cmp	r3, r1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2S_DMAStop+0x2e6>
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002b4c:	e001      	b.n	8002b52 <HAL_I2S_DMAStop+0x2ea>
 8002b4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b56:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_I2S_DMAStop+0x302>
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002b68:	e001      	b.n	8002b6e <HAL_I2S_DMAStop+0x306>
 8002b6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a07      	ldr	r2, [pc, #28]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2S_DMAStop+0x31a>
 8002b7e:	4b07      	ldr	r3, [pc, #28]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002b80:	e001      	b.n	8002b86 <HAL_I2S_DMAStop+0x31e>
 8002b82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4902      	ldr	r1, [pc, #8]	@ (8002b98 <HAL_I2S_DMAStop+0x330>)
 8002b8e:	428b      	cmp	r3, r1
 8002b90:	d106      	bne.n	8002ba0 <HAL_I2S_DMAStop+0x338>
 8002b92:	4b02      	ldr	r3, [pc, #8]	@ (8002b9c <HAL_I2S_DMAStop+0x334>)
 8002b94:	e006      	b.n	8002ba4 <HAL_I2S_DMAStop+0x33c>
 8002b96:	bf00      	nop
 8002b98:	40003800 	.word	0x40003800
 8002b9c:	40003400 	.word	0x40003400
 8002ba0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ba4:	f022 0202 	bic.w	r2, r2, #2
 8002ba8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be8:	d10c      	bne.n	8002c04 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	77fb      	strb	r3, [r7, #31]
 8002c02:	e002      	b.n	8002c0a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0202 	bic.w	r2, r2, #2
 8002c54:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7fe f977 	bl	8000f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7fe f957 	bl	8000f34 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0203 	bic.w	r2, r2, #3
 8002caa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	f043 0208 	orr.w	r2, r3, #8
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff ffa5 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	1c9a      	adds	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10e      	bne.n	8002d2e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d1e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fe f915 	bl	8000f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe f900 	bl	8000f8c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d13a      	bne.n	8002e26 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d109      	bne.n	8002dce <I2S_IRQHandler+0x3a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d102      	bne.n	8002dce <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ffb4 	bl	8002d36 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d126      	bne.n	8002e26 <I2S_IRQHandler+0x92>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d11f      	bne.n	8002e26 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002df4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	f043 0202 	orr.w	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fefb 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d136      	bne.n	8002ea0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d109      	bne.n	8002e50 <I2S_IRQHandler+0xbc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b80      	cmp	r3, #128	@ 0x80
 8002e48:	d102      	bne.n	8002e50 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff45 	bl	8002cda <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d122      	bne.n	8002ea0 <I2S_IRQHandler+0x10c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d11b      	bne.n	8002ea0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e76:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff febe 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb8:	f7fe fc1a 	bl	80016f0 <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002ebe:	e018      	b.n	8002ef2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d014      	beq.n	8002ef2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002ec8:	f7fe fc12 	bl	80016f0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d902      	bls.n	8002ede <I2S_WaitFlagStateUntilTimeout+0x36>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e00f      	b.n	8002f12 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1d7      	bne.n	8002ec0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a92      	ldr	r2, [pc, #584]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002f36:	4b92      	ldr	r3, [pc, #584]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f38:	e001      	b.n	8002f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002f3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a8b      	ldr	r2, [pc, #556]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f54:	4b8a      	ldr	r3, [pc, #552]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f56:	e001      	b.n	8002f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f68:	d004      	beq.n	8002f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 8099 	bne.w	80030a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f925 	bl	80031d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f9c8 	bl	8003338 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d13a      	bne.n	8003028 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d035      	beq.n	8003028 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fc8:	e001      	b.n	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002fca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4969      	ldr	r1, [pc, #420]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002fda:	4b69      	ldr	r3, [pc, #420]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fdc:	e001      	b.n	8002fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fe2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fe6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ff6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fdfa 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	f040 80c3 	bne.w	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80bd 	beq.w	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800304e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a49      	ldr	r2, [pc, #292]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800305a:	4b49      	ldr	r3, [pc, #292]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800305c:	e001      	b.n	8003062 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800305e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4944      	ldr	r1, [pc, #272]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306a:	428b      	cmp	r3, r1
 800306c:	d101      	bne.n	8003072 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800306e:	4b44      	ldr	r3, [pc, #272]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003070:	e001      	b.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003072:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003076:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800307a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fdbc 	bl	8002c1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030a4:	e089      	b.n	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d107      	bne.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8be 	bl	800323c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f8fd 	bl	80032d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b40      	cmp	r3, #64	@ 0x40
 80030e2:	d12f      	bne.n	8003144 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02a      	beq.n	8003144 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1e      	ldr	r2, [pc, #120]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003108:	4b1d      	ldr	r3, [pc, #116]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800310a:	e001      	b.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800310c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4919      	ldr	r1, [pc, #100]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003118:	428b      	cmp	r3, r1
 800311a:	d101      	bne.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800311c:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800311e:	e001      	b.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003120:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003124:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003128:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	f043 0202 	orr.w	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fd6c 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b08      	cmp	r3, #8
 800314c:	d136      	bne.n	80031bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d031      	beq.n	80031bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a07      	ldr	r2, [pc, #28]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003162:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003164:	e001      	b.n	800316a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003166:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4902      	ldr	r1, [pc, #8]	@ (800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003172:	428b      	cmp	r3, r1
 8003174:	d106      	bne.n	8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003176:	4b02      	ldr	r3, [pc, #8]	@ (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003178:	e006      	b.n	8003188 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800317a:	bf00      	nop
 800317c:	40003800 	.word	0x40003800
 8003180:	40003400 	.word	0x40003400
 8003184:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003188:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800318c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800319c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fd32 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031b8:	e000      	b.n	80031bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031ba:	bf00      	nop
}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	1c99      	adds	r1, r3, #2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d113      	bne.n	8003232 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003218:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ffc9 	bl	80031c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	1c99      	adds	r1, r3, #2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6251      	str	r1, [r2, #36]	@ 0x24
 800324e:	8819      	ldrh	r1, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <I2SEx_TxISR_I2SExt+0x90>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <I2SEx_TxISR_I2SExt+0x22>
 800325a:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <I2SEx_TxISR_I2SExt+0x94>)
 800325c:	e001      	b.n	8003262 <I2SEx_TxISR_I2SExt+0x26>
 800325e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003262:	460a      	mov	r2, r1
 8003264:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d121      	bne.n	80032c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <I2SEx_TxISR_I2SExt+0x90>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <I2SEx_TxISR_I2SExt+0x50>
 8003288:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <I2SEx_TxISR_I2SExt+0x94>)
 800328a:	e001      	b.n	8003290 <I2SEx_TxISR_I2SExt+0x54>
 800328c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	490d      	ldr	r1, [pc, #52]	@ (80032cc <I2SEx_TxISR_I2SExt+0x90>)
 8003298:	428b      	cmp	r3, r1
 800329a:	d101      	bne.n	80032a0 <I2SEx_TxISR_I2SExt+0x64>
 800329c:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <I2SEx_TxISR_I2SExt+0x94>)
 800329e:	e001      	b.n	80032a4 <I2SEx_TxISR_I2SExt+0x68>
 80032a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80032a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff81 	bl	80031c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40003800 	.word	0x40003800
 80032d0:	40003400 	.word	0x40003400

080032d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68d8      	ldr	r0, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	1c99      	adds	r1, r3, #2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80032ec:	b282      	uxth	r2, r0
 80032ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003316:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff4a 	bl	80031c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a20      	ldr	r2, [pc, #128]	@ (80033c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <I2SEx_RxISR_I2SExt+0x16>
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <I2SEx_RxISR_I2SExt+0x94>)
 800334c:	e001      	b.n	8003352 <I2SEx_RxISR_I2SExt+0x1a>
 800334e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003352:	68d8      	ldr	r0, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	1c99      	adds	r1, r3, #2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800335e:	b282      	uxth	r2, r0
 8003360:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d121      	bne.n	80033be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a12      	ldr	r2, [pc, #72]	@ (80033c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <I2SEx_RxISR_I2SExt+0x50>
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <I2SEx_RxISR_I2SExt+0x94>)
 8003386:	e001      	b.n	800338c <I2SEx_RxISR_I2SExt+0x54>
 8003388:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	490d      	ldr	r1, [pc, #52]	@ (80033c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003394:	428b      	cmp	r3, r1
 8003396:	d101      	bne.n	800339c <I2SEx_RxISR_I2SExt+0x64>
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <I2SEx_RxISR_I2SExt+0x94>)
 800339a:	e001      	b.n	80033a0 <I2SEx_RxISR_I2SExt+0x68>
 800339c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff03 	bl	80031c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40003800 	.word	0x40003800
 80033cc:	40003400 	.word	0x40003400

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e267      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033ee:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b85      	ldr	r3, [pc, #532]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003402:	2b08      	cmp	r3, #8
 8003404:	d112      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b82      	ldr	r3, [pc, #520]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4b7e      	ldr	r3, [pc, #504]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05b      	beq.n	80034d8 <HAL_RCC_OscConfig+0x108>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d157      	bne.n	80034d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e242      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x74>
 8003436:	4b76      	ldr	r3, [pc, #472]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b70      	ldr	r3, [pc, #448]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6f      	ldr	r2, [pc, #444]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6c      	ldr	r2, [pc, #432]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003468:	4b69      	ldr	r3, [pc, #420]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a68      	ldr	r2, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe f932 	bl	80016f0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe f92e 	bl	80016f0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e207      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xc0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe f91e 	bl	80016f0 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe f91a 	bl	80016f0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1f3      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b51      	ldr	r3, [pc, #324]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0xe8>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b44      	ldr	r3, [pc, #272]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1c7      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4937      	ldr	r1, [pc, #220]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <HAL_RCC_OscConfig+0x244>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fe f8d3 	bl	80016f0 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354e:	f7fe f8cf 	bl	80016f0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a8      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2b      	ldr	r3, [pc, #172]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4925      	ldr	r1, [pc, #148]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <HAL_RCC_OscConfig+0x244>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe f8b2 	bl	80016f0 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003590:	f7fe f8ae 	bl	80016f0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e187      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d036      	beq.n	8003628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_RCC_OscConfig+0x248>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe f892 	bl	80016f0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fe f88e 	bl	80016f0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e167      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x200>
 80035ee:	e01b      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <HAL_RCC_OscConfig+0x248>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f87b 	bl	80016f0 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	e00e      	b.n	800361c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fe f877 	bl	80016f0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d907      	bls.n	800361c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e150      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	42470000 	.word	0x42470000
 8003618:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b88      	ldr	r3, [pc, #544]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ea      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8097 	beq.w	8003764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b81      	ldr	r3, [pc, #516]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	4b7d      	ldr	r3, [pc, #500]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4a7c      	ldr	r2, [pc, #496]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	@ 0x40
 8003656:	4b7a      	ldr	r3, [pc, #488]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b77      	ldr	r3, [pc, #476]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b74      	ldr	r3, [pc, #464]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a73      	ldr	r2, [pc, #460]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7fe f837 	bl	80016f0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7fe f833 	bl	80016f0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e10c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x2ea>
 80036ac:	4b64      	ldr	r3, [pc, #400]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	4a63      	ldr	r2, [pc, #396]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b8:	e01c      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x30c>
 80036c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036dc:	4b58      	ldr	r3, [pc, #352]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a57      	ldr	r2, [pc, #348]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e8:	4b55      	ldr	r3, [pc, #340]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ec:	4a54      	ldr	r2, [pc, #336]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fff8 	bl	80016f0 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fd fff4 	bl	80016f0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0cb      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <HAL_RCC_OscConfig+0x334>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7fd ffe2 	bl	80016f0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7fd ffde 	bl	80016f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0b5      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	4b3e      	ldr	r3, [pc, #248]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	4a38      	ldr	r2, [pc, #224]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003762:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a1 	beq.w	80038b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376e:	4b34      	ldr	r3, [pc, #208]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d05c      	beq.n	8003834 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d141      	bne.n	8003806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd ffb2 	bl	80016f0 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd ffae 	bl	80016f0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e087      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b27      	ldr	r3, [pc, #156]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	491b      	ldr	r1, [pc, #108]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd ff87 	bl	80016f0 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd ff83 	bl	80016f0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e05c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x416>
 8003804:	e054      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd ff70 	bl	80016f0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd ff6c 	bl	80016f0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e045      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e038      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
 8003848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x4ec>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d028      	beq.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d121      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d11a      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0cc      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b68      	ldr	r3, [pc, #416]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90c      	bls.n	80038fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b65      	ldr	r3, [pc, #404]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a58      	ldr	r2, [pc, #352]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800391e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a52      	ldr	r2, [pc, #328]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d044      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	2b03      	cmp	r3, #3
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e067      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b37      	ldr	r3, [pc, #220]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4934      	ldr	r1, [pc, #208]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7fd fe9e 	bl	80016f0 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fd fe9a 	bl	80016f0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d20c      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b22      	ldr	r3, [pc, #136]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fdfe 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	080097c4 	.word	0x080097c4
 8003a84:	2000000c 	.word	0x2000000c
 8003a88:	20000010 	.word	0x20000010

08003a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b094      	sub	sp, #80	@ 0x50
 8003a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa4:	4b79      	ldr	r3, [pc, #484]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d00d      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 80e1 	bhi.w	8003c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003abe:	e0db      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b73      	ldr	r3, [pc, #460]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac4:	e0db      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac6:	4b73      	ldr	r3, [pc, #460]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aca:	e0d8      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003acc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af6:	2300      	movs	r3, #0
 8003af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003afe:	4622      	mov	r2, r4
 8003b00:	462b      	mov	r3, r5
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	0159      	lsls	r1, r3, #5
 8003b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b10:	0150      	lsls	r0, r2, #5
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4621      	mov	r1, r4
 8003b18:	1a51      	subs	r1, r2, r1
 8003b1a:	6139      	str	r1, [r7, #16]
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b30:	4659      	mov	r1, fp
 8003b32:	018b      	lsls	r3, r1, #6
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	018a      	lsls	r2, r1, #6
 8003b3e:	4651      	mov	r1, sl
 8003b40:	ebb2 0801 	subs.w	r8, r2, r1
 8003b44:	4659      	mov	r1, fp
 8003b46:	eb63 0901 	sbc.w	r9, r3, r1
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5e:	4690      	mov	r8, r2
 8003b60:	4699      	mov	r9, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	eb18 0303 	adds.w	r3, r8, r3
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	eb49 0303 	adc.w	r3, r9, r3
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b7e:	4629      	mov	r1, r5
 8003b80:	024b      	lsls	r3, r1, #9
 8003b82:	4621      	mov	r1, r4
 8003b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b88:	4621      	mov	r1, r4
 8003b8a:	024a      	lsls	r2, r1, #9
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b92:	2200      	movs	r2, #0
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b9c:	f7fc fb78 	bl	8000290 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba8:	e058      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b38      	ldr	r3, [pc, #224]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	f04f 0000 	mov.w	r0, #0
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	0159      	lsls	r1, r3, #5
 8003bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd6:	0150      	lsls	r0, r2, #5
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4641      	mov	r1, r8
 8003bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8003be2:	4649      	mov	r1, r9
 8003be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8003c00:	eb63 050b 	sbc.w	r5, r3, fp
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	00eb      	lsls	r3, r5, #3
 8003c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c12:	00e2      	lsls	r2, r4, #3
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	4643      	mov	r3, r8
 8003c1a:	18e3      	adds	r3, r4, r3
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	464b      	mov	r3, r9
 8003c20:	eb45 0303 	adc.w	r3, r5, r3
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c32:	4629      	mov	r1, r5
 8003c34:	028b      	lsls	r3, r1, #10
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	028a      	lsls	r2, r1, #10
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c46:	2200      	movs	r2, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	61fa      	str	r2, [r7, #28]
 8003c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c50:	f7fc fb1e 	bl	8000290 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c76:	e002      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3750      	adds	r7, #80	@ 0x50
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	007a1200 	.word	0x007a1200

08003c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	@ (8003cac <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb4:	f7ff fff0 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	080097d4 	.word	0x080097d4

08003cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cdc:	f7ff ffdc 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	0b5b      	lsrs	r3, r3, #13
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	@ (8003cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	080097d4 	.word	0x080097d4

08003d00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d035      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d28:	4b67      	ldr	r3, [pc, #412]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d2e:	f7fd fcdf 	bl	80016f0 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d36:	f7fd fcdb 	bl	80016f0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0ba      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d48:	4b60      	ldr	r3, [pc, #384]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	019a      	lsls	r2, r3, #6
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	071b      	lsls	r3, r3, #28
 8003d60:	495a      	ldr	r1, [pc, #360]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d68:	4b57      	ldr	r3, [pc, #348]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7fd fcbf 	bl	80016f0 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d76:	f7fd fcbb 	bl	80016f0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e09a      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d88:	4b50      	ldr	r3, [pc, #320]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8083 	beq.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b49      	ldr	r3, [pc, #292]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	4a48      	ldr	r2, [pc, #288]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003db2:	4b46      	ldr	r3, [pc, #280]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dbe:	4b44      	ldr	r3, [pc, #272]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a43      	ldr	r2, [pc, #268]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dca:	f7fd fc91 	bl	80016f0 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fd fc8d 	bl	80016f0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e06c      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003de4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df0:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02f      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e18:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e24:	4a29      	ldr	r2, [pc, #164]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e2a:	4b28      	ldr	r3, [pc, #160]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d114      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fd fc5b 	bl	80016f0 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fd fc57 	bl	80016f0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e034      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ee      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e6c:	d10d      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e6e:	4b17      	ldr	r3, [pc, #92]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e82:	4912      	ldr	r1, [pc, #72]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]
 8003e88:	e005      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e90:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e94:	6093      	str	r3, [r2, #8]
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea2:	490a      	ldr	r1, [pc, #40]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7c1a      	ldrb	r2, [r3, #16]
 8003eb8:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	42470068 	.word	0x42470068
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	42470e40 	.word	0x42470e40
 8003ed8:	424711e0 	.word	0x424711e0

08003edc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d13f      	bne.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003efa:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f02:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f10:	d12f      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f12:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f14:	617b      	str	r3, [r7, #20]
          break;
 8003f16:	e02f      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f18:	4b1c      	ldr	r3, [pc, #112]	@ (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f24:	d108      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f26:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f2e:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	e007      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f38:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f40:	4a15      	ldr	r2, [pc, #84]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f48:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f62:	0f1b      	lsrs	r3, r3, #28
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	617b      	str	r3, [r7, #20]
          break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
          break;
 8003f76:	bf00      	nop
        }
      }
      break;
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003f7a:	bf00      	nop
    }
  }
  return frequency;
 8003f7c:	697b      	ldr	r3, [r7, #20]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00bb8000 	.word	0x00bb8000
 8003f94:	007a1200 	.word	0x007a1200
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07b      	b.n	80040a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fbe:	d009      	beq.n	8003fd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]
 8003fc6:	e005      	b.n	8003fd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd f958 	bl	80012a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004058:	ea42 0103 	orr.w	r1, r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	f003 0104 	and.w	r1, r3, #4
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	f003 0210 	and.w	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004094:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b088      	sub	sp, #32
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040be:	f7fd fb17 	bl	80016f0 <HAL_GetTick>
 80040c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
 80040d6:	e12a      	b.n	800432e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Transmit+0x36>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e122      	b.n	800432e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_SPI_Transmit+0x48>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e11b      	b.n	800432e <HAL_SPI_Transmit+0x280>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2203      	movs	r2, #3
 8004102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004144:	d10f      	bne.n	8004166 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004164:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b40      	cmp	r3, #64	@ 0x40
 8004172:	d007      	beq.n	8004184 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418c:	d152      	bne.n	8004234 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_SPI_Transmit+0xee>
 8004196:	8b7b      	ldrh	r3, [r7, #26]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d145      	bne.n	8004228 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	881a      	ldrh	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041c0:	e032      	b.n	8004228 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d112      	bne.n	80041f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041f4:	e018      	b.n	8004228 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f6:	f7fd fa7b 	bl	80016f0 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d803      	bhi.n	800420e <HAL_SPI_Transmit+0x160>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d102      	bne.n	8004214 <HAL_SPI_Transmit+0x166>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e082      	b.n	800432e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1c7      	bne.n	80041c2 <HAL_SPI_Transmit+0x114>
 8004232:	e053      	b.n	80042dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_SPI_Transmit+0x194>
 800423c:	8b7b      	ldrh	r3, [r7, #26]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d147      	bne.n	80042d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004268:	e033      	b.n	80042d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d113      	bne.n	80042a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800429e:	e018      	b.n	80042d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a0:	f7fd fa26 	bl	80016f0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d803      	bhi.n	80042b8 <HAL_SPI_Transmit+0x20a>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d102      	bne.n	80042be <HAL_SPI_Transmit+0x210>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e02d      	b.n	800432e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1c6      	bne.n	800426a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa59 	bl	8004798 <SPI_EndRxTxTransaction>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800432c:	2300      	movs	r3, #0
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08a      	sub	sp, #40	@ 0x28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004348:	f7fd f9d2 	bl	80016f0 <HAL_GetTick>
 800434c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004354:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800435c:	887b      	ldrh	r3, [r7, #2]
 800435e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004360:	7ffb      	ldrb	r3, [r7, #31]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d00c      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x4a>
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436c:	d106      	bne.n	800437c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <HAL_SPI_TransmitReceive+0x46>
 8004376:	7ffb      	ldrb	r3, [r7, #31]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d001      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
 800437e:	e17f      	b.n	8004680 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x5c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x5c>
 800438c:	887b      	ldrh	r3, [r7, #2]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e174      	b.n	8004680 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x6e>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e16d      	b.n	8004680 <HAL_SPI_TransmitReceive+0x34a>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d003      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2205      	movs	r2, #5
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d007      	beq.n	8004414 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800441c:	d17e      	bne.n	800451c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_SPI_TransmitReceive+0xf6>
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d16c      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	881a      	ldrh	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	1c9a      	adds	r2, r3, #2
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004450:	e059      	b.n	8004506 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d11b      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x162>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x162>
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	2b01      	cmp	r3, #1
 800446e:	d113      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	881a      	ldrh	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d119      	bne.n	80044da <HAL_SPI_TransmitReceive+0x1a4>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d014      	beq.n	80044da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	b292      	uxth	r2, r2
 80044bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c2:	1c9a      	adds	r2, r3, #2
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044d6:	2301      	movs	r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044da:	f7fd f909 	bl	80016f0 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d80d      	bhi.n	8004506 <HAL_SPI_TransmitReceive+0x1d0>
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d009      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0bc      	b.n	8004680 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1a0      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x11c>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d19b      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x11c>
 800451a:	e082      	b.n	8004622 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_SPI_TransmitReceive+0x1f4>
 8004524:	8afb      	ldrh	r3, [r7, #22]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d171      	bne.n	800460e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004550:	e05d      	b.n	800460e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b02      	cmp	r3, #2
 800455e:	d11c      	bne.n	800459a <HAL_SPI_TransmitReceive+0x264>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d017      	beq.n	800459a <HAL_SPI_TransmitReceive+0x264>
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	2b01      	cmp	r3, #1
 800456e:	d114      	bne.n	800459a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d119      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x2a6>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d014      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045d8:	2301      	movs	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045dc:	f7fd f888 	bl	80016f0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d803      	bhi.n	80045f4 <HAL_SPI_TransmitReceive+0x2be>
 80045ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x2c4>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e038      	b.n	8004680 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d19c      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x21c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d197      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8b6 	bl	8004798 <SPI_EndRxTxTransaction>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e01d      	b.n	8004680 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800467e:	2300      	movs	r3, #0
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	@ 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004698:	f7fd f82a 	bl	80016f0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4413      	add	r3, r2
 80046a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046a8:	f7fd f822 	bl	80016f0 <HAL_GetTick>
 80046ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ae:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	015b      	lsls	r3, r3, #5
 80046b4:	0d1b      	lsrs	r3, r3, #20
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046be:	e055      	b.n	800476c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d051      	beq.n	800476c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c8:	f7fd f812 	bl	80016f0 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d902      	bls.n	80046de <SPI_WaitFlagStateUntilTimeout+0x56>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d13d      	bne.n	800475a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f6:	d111      	bne.n	800471c <SPI_WaitFlagStateUntilTimeout+0x94>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004700:	d004      	beq.n	800470c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470a:	d107      	bne.n	800471c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800471a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004724:	d10f      	bne.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e018      	b.n	800478c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	e002      	b.n	800476c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	3b01      	subs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4013      	ands	r3, r2
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	429a      	cmp	r2, r3
 8004788:	d19a      	bne.n	80046c0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	2000000c 	.word	0x2000000c

08004798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2201      	movs	r2, #1
 80047ac:	2102      	movs	r1, #2
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff ff6a 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e032      	b.n	8004830 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <SPI_EndRxTxTransaction+0xa0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	@ (800483c <SPI_EndRxTxTransaction+0xa4>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	0d5b      	lsrs	r3, r3, #21
 80047d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e8:	d112      	bne.n	8004810 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2200      	movs	r2, #0
 80047f2:	2180      	movs	r1, #128	@ 0x80
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff ff47 	bl	8004688 <SPI_WaitFlagStateUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d016      	beq.n	800482e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e00f      	b.n	8004830 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	3b01      	subs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b80      	cmp	r3, #128	@ 0x80
 8004828:	d0f2      	beq.n	8004810 <SPI_EndRxTxTransaction+0x78>
 800482a:	e000      	b.n	800482e <SPI_EndRxTxTransaction+0x96>
        break;
 800482c:	bf00      	nop
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	2000000c 	.word	0x2000000c
 800483c:	165e9f81 	.word	0x165e9f81

08004840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e042      	b.n	80048d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fd84 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f973 	bl	8004b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	@ 0x28
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d175      	bne.n	80049ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Transmit+0x2c>
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e06e      	b.n	80049ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2221      	movs	r2, #33	@ 0x21
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491e:	f7fc fee7 	bl	80016f0 <HAL_GetTick>
 8004922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004938:	d108      	bne.n	800494c <HAL_UART_Transmit+0x6c>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	e003      	b.n	8004954 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004954:	e02e      	b.n	80049b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	@ 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f848 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e03a      	b.n	80049ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	3302      	adds	r3, #2
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	e007      	b.n	80049a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	3301      	adds	r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1cb      	bne.n	8004956 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2140      	movs	r1, #64	@ 0x40
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f814 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e006      	b.n	80049ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a06:	e03b      	b.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d037      	beq.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	f7fc fe6e 	bl	80016f0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	6a3a      	ldr	r2, [r7, #32]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e03a      	b.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d023      	beq.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b80      	cmp	r3, #128	@ 0x80
 8004a3c:	d020      	beq.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d01d      	beq.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d116      	bne.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f81d 	bl	8004aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2208      	movs	r2, #8
 8004a72:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e00f      	b.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d0b4      	beq.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b095      	sub	sp, #84	@ 0x54
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ad0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3314      	adds	r3, #20
 8004aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3314      	adds	r3, #20
 8004b02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d119      	bne.n	8004b54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f023 0310 	bic.w	r3, r3, #16
 8004b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b40:	61ba      	str	r2, [r7, #24]
 8004b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6979      	ldr	r1, [r7, #20]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b62:	bf00      	nop
 8004b64:	3754      	adds	r7, #84	@ 0x54
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b0c0      	sub	sp, #256	@ 0x100
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	68d9      	ldr	r1, [r3, #12]
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	ea40 0301 	orr.w	r3, r0, r1
 8004b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bc8:	f021 010c 	bic.w	r1, r1, #12
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bea:	6999      	ldr	r1, [r3, #24]
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	ea40 0301 	orr.w	r3, r0, r1
 8004bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d005      	beq.n	8004c10 <UART_SetConfig+0xa0>
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e40 <UART_SetConfig+0x2d0>)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d104      	bne.n	8004c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7ff f862 	bl	8003cd8 <HAL_RCC_GetPCLK2Freq>
 8004c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c18:	e003      	b.n	8004c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c1a:	f7ff f849 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8004c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c2c:	f040 810c 	bne.w	8004e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	1891      	adds	r1, r2, r2
 8004c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c4a:	415b      	adcs	r3, r3
 8004c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c52:	4621      	mov	r1, r4
 8004c54:	eb12 0801 	adds.w	r8, r2, r1
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb43 0901 	adc.w	r9, r3, r1
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c72:	4690      	mov	r8, r2
 8004c74:	4699      	mov	r9, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	eb18 0303 	adds.w	r3, r8, r3
 8004c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c80:	462b      	mov	r3, r5
 8004c82:	eb49 0303 	adc.w	r3, r9, r3
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	18db      	adds	r3, r3, r3
 8004ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	eb42 0303 	adc.w	r3, r2, r3
 8004caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cb4:	f7fb faec 	bl	8000290 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ce8:	4641      	mov	r1, r8
 8004cea:	eb12 0a01 	adds.w	sl, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d08:	4692      	mov	sl, r2
 8004d0a:	469b      	mov	fp, r3
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d16:	464b      	mov	r3, r9
 8004d18:	eb4b 0303 	adc.w	r3, fp, r3
 8004d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d34:	460b      	mov	r3, r1
 8004d36:	18db      	adds	r3, r3, r3
 8004d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d4a:	f7fb faa1 	bl	8000290 <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004d56:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2264      	movs	r2, #100	@ 0x64
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	1acb      	subs	r3, r1, r3
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d6a:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d78:	441c      	add	r4, r3
 8004d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	1891      	adds	r1, r2, r2
 8004d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d94:	415b      	adcs	r3, r3
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	1851      	adds	r1, r2, r1
 8004da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004da2:	4649      	mov	r1, r9
 8004da4:	414b      	adcs	r3, r1
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004db4:	4659      	mov	r1, fp
 8004db6:	00cb      	lsls	r3, r1, #3
 8004db8:	4651      	mov	r1, sl
 8004dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	00ca      	lsls	r2, r1, #3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4642      	mov	r2, r8
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004df0:	460b      	mov	r3, r1
 8004df2:	18db      	adds	r3, r3, r3
 8004df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df6:	4613      	mov	r3, r2
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e06:	f7fb fa43 	bl	8000290 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004e10:	fba3 1302 	umull	r1, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2164      	movs	r1, #100	@ 0x64
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	3332      	adds	r3, #50	@ 0x32
 8004e22:	4a08      	ldr	r2, [pc, #32]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f003 0207 	and.w	r2, r3, #7
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4422      	add	r2, r4
 8004e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e38:	e106      	b.n	8005048 <UART_SetConfig+0x4d8>
 8004e3a:	bf00      	nop
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	40011400 	.word	0x40011400
 8004e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	6239      	str	r1, [r7, #32]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	1854      	adds	r4, r2, r1
 8004e6e:	4649      	mov	r1, r9
 8004e70:	eb43 0501 	adc.w	r5, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e90:	464b      	mov	r3, r9
 8004e92:	eb45 0303 	adc.w	r3, r5, r3
 8004e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	008b      	lsls	r3, r1, #2
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	008a      	lsls	r2, r1, #2
 8004ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ec8:	f7fb f9e2 	bl	8000290 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b60      	ldr	r3, [pc, #384]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	011c      	lsls	r4, r3, #4
 8004eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	1891      	adds	r1, r2, r2
 8004ef2:	61b9      	str	r1, [r7, #24]
 8004ef4:	415b      	adcs	r3, r3
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004efc:	4641      	mov	r1, r8
 8004efe:	1851      	adds	r1, r2, r1
 8004f00:	6139      	str	r1, [r7, #16]
 8004f02:	4649      	mov	r1, r9
 8004f04:	414b      	adcs	r3, r1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f14:	4659      	mov	r1, fp
 8004f16:	00cb      	lsls	r3, r1, #3
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1e:	4651      	mov	r1, sl
 8004f20:	00ca      	lsls	r2, r1, #3
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	189b      	adds	r3, r3, r2
 8004f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f54:	4649      	mov	r1, r9
 8004f56:	008b      	lsls	r3, r1, #2
 8004f58:	4641      	mov	r1, r8
 8004f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5e:	4641      	mov	r1, r8
 8004f60:	008a      	lsls	r2, r1, #2
 8004f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f66:	f7fb f993 	bl	8000290 <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004f72:	fba3 2301 	umull	r2, r3, r3, r1
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2264      	movs	r2, #100	@ 0x64
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	1acb      	subs	r3, r1, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	3332      	adds	r3, #50	@ 0x32
 8004f84:	4a33      	ldr	r2, [pc, #204]	@ (8005054 <UART_SetConfig+0x4e4>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f90:	441c      	add	r4, r3
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	1851      	adds	r1, r2, r1
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	414b      	adcs	r3, r1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc8:	4659      	mov	r1, fp
 8004fca:	00cb      	lsls	r3, r1, #3
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	00ca      	lsls	r2, r1, #3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	eb42 0303 	adc.w	r3, r2, r3
 8004fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005004:	4649      	mov	r1, r9
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	4641      	mov	r1, r8
 800500a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500e:	4641      	mov	r1, r8
 8005010:	008a      	lsls	r2, r1, #2
 8005012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005016:	f7fb f93b 	bl	8000290 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <UART_SetConfig+0x4e4>)
 8005020:	fba3 1302 	umull	r1, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	2164      	movs	r1, #100	@ 0x64
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	3332      	adds	r3, #50	@ 0x32
 8005032:	4a08      	ldr	r2, [pc, #32]	@ (8005054 <UART_SetConfig+0x4e4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4422      	add	r2, r4
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800504e:	46bd      	mov	sp, r7
 8005050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005054:	51eb851f 	.word	0x51eb851f

08005058 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800505c:	4904      	ldr	r1, [pc, #16]	@ (8005070 <MX_FATFS_Init+0x18>)
 800505e:	4805      	ldr	r0, [pc, #20]	@ (8005074 <MX_FATFS_Init+0x1c>)
 8005060:	f002 ffe8 	bl	8008034 <FATFS_LinkDriver>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	4b03      	ldr	r3, [pc, #12]	@ (8005078 <MX_FATFS_Init+0x20>)
 800506a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800506c:	bf00      	nop
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20003a4c 	.word	0x20003a4c
 8005074:	20000018 	.word	0x20000018
 8005078:	20003a48 	.word	0x20003a48

0800507c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005080:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005082:	4618      	mov	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;

	return USER_SPI_initialize(pdrv);
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f9d3 	bl	8005444 <USER_SPI_initialize>
 800509e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fab1 	bl	800561c <USER_SPI_status>
 80050ba:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;

	return USER_SPI_read(pdrv, buff, sector, count);
 80050d4:	7bf8      	ldrb	r0, [r7, #15]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	f000 fab4 	bl	8005648 <USER_SPI_read>
 80050e0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4603      	mov	r3, r0
 80050f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff,  sector, count);
 80050fa:	7bf8      	ldrb	r0, [r7, #15]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	f000 fb07 	bl	8005714 <USER_SPI_write>
 8005106:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	603a      	str	r2, [r7, #0]
 800511a:	71fb      	strb	r3, [r7, #7]
 800511c:	460b      	mov	r3, r1
 800511e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005120:	79b9      	ldrb	r1, [r7, #6]
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fb70 	bl	800580c <USER_SPI_ioctl>
 800512c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005140:	f7fc fad6 	bl	80016f0 <HAL_GetTick>
 8005144:	4603      	mov	r3, r0
 8005146:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <SPI_Timer_On+0x20>)
 8005148:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800514a:	4a04      	ldr	r2, [pc, #16]	@ (800515c <SPI_Timer_On+0x24>)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20003a54 	.word	0x20003a54
 800515c:	20003a58 	.word	0x20003a58

08005160 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005164:	f7fc fac4 	bl	80016f0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	4b06      	ldr	r3, [pc, #24]	@ (8005184 <SPI_Timer_Status+0x24>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <SPI_Timer_Status+0x28>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf34      	ite	cc
 8005178:	2301      	movcc	r3, #1
 800517a:	2300      	movcs	r3, #0
 800517c:	b2db      	uxtb	r3, r3
}
 800517e:	4618      	mov	r0, r3
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20003a54 	.word	0x20003a54
 8005188:	20003a58 	.word	0x20003a58

0800518c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af02      	add	r7, sp, #8
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005196:	f107 020f 	add.w	r2, r7, #15
 800519a:	1df9      	adds	r1, r7, #7
 800519c:	2332      	movs	r3, #50	@ 0x32
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2301      	movs	r3, #1
 80051a2:	4804      	ldr	r0, [pc, #16]	@ (80051b4 <xchg_spi+0x28>)
 80051a4:	f7ff f8c7 	bl	8004336 <HAL_SPI_TransmitReceive>
    return rxDat;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200039a0 	.word	0x200039a0

080051b8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e00a      	b.n	80051de <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	18d4      	adds	r4, r2, r3
 80051ce:	20ff      	movs	r0, #255	@ 0xff
 80051d0:	f7ff ffdc 	bl	800518c <xchg_spi>
 80051d4:	4603      	mov	r3, r0
 80051d6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d3f0      	bcc.n	80051c8 <rcvr_spi_multi+0x10>
	}
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd90      	pop	{r4, r7, pc}

080051f0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4803      	ldr	r0, [pc, #12]	@ (8005214 <xmit_spi_multi+0x24>)
 8005206:	f7fe ff52 	bl	80040ae <HAL_SPI_Transmit>
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	200039a0 	.word	0x200039a0

08005218 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005220:	f7fc fa66 	bl	80016f0 <HAL_GetTick>
 8005224:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800522a:	20ff      	movs	r0, #255	@ 0xff
 800522c:	f7ff ffae 	bl	800518c <xchg_spi>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2bff      	cmp	r3, #255	@ 0xff
 8005238:	d007      	beq.n	800524a <wait_ready+0x32>
 800523a:	f7fc fa59 	bl	80016f0 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d8ef      	bhi.n	800522a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2bff      	cmp	r3, #255	@ 0xff
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005264:	2201      	movs	r2, #1
 8005266:	2110      	movs	r1, #16
 8005268:	4803      	ldr	r0, [pc, #12]	@ (8005278 <despiselect+0x18>)
 800526a:	f7fd f8e7 	bl	800243c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800526e:	20ff      	movs	r0, #255	@ 0xff
 8005270:	f7ff ff8c 	bl	800518c <xchg_spi>

}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40020000 	.word	0x40020000

0800527c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005280:	2200      	movs	r2, #0
 8005282:	2110      	movs	r1, #16
 8005284:	4809      	ldr	r0, [pc, #36]	@ (80052ac <spiselect+0x30>)
 8005286:	f7fd f8d9 	bl	800243c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800528a:	20ff      	movs	r0, #255	@ 0xff
 800528c:	f7ff ff7e 	bl	800518c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005290:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005294:	f7ff ffc0 	bl	8005218 <wait_ready>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <spiselect+0x26>
 800529e:	2301      	movs	r3, #1
 80052a0:	e002      	b.n	80052a8 <spiselect+0x2c>

	despiselect();
 80052a2:	f7ff ffdd 	bl	8005260 <despiselect>
	return 0;	/* Timeout */
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40020000 	.word	0x40020000

080052b0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80052ba:	20c8      	movs	r0, #200	@ 0xc8
 80052bc:	f7ff ff3c 	bl	8005138 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80052c0:	20ff      	movs	r0, #255	@ 0xff
 80052c2:	f7ff ff63 	bl	800518c <xchg_spi>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2bff      	cmp	r3, #255	@ 0xff
 80052ce:	d104      	bne.n	80052da <rcvr_datablock+0x2a>
 80052d0:	f7ff ff46 	bl	8005160 <SPI_Timer_Status>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f2      	bne.n	80052c0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80052de:	d001      	beq.n	80052e4 <rcvr_datablock+0x34>
 80052e0:	2300      	movs	r3, #0
 80052e2:	e00a      	b.n	80052fa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff ff66 	bl	80051b8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80052ec:	20ff      	movs	r0, #255	@ 0xff
 80052ee:	f7ff ff4d 	bl	800518c <xchg_spi>
 80052f2:	20ff      	movs	r0, #255	@ 0xff
 80052f4:	f7ff ff4a 	bl	800518c <xchg_spi>

	return 1;						/* Function succeeded */
 80052f8:	2301      	movs	r3, #1
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800530e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005312:	f7ff ff81 	bl	8005218 <wait_ready>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <xmit_datablock+0x1e>
 800531c:	2300      	movs	r3, #0
 800531e:	e01e      	b.n	800535e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff32 	bl	800518c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	2bfd      	cmp	r3, #253	@ 0xfd
 800532c:	d016      	beq.n	800535c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800532e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff ff5c 	bl	80051f0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005338:	20ff      	movs	r0, #255	@ 0xff
 800533a:	f7ff ff27 	bl	800518c <xchg_spi>
 800533e:	20ff      	movs	r0, #255	@ 0xff
 8005340:	f7ff ff24 	bl	800518c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005344:	20ff      	movs	r0, #255	@ 0xff
 8005346:	f7ff ff21 	bl	800518c <xchg_spi>
 800534a:	4603      	mov	r3, r0
 800534c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2b05      	cmp	r3, #5
 8005356:	d001      	beq.n	800535c <xmit_datablock+0x5a>
 8005358:	2300      	movs	r3, #0
 800535a:	e000      	b.n	800535e <xmit_datablock+0x5c>
	}
	return 1;
 800535c:	2301      	movs	r3, #1
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	4603      	mov	r3, r0
 800536e:	6039      	str	r1, [r7, #0]
 8005370:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005376:	2b00      	cmp	r3, #0
 8005378:	da0e      	bge.n	8005398 <send_cmd+0x32>
		cmd &= 0x7F;
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005380:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005382:	2100      	movs	r1, #0
 8005384:	2037      	movs	r0, #55	@ 0x37
 8005386:	f7ff ffee 	bl	8005366 <send_cmd>
 800538a:	4603      	mov	r3, r0
 800538c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d901      	bls.n	8005398 <send_cmd+0x32>
 8005394:	7bbb      	ldrb	r3, [r7, #14]
 8005396:	e051      	b.n	800543c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d008      	beq.n	80053b0 <send_cmd+0x4a>
		despiselect();
 800539e:	f7ff ff5f 	bl	8005260 <despiselect>
		if (!spiselect()) return 0xFF;
 80053a2:	f7ff ff6b 	bl	800527c <spiselect>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <send_cmd+0x4a>
 80053ac:	23ff      	movs	r3, #255	@ 0xff
 80053ae:	e045      	b.n	800543c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fee7 	bl	800518c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fee1 	bl	800518c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fedb 	bl	800518c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	0a1b      	lsrs	r3, r3, #8
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fed5 	bl	800518c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fed0 	bl	800518c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <send_cmd+0x94>
 80053f6:	2395      	movs	r3, #149	@ 0x95
 80053f8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d101      	bne.n	8005404 <send_cmd+0x9e>
 8005400:	2387      	movs	r3, #135	@ 0x87
 8005402:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fec0 	bl	800518c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d102      	bne.n	8005418 <send_cmd+0xb2>
 8005412:	20ff      	movs	r0, #255	@ 0xff
 8005414:	f7ff feba 	bl	800518c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005418:	230a      	movs	r3, #10
 800541a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800541c:	20ff      	movs	r0, #255	@ 0xff
 800541e:	f7ff feb5 	bl	800518c <xchg_spi>
 8005422:	4603      	mov	r3, r0
 8005424:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da05      	bge.n	800543a <send_cmd+0xd4>
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3b01      	subs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <send_cmd+0xb6>

	return res;							/* Return received response */
 800543a:	7bbb      	ldrb	r3, [r7, #14]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <USER_SPI_initialize+0x14>
 8005454:	2301      	movs	r3, #1
 8005456:	e0d6      	b.n	8005606 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005458:	4b6d      	ldr	r3, [pc, #436]	@ (8005610 <USER_SPI_initialize+0x1cc>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <USER_SPI_initialize+0x2a>
 8005466:	4b6a      	ldr	r3, [pc, #424]	@ (8005610 <USER_SPI_initialize+0x1cc>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	e0cb      	b.n	8005606 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800546e:	4b69      	ldr	r3, [pc, #420]	@ (8005614 <USER_SPI_initialize+0x1d0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005478:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <USER_SPI_initialize+0x1d0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005480:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005482:	230a      	movs	r3, #10
 8005484:	73fb      	strb	r3, [r7, #15]
 8005486:	e005      	b.n	8005494 <USER_SPI_initialize+0x50>
 8005488:	20ff      	movs	r0, #255	@ 0xff
 800548a:	f7ff fe7f 	bl	800518c <xchg_spi>
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	3b01      	subs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f6      	bne.n	8005488 <USER_SPI_initialize+0x44>

	ty = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800549e:	2100      	movs	r1, #0
 80054a0:	2000      	movs	r0, #0
 80054a2:	f7ff ff60 	bl	8005366 <send_cmd>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	f040 808b 	bne.w	80055c4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80054ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054b2:	f7ff fe41 	bl	8005138 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80054b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80054ba:	2008      	movs	r0, #8
 80054bc:	f7ff ff53 	bl	8005366 <send_cmd>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d151      	bne.n	800556a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
 80054ca:	e00d      	b.n	80054e8 <USER_SPI_initialize+0xa4>
 80054cc:	7bfc      	ldrb	r4, [r7, #15]
 80054ce:	20ff      	movs	r0, #255	@ 0xff
 80054d0:	f7ff fe5c 	bl	800518c <xchg_spi>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	f104 0310 	add.w	r3, r4, #16
 80054dc:	443b      	add	r3, r7
 80054de:	f803 2c08 	strb.w	r2, [r3, #-8]
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	3301      	adds	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d9ee      	bls.n	80054cc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80054ee:	7abb      	ldrb	r3, [r7, #10]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d167      	bne.n	80055c4 <USER_SPI_initialize+0x180>
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	2baa      	cmp	r3, #170	@ 0xaa
 80054f8:	d164      	bne.n	80055c4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80054fa:	bf00      	nop
 80054fc:	f7ff fe30 	bl	8005160 <SPI_Timer_Status>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <USER_SPI_initialize+0xd2>
 8005506:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800550a:	20a9      	movs	r0, #169	@ 0xa9
 800550c:	f7ff ff2b 	bl	8005366 <send_cmd>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f2      	bne.n	80054fc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005516:	f7ff fe23 	bl	8005160 <SPI_Timer_Status>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d051      	beq.n	80055c4 <USER_SPI_initialize+0x180>
 8005520:	2100      	movs	r1, #0
 8005522:	203a      	movs	r0, #58	@ 0x3a
 8005524:	f7ff ff1f 	bl	8005366 <send_cmd>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d14a      	bne.n	80055c4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
 8005532:	e00d      	b.n	8005550 <USER_SPI_initialize+0x10c>
 8005534:	7bfc      	ldrb	r4, [r7, #15]
 8005536:	20ff      	movs	r0, #255	@ 0xff
 8005538:	f7ff fe28 	bl	800518c <xchg_spi>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	f104 0310 	add.w	r3, r4, #16
 8005544:	443b      	add	r3, r7
 8005546:	f803 2c08 	strb.w	r2, [r3, #-8]
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	3301      	adds	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d9ee      	bls.n	8005534 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005556:	7a3b      	ldrb	r3, [r7, #8]
 8005558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <USER_SPI_initialize+0x120>
 8005560:	230c      	movs	r3, #12
 8005562:	e000      	b.n	8005566 <USER_SPI_initialize+0x122>
 8005564:	2304      	movs	r3, #4
 8005566:	737b      	strb	r3, [r7, #13]
 8005568:	e02c      	b.n	80055c4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800556a:	2100      	movs	r1, #0
 800556c:	20a9      	movs	r0, #169	@ 0xa9
 800556e:	f7ff fefa 	bl	8005366 <send_cmd>
 8005572:	4603      	mov	r3, r0
 8005574:	2b01      	cmp	r3, #1
 8005576:	d804      	bhi.n	8005582 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005578:	2302      	movs	r3, #2
 800557a:	737b      	strb	r3, [r7, #13]
 800557c:	23a9      	movs	r3, #169	@ 0xa9
 800557e:	73bb      	strb	r3, [r7, #14]
 8005580:	e003      	b.n	800558a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005582:	2301      	movs	r3, #1
 8005584:	737b      	strb	r3, [r7, #13]
 8005586:	2301      	movs	r3, #1
 8005588:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800558a:	bf00      	nop
 800558c:	f7ff fde8 	bl	8005160 <SPI_Timer_Status>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <USER_SPI_initialize+0x162>
 8005596:	7bbb      	ldrb	r3, [r7, #14]
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fee3 	bl	8005366 <send_cmd>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f2      	bne.n	800558c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80055a6:	f7ff fddb 	bl	8005160 <SPI_Timer_Status>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <USER_SPI_initialize+0x17c>
 80055b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055b4:	2010      	movs	r0, #16
 80055b6:	f7ff fed6 	bl	8005366 <send_cmd>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <USER_SPI_initialize+0x180>
				ty = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80055c4:	4a14      	ldr	r2, [pc, #80]	@ (8005618 <USER_SPI_initialize+0x1d4>)
 80055c6:	7b7b      	ldrb	r3, [r7, #13]
 80055c8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80055ca:	f7ff fe49 	bl	8005260 <despiselect>

	if (ty) {			/* OK */
 80055ce:	7b7b      	ldrb	r3, [r7, #13]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80055d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <USER_SPI_initialize+0x1d0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <USER_SPI_initialize+0x1d0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0210 	orr.w	r2, r2, #16
 80055e6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80055e8:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <USER_SPI_initialize+0x1cc>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <USER_SPI_initialize+0x1cc>)
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e002      	b.n	8005600 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80055fa:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <USER_SPI_initialize+0x1cc>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005600:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <USER_SPI_initialize+0x1cc>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b2db      	uxtb	r3, r3
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	bd90      	pop	{r4, r7, pc}
 800560e:	bf00      	nop
 8005610:	2000002c 	.word	0x2000002c
 8005614:	200039a0 	.word	0x200039a0
 8005618:	20003a50 	.word	0x20003a50

0800561c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <USER_SPI_status+0x14>
 800562c:	2301      	movs	r3, #1
 800562e:	e002      	b.n	8005636 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005630:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <USER_SPI_status+0x28>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	b2db      	uxtb	r3, r3
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	2000002c 	.word	0x2000002c

08005648 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4603      	mov	r3, r0
 8005656:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d102      	bne.n	8005664 <USER_SPI_read+0x1c>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <USER_SPI_read+0x20>
 8005664:	2304      	movs	r3, #4
 8005666:	e04d      	b.n	8005704 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005668:	4b28      	ldr	r3, [pc, #160]	@ (800570c <USER_SPI_read+0xc4>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <USER_SPI_read+0x32>
 8005676:	2303      	movs	r3, #3
 8005678:	e044      	b.n	8005704 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800567a:	4b25      	ldr	r3, [pc, #148]	@ (8005710 <USER_SPI_read+0xc8>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <USER_SPI_read+0x44>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	025b      	lsls	r3, r3, #9
 800568a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d111      	bne.n	80056b6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	2011      	movs	r0, #17
 8005696:	f7ff fe66 	bl	8005366 <send_cmd>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d129      	bne.n	80056f4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80056a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80056a4:	68b8      	ldr	r0, [r7, #8]
 80056a6:	f7ff fe03 	bl	80052b0 <rcvr_datablock>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d021      	beq.n	80056f4 <USER_SPI_read+0xac>
			count = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	e01e      	b.n	80056f4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	2012      	movs	r0, #18
 80056ba:	f7ff fe54 	bl	8005366 <send_cmd>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d117      	bne.n	80056f4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80056c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80056c8:	68b8      	ldr	r0, [r7, #8]
 80056ca:	f7ff fdf1 	bl	80052b0 <rcvr_datablock>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <USER_SPI_read+0xa2>
				buff += 512;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80056da:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	3b01      	subs	r3, #1
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ed      	bne.n	80056c4 <USER_SPI_read+0x7c>
 80056e8:	e000      	b.n	80056ec <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80056ea:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80056ec:	2100      	movs	r1, #0
 80056ee:	200c      	movs	r0, #12
 80056f0:	f7ff fe39 	bl	8005366 <send_cmd>
		}
	}
	despiselect();
 80056f4:	f7ff fdb4 	bl	8005260 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	b2db      	uxtb	r3, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	2000002c 	.word	0x2000002c
 8005710:	20003a50 	.word	0x20003a50

08005714 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <USER_SPI_write+0x1c>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <USER_SPI_write+0x20>
 8005730:	2304      	movs	r3, #4
 8005732:	e063      	b.n	80057fc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005734:	4b33      	ldr	r3, [pc, #204]	@ (8005804 <USER_SPI_write+0xf0>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <USER_SPI_write+0x32>
 8005742:	2303      	movs	r3, #3
 8005744:	e05a      	b.n	80057fc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005746:	4b2f      	ldr	r3, [pc, #188]	@ (8005804 <USER_SPI_write+0xf0>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <USER_SPI_write+0x44>
 8005754:	2302      	movs	r3, #2
 8005756:	e051      	b.n	80057fc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005758:	4b2b      	ldr	r3, [pc, #172]	@ (8005808 <USER_SPI_write+0xf4>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <USER_SPI_write+0x56>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	025b      	lsls	r3, r3, #9
 8005768:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d110      	bne.n	8005792 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	2018      	movs	r0, #24
 8005774:	f7ff fdf7 	bl	8005366 <send_cmd>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d136      	bne.n	80057ec <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800577e:	21fe      	movs	r1, #254	@ 0xfe
 8005780:	68b8      	ldr	r0, [r7, #8]
 8005782:	f7ff fdbe 	bl	8005302 <xmit_datablock>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02f      	beq.n	80057ec <USER_SPI_write+0xd8>
			count = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	e02c      	b.n	80057ec <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005792:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <USER_SPI_write+0xf4>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f003 0306 	and.w	r3, r3, #6
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <USER_SPI_write+0x92>
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	2097      	movs	r0, #151	@ 0x97
 80057a2:	f7ff fde0 	bl	8005366 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	2019      	movs	r0, #25
 80057aa:	f7ff fddc 	bl	8005366 <send_cmd>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11b      	bne.n	80057ec <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80057b4:	21fc      	movs	r1, #252	@ 0xfc
 80057b6:	68b8      	ldr	r0, [r7, #8]
 80057b8:	f7ff fda3 	bl	8005302 <xmit_datablock>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <USER_SPI_write+0xc4>
				buff += 512;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80057c8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1ee      	bne.n	80057b4 <USER_SPI_write+0xa0>
 80057d6:	e000      	b.n	80057da <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80057d8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80057da:	21fd      	movs	r1, #253	@ 0xfd
 80057dc:	2000      	movs	r0, #0
 80057de:	f7ff fd90 	bl	8005302 <xmit_datablock>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <USER_SPI_write+0xd8>
 80057e8:	2301      	movs	r3, #1
 80057ea:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80057ec:	f7ff fd38 	bl	8005260 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	2000002c 	.word	0x2000002c
 8005808:	20003a50 	.word	0x20003a50

0800580c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08c      	sub	sp, #48	@ 0x30
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	603a      	str	r2, [r7, #0]
 8005816:	71fb      	strb	r3, [r7, #7]
 8005818:	460b      	mov	r3, r1
 800581a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <USER_SPI_ioctl+0x1a>
 8005822:	2304      	movs	r3, #4
 8005824:	e15a      	b.n	8005adc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005826:	4baf      	ldr	r3, [pc, #700]	@ (8005ae4 <USER_SPI_ioctl+0x2d8>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <USER_SPI_ioctl+0x2c>
 8005834:	2303      	movs	r3, #3
 8005836:	e151      	b.n	8005adc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800583e:	79bb      	ldrb	r3, [r7, #6]
 8005840:	2b04      	cmp	r3, #4
 8005842:	f200 8136 	bhi.w	8005ab2 <USER_SPI_ioctl+0x2a6>
 8005846:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <USER_SPI_ioctl+0x40>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005861 	.word	0x08005861
 8005850:	08005875 	.word	0x08005875
 8005854:	08005ab3 	.word	0x08005ab3
 8005858:	08005921 	.word	0x08005921
 800585c:	08005a17 	.word	0x08005a17
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005860:	f7ff fd0c 	bl	800527c <spiselect>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8127 	beq.w	8005aba <USER_SPI_ioctl+0x2ae>
 800586c:	2300      	movs	r3, #0
 800586e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005872:	e122      	b.n	8005aba <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005874:	2100      	movs	r1, #0
 8005876:	2009      	movs	r0, #9
 8005878:	f7ff fd75 	bl	8005366 <send_cmd>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	f040 811d 	bne.w	8005abe <USER_SPI_ioctl+0x2b2>
 8005884:	f107 030c 	add.w	r3, r7, #12
 8005888:	2110      	movs	r1, #16
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fd10 	bl	80052b0 <rcvr_datablock>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8113 	beq.w	8005abe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005898:	7b3b      	ldrb	r3, [r7, #12]
 800589a:	099b      	lsrs	r3, r3, #6
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d111      	bne.n	80058c6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80058a2:	7d7b      	ldrb	r3, [r7, #21]
 80058a4:	461a      	mov	r2, r3
 80058a6:	7d3b      	ldrb	r3, [r7, #20]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	4413      	add	r3, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	7cfb      	ldrb	r3, [r7, #19]
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80058b6:	4413      	add	r3, r2
 80058b8:	3301      	adds	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	029a      	lsls	r2, r3, #10
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e028      	b.n	8005918 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80058c6:	7c7b      	ldrb	r3, [r7, #17]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	7dbb      	ldrb	r3, [r7, #22]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	7d7b      	ldrb	r3, [r7, #21]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0306 	and.w	r3, r3, #6
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	3302      	adds	r3, #2
 80058ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80058ee:	7d3b      	ldrb	r3, [r7, #20]
 80058f0:	099b      	lsrs	r3, r3, #6
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	7cfb      	ldrb	r3, [r7, #19]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	7cbb      	ldrb	r3, [r7, #18]
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005904:	4413      	add	r3, r2
 8005906:	3301      	adds	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800590a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800590e:	3b09      	subs	r3, #9
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	409a      	lsls	r2, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800591e:	e0ce      	b.n	8005abe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005920:	4b71      	ldr	r3, [pc, #452]	@ (8005ae8 <USER_SPI_ioctl+0x2dc>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d031      	beq.n	8005990 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800592c:	2100      	movs	r1, #0
 800592e:	208d      	movs	r0, #141	@ 0x8d
 8005930:	f7ff fd19 	bl	8005366 <send_cmd>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 80c3 	bne.w	8005ac2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800593c:	20ff      	movs	r0, #255	@ 0xff
 800593e:	f7ff fc25 	bl	800518c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	2110      	movs	r1, #16
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fcb1 	bl	80052b0 <rcvr_datablock>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80b6 	beq.w	8005ac2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005956:	2330      	movs	r3, #48	@ 0x30
 8005958:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800595c:	e007      	b.n	800596e <USER_SPI_ioctl+0x162>
 800595e:	20ff      	movs	r0, #255	@ 0xff
 8005960:	f7ff fc14 	bl	800518c <xchg_spi>
 8005964:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005968:	3b01      	subs	r3, #1
 800596a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800596e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f3      	bne.n	800595e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005976:	7dbb      	ldrb	r3, [r7, #22]
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	b2db      	uxtb	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	2310      	movs	r3, #16
 8005980:	fa03 f202 	lsl.w	r2, r3, r2
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800598e:	e098      	b.n	8005ac2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005990:	2100      	movs	r1, #0
 8005992:	2009      	movs	r0, #9
 8005994:	f7ff fce7 	bl	8005366 <send_cmd>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 8091 	bne.w	8005ac2 <USER_SPI_ioctl+0x2b6>
 80059a0:	f107 030c 	add.w	r3, r7, #12
 80059a4:	2110      	movs	r1, #16
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fc82 	bl	80052b0 <rcvr_datablock>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8087 	beq.w	8005ac2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80059b4:	4b4c      	ldr	r3, [pc, #304]	@ (8005ae8 <USER_SPI_ioctl+0x2dc>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d012      	beq.n	80059e6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80059c0:	7dbb      	ldrb	r3, [r7, #22]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80059c8:	7dfa      	ldrb	r2, [r7, #23]
 80059ca:	09d2      	lsrs	r2, r2, #7
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	4413      	add	r3, r2
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	7e7b      	ldrb	r3, [r7, #25]
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e013      	b.n	8005a0e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80059e6:	7dbb      	ldrb	r3, [r7, #22]
 80059e8:	109b      	asrs	r3, r3, #2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	3301      	adds	r3, #1
 80059f2:	7dfa      	ldrb	r2, [r7, #23]
 80059f4:	00d2      	lsls	r2, r2, #3
 80059f6:	f002 0218 	and.w	r2, r2, #24
 80059fa:	7df9      	ldrb	r1, [r7, #23]
 80059fc:	0949      	lsrs	r1, r1, #5
 80059fe:	b2c9      	uxtb	r1, r1
 8005a00:	440a      	add	r2, r1
 8005a02:	3201      	adds	r2, #1
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005a14:	e055      	b.n	8005ac2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005a16:	4b34      	ldr	r3, [pc, #208]	@ (8005ae8 <USER_SPI_ioctl+0x2dc>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	f003 0306 	and.w	r3, r3, #6
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d051      	beq.n	8005ac6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005a22:	f107 020c 	add.w	r2, r7, #12
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	210b      	movs	r1, #11
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff feee 	bl	800580c <USER_SPI_ioctl>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d149      	bne.n	8005aca <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005a36:	7b3b      	ldrb	r3, [r7, #12]
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <USER_SPI_ioctl+0x23e>
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d041      	beq.n	8005ace <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005a5a:	4b23      	ldr	r3, [pc, #140]	@ (8005ae8 <USER_SPI_ioctl+0x2dc>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	025b      	lsls	r3, r3, #9
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	025b      	lsls	r3, r3, #9
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005a72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a74:	2020      	movs	r0, #32
 8005a76:	f7ff fc76 	bl	8005366 <send_cmd>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d128      	bne.n	8005ad2 <USER_SPI_ioctl+0x2c6>
 8005a80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a82:	2021      	movs	r0, #33	@ 0x21
 8005a84:	f7ff fc6f 	bl	8005366 <send_cmd>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d121      	bne.n	8005ad2 <USER_SPI_ioctl+0x2c6>
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2026      	movs	r0, #38	@ 0x26
 8005a92:	f7ff fc68 	bl	8005366 <send_cmd>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d11a      	bne.n	8005ad2 <USER_SPI_ioctl+0x2c6>
 8005a9c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005aa0:	f7ff fbba 	bl	8005218 <wait_ready>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005ab0:	e00f      	b.n	8005ad2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005ab8:	e00c      	b.n	8005ad4 <USER_SPI_ioctl+0x2c8>
		break;
 8005aba:	bf00      	nop
 8005abc:	e00a      	b.n	8005ad4 <USER_SPI_ioctl+0x2c8>
		break;
 8005abe:	bf00      	nop
 8005ac0:	e008      	b.n	8005ad4 <USER_SPI_ioctl+0x2c8>
		break;
 8005ac2:	bf00      	nop
 8005ac4:	e006      	b.n	8005ad4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005ac6:	bf00      	nop
 8005ac8:	e004      	b.n	8005ad4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005aca:	bf00      	nop
 8005acc:	e002      	b.n	8005ad4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <USER_SPI_ioctl+0x2c8>
		break;
 8005ad2:	bf00      	nop
	}

	despiselect();
 8005ad4:	f7ff fbc4 	bl	8005260 <despiselect>

	return res;
 8005ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3730      	adds	r7, #48	@ 0x30
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	2000002c 	.word	0x2000002c
 8005ae8:	20003a50 	.word	0x20003a50

08005aec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	4a08      	ldr	r2, [pc, #32]	@ (8005b1c <disk_status+0x30>)
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	79fa      	ldrb	r2, [r7, #7]
 8005b04:	4905      	ldr	r1, [pc, #20]	@ (8005b1c <disk_status+0x30>)
 8005b06:	440a      	add	r2, r1
 8005b08:	7a12      	ldrb	r2, [r2, #8]
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4798      	blx	r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20003a84 	.word	0x20003a84

08005b20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	4a0e      	ldr	r2, [pc, #56]	@ (8005b6c <disk_initialize+0x4c>)
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d114      	bne.n	8005b62 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b6c <disk_initialize+0x4c>)
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	79fa      	ldrb	r2, [r7, #7]
 8005b46:	4909      	ldr	r1, [pc, #36]	@ (8005b6c <disk_initialize+0x4c>)
 8005b48:	440a      	add	r2, r1
 8005b4a:	7a12      	ldrb	r2, [r2, #8]
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	4a03      	ldr	r2, [pc, #12]	@ (8005b6c <disk_initialize+0x4c>)
 8005b5e:	2101      	movs	r1, #1
 8005b60:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20003a84 	.word	0x20003a84

08005b70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <disk_read+0x3c>)
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	689c      	ldr	r4, [r3, #8]
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	4a07      	ldr	r2, [pc, #28]	@ (8005bac <disk_read+0x3c>)
 8005b90:	4413      	add	r3, r2
 8005b92:	7a18      	ldrb	r0, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	47a0      	blx	r4
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd90      	pop	{r4, r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20003a84 	.word	0x20003a84

08005bb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <disk_write+0x3c>)
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	68dc      	ldr	r4, [r3, #12]
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4a07      	ldr	r2, [pc, #28]	@ (8005bec <disk_write+0x3c>)
 8005bd0:	4413      	add	r3, r2
 8005bd2:	7a18      	ldrb	r0, [r3, #8]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	47a0      	blx	r4
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]
  return res;
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd90      	pop	{r4, r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20003a84 	.word	0x20003a84

08005bf0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	b21a      	sxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c14:	89fb      	ldrh	r3, [r7, #14]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	3202      	adds	r2, #2
 8005c3a:	7812      	ldrb	r2, [r2, #0]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	3201      	adds	r2, #1
 8005c48:	7812      	ldrb	r2, [r2, #0]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	7812      	ldrb	r2, [r2, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	887a      	ldrh	r2, [r7, #2]
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	887b      	ldrh	r3, [r7, #2]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	887a      	ldrh	r2, [r7, #2]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005cf6:	b480      	push	{r7}
 8005cf8:	b087      	sub	sp, #28
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	1c53      	adds	r3, r2, #1
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	1c59      	adds	r1, r3, #1
 8005d1a:	6179      	str	r1, [r7, #20]
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f1      	bne.n	8005d10 <mem_cpy+0x1a>
	}
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	617a      	str	r2, [r7, #20]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f3      	bne.n	8005d48 <mem_set+0x10>
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005d6e:	b480      	push	{r7}
 8005d70:	b089      	sub	sp, #36	@ 0x24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	61fa      	str	r2, [r7, #28]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	61ba      	str	r2, [r7, #24]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	1acb      	subs	r3, r1, r3
 8005d9a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <mem_cmp+0x40>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0eb      	beq.n	8005d86 <mem_cmp+0x18>

	return r;
 8005dae:	697b      	ldr	r3, [r7, #20]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3724      	adds	r7, #36	@ 0x24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005dc6:	e002      	b.n	8005dce <chk_chr+0x12>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <chk_chr+0x26>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d1f2      	bne.n	8005dc8 <chk_chr+0xc>
	return *str;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	781b      	ldrb	r3, [r3, #0]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e029      	b.n	8005e5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e08:	4a27      	ldr	r2, [pc, #156]	@ (8005ea8 <chk_lock+0xb4>)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	4413      	add	r3, r2
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01d      	beq.n	8005e52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e16:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <chk_lock+0xb4>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	4413      	add	r3, r2
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d116      	bne.n	8005e56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea8 <chk_lock+0xb4>)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d10c      	bne.n	8005e56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea8 <chk_lock+0xb4>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	4413      	add	r3, r2
 8005e44:	3308      	adds	r3, #8
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d102      	bne.n	8005e56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e50:	e007      	b.n	8005e62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005e52:	2301      	movs	r3, #1
 8005e54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d9d2      	bls.n	8005e08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d109      	bne.n	8005e7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <chk_lock+0x80>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d101      	bne.n	8005e78 <chk_lock+0x84>
 8005e74:	2300      	movs	r3, #0
 8005e76:	e010      	b.n	8005e9a <chk_lock+0xa6>
 8005e78:	2312      	movs	r3, #18
 8005e7a:	e00e      	b.n	8005e9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d108      	bne.n	8005e94 <chk_lock+0xa0>
 8005e82:	4a09      	ldr	r2, [pc, #36]	@ (8005ea8 <chk_lock+0xb4>)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	4413      	add	r3, r2
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e92:	d101      	bne.n	8005e98 <chk_lock+0xa4>
 8005e94:	2310      	movs	r3, #16
 8005e96:	e000      	b.n	8005e9a <chk_lock+0xa6>
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20003a64 	.word	0x20003a64

08005eac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	607b      	str	r3, [r7, #4]
 8005eb6:	e002      	b.n	8005ebe <enq_lock+0x12>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	607b      	str	r3, [r7, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d806      	bhi.n	8005ed2 <enq_lock+0x26>
 8005ec4:	4a09      	ldr	r2, [pc, #36]	@ (8005eec <enq_lock+0x40>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	4413      	add	r3, r2
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f2      	bne.n	8005eb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20003a64 	.word	0x20003a64

08005ef0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e01f      	b.n	8005f40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f00:	4a41      	ldr	r2, [pc, #260]	@ (8006008 <inc_lock+0x118>)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	4413      	add	r3, r2
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d113      	bne.n	8005f3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f12:	4a3d      	ldr	r2, [pc, #244]	@ (8006008 <inc_lock+0x118>)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	4413      	add	r3, r2
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d109      	bne.n	8005f3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f26:	4a38      	ldr	r2, [pc, #224]	@ (8006008 <inc_lock+0x118>)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3308      	adds	r3, #8
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d006      	beq.n	8005f48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d9dc      	bls.n	8005f00 <inc_lock+0x10>
 8005f46:	e000      	b.n	8005f4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005f48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d132      	bne.n	8005fb6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <inc_lock+0x6c>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d806      	bhi.n	8005f70 <inc_lock+0x80>
 8005f62:	4a29      	ldr	r2, [pc, #164]	@ (8006008 <inc_lock+0x118>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	4413      	add	r3, r2
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1f2      	bne.n	8005f56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d101      	bne.n	8005f7a <inc_lock+0x8a>
 8005f76:	2300      	movs	r3, #0
 8005f78:	e040      	b.n	8005ffc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4922      	ldr	r1, [pc, #136]	@ (8006008 <inc_lock+0x118>)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	440b      	add	r3, r1
 8005f86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	491e      	ldr	r1, [pc, #120]	@ (8006008 <inc_lock+0x118>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	440b      	add	r3, r1
 8005f94:	3304      	adds	r3, #4
 8005f96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	491a      	ldr	r1, [pc, #104]	@ (8006008 <inc_lock+0x118>)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005fa8:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <inc_lock+0x118>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	4413      	add	r3, r2
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <inc_lock+0xe0>
 8005fbc:	4a12      	ldr	r2, [pc, #72]	@ (8006008 <inc_lock+0x118>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	4413      	add	r3, r2
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <inc_lock+0xe0>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e015      	b.n	8005ffc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d108      	bne.n	8005fe8 <inc_lock+0xf8>
 8005fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006008 <inc_lock+0x118>)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	4413      	add	r3, r2
 8005fde:	330c      	adds	r3, #12
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	e001      	b.n	8005fec <inc_lock+0xfc>
 8005fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fec:	4906      	ldr	r1, [pc, #24]	@ (8006008 <inc_lock+0x118>)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	440b      	add	r3, r1
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	20003a64 	.word	0x20003a64

0800600c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e010      	b.n	800603c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800601a:	4a0d      	ldr	r2, [pc, #52]	@ (8006050 <clear_lock+0x44>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	4413      	add	r3, r2
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	429a      	cmp	r2, r3
 8006028:	d105      	bne.n	8006036 <clear_lock+0x2a>
 800602a:	4a09      	ldr	r2, [pc, #36]	@ (8006050 <clear_lock+0x44>)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	4413      	add	r3, r2
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3301      	adds	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d9eb      	bls.n	800601a <clear_lock+0xe>
	}
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	20003a64 	.word	0x20003a64

08006054 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	78db      	ldrb	r3, [r3, #3]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d034      	beq.n	80060d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	7858      	ldrb	r0, [r3, #1]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006078:	2301      	movs	r3, #1
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	f7ff fd98 	bl	8005bb0 <disk_write>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
 800608a:	e022      	b.n	80060d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	1ad2      	subs	r2, r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d217      	bcs.n	80060d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	789b      	ldrb	r3, [r3, #2]
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	e010      	b.n	80060cc <sync_window+0x78>
					wsect += fs->fsize;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7858      	ldrb	r0, [r3, #1]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060be:	2301      	movs	r3, #1
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	f7ff fd75 	bl	8005bb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d8eb      	bhi.n	80060aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d01b      	beq.n	800612c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ffad 	bl	8006054 <sync_window>
 80060fa:	4603      	mov	r3, r0
 80060fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d113      	bne.n	800612c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	7858      	ldrb	r0, [r3, #1]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800610e:	2301      	movs	r3, #1
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	f7ff fd2d 	bl	8005b70 <disk_read>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006122:	2301      	movs	r3, #1
 8006124:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	3b02      	subs	r3, #2
 8006144:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	3b02      	subs	r3, #2
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d301      	bcc.n	8006156 <clust2sect+0x20>
 8006152:	2300      	movs	r3, #0
 8006154:	e008      	b.n	8006168 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	895b      	ldrh	r3, [r3, #10]
 800615a:	461a      	mov	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	fb03 f202 	mul.w	r2, r3, r2
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006166:	4413      	add	r3, r2
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d904      	bls.n	8006194 <get_fat+0x20>
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <get_fat+0x26>
		val = 1;	/* Internal error */
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e08e      	b.n	80062b8 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d061      	beq.n	800626c <get_fat+0xf8>
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	dc7b      	bgt.n	80062a4 <get_fat+0x130>
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d002      	beq.n	80061b6 <get_fat+0x42>
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d041      	beq.n	8006238 <get_fat+0xc4>
 80061b4:	e076      	b.n	80062a4 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	085b      	lsrs	r3, r3, #1
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	0a5b      	lsrs	r3, r3, #9
 80061cc:	4413      	add	r3, r2
 80061ce:	4619      	mov	r1, r3
 80061d0:	6938      	ldr	r0, [r7, #16]
 80061d2:	f7ff ff83 	bl	80060dc <move_window>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d166      	bne.n	80062aa <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	60fa      	str	r2, [r7, #12]
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	0a5b      	lsrs	r3, r3, #9
 80061f8:	4413      	add	r3, r2
 80061fa:	4619      	mov	r1, r3
 80061fc:	6938      	ldr	r0, [r7, #16]
 80061fe:	f7ff ff6d 	bl	80060dc <move_window>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d152      	bne.n	80062ae <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4413      	add	r3, r2
 8006212:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	4313      	orrs	r3, r2
 800621c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <get_fat+0xba>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	e002      	b.n	8006234 <get_fat+0xc0>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006234:	617b      	str	r3, [r7, #20]
			break;
 8006236:	e03f      	b.n	80062b8 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	6a1a      	ldr	r2, [r3, #32]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	4413      	add	r3, r2
 8006242:	4619      	mov	r1, r3
 8006244:	6938      	ldr	r0, [r7, #16]
 8006246:	f7ff ff49 	bl	80060dc <move_window>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d130      	bne.n	80062b2 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800625e:	4413      	add	r3, r2
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fcc5 	bl	8005bf0 <ld_word>
 8006266:	4603      	mov	r3, r0
 8006268:	617b      	str	r3, [r7, #20]
			break;
 800626a:	e025      	b.n	80062b8 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	6a1a      	ldr	r2, [r3, #32]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	4413      	add	r3, r2
 8006276:	4619      	mov	r1, r3
 8006278:	6938      	ldr	r0, [r7, #16]
 800627a:	f7ff ff2f 	bl	80060dc <move_window>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d118      	bne.n	80062b6 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006292:	4413      	add	r3, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fcc4 	bl	8005c22 <ld_dword>
 800629a:	4603      	mov	r3, r0
 800629c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80062a0:	617b      	str	r3, [r7, #20]
			break;
 80062a2:	e009      	b.n	80062b8 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80062a4:	2301      	movs	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e006      	b.n	80062b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062aa:	bf00      	nop
 80062ac:	e004      	b.n	80062b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062ae:	bf00      	nop
 80062b0:	e002      	b.n	80062b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062b6:	bf00      	nop
		}
	}

	return val;
 80062b8:	697b      	ldr	r3, [r7, #20]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80062c2:	b590      	push	{r4, r7, lr}
 80062c4:	b089      	sub	sp, #36	@ 0x24
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80062ce:	2302      	movs	r3, #2
 80062d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f240 80d9 	bls.w	800648c <put_fat+0x1ca>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	f080 80d3 	bcs.w	800648c <put_fat+0x1ca>
		switch (fs->fs_type) {
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	f000 8096 	beq.w	800641c <put_fat+0x15a>
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	f300 80cb 	bgt.w	800648c <put_fat+0x1ca>
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d002      	beq.n	8006300 <put_fat+0x3e>
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d06e      	beq.n	80063dc <put_fat+0x11a>
 80062fe:	e0c5      	b.n	800648c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4413      	add	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	4413      	add	r3, r2
 8006318:	4619      	mov	r1, r3
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fede 	bl	80060dc <move_window>
 8006320:	4603      	mov	r3, r0
 8006322:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006324:	7ffb      	ldrb	r3, [r7, #31]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 80a9 	bne.w	800647e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	61b9      	str	r1, [r7, #24]
 8006338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633c:	4413      	add	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <put_fat+0xa4>
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b25b      	sxtb	r3, r3
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	b25a      	sxtb	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	b25b      	sxtb	r3, r3
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	b25b      	sxtb	r3, r3
 800635e:	4313      	orrs	r3, r2
 8006360:	b25b      	sxtb	r3, r3
 8006362:	b2db      	uxtb	r3, r3
 8006364:	e001      	b.n	800636a <put_fat+0xa8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	0a5b      	lsrs	r3, r3, #9
 800637c:	4413      	add	r3, r2
 800637e:	4619      	mov	r1, r3
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f7ff feab 	bl	80060dc <move_window>
 8006386:	4603      	mov	r3, r0
 8006388:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800638a:	7ffb      	ldrb	r3, [r7, #31]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d178      	bne.n	8006482 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639c:	4413      	add	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <put_fat+0xf0>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	e00e      	b.n	80063d0 <put_fat+0x10e>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	b25b      	sxtb	r3, r3
 80063b8:	f023 030f 	bic.w	r3, r3, #15
 80063bc:	b25a      	sxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	b25b      	sxtb	r3, r3
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	b25b      	sxtb	r3, r3
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b25b      	sxtb	r3, r3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	70da      	strb	r2, [r3, #3]
			break;
 80063da:	e057      	b.n	800648c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	0a1b      	lsrs	r3, r3, #8
 80063e4:	4413      	add	r3, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff fe77 	bl	80060dc <move_window>
 80063ee:	4603      	mov	r3, r0
 80063f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063f2:	7ffb      	ldrb	r3, [r7, #31]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d146      	bne.n	8006486 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006406:	4413      	add	r3, r2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	b292      	uxth	r2, r2
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fc2a 	bl	8005c68 <st_word>
			fs->wflag = 1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	70da      	strb	r2, [r3, #3]
			break;
 800641a:	e037      	b.n	800648c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	09db      	lsrs	r3, r3, #7
 8006424:	4413      	add	r3, r2
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff fe57 	bl	80060dc <move_window>
 800642e:	4603      	mov	r3, r0
 8006430:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006432:	7ffb      	ldrb	r3, [r7, #31]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d128      	bne.n	800648a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800644c:	4413      	add	r3, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fbe7 	bl	8005c22 <ld_dword>
 8006454:	4603      	mov	r3, r0
 8006456:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800645a:	4323      	orrs	r3, r4
 800645c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800646c:	4413      	add	r3, r2
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fc14 	bl	8005c9e <st_dword>
			fs->wflag = 1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	70da      	strb	r2, [r3, #3]
			break;
 800647c:	e006      	b.n	800648c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800647e:	bf00      	nop
 8006480:	e004      	b.n	800648c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006482:	bf00      	nop
 8006484:	e002      	b.n	800648c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800648a:	bf00      	nop
		}
	}
	return res;
 800648c:	7ffb      	ldrb	r3, [r7, #31]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3724      	adds	r7, #36	@ 0x24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd90      	pop	{r4, r7, pc}

08006496 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d904      	bls.n	80064bc <remove_chain+0x26>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d301      	bcc.n	80064c0 <remove_chain+0x2a>
 80064bc:	2302      	movs	r3, #2
 80064be:	e04b      	b.n	8006558 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00c      	beq.n	80064e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80064c6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	69b8      	ldr	r0, [r7, #24]
 80064ce:	f7ff fef8 	bl	80062c2 <put_fat>
 80064d2:	4603      	mov	r3, r0
 80064d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <remove_chain+0x4a>
 80064dc:	7ffb      	ldrb	r3, [r7, #31]
 80064de:	e03b      	b.n	8006558 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7ff fe46 	bl	8006174 <get_fat>
 80064e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d031      	beq.n	8006554 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <remove_chain+0x64>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e02e      	b.n	8006558 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d101      	bne.n	8006506 <remove_chain+0x70>
 8006502:	2301      	movs	r3, #1
 8006504:	e028      	b.n	8006558 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006506:	2200      	movs	r2, #0
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	69b8      	ldr	r0, [r7, #24]
 800650c:	f7ff fed9 	bl	80062c2 <put_fat>
 8006510:	4603      	mov	r3, r0
 8006512:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006514:	7ffb      	ldrb	r3, [r7, #31]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <remove_chain+0x88>
 800651a:	7ffb      	ldrb	r3, [r7, #31]
 800651c:	e01c      	b.n	8006558 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	3b02      	subs	r3, #2
 8006528:	429a      	cmp	r2, r3
 800652a:	d20b      	bcs.n	8006544 <remove_chain+0xae>
			fs->free_clst++;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	791b      	ldrb	r3, [r3, #4]
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	429a      	cmp	r2, r3
 8006550:	d3c6      	bcc.n	80064e0 <remove_chain+0x4a>
 8006552:	e000      	b.n	8006556 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006554:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10d      	bne.n	8006592 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <create_chain+0x2c>
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	429a      	cmp	r2, r3
 800658a:	d31b      	bcc.n	80065c4 <create_chain+0x64>
 800658c:	2301      	movs	r3, #1
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	e018      	b.n	80065c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff fded 	bl	8006174 <get_fat>
 800659a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d801      	bhi.n	80065a6 <create_chain+0x46>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e070      	b.n	8006688 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d101      	bne.n	80065b2 <create_chain+0x52>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	e06a      	b.n	8006688 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d201      	bcs.n	80065c0 <create_chain+0x60>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	e063      	b.n	8006688 <create_chain+0x128>
		scl = clst;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	3301      	adds	r3, #1
 80065cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d307      	bcc.n	80065e8 <create_chain+0x88>
				ncl = 2;
 80065d8:	2302      	movs	r3, #2
 80065da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d901      	bls.n	80065e8 <create_chain+0x88>
 80065e4:	2300      	movs	r3, #0
 80065e6:	e04f      	b.n	8006688 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fdc2 	bl	8006174 <get_fat>
 80065f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d003      	beq.n	8006606 <create_chain+0xa6>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d101      	bne.n	800660a <create_chain+0xaa>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	e03e      	b.n	8006688 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	429a      	cmp	r2, r3
 8006610:	d1da      	bne.n	80065c8 <create_chain+0x68>
 8006612:	2300      	movs	r3, #0
 8006614:	e038      	b.n	8006688 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006616:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	69f9      	ldr	r1, [r7, #28]
 800661e:	6938      	ldr	r0, [r7, #16]
 8006620:	f7ff fe4f 	bl	80062c2 <put_fat>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <create_chain+0xe2>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d006      	beq.n	8006642 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6938      	ldr	r0, [r7, #16]
 800663a:	f7ff fe42 	bl	80062c2 <put_fat>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <create_chain+0x116>
		fs->last_clst = ncl;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	3b02      	subs	r3, #2
 8006658:	429a      	cmp	r2, r3
 800665a:	d804      	bhi.n	8006666 <create_chain+0x106>
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	1e5a      	subs	r2, r3, #1
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	791b      	ldrb	r3, [r3, #4]
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	b2da      	uxtb	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	711a      	strb	r2, [r3, #4]
 8006674:	e007      	b.n	8006686 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d102      	bne.n	8006682 <create_chain+0x122>
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	e000      	b.n	8006684 <create_chain+0x124>
 8006682:	2301      	movs	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006686:	69fb      	ldr	r3, [r7, #28]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a4:	3304      	adds	r3, #4
 80066a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	0a5b      	lsrs	r3, r3, #9
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	8952      	ldrh	r2, [r2, #10]
 80066b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1d1a      	adds	r2, r3, #4
 80066ba:	613a      	str	r2, [r7, #16]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <clmt_clust+0x3a>
 80066c6:	2300      	movs	r3, #0
 80066c8:	e010      	b.n	80066ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d307      	bcc.n	80066e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3304      	adds	r3, #4
 80066de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066e0:	e7e9      	b.n	80066b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80066e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4413      	add	r3, r2
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800670e:	d204      	bcs.n	800671a <dir_sdi+0x22>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <dir_sdi+0x26>
		return FR_INT_ERR;
 800671a:	2302      	movs	r3, #2
 800671c:	e063      	b.n	80067e6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <dir_sdi+0x46>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d902      	bls.n	800673e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10c      	bne.n	800675e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	8912      	ldrh	r2, [r2, #8]
 800674c:	4293      	cmp	r3, r2
 800674e:	d301      	bcc.n	8006754 <dir_sdi+0x5c>
 8006750:	2302      	movs	r3, #2
 8006752:	e048      	b.n	80067e6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	61da      	str	r2, [r3, #28]
 800675c:	e029      	b.n	80067b2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	895b      	ldrh	r3, [r3, #10]
 8006762:	025b      	lsls	r3, r3, #9
 8006764:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006766:	e019      	b.n	800679c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6979      	ldr	r1, [r7, #20]
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fd01 	bl	8006174 <get_fat>
 8006772:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d101      	bne.n	8006780 <dir_sdi+0x88>
 800677c:	2301      	movs	r3, #1
 800677e:	e032      	b.n	80067e6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d904      	bls.n	8006790 <dir_sdi+0x98>
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	429a      	cmp	r2, r3
 800678e:	d301      	bcc.n	8006794 <dir_sdi+0x9c>
 8006790:	2302      	movs	r3, #2
 8006792:	e028      	b.n	80067e6 <dir_sdi+0xee>
			ofs -= csz;
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d2e1      	bcs.n	8006768 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80067a4:	6979      	ldr	r1, [r7, #20]
 80067a6:	6938      	ldr	r0, [r7, #16]
 80067a8:	f7ff fcc5 	bl	8006136 <clust2sect>
 80067ac:	4602      	mov	r2, r0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <dir_sdi+0xcc>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e010      	b.n	80067e6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	0a5b      	lsrs	r3, r3, #9
 80067cc:	441a      	add	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	441a      	add	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	3320      	adds	r3, #32
 8006804:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <dir_next+0x28>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006814:	d301      	bcc.n	800681a <dir_next+0x2c>
 8006816:	2304      	movs	r3, #4
 8006818:	e0aa      	b.n	8006970 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 8098 	bne.w	8006956 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	8912      	ldrh	r2, [r2, #8]
 8006840:	4293      	cmp	r3, r2
 8006842:	f0c0 8088 	bcc.w	8006956 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	61da      	str	r2, [r3, #28]
 800684c:	2304      	movs	r3, #4
 800684e:	e08f      	b.n	8006970 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	0a5b      	lsrs	r3, r3, #9
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	8952      	ldrh	r2, [r2, #10]
 8006858:	3a01      	subs	r2, #1
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d17a      	bne.n	8006956 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f7ff fc83 	bl	8006174 <get_fat>
 800686e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d801      	bhi.n	800687a <dir_next+0x8c>
 8006876:	2302      	movs	r3, #2
 8006878:	e07a      	b.n	8006970 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d101      	bne.n	8006886 <dir_next+0x98>
 8006882:	2301      	movs	r3, #1
 8006884:	e074      	b.n	8006970 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	429a      	cmp	r2, r3
 800688e:	d358      	bcc.n	8006942 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	61da      	str	r2, [r3, #28]
 800689c:	2304      	movs	r3, #4
 800689e:	e067      	b.n	8006970 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f7ff fe59 	bl	8006560 <create_chain>
 80068ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <dir_next+0xcc>
 80068b6:	2307      	movs	r3, #7
 80068b8:	e05a      	b.n	8006970 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <dir_next+0xd6>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e055      	b.n	8006970 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ca:	d101      	bne.n	80068d0 <dir_next+0xe2>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e04f      	b.n	8006970 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fbbf 	bl	8006054 <sync_window>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <dir_next+0xf2>
 80068dc:	2301      	movs	r3, #1
 80068de:	e047      	b.n	8006970 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3330      	adds	r3, #48	@ 0x30
 80068e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fa24 	bl	8005d38 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	6979      	ldr	r1, [r7, #20]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff fc1d 	bl	8006136 <clust2sect>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006902:	e012      	b.n	800692a <dir_next+0x13c>
						fs->wflag = 1;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7ff fba2 	bl	8006054 <sync_window>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <dir_next+0x12c>
 8006916:	2301      	movs	r3, #1
 8006918:	e02a      	b.n	8006970 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3301      	adds	r3, #1
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	62da      	str	r2, [r3, #44]	@ 0x2c
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	895b      	ldrh	r3, [r3, #10]
 800692e:	461a      	mov	r2, r3
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4293      	cmp	r3, r2
 8006934:	d3e6      	bcc.n	8006904 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006948:	6979      	ldr	r1, [r7, #20]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fbf3 	bl	8006136 <clust2sect>
 8006950:	4602      	mov	r2, r0
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006988:	2100      	movs	r1, #0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff feb4 	bl	80066f8 <dir_sdi>
 8006990:	4603      	mov	r3, r0
 8006992:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d12b      	bne.n	80069f2 <dir_alloc+0x7a>
		n = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	4619      	mov	r1, r3
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff fb99 	bl	80060dc <move_window>
 80069aa:	4603      	mov	r3, r0
 80069ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11d      	bne.n	80069f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2be5      	cmp	r3, #229	@ 0xe5
 80069bc:	d004      	beq.n	80069c8 <dir_alloc+0x50>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3301      	adds	r3, #1
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d102      	bne.n	80069dc <dir_alloc+0x64>
 80069d6:	e00c      	b.n	80069f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80069dc:	2101      	movs	r1, #1
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff ff05 	bl	80067ee <dir_next>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0d7      	beq.n	800699e <dir_alloc+0x26>
 80069ee:	e000      	b.n	80069f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80069f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d101      	bne.n	80069fc <dir_alloc+0x84>
 80069f8:	2307      	movs	r3, #7
 80069fa:	75fb      	strb	r3, [r7, #23]
	return res;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	331a      	adds	r3, #26
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff f8eb 	bl	8005bf0 <ld_word>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d109      	bne.n	8006a3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	3314      	adds	r3, #20
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff f8e0 	bl	8005bf0 <ld_word>
 8006a30:	4603      	mov	r3, r0
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	331a      	adds	r3, #26
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	b292      	uxth	r2, r2
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff f904 	bl	8005c68 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d109      	bne.n	8006a7c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f103 0214 	add.w	r2, r3, #20
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0c1b      	lsrs	r3, r3, #16
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4619      	mov	r1, r3
 8006a76:	4610      	mov	r0, r2
 8006a78:	f7ff f8f6 	bl	8005c68 <st_word>
	}
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a92:	2100      	movs	r1, #0
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fe2f 	bl	80066f8 <dir_sdi>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <dir_find+0x24>
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
 8006aa6:	e03e      	b.n	8006b26 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	4619      	mov	r1, r3
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7ff fb14 	bl	80060dc <move_window>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d12f      	bne.n	8006b1e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <dir_find+0x4e>
 8006acc:	2304      	movs	r3, #4
 8006ace:	75fb      	strb	r3, [r7, #23]
 8006ad0:	e028      	b.n	8006b24 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	330b      	adds	r3, #11
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	330b      	adds	r3, #11
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <dir_find+0x86>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a18      	ldr	r0, [r3, #32]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3324      	adds	r3, #36	@ 0x24
 8006afc:	220b      	movs	r2, #11
 8006afe:	4619      	mov	r1, r3
 8006b00:	f7ff f935 	bl	8005d6e <mem_cmp>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff fe6e 	bl	80067ee <dir_next>
 8006b12:	4603      	mov	r3, r0
 8006b14:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0c5      	beq.n	8006aa8 <dir_find+0x24>
 8006b1c:	e002      	b.n	8006b24 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b22:	bf00      	nop

	return res;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff1a 	bl	8006978 <dir_alloc>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d11c      	bne.n	8006b88 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	4619      	mov	r1, r3
 8006b54:	68b8      	ldr	r0, [r7, #8]
 8006b56:	f7ff fac1 	bl	80060dc <move_window>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d111      	bne.n	8006b88 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff f8e3 	bl	8005d38 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a18      	ldr	r0, [r3, #32]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3324      	adds	r3, #36	@ 0x24
 8006b7a:	220b      	movs	r2, #11
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f7ff f8ba 	bl	8005cf6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2201      	movs	r2, #1
 8006b86:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d04f      	beq.n	8006c4a <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006bb2:	e022      	b.n	8006bfa <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	1c59      	adds	r1, r3, #1
 8006bbc:	6179      	str	r1, [r7, #20]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d016      	beq.n	8006bf8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d101      	bne.n	8006bd4 <get_fileinfo+0x42>
 8006bd0:	23e5      	movs	r3, #229	@ 0xe5
 8006bd2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b09      	cmp	r3, #9
 8006bd8:	d106      	bne.n	8006be8 <get_fileinfo+0x56>
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	613a      	str	r2, [r7, #16]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	4413      	add	r3, r2
 8006be4:	222e      	movs	r2, #46	@ 0x2e
 8006be6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	613a      	str	r2, [r7, #16]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	7bfa      	ldrb	r2, [r7, #15]
 8006bf4:	725a      	strb	r2, [r3, #9]
 8006bf6:	e000      	b.n	8006bfa <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006bf8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b0a      	cmp	r3, #10
 8006bfe:	d9d9      	bls.n	8006bb4 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	3309      	adds	r3, #9
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	7ada      	ldrb	r2, [r3, #11]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	331c      	adds	r3, #28
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff f800 	bl	8005c22 <ld_dword>
 8006c22:	4602      	mov	r2, r0
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	3316      	adds	r3, #22
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fff7 	bl	8005c22 <ld_dword>
 8006c34:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	80da      	strh	r2, [r3, #6]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	809a      	strh	r2, [r3, #4]
 8006c48:	e000      	b.n	8006c4c <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c4a:	bf00      	nop
}
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3324      	adds	r3, #36	@ 0x24
 8006c68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c6a:	220b      	movs	r2, #11
 8006c6c:	2120      	movs	r1, #32
 8006c6e:	68b8      	ldr	r0, [r7, #8]
 8006c70:	f7ff f862 	bl	8005d38 <mem_set>
	si = i = 0; ni = 8;
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	61fa      	str	r2, [r7, #28]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c8e:	7efb      	ldrb	r3, [r7, #27]
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d94e      	bls.n	8006d32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c94:	7efb      	ldrb	r3, [r7, #27]
 8006c96:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c98:	d006      	beq.n	8006ca8 <create_name+0x54>
 8006c9a:	7efb      	ldrb	r3, [r7, #27]
 8006c9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c9e:	d110      	bne.n	8006cc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ca0:	e002      	b.n	8006ca8 <create_name+0x54>
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8006cb2:	d0f6      	beq.n	8006ca2 <create_name+0x4e>
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8006cbe:	d0f0      	beq.n	8006ca2 <create_name+0x4e>
			break;
 8006cc0:	e038      	b.n	8006d34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006cc2:	7efb      	ldrb	r3, [r7, #27]
 8006cc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cc6:	d003      	beq.n	8006cd0 <create_name+0x7c>
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d30c      	bcc.n	8006cea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b0b      	cmp	r3, #11
 8006cd4:	d002      	beq.n	8006cdc <create_name+0x88>
 8006cd6:	7efb      	ldrb	r3, [r7, #27]
 8006cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cda:	d001      	beq.n	8006ce0 <create_name+0x8c>
 8006cdc:	2306      	movs	r3, #6
 8006cde:	e044      	b.n	8006d6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	230b      	movs	r3, #11
 8006ce6:	617b      	str	r3, [r7, #20]
			continue;
 8006ce8:	e022      	b.n	8006d30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006cea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	da04      	bge.n	8006cfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006cf2:	7efb      	ldrb	r3, [r7, #27]
 8006cf4:	3b80      	subs	r3, #128	@ 0x80
 8006cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d74 <create_name+0x120>)
 8006cf8:	5cd3      	ldrb	r3, [r2, r3]
 8006cfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006cfc:	7efb      	ldrb	r3, [r7, #27]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	481d      	ldr	r0, [pc, #116]	@ (8006d78 <create_name+0x124>)
 8006d02:	f7ff f85b 	bl	8005dbc <chk_chr>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <create_name+0xbc>
 8006d0c:	2306      	movs	r3, #6
 8006d0e:	e02c      	b.n	8006d6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006d10:	7efb      	ldrb	r3, [r7, #27]
 8006d12:	2b60      	cmp	r3, #96	@ 0x60
 8006d14:	d905      	bls.n	8006d22 <create_name+0xce>
 8006d16:	7efb      	ldrb	r3, [r7, #27]
 8006d18:	2b7a      	cmp	r3, #122	@ 0x7a
 8006d1a:	d802      	bhi.n	8006d22 <create_name+0xce>
 8006d1c:	7efb      	ldrb	r3, [r7, #27]
 8006d1e:	3b20      	subs	r3, #32
 8006d20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	613a      	str	r2, [r7, #16]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	7efa      	ldrb	r2, [r7, #27]
 8006d2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d30:	e7a6      	b.n	8006c80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	441a      	add	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <create_name+0xf4>
 8006d44:	2306      	movs	r3, #6
 8006d46:	e010      	b.n	8006d6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2be5      	cmp	r3, #229	@ 0xe5
 8006d4e:	d102      	bne.n	8006d56 <create_name+0x102>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2205      	movs	r2, #5
 8006d54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d56:	7efb      	ldrb	r3, [r7, #27]
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d801      	bhi.n	8006d60 <create_name+0x10c>
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	e000      	b.n	8006d62 <create_name+0x10e>
 8006d60:	2200      	movs	r2, #0
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	330b      	adds	r3, #11
 8006d66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	080097e4 	.word	0x080097e4
 8006d78:	08009780 	.word	0x08009780

08006d7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d90:	e002      	b.n	8006d98 <follow_path+0x1c>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d9e:	d0f8      	beq.n	8006d92 <follow_path+0x16>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006da6:	d0f4      	beq.n	8006d92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2200      	movs	r2, #0
 8006dac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b1f      	cmp	r3, #31
 8006db4:	d80a      	bhi.n	8006dcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2280      	movs	r2, #128	@ 0x80
 8006dba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fc99 	bl	80066f8 <dir_sdi>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
 8006dca:	e043      	b.n	8006e54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006dcc:	463b      	mov	r3, r7
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff ff3f 	bl	8006c54 <create_name>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d134      	bne.n	8006e4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff fe4f 	bl	8006a84 <dir_find>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006df0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d127      	bne.n	8006e4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d122      	bne.n	8006e4e <follow_path+0xd2>
 8006e08:	2305      	movs	r3, #5
 8006e0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e0c:	e01f      	b.n	8006e4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11c      	bne.n	8006e52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	799b      	ldrb	r3, [r3, #6]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e24:	2305      	movs	r3, #5
 8006e26:	75fb      	strb	r3, [r7, #23]
 8006e28:	e014      	b.n	8006e54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	4413      	add	r3, r2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff fde2 	bl	8006a06 <ld_clust>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e48:	e7c0      	b.n	8006dcc <follow_path+0x50>
			if (res != FR_OK) break;
 8006e4a:	bf00      	nop
 8006e4c:	e002      	b.n	8006e54 <follow_path+0xd8>
				break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e52:	bf00      	nop
			}
		}
	}

	return res;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b087      	sub	sp, #28
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e66:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d031      	beq.n	8006ed8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e002      	b.n	8006e82 <get_ldnumber+0x24>
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d903      	bls.n	8006e92 <get_ldnumber+0x34>
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e90:	d1f4      	bne.n	8006e7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e98:	d11c      	bne.n	8006ed4 <get_ldnumber+0x76>
			tp = *path;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	60fa      	str	r2, [r7, #12]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	3b30      	subs	r3, #48	@ 0x30
 8006eaa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b09      	cmp	r3, #9
 8006eb0:	d80e      	bhi.n	8006ed0 <get_ldnumber+0x72>
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d10a      	bne.n	8006ed0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <get_ldnumber+0x72>
					vol = (int)i;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	e002      	b.n	8006eda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ed8:	693b      	ldr	r3, [r7, #16]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	70da      	strb	r2, [r3, #3]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff f8ea 	bl	80060dc <move_window>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <check_fs+0x2a>
 8006f0e:	2304      	movs	r3, #4
 8006f10:	e038      	b.n	8006f84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3330      	adds	r3, #48	@ 0x30
 8006f16:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fe68 	bl	8005bf0 <ld_word>
 8006f20:	4603      	mov	r3, r0
 8006f22:	461a      	mov	r2, r3
 8006f24:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <check_fs+0x48>
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e029      	b.n	8006f84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f36:	2be9      	cmp	r3, #233	@ 0xe9
 8006f38:	d009      	beq.n	8006f4e <check_fs+0x66>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f40:	2beb      	cmp	r3, #235	@ 0xeb
 8006f42:	d11e      	bne.n	8006f82 <check_fs+0x9a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006f4a:	2b90      	cmp	r3, #144	@ 0x90
 8006f4c:	d119      	bne.n	8006f82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3330      	adds	r3, #48	@ 0x30
 8006f52:	3336      	adds	r3, #54	@ 0x36
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fe64 	bl	8005c22 <ld_dword>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f60:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <check_fs+0xa4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <check_fs+0x82>
 8006f66:	2300      	movs	r3, #0
 8006f68:	e00c      	b.n	8006f84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3330      	adds	r3, #48	@ 0x30
 8006f6e:	3352      	adds	r3, #82	@ 0x52
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fe56 	bl	8005c22 <ld_dword>
 8006f76:	4603      	mov	r3, r0
 8006f78:	4a05      	ldr	r2, [pc, #20]	@ (8006f90 <check_fs+0xa8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <check_fs+0x9a>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e000      	b.n	8006f84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f82:	2302      	movs	r3, #2
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	00544146 	.word	0x00544146
 8006f90:	33544146 	.word	0x33544146

08006f94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b096      	sub	sp, #88	@ 0x58
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff ff58 	bl	8006e5e <get_ldnumber>
 8006fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da01      	bge.n	8006fba <find_volume+0x26>
 8006fb6:	230b      	movs	r3, #11
 8006fb8:	e22d      	b.n	8007416 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fba:	4aa1      	ldr	r2, [pc, #644]	@ (8007240 <find_volume+0x2ac>)
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <find_volume+0x3a>
 8006fca:	230c      	movs	r3, #12
 8006fcc:	e223      	b.n	8007416 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01a      	beq.n	800701a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fd7f 	bl	8005aec <disk_status>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10c      	bne.n	800701a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <find_volume+0x82>
 8007006:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007012:	230a      	movs	r3, #10
 8007014:	e1ff      	b.n	8007416 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007016:	2300      	movs	r3, #0
 8007018:	e1fd      	b.n	8007416 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007022:	b2da      	uxtb	r2, r3
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fd77 	bl	8005b20 <disk_initialize>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007038:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007044:	2303      	movs	r3, #3
 8007046:	e1e6      	b.n	8007416 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d007      	beq.n	800705e <find_volume+0xca>
 800704e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007052:	f003 0304 	and.w	r3, r3, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800705a:	230a      	movs	r3, #10
 800705c:	e1db      	b.n	8007416 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007062:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007064:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007066:	f7ff ff3f 	bl	8006ee8 <check_fs>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007070:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007074:	2b02      	cmp	r3, #2
 8007076:	d149      	bne.n	800710c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007078:	2300      	movs	r3, #0
 800707a:	643b      	str	r3, [r7, #64]	@ 0x40
 800707c:	e01e      	b.n	80070bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800708c:	4413      	add	r3, r2
 800708e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	3304      	adds	r3, #4
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d006      	beq.n	80070a8 <find_volume+0x114>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	3308      	adds	r3, #8
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fdbf 	bl	8005c22 <ld_dword>
 80070a4:	4602      	mov	r2, r0
 80070a6:	e000      	b.n	80070aa <find_volume+0x116>
 80070a8:	2200      	movs	r2, #0
 80070aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	3358      	adds	r3, #88	@ 0x58
 80070b0:	443b      	add	r3, r7
 80070b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b8:	3301      	adds	r3, #1
 80070ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80070bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d9dd      	bls.n	800707e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070c2:	2300      	movs	r3, #0
 80070c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80070c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <find_volume+0x13e>
 80070cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ce:	3b01      	subs	r3, #1
 80070d0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	3358      	adds	r3, #88	@ 0x58
 80070d8:	443b      	add	r3, r7
 80070da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070de:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <find_volume+0x15e>
 80070e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070ea:	f7ff fefd 	bl	8006ee8 <check_fs>
 80070ee:	4603      	mov	r3, r0
 80070f0:	e000      	b.n	80070f4 <find_volume+0x160>
 80070f2:	2303      	movs	r3, #3
 80070f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80070f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d905      	bls.n	800710c <find_volume+0x178>
 8007100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007102:	3301      	adds	r3, #1
 8007104:	643b      	str	r3, [r7, #64]	@ 0x40
 8007106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007108:	2b03      	cmp	r3, #3
 800710a:	d9e2      	bls.n	80070d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800710c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007110:	2b04      	cmp	r3, #4
 8007112:	d101      	bne.n	8007118 <find_volume+0x184>
 8007114:	2301      	movs	r3, #1
 8007116:	e17e      	b.n	8007416 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007118:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800711c:	2b01      	cmp	r3, #1
 800711e:	d901      	bls.n	8007124 <find_volume+0x190>
 8007120:	230d      	movs	r3, #13
 8007122:	e178      	b.n	8007416 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	3330      	adds	r3, #48	@ 0x30
 8007128:	330b      	adds	r3, #11
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fd60 	bl	8005bf0 <ld_word>
 8007130:	4603      	mov	r3, r0
 8007132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007136:	d001      	beq.n	800713c <find_volume+0x1a8>
 8007138:	230d      	movs	r3, #13
 800713a:	e16c      	b.n	8007416 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	3330      	adds	r3, #48	@ 0x30
 8007140:	3316      	adds	r3, #22
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fd54 	bl	8005bf0 <ld_word>
 8007148:	4603      	mov	r3, r0
 800714a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800714c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <find_volume+0x1cc>
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	3330      	adds	r3, #48	@ 0x30
 8007156:	3324      	adds	r3, #36	@ 0x24
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fd62 	bl	8005c22 <ld_dword>
 800715e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007164:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d005      	beq.n	8007184 <find_volume+0x1f0>
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	789b      	ldrb	r3, [r3, #2]
 800717c:	2b02      	cmp	r3, #2
 800717e:	d001      	beq.n	8007184 <find_volume+0x1f0>
 8007180:	230d      	movs	r3, #13
 8007182:	e148      	b.n	8007416 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	789b      	ldrb	r3, [r3, #2]
 8007188:	461a      	mov	r2, r3
 800718a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800718c:	fb02 f303 	mul.w	r3, r2, r3
 8007190:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007198:	461a      	mov	r2, r3
 800719a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800719e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a0:	895b      	ldrh	r3, [r3, #10]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <find_volume+0x224>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a8:	895b      	ldrh	r3, [r3, #10]
 80071aa:	461a      	mov	r2, r3
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	895b      	ldrh	r3, [r3, #10]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <find_volume+0x228>
 80071b8:	230d      	movs	r3, #13
 80071ba:	e12c      	b.n	8007416 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071be:	3330      	adds	r3, #48	@ 0x30
 80071c0:	3311      	adds	r3, #17
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fd14 	bl	8005bf0 <ld_word>
 80071c8:	4603      	mov	r3, r0
 80071ca:	461a      	mov	r2, r3
 80071cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	891b      	ldrh	r3, [r3, #8]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <find_volume+0x24e>
 80071de:	230d      	movs	r3, #13
 80071e0:	e119      	b.n	8007416 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e4:	3330      	adds	r3, #48	@ 0x30
 80071e6:	3313      	adds	r3, #19
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe fd01 	bl	8005bf0 <ld_word>
 80071ee:	4603      	mov	r3, r0
 80071f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <find_volume+0x272>
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	3330      	adds	r3, #48	@ 0x30
 80071fc:	3320      	adds	r3, #32
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fd0f 	bl	8005c22 <ld_dword>
 8007204:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	3330      	adds	r3, #48	@ 0x30
 800720a:	330e      	adds	r3, #14
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fcef 	bl	8005bf0 <ld_word>
 8007212:	4603      	mov	r3, r0
 8007214:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007216:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <find_volume+0x28c>
 800721c:	230d      	movs	r3, #13
 800721e:	e0fa      	b.n	8007416 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007220:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007224:	4413      	add	r3, r2
 8007226:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007228:	8912      	ldrh	r2, [r2, #8]
 800722a:	0912      	lsrs	r2, r2, #4
 800722c:	b292      	uxth	r2, r2
 800722e:	4413      	add	r3, r2
 8007230:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007236:	429a      	cmp	r2, r3
 8007238:	d204      	bcs.n	8007244 <find_volume+0x2b0>
 800723a:	230d      	movs	r3, #13
 800723c:	e0eb      	b.n	8007416 <find_volume+0x482>
 800723e:	bf00      	nop
 8007240:	20003a5c 	.word	0x20003a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800724c:	8952      	ldrh	r2, [r2, #10]
 800724e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <find_volume+0x2ca>
 800725a:	230d      	movs	r3, #13
 800725c:	e0db      	b.n	8007416 <find_volume+0x482>
		fmt = FS_FAT32;
 800725e:	2303      	movs	r3, #3
 8007260:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800726a:	4293      	cmp	r3, r2
 800726c:	d802      	bhi.n	8007274 <find_volume+0x2e0>
 800726e:	2302      	movs	r3, #2
 8007270:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800727a:	4293      	cmp	r3, r2
 800727c:	d802      	bhi.n	8007284 <find_volume+0x2f0>
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	1c9a      	adds	r2, r3, #2
 8007288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007290:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007292:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007296:	441a      	add	r2, r3
 8007298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800729c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800729e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a0:	441a      	add	r2, r3
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80072a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d11e      	bne.n	80072ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	3330      	adds	r3, #48	@ 0x30
 80072b2:	332a      	adds	r3, #42	@ 0x2a
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fc9b 	bl	8005bf0 <ld_word>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <find_volume+0x330>
 80072c0:	230d      	movs	r3, #13
 80072c2:	e0a8      	b.n	8007416 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c6:	891b      	ldrh	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <find_volume+0x33c>
 80072cc:	230d      	movs	r3, #13
 80072ce:	e0a2      	b.n	8007416 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	3330      	adds	r3, #48	@ 0x30
 80072d4:	332c      	adds	r3, #44	@ 0x2c
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fca3 	bl	8005c22 <ld_dword>
 80072dc:	4602      	mov	r2, r0
 80072de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072ea:	e01f      	b.n	800732c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	891b      	ldrh	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <find_volume+0x364>
 80072f4:	230d      	movs	r3, #13
 80072f6:	e08e      	b.n	8007416 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072fe:	441a      	add	r2, r3
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007304:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007308:	2b02      	cmp	r3, #2
 800730a:	d103      	bne.n	8007314 <find_volume+0x380>
 800730c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	e00a      	b.n	800732a <find_volume+0x396>
 8007314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	4613      	mov	r3, r2
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	4413      	add	r3, r2
 800731e:	085a      	lsrs	r2, r3, #1
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800732a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007332:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007336:	0a5b      	lsrs	r3, r3, #9
 8007338:	429a      	cmp	r2, r3
 800733a:	d201      	bcs.n	8007340 <find_volume+0x3ac>
 800733c:	230d      	movs	r3, #13
 800733e:	e06a      	b.n	8007416 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	611a      	str	r2, [r3, #16]
 8007348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007352:	2280      	movs	r2, #128	@ 0x80
 8007354:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007356:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800735a:	2b03      	cmp	r3, #3
 800735c:	d149      	bne.n	80073f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	3330      	adds	r3, #48	@ 0x30
 8007362:	3330      	adds	r3, #48	@ 0x30
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fc43 	bl	8005bf0 <ld_word>
 800736a:	4603      	mov	r3, r0
 800736c:	2b01      	cmp	r3, #1
 800736e:	d140      	bne.n	80073f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007372:	3301      	adds	r3, #1
 8007374:	4619      	mov	r1, r3
 8007376:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007378:	f7fe feb0 	bl	80060dc <move_window>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d137      	bne.n	80073f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	2200      	movs	r2, #0
 8007386:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738a:	3330      	adds	r3, #48	@ 0x30
 800738c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fc2d 	bl	8005bf0 <ld_word>
 8007396:	4603      	mov	r3, r0
 8007398:	461a      	mov	r2, r3
 800739a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800739e:	429a      	cmp	r2, r3
 80073a0:	d127      	bne.n	80073f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	3330      	adds	r3, #48	@ 0x30
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fc3b 	bl	8005c22 <ld_dword>
 80073ac:	4603      	mov	r3, r0
 80073ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007420 <find_volume+0x48c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d11e      	bne.n	80073f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	3330      	adds	r3, #48	@ 0x30
 80073b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fc30 	bl	8005c22 <ld_dword>
 80073c2:	4603      	mov	r3, r0
 80073c4:	4a17      	ldr	r2, [pc, #92]	@ (8007424 <find_volume+0x490>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d113      	bne.n	80073f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	3330      	adds	r3, #48	@ 0x30
 80073ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fc25 	bl	8005c22 <ld_dword>
 80073d8:	4602      	mov	r2, r0
 80073da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	3330      	adds	r3, #48	@ 0x30
 80073e2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fc1b 	bl	8005c22 <ld_dword>
 80073ec:	4602      	mov	r2, r0
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80073f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <find_volume+0x494>)
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <find_volume+0x494>)
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	4b08      	ldr	r3, [pc, #32]	@ (8007428 <find_volume+0x494>)
 8007408:	881a      	ldrh	r2, [r3, #0]
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800740e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007410:	f7fe fdfc 	bl	800600c <clear_lock>
#endif
	return FR_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3758      	adds	r7, #88	@ 0x58
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	41615252 	.word	0x41615252
 8007424:	61417272 	.word	0x61417272
 8007428:	20003a60 	.word	0x20003a60

0800742c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007436:	2309      	movs	r3, #9
 8007438:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01c      	beq.n	800747a <validate+0x4e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d018      	beq.n	800747a <validate+0x4e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d013      	beq.n	800747a <validate+0x4e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	889a      	ldrh	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	88db      	ldrh	r3, [r3, #6]
 800745c:	429a      	cmp	r2, r3
 800745e:	d10c      	bne.n	800747a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fb40 	bl	8005aec <disk_status>
 800746c:	4603      	mov	r3, r0
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <validate+0x4e>
			res = FR_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <validate+0x5a>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	e000      	b.n	8007488 <validate+0x5c>
 8007486:	2300      	movs	r3, #0
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	6013      	str	r3, [r2, #0]
	return res;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80074aa:	f107 0310 	add.w	r3, r7, #16
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fcd5 	bl	8006e5e <get_ldnumber>
 80074b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da01      	bge.n	80074c0 <f_mount+0x28>
 80074bc:	230b      	movs	r3, #11
 80074be:	e02b      	b.n	8007518 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074c0:	4a17      	ldr	r2, [pc, #92]	@ (8007520 <f_mount+0x88>)
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074d0:	69b8      	ldr	r0, [r7, #24]
 80074d2:	f7fe fd9b 	bl	800600c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	490d      	ldr	r1, [pc, #52]	@ (8007520 <f_mount+0x88>)
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <f_mount+0x66>
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d001      	beq.n	8007502 <f_mount+0x6a>
 80074fe:	2300      	movs	r3, #0
 8007500:	e00a      	b.n	8007518 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007502:	f107 010c 	add.w	r1, r7, #12
 8007506:	f107 0308 	add.w	r3, r7, #8
 800750a:	2200      	movs	r2, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fd41 	bl	8006f94 <find_volume>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007516:	7dfb      	ldrb	r3, [r7, #23]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3720      	adds	r7, #32
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20003a5c 	.word	0x20003a5c

08007524 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b098      	sub	sp, #96	@ 0x60
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <f_open+0x18>
 8007538:	2309      	movs	r3, #9
 800753a:	e1a9      	b.n	8007890 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800753c:	79fb      	ldrb	r3, [r7, #7]
 800753e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007542:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007544:	79fa      	ldrb	r2, [r7, #7]
 8007546:	f107 0110 	add.w	r1, r7, #16
 800754a:	f107 0308 	add.w	r3, r7, #8
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff fd20 	bl	8006f94 <find_volume>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800755a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800755e:	2b00      	cmp	r3, #0
 8007560:	f040 818d 	bne.w	800787e <f_open+0x35a>
		dj.obj.fs = fs;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	f107 0314 	add.w	r3, r7, #20
 800756e:	4611      	mov	r1, r2
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fc03 	bl	8006d7c <follow_path>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800757c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007580:	2b00      	cmp	r3, #0
 8007582:	d118      	bne.n	80075b6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007584:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007588:	b25b      	sxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	da03      	bge.n	8007596 <f_open+0x72>
				res = FR_INVALID_NAME;
 800758e:	2306      	movs	r3, #6
 8007590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007594:	e00f      	b.n	80075b6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	2b01      	cmp	r3, #1
 800759a:	bf8c      	ite	hi
 800759c:	2301      	movhi	r3, #1
 800759e:	2300      	movls	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	4611      	mov	r1, r2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fc22 	bl	8005df4 <chk_lock>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	f003 031c 	and.w	r3, r3, #28
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d07f      	beq.n	80076c0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80075c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d017      	beq.n	80075f8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80075c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d10e      	bne.n	80075ee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075d0:	f7fe fc6c 	bl	8005eac <enq_lock>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <f_open+0xc4>
 80075da:	f107 0314 	add.w	r3, r7, #20
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff faa5 	bl	8006b2e <dir_register>
 80075e4:	4603      	mov	r3, r0
 80075e6:	e000      	b.n	80075ea <f_open+0xc6>
 80075e8:	2312      	movs	r3, #18
 80075ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	f043 0308 	orr.w	r3, r3, #8
 80075f4:	71fb      	strb	r3, [r7, #7]
 80075f6:	e010      	b.n	800761a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075f8:	7ebb      	ldrb	r3, [r7, #26]
 80075fa:	f003 0311 	and.w	r3, r3, #17
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <f_open+0xe6>
					res = FR_DENIED;
 8007602:	2307      	movs	r3, #7
 8007604:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007608:	e007      	b.n	800761a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <f_open+0xf6>
 8007614:	2308      	movs	r3, #8
 8007616:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800761a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800761e:	2b00      	cmp	r3, #0
 8007620:	d168      	bne.n	80076f4 <f_open+0x1d0>
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d063      	beq.n	80076f4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800762c:	f7fd fd26 	bl	800507c <get_fattime>
 8007630:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007634:	330e      	adds	r3, #14
 8007636:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fb30 	bl	8005c9e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800763e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007640:	3316      	adds	r3, #22
 8007642:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fb2a 	bl	8005c9e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800764a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764c:	330b      	adds	r3, #11
 800764e:	2220      	movs	r2, #32
 8007650:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff f9d4 	bl	8006a06 <ld_clust>
 800765e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007664:	2200      	movs	r2, #0
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff f9ec 	bl	8006a44 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800766c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766e:	331c      	adds	r3, #28
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fb13 	bl	8005c9e <st_dword>
					fs->wflag = 1;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	2201      	movs	r2, #1
 800767c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800767e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d037      	beq.n	80076f4 <f_open+0x1d0>
						dw = fs->winsect;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800768a:	f107 0314 	add.w	r3, r7, #20
 800768e:	2200      	movs	r2, #0
 8007690:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe feff 	bl	8006496 <remove_chain>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800769e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d126      	bne.n	80076f4 <f_open+0x1d0>
							res = move_window(fs, dw);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fd16 	bl	80060dc <move_window>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076ba:	3a01      	subs	r2, #1
 80076bc:	60da      	str	r2, [r3, #12]
 80076be:	e019      	b.n	80076f4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80076c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d115      	bne.n	80076f4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80076c8:	7ebb      	ldrb	r3, [r7, #26]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <f_open+0x1b6>
					res = FR_NO_FILE;
 80076d2:	2304      	movs	r3, #4
 80076d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80076d8:	e00c      	b.n	80076f4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <f_open+0x1d0>
 80076e4:	7ebb      	ldrb	r3, [r7, #26]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <f_open+0x1d0>
						res = FR_DENIED;
 80076ee:	2307      	movs	r3, #7
 80076f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80076f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d126      	bne.n	800774a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	f003 0308 	and.w	r3, r3, #8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800770c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b01      	cmp	r3, #1
 8007720:	bf8c      	ite	hi
 8007722:	2301      	movhi	r3, #1
 8007724:	2300      	movls	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	f107 0314 	add.w	r3, r7, #20
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe fbdd 	bl	8005ef0 <inc_lock>
 8007736:	4602      	mov	r2, r0
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <f_open+0x226>
 8007744:	2302      	movs	r3, #2
 8007746:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800774a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800774e:	2b00      	cmp	r3, #0
 8007750:	f040 8095 	bne.w	800787e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007758:	4611      	mov	r1, r2
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff f953 	bl	8006a06 <ld_clust>
 8007760:	4602      	mov	r2, r0
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007768:	331c      	adds	r3, #28
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fa59 	bl	8005c22 <ld_dword>
 8007770:	4602      	mov	r2, r0
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	88da      	ldrh	r2, [r3, #6]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	79fa      	ldrb	r2, [r7, #7]
 800778e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3330      	adds	r3, #48	@ 0x30
 80077a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fac3 	bl	8005d38 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d060      	beq.n	800787e <f_open+0x35a>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d05c      	beq.n	800787e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	895b      	ldrh	r3, [r3, #10]
 80077d0:	025b      	lsls	r3, r3, #9
 80077d2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	657b      	str	r3, [r7, #84]	@ 0x54
 80077e0:	e016      	b.n	8007810 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe fcc4 	bl	8006174 <get_fat>
 80077ec:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80077ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d802      	bhi.n	80077fa <f_open+0x2d6>
 80077f4:	2302      	movs	r3, #2
 80077f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d102      	bne.n	8007808 <f_open+0x2e4>
 8007802:	2301      	movs	r3, #1
 8007804:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800780a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007810:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007814:	2b00      	cmp	r3, #0
 8007816:	d103      	bne.n	8007820 <f_open+0x2fc>
 8007818:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800781a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800781c:	429a      	cmp	r2, r3
 800781e:	d8e0      	bhi.n	80077e2 <f_open+0x2be>
				}
				fp->clust = clst;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007824:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007826:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800782a:	2b00      	cmp	r3, #0
 800782c:	d127      	bne.n	800787e <f_open+0x35a>
 800782e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007834:	2b00      	cmp	r3, #0
 8007836:	d022      	beq.n	800787e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fc7a 	bl	8006136 <clust2sect>
 8007842:	6478      	str	r0, [r7, #68]	@ 0x44
 8007844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007846:	2b00      	cmp	r3, #0
 8007848:	d103      	bne.n	8007852 <f_open+0x32e>
						res = FR_INT_ERR;
 800784a:	2302      	movs	r3, #2
 800784c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007850:	e015      	b.n	800787e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007854:	0a5a      	lsrs	r2, r3, #9
 8007856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	7858      	ldrb	r0, [r3, #1]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	2301      	movs	r3, #1
 800786e:	f7fe f97f 	bl	8005b70 <disk_read>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <f_open+0x35a>
 8007878:	2301      	movs	r3, #1
 800787a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800787e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <f_open+0x368>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800788c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007890:	4618      	mov	r0, r3
 8007892:	3760      	adds	r7, #96	@ 0x60
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08e      	sub	sp, #56	@ 0x38
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f107 0214 	add.w	r2, r7, #20
 80078b6:	4611      	mov	r1, r2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fdb7 	bl	800742c <validate>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80078c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <f_read+0x44>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	7d5b      	ldrb	r3, [r3, #21]
 80078d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80078d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <f_read+0x4a>
 80078dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80078e0:	e115      	b.n	8007b0e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	7d1b      	ldrb	r3, [r3, #20]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <f_read+0x5a>
 80078ee:	2307      	movs	r3, #7
 80078f0:	e10d      	b.n	8007b0e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	429a      	cmp	r2, r3
 8007904:	f240 80fe 	bls.w	8007b04 <f_read+0x26c>
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800790c:	e0fa      	b.n	8007b04 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 80c6 	bne.w	8007aa8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	0a5b      	lsrs	r3, r3, #9
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	8952      	ldrh	r2, [r2, #10]
 8007926:	3a01      	subs	r2, #1
 8007928:	4013      	ands	r3, r2
 800792a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d12f      	bne.n	8007992 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007940:	e013      	b.n	800796a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	4619      	mov	r1, r3
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7fe fe9d 	bl	8006690 <clmt_clust>
 8007956:	6338      	str	r0, [r7, #48]	@ 0x30
 8007958:	e007      	b.n	800796a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fe fc06 	bl	8006174 <get_fat>
 8007968:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	2b01      	cmp	r3, #1
 800796e:	d804      	bhi.n	800797a <f_read+0xe2>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2202      	movs	r2, #2
 8007974:	755a      	strb	r2, [r3, #21]
 8007976:	2302      	movs	r3, #2
 8007978:	e0c9      	b.n	8007b0e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d104      	bne.n	800798c <f_read+0xf4>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	755a      	strb	r2, [r3, #21]
 8007988:	2301      	movs	r3, #1
 800798a:	e0c0      	b.n	8007b0e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007990:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe fbcb 	bl	8006136 <clust2sect>
 80079a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <f_read+0x11a>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2202      	movs	r2, #2
 80079ac:	755a      	strb	r2, [r3, #21]
 80079ae:	2302      	movs	r3, #2
 80079b0:	e0ad      	b.n	8007b0e <f_read+0x276>
			sect += csect;
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	4413      	add	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	0a5b      	lsrs	r3, r3, #9
 80079be:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80079c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d039      	beq.n	8007a3a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	4413      	add	r3, r2
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	8952      	ldrh	r2, [r2, #10]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d905      	bls.n	80079e0 <f_read+0x148>
					cc = fs->csize - csect;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	895b      	ldrh	r3, [r3, #10]
 80079d8:	461a      	mov	r2, r3
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	7858      	ldrb	r0, [r3, #1]
 80079e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079ea:	f7fe f8c1 	bl	8005b70 <disk_read>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <f_read+0x166>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	755a      	strb	r2, [r3, #21]
 80079fa:	2301      	movs	r3, #1
 80079fc:	e087      	b.n	8007b0e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	7d1b      	ldrb	r3, [r3, #20]
 8007a02:	b25b      	sxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da14      	bge.n	8007a32 <f_read+0x19a>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1a      	ldr	r2, [r3, #32]
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d90d      	bls.n	8007a32 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	025b      	lsls	r3, r3, #9
 8007a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a22:	18d0      	adds	r0, r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3330      	adds	r3, #48	@ 0x30
 8007a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f7fe f962 	bl	8005cf6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a34:	025b      	lsls	r3, r3, #9
 8007a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007a38:	e050      	b.n	8007adc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d02e      	beq.n	8007aa2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	7d1b      	ldrb	r3, [r3, #20]
 8007a48:	b25b      	sxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da18      	bge.n	8007a80 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	7858      	ldrb	r0, [r3, #1]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a1a      	ldr	r2, [r3, #32]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f7fe f8a7 	bl	8005bb0 <disk_write>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <f_read+0x1da>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	755a      	strb	r2, [r3, #21]
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e04d      	b.n	8007b0e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	7d1b      	ldrb	r3, [r3, #20]
 8007a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	7858      	ldrb	r0, [r3, #1]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	f7fe f86f 	bl	8005b70 <disk_read>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <f_read+0x20a>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	755a      	strb	r2, [r3, #21]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e035      	b.n	8007b0e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d901      	bls.n	8007ac2 <f_read+0x22a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad0:	4413      	add	r3, r2
 8007ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ad8:	f7fe f90d 	bl	8005cf6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae0:	4413      	add	r3, r2
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	699a      	ldr	r2, [r3, #24]
 8007ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aea:	441a      	add	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	619a      	str	r2, [r3, #24]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af6:	441a      	add	r2, r3
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f47f af01 	bne.w	800790e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3738      	adds	r7, #56	@ 0x38
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b090      	sub	sp, #64	@ 0x40
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f107 0208 	add.w	r2, r7, #8
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fc7f 	bl	800742c <validate>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007b34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <f_lseek+0x2e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7d5b      	ldrb	r3, [r3, #21]
 8007b40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007b44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <f_lseek+0x3c>
 8007b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b50:	e1e6      	b.n	8007f20 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80d1 	beq.w	8007cfe <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b62:	d15a      	bne.n	8007c1a <f_lseek+0x104>
			tbl = fp->cltbl;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	1d1a      	adds	r2, r3, #4
 8007b6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	2302      	movs	r3, #2
 8007b76:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d03a      	beq.n	8007bfa <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	3302      	adds	r3, #2
 8007b90:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b98:	3301      	adds	r3, #1
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fae7 	bl	8006174 <get_fat>
 8007ba6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d804      	bhi.n	8007bb8 <f_lseek+0xa2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	755a      	strb	r2, [r3, #21]
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e1b3      	b.n	8007f20 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d104      	bne.n	8007bca <f_lseek+0xb4>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	755a      	strb	r2, [r3, #21]
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e1aa      	b.n	8007f20 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d0de      	beq.n	8007b92 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007bd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d809      	bhi.n	8007bf0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	1d1a      	adds	r2, r3, #4
 8007be0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	1d1a      	adds	r2, r3, #4
 8007bea:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d3c4      	bcc.n	8007b84 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c00:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d803      	bhi.n	8007c12 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	e184      	b.n	8007f1c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007c12:	2311      	movs	r3, #17
 8007c14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007c18:	e180      	b.n	8007f1c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d902      	bls.n	8007c2a <f_lseek+0x114>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8172 	beq.w	8007f1c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fe fd26 	bl	8006690 <clmt_clust>
 8007c44:	4602      	mov	r2, r0
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fe fa6f 	bl	8006136 <clust2sect>
 8007c58:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <f_lseek+0x154>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	755a      	strb	r2, [r3, #21]
 8007c66:	2302      	movs	r3, #2
 8007c68:	e15a      	b.n	8007f20 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	0a5b      	lsrs	r3, r3, #9
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	8952      	ldrh	r2, [r2, #10]
 8007c74:	3a01      	subs	r2, #1
 8007c76:	4013      	ands	r3, r2
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8148 	beq.w	8007f1c <f_lseek+0x406>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	f000 8142 	beq.w	8007f1c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	7d1b      	ldrb	r3, [r3, #20]
 8007c9c:	b25b      	sxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da18      	bge.n	8007cd4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	7858      	ldrb	r0, [r3, #1]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1a      	ldr	r2, [r3, #32]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f7fd ff7d 	bl	8005bb0 <disk_write>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <f_lseek+0x1b0>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	755a      	strb	r2, [r3, #21]
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e12c      	b.n	8007f20 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7d1b      	ldrb	r3, [r3, #20]
 8007cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	7858      	ldrb	r0, [r3, #1]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007cde:	2301      	movs	r3, #1
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	f7fd ff45 	bl	8005b70 <disk_read>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <f_lseek+0x1e0>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	755a      	strb	r2, [r3, #21]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e114      	b.n	8007f20 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	621a      	str	r2, [r3, #32]
 8007cfc:	e10e      	b.n	8007f1c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d908      	bls.n	8007d1a <f_lseek+0x204>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	7d1b      	ldrb	r3, [r3, #20]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d28:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80a7 	beq.w	8007e80 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	895b      	ldrh	r3, [r3, #10]
 8007d36:	025b      	lsls	r3, r3, #9
 8007d38:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01b      	beq.n	8007d78 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	1e5a      	subs	r2, r3, #1
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	1e59      	subs	r1, r3, #1
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d30f      	bcc.n	8007d78 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	1e5a      	subs	r2, r3, #1
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	425b      	negs	r3, r3
 8007d60:	401a      	ands	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d76:	e022      	b.n	8007dbe <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d119      	bne.n	8007db8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe fbe9 	bl	8006560 <create_chain>
 8007d8e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d104      	bne.n	8007da0 <f_lseek+0x28a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	755a      	strb	r2, [r3, #21]
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e0bf      	b.n	8007f20 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d104      	bne.n	8007db2 <f_lseek+0x29c>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	755a      	strb	r2, [r3, #21]
 8007dae:	2301      	movs	r3, #1
 8007db0:	e0b6      	b.n	8007f20 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007db6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dbc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d05d      	beq.n	8007e80 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007dc4:	e03a      	b.n	8007e3c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	603b      	str	r3, [r7, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7d1b      	ldrb	r3, [r3, #20]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fbb8 	bl	8006560 <create_chain>
 8007df0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d108      	bne.n	8007e0a <f_lseek+0x2f4>
							ofs = 0; break;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	e022      	b.n	8007e44 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe f9b6 	bl	8006174 <get_fat>
 8007e08:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d104      	bne.n	8007e1c <f_lseek+0x306>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	755a      	strb	r2, [r3, #21]
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e081      	b.n	8007f20 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d904      	bls.n	8007e2c <f_lseek+0x316>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d304      	bcc.n	8007e36 <f_lseek+0x320>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	755a      	strb	r2, [r3, #21]
 8007e32:	2302      	movs	r3, #2
 8007e34:	e074      	b.n	8007f20 <f_lseek+0x40a>
					fp->clust = clst;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e3a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d8c0      	bhi.n	8007dc6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	441a      	add	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d012      	beq.n	8007e80 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe f969 	bl	8006136 <clust2sect>
 8007e64:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d104      	bne.n	8007e76 <f_lseek+0x360>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	755a      	strb	r2, [r3, #21]
 8007e72:	2302      	movs	r3, #2
 8007e74:	e054      	b.n	8007f20 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	0a5b      	lsrs	r3, r3, #9
 8007e7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e7c:	4413      	add	r3, r2
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d90a      	bls.n	8007ea2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699a      	ldr	r2, [r3, #24]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	7d1b      	ldrb	r3, [r3, #20]
 8007e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d036      	beq.n	8007f1c <f_lseek+0x406>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d031      	beq.n	8007f1c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	7d1b      	ldrb	r3, [r3, #20]
 8007ebc:	b25b      	sxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da18      	bge.n	8007ef4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	7858      	ldrb	r0, [r3, #1]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1a      	ldr	r2, [r3, #32]
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f7fd fe6d 	bl	8005bb0 <disk_write>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <f_lseek+0x3d0>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	755a      	strb	r2, [r3, #21]
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e01c      	b.n	8007f20 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7d1b      	ldrb	r3, [r3, #20]
 8007eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	7858      	ldrb	r0, [r3, #1]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007efe:	2301      	movs	r3, #1
 8007f00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f02:	f7fd fe35 	bl	8005b70 <disk_read>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <f_lseek+0x400>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	755a      	strb	r2, [r3, #21]
 8007f12:	2301      	movs	r3, #1
 8007f14:	e004      	b.n	8007f20 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007f1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3740      	adds	r7, #64	@ 0x40
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b090      	sub	sp, #64	@ 0x40
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007f32:	f107 010c 	add.w	r1, r7, #12
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff f82a 	bl	8006f94 <find_volume>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8007f46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d11f      	bne.n	8007f8e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	f107 030c 	add.w	r3, r7, #12
 8007f54:	4611      	mov	r1, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe ff10 	bl	8006d7c <follow_path>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007f62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d111      	bne.n	8007f8e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007f6a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007f6e:	b25b      	sxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	da03      	bge.n	8007f7c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007f74:	2306      	movs	r3, #6
 8007f76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007f7a:	e008      	b.n	8007f8e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <f_stat+0x66>
 8007f82:	f107 030c 	add.w	r3, r7, #12
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe fe02 	bl	8006b92 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3740      	adds	r7, #64	@ 0x40
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007faa:	2301      	movs	r3, #1
 8007fac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fb4:	7a5b      	ldrb	r3, [r3, #9]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d131      	bne.n	8008020 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fbe:	7a5b      	ldrb	r3, [r3, #9]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007fca:	4b19      	ldr	r3, [pc, #100]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fcc:	7a5b      	ldrb	r3, [r3, #9]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	4a17      	ldr	r2, [pc, #92]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007fda:	4b15      	ldr	r3, [pc, #84]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fdc:	7a5b      	ldrb	r3, [r3, #9]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b13      	ldr	r3, [pc, #76]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fe4:	4413      	add	r3, r2
 8007fe6:	79fa      	ldrb	r2, [r7, #7]
 8007fe8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007fea:	4b11      	ldr	r3, [pc, #68]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007fec:	7a5b      	ldrb	r3, [r3, #9]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	b2d1      	uxtb	r1, r2
 8007ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8008030 <FATFS_LinkDriverEx+0x94>)
 8007ff6:	7251      	strb	r1, [r2, #9]
 8007ff8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007ffa:	7dbb      	ldrb	r3, [r7, #22]
 8007ffc:	3330      	adds	r3, #48	@ 0x30
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	3301      	adds	r3, #1
 8008008:	223a      	movs	r2, #58	@ 0x3a
 800800a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3302      	adds	r3, #2
 8008010:	222f      	movs	r2, #47	@ 0x2f
 8008012:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	3303      	adds	r3, #3
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20003a84 	.word	0x20003a84

08008034 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800803e:	2200      	movs	r2, #0
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff ffaa 	bl	8007f9c <FATFS_LinkDriverEx>
 8008048:	4603      	mov	r3, r0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <std>:
 8008054:	2300      	movs	r3, #0
 8008056:	b510      	push	{r4, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	e9c0 3300 	strd	r3, r3, [r0]
 800805e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008062:	6083      	str	r3, [r0, #8]
 8008064:	8181      	strh	r1, [r0, #12]
 8008066:	6643      	str	r3, [r0, #100]	@ 0x64
 8008068:	81c2      	strh	r2, [r0, #14]
 800806a:	6183      	str	r3, [r0, #24]
 800806c:	4619      	mov	r1, r3
 800806e:	2208      	movs	r2, #8
 8008070:	305c      	adds	r0, #92	@ 0x5c
 8008072:	f000 f9f9 	bl	8008468 <memset>
 8008076:	4b0d      	ldr	r3, [pc, #52]	@ (80080ac <std+0x58>)
 8008078:	6263      	str	r3, [r4, #36]	@ 0x24
 800807a:	4b0d      	ldr	r3, [pc, #52]	@ (80080b0 <std+0x5c>)
 800807c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800807e:	4b0d      	ldr	r3, [pc, #52]	@ (80080b4 <std+0x60>)
 8008080:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008082:	4b0d      	ldr	r3, [pc, #52]	@ (80080b8 <std+0x64>)
 8008084:	6323      	str	r3, [r4, #48]	@ 0x30
 8008086:	4b0d      	ldr	r3, [pc, #52]	@ (80080bc <std+0x68>)
 8008088:	6224      	str	r4, [r4, #32]
 800808a:	429c      	cmp	r4, r3
 800808c:	d006      	beq.n	800809c <std+0x48>
 800808e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008092:	4294      	cmp	r4, r2
 8008094:	d002      	beq.n	800809c <std+0x48>
 8008096:	33d0      	adds	r3, #208	@ 0xd0
 8008098:	429c      	cmp	r4, r3
 800809a:	d105      	bne.n	80080a8 <std+0x54>
 800809c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a4:	f000 ba58 	b.w	8008558 <__retarget_lock_init_recursive>
 80080a8:	bd10      	pop	{r4, pc}
 80080aa:	bf00      	nop
 80080ac:	080082b9 	.word	0x080082b9
 80080b0:	080082db 	.word	0x080082db
 80080b4:	08008313 	.word	0x08008313
 80080b8:	08008337 	.word	0x08008337
 80080bc:	20003a90 	.word	0x20003a90

080080c0 <stdio_exit_handler>:
 80080c0:	4a02      	ldr	r2, [pc, #8]	@ (80080cc <stdio_exit_handler+0xc>)
 80080c2:	4903      	ldr	r1, [pc, #12]	@ (80080d0 <stdio_exit_handler+0x10>)
 80080c4:	4803      	ldr	r0, [pc, #12]	@ (80080d4 <stdio_exit_handler+0x14>)
 80080c6:	f000 b869 	b.w	800819c <_fwalk_sglue>
 80080ca:	bf00      	nop
 80080cc:	20000030 	.word	0x20000030
 80080d0:	08008df5 	.word	0x08008df5
 80080d4:	20000040 	.word	0x20000040

080080d8 <cleanup_stdio>:
 80080d8:	6841      	ldr	r1, [r0, #4]
 80080da:	4b0c      	ldr	r3, [pc, #48]	@ (800810c <cleanup_stdio+0x34>)
 80080dc:	4299      	cmp	r1, r3
 80080de:	b510      	push	{r4, lr}
 80080e0:	4604      	mov	r4, r0
 80080e2:	d001      	beq.n	80080e8 <cleanup_stdio+0x10>
 80080e4:	f000 fe86 	bl	8008df4 <_fflush_r>
 80080e8:	68a1      	ldr	r1, [r4, #8]
 80080ea:	4b09      	ldr	r3, [pc, #36]	@ (8008110 <cleanup_stdio+0x38>)
 80080ec:	4299      	cmp	r1, r3
 80080ee:	d002      	beq.n	80080f6 <cleanup_stdio+0x1e>
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fe7f 	bl	8008df4 <_fflush_r>
 80080f6:	68e1      	ldr	r1, [r4, #12]
 80080f8:	4b06      	ldr	r3, [pc, #24]	@ (8008114 <cleanup_stdio+0x3c>)
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d004      	beq.n	8008108 <cleanup_stdio+0x30>
 80080fe:	4620      	mov	r0, r4
 8008100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008104:	f000 be76 	b.w	8008df4 <_fflush_r>
 8008108:	bd10      	pop	{r4, pc}
 800810a:	bf00      	nop
 800810c:	20003a90 	.word	0x20003a90
 8008110:	20003af8 	.word	0x20003af8
 8008114:	20003b60 	.word	0x20003b60

08008118 <global_stdio_init.part.0>:
 8008118:	b510      	push	{r4, lr}
 800811a:	4b0b      	ldr	r3, [pc, #44]	@ (8008148 <global_stdio_init.part.0+0x30>)
 800811c:	4c0b      	ldr	r4, [pc, #44]	@ (800814c <global_stdio_init.part.0+0x34>)
 800811e:	4a0c      	ldr	r2, [pc, #48]	@ (8008150 <global_stdio_init.part.0+0x38>)
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	4620      	mov	r0, r4
 8008124:	2200      	movs	r2, #0
 8008126:	2104      	movs	r1, #4
 8008128:	f7ff ff94 	bl	8008054 <std>
 800812c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008130:	2201      	movs	r2, #1
 8008132:	2109      	movs	r1, #9
 8008134:	f7ff ff8e 	bl	8008054 <std>
 8008138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800813c:	2202      	movs	r2, #2
 800813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008142:	2112      	movs	r1, #18
 8008144:	f7ff bf86 	b.w	8008054 <std>
 8008148:	20003bc8 	.word	0x20003bc8
 800814c:	20003a90 	.word	0x20003a90
 8008150:	080080c1 	.word	0x080080c1

08008154 <__sfp_lock_acquire>:
 8008154:	4801      	ldr	r0, [pc, #4]	@ (800815c <__sfp_lock_acquire+0x8>)
 8008156:	f000 ba00 	b.w	800855a <__retarget_lock_acquire_recursive>
 800815a:	bf00      	nop
 800815c:	20003bd1 	.word	0x20003bd1

08008160 <__sfp_lock_release>:
 8008160:	4801      	ldr	r0, [pc, #4]	@ (8008168 <__sfp_lock_release+0x8>)
 8008162:	f000 b9fb 	b.w	800855c <__retarget_lock_release_recursive>
 8008166:	bf00      	nop
 8008168:	20003bd1 	.word	0x20003bd1

0800816c <__sinit>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4604      	mov	r4, r0
 8008170:	f7ff fff0 	bl	8008154 <__sfp_lock_acquire>
 8008174:	6a23      	ldr	r3, [r4, #32]
 8008176:	b11b      	cbz	r3, 8008180 <__sinit+0x14>
 8008178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817c:	f7ff bff0 	b.w	8008160 <__sfp_lock_release>
 8008180:	4b04      	ldr	r3, [pc, #16]	@ (8008194 <__sinit+0x28>)
 8008182:	6223      	str	r3, [r4, #32]
 8008184:	4b04      	ldr	r3, [pc, #16]	@ (8008198 <__sinit+0x2c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f5      	bne.n	8008178 <__sinit+0xc>
 800818c:	f7ff ffc4 	bl	8008118 <global_stdio_init.part.0>
 8008190:	e7f2      	b.n	8008178 <__sinit+0xc>
 8008192:	bf00      	nop
 8008194:	080080d9 	.word	0x080080d9
 8008198:	20003bc8 	.word	0x20003bc8

0800819c <_fwalk_sglue>:
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	4607      	mov	r7, r0
 80081a2:	4688      	mov	r8, r1
 80081a4:	4614      	mov	r4, r2
 80081a6:	2600      	movs	r6, #0
 80081a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ac:	f1b9 0901 	subs.w	r9, r9, #1
 80081b0:	d505      	bpl.n	80081be <_fwalk_sglue+0x22>
 80081b2:	6824      	ldr	r4, [r4, #0]
 80081b4:	2c00      	cmp	r4, #0
 80081b6:	d1f7      	bne.n	80081a8 <_fwalk_sglue+0xc>
 80081b8:	4630      	mov	r0, r6
 80081ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d907      	bls.n	80081d4 <_fwalk_sglue+0x38>
 80081c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081c8:	3301      	adds	r3, #1
 80081ca:	d003      	beq.n	80081d4 <_fwalk_sglue+0x38>
 80081cc:	4629      	mov	r1, r5
 80081ce:	4638      	mov	r0, r7
 80081d0:	47c0      	blx	r8
 80081d2:	4306      	orrs	r6, r0
 80081d4:	3568      	adds	r5, #104	@ 0x68
 80081d6:	e7e9      	b.n	80081ac <_fwalk_sglue+0x10>

080081d8 <iprintf>:
 80081d8:	b40f      	push	{r0, r1, r2, r3}
 80081da:	b507      	push	{r0, r1, r2, lr}
 80081dc:	4906      	ldr	r1, [pc, #24]	@ (80081f8 <iprintf+0x20>)
 80081de:	ab04      	add	r3, sp, #16
 80081e0:	6808      	ldr	r0, [r1, #0]
 80081e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e6:	6881      	ldr	r1, [r0, #8]
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	f000 fadb 	bl	80087a4 <_vfiprintf_r>
 80081ee:	b003      	add	sp, #12
 80081f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr
 80081f8:	2000003c 	.word	0x2000003c

080081fc <_puts_r>:
 80081fc:	6a03      	ldr	r3, [r0, #32]
 80081fe:	b570      	push	{r4, r5, r6, lr}
 8008200:	6884      	ldr	r4, [r0, #8]
 8008202:	4605      	mov	r5, r0
 8008204:	460e      	mov	r6, r1
 8008206:	b90b      	cbnz	r3, 800820c <_puts_r+0x10>
 8008208:	f7ff ffb0 	bl	800816c <__sinit>
 800820c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800820e:	07db      	lsls	r3, r3, #31
 8008210:	d405      	bmi.n	800821e <_puts_r+0x22>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	0598      	lsls	r0, r3, #22
 8008216:	d402      	bmi.n	800821e <_puts_r+0x22>
 8008218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800821a:	f000 f99e 	bl	800855a <__retarget_lock_acquire_recursive>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	0719      	lsls	r1, r3, #28
 8008222:	d502      	bpl.n	800822a <_puts_r+0x2e>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d135      	bne.n	8008296 <_puts_r+0x9a>
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f000 f8c5 	bl	80083bc <__swsetup_r>
 8008232:	b380      	cbz	r0, 8008296 <_puts_r+0x9a>
 8008234:	f04f 35ff 	mov.w	r5, #4294967295
 8008238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800823a:	07da      	lsls	r2, r3, #31
 800823c:	d405      	bmi.n	800824a <_puts_r+0x4e>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	059b      	lsls	r3, r3, #22
 8008242:	d402      	bmi.n	800824a <_puts_r+0x4e>
 8008244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008246:	f000 f989 	bl	800855c <__retarget_lock_release_recursive>
 800824a:	4628      	mov	r0, r5
 800824c:	bd70      	pop	{r4, r5, r6, pc}
 800824e:	2b00      	cmp	r3, #0
 8008250:	da04      	bge.n	800825c <_puts_r+0x60>
 8008252:	69a2      	ldr	r2, [r4, #24]
 8008254:	429a      	cmp	r2, r3
 8008256:	dc17      	bgt.n	8008288 <_puts_r+0x8c>
 8008258:	290a      	cmp	r1, #10
 800825a:	d015      	beq.n	8008288 <_puts_r+0x8c>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	6022      	str	r2, [r4, #0]
 8008262:	7019      	strb	r1, [r3, #0]
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800826a:	3b01      	subs	r3, #1
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	2900      	cmp	r1, #0
 8008270:	d1ed      	bne.n	800824e <_puts_r+0x52>
 8008272:	2b00      	cmp	r3, #0
 8008274:	da11      	bge.n	800829a <_puts_r+0x9e>
 8008276:	4622      	mov	r2, r4
 8008278:	210a      	movs	r1, #10
 800827a:	4628      	mov	r0, r5
 800827c:	f000 f85f 	bl	800833e <__swbuf_r>
 8008280:	3001      	adds	r0, #1
 8008282:	d0d7      	beq.n	8008234 <_puts_r+0x38>
 8008284:	250a      	movs	r5, #10
 8008286:	e7d7      	b.n	8008238 <_puts_r+0x3c>
 8008288:	4622      	mov	r2, r4
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f857 	bl	800833e <__swbuf_r>
 8008290:	3001      	adds	r0, #1
 8008292:	d1e7      	bne.n	8008264 <_puts_r+0x68>
 8008294:	e7ce      	b.n	8008234 <_puts_r+0x38>
 8008296:	3e01      	subs	r6, #1
 8008298:	e7e4      	b.n	8008264 <_puts_r+0x68>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	6022      	str	r2, [r4, #0]
 80082a0:	220a      	movs	r2, #10
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e7ee      	b.n	8008284 <_puts_r+0x88>
	...

080082a8 <puts>:
 80082a8:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <puts+0xc>)
 80082aa:	4601      	mov	r1, r0
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	f7ff bfa5 	b.w	80081fc <_puts_r>
 80082b2:	bf00      	nop
 80082b4:	2000003c 	.word	0x2000003c

080082b8 <__sread>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	460c      	mov	r4, r1
 80082bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c0:	f000 f8fc 	bl	80084bc <_read_r>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	bfab      	itete	ge
 80082c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082ca:	89a3      	ldrhlt	r3, [r4, #12]
 80082cc:	181b      	addge	r3, r3, r0
 80082ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082d2:	bfac      	ite	ge
 80082d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082d6:	81a3      	strhlt	r3, [r4, #12]
 80082d8:	bd10      	pop	{r4, pc}

080082da <__swrite>:
 80082da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082de:	461f      	mov	r7, r3
 80082e0:	898b      	ldrh	r3, [r1, #12]
 80082e2:	05db      	lsls	r3, r3, #23
 80082e4:	4605      	mov	r5, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	4616      	mov	r6, r2
 80082ea:	d505      	bpl.n	80082f8 <__swrite+0x1e>
 80082ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f0:	2302      	movs	r3, #2
 80082f2:	2200      	movs	r2, #0
 80082f4:	f000 f8d0 	bl	8008498 <_lseek_r>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	4632      	mov	r2, r6
 8008306:	463b      	mov	r3, r7
 8008308:	4628      	mov	r0, r5
 800830a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830e:	f000 b8e7 	b.w	80084e0 <_write_r>

08008312 <__sseek>:
 8008312:	b510      	push	{r4, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831a:	f000 f8bd 	bl	8008498 <_lseek_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	bf15      	itete	ne
 8008324:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800832a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800832e:	81a3      	strheq	r3, [r4, #12]
 8008330:	bf18      	it	ne
 8008332:	81a3      	strhne	r3, [r4, #12]
 8008334:	bd10      	pop	{r4, pc}

08008336 <__sclose>:
 8008336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833a:	f000 b89d 	b.w	8008478 <_close_r>

0800833e <__swbuf_r>:
 800833e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008340:	460e      	mov	r6, r1
 8008342:	4614      	mov	r4, r2
 8008344:	4605      	mov	r5, r0
 8008346:	b118      	cbz	r0, 8008350 <__swbuf_r+0x12>
 8008348:	6a03      	ldr	r3, [r0, #32]
 800834a:	b90b      	cbnz	r3, 8008350 <__swbuf_r+0x12>
 800834c:	f7ff ff0e 	bl	800816c <__sinit>
 8008350:	69a3      	ldr	r3, [r4, #24]
 8008352:	60a3      	str	r3, [r4, #8]
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	071a      	lsls	r2, r3, #28
 8008358:	d501      	bpl.n	800835e <__swbuf_r+0x20>
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	b943      	cbnz	r3, 8008370 <__swbuf_r+0x32>
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	f000 f82b 	bl	80083bc <__swsetup_r>
 8008366:	b118      	cbz	r0, 8008370 <__swbuf_r+0x32>
 8008368:	f04f 37ff 	mov.w	r7, #4294967295
 800836c:	4638      	mov	r0, r7
 800836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	6922      	ldr	r2, [r4, #16]
 8008374:	1a98      	subs	r0, r3, r2
 8008376:	6963      	ldr	r3, [r4, #20]
 8008378:	b2f6      	uxtb	r6, r6
 800837a:	4283      	cmp	r3, r0
 800837c:	4637      	mov	r7, r6
 800837e:	dc05      	bgt.n	800838c <__swbuf_r+0x4e>
 8008380:	4621      	mov	r1, r4
 8008382:	4628      	mov	r0, r5
 8008384:	f000 fd36 	bl	8008df4 <_fflush_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	d1ed      	bne.n	8008368 <__swbuf_r+0x2a>
 800838c:	68a3      	ldr	r3, [r4, #8]
 800838e:	3b01      	subs	r3, #1
 8008390:	60a3      	str	r3, [r4, #8]
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	6022      	str	r2, [r4, #0]
 8008398:	701e      	strb	r6, [r3, #0]
 800839a:	6962      	ldr	r2, [r4, #20]
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	429a      	cmp	r2, r3
 80083a0:	d004      	beq.n	80083ac <__swbuf_r+0x6e>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	07db      	lsls	r3, r3, #31
 80083a6:	d5e1      	bpl.n	800836c <__swbuf_r+0x2e>
 80083a8:	2e0a      	cmp	r6, #10
 80083aa:	d1df      	bne.n	800836c <__swbuf_r+0x2e>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 fd20 	bl	8008df4 <_fflush_r>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d0d9      	beq.n	800836c <__swbuf_r+0x2e>
 80083b8:	e7d6      	b.n	8008368 <__swbuf_r+0x2a>
	...

080083bc <__swsetup_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4b29      	ldr	r3, [pc, #164]	@ (8008464 <__swsetup_r+0xa8>)
 80083c0:	4605      	mov	r5, r0
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	460c      	mov	r4, r1
 80083c6:	b118      	cbz	r0, 80083d0 <__swsetup_r+0x14>
 80083c8:	6a03      	ldr	r3, [r0, #32]
 80083ca:	b90b      	cbnz	r3, 80083d0 <__swsetup_r+0x14>
 80083cc:	f7ff fece 	bl	800816c <__sinit>
 80083d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d4:	0719      	lsls	r1, r3, #28
 80083d6:	d422      	bmi.n	800841e <__swsetup_r+0x62>
 80083d8:	06da      	lsls	r2, r3, #27
 80083da:	d407      	bmi.n	80083ec <__swsetup_r+0x30>
 80083dc:	2209      	movs	r2, #9
 80083de:	602a      	str	r2, [r5, #0]
 80083e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ea:	e033      	b.n	8008454 <__swsetup_r+0x98>
 80083ec:	0758      	lsls	r0, r3, #29
 80083ee:	d512      	bpl.n	8008416 <__swsetup_r+0x5a>
 80083f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f2:	b141      	cbz	r1, 8008406 <__swsetup_r+0x4a>
 80083f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d002      	beq.n	8008402 <__swsetup_r+0x46>
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f8af 	bl	8008560 <_free_r>
 8008402:	2300      	movs	r3, #0
 8008404:	6363      	str	r3, [r4, #52]	@ 0x34
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	2300      	movs	r3, #0
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	f043 0308 	orr.w	r3, r3, #8
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	b94b      	cbnz	r3, 8008436 <__swsetup_r+0x7a>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800842c:	d003      	beq.n	8008436 <__swsetup_r+0x7a>
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f000 fd2d 	bl	8008e90 <__smakebuf_r>
 8008436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843a:	f013 0201 	ands.w	r2, r3, #1
 800843e:	d00a      	beq.n	8008456 <__swsetup_r+0x9a>
 8008440:	2200      	movs	r2, #0
 8008442:	60a2      	str	r2, [r4, #8]
 8008444:	6962      	ldr	r2, [r4, #20]
 8008446:	4252      	negs	r2, r2
 8008448:	61a2      	str	r2, [r4, #24]
 800844a:	6922      	ldr	r2, [r4, #16]
 800844c:	b942      	cbnz	r2, 8008460 <__swsetup_r+0xa4>
 800844e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008452:	d1c5      	bne.n	80083e0 <__swsetup_r+0x24>
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	0799      	lsls	r1, r3, #30
 8008458:	bf58      	it	pl
 800845a:	6962      	ldrpl	r2, [r4, #20]
 800845c:	60a2      	str	r2, [r4, #8]
 800845e:	e7f4      	b.n	800844a <__swsetup_r+0x8e>
 8008460:	2000      	movs	r0, #0
 8008462:	e7f7      	b.n	8008454 <__swsetup_r+0x98>
 8008464:	2000003c 	.word	0x2000003c

08008468 <memset>:
 8008468:	4402      	add	r2, r0
 800846a:	4603      	mov	r3, r0
 800846c:	4293      	cmp	r3, r2
 800846e:	d100      	bne.n	8008472 <memset+0xa>
 8008470:	4770      	bx	lr
 8008472:	f803 1b01 	strb.w	r1, [r3], #1
 8008476:	e7f9      	b.n	800846c <memset+0x4>

08008478 <_close_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d06      	ldr	r5, [pc, #24]	@ (8008494 <_close_r+0x1c>)
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	f7f9 f827 	bl	80014d6 <_close>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_close_r+0x1a>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_close_r+0x1a>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20003bcc 	.word	0x20003bcc

08008498 <_lseek_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d07      	ldr	r5, [pc, #28]	@ (80084b8 <_lseek_r+0x20>)
 800849c:	4604      	mov	r4, r0
 800849e:	4608      	mov	r0, r1
 80084a0:	4611      	mov	r1, r2
 80084a2:	2200      	movs	r2, #0
 80084a4:	602a      	str	r2, [r5, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	f7f9 f83c 	bl	8001524 <_lseek>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d102      	bne.n	80084b6 <_lseek_r+0x1e>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	b103      	cbz	r3, 80084b6 <_lseek_r+0x1e>
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	20003bcc 	.word	0x20003bcc

080084bc <_read_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	@ (80084dc <_read_r+0x20>)
 80084c0:	4604      	mov	r4, r0
 80084c2:	4608      	mov	r0, r1
 80084c4:	4611      	mov	r1, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f7f8 ffe6 	bl	800149c <_read>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_read_r+0x1e>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_read_r+0x1e>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	20003bcc 	.word	0x20003bcc

080084e0 <_write_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4d07      	ldr	r5, [pc, #28]	@ (8008500 <_write_r+0x20>)
 80084e4:	4604      	mov	r4, r0
 80084e6:	4608      	mov	r0, r1
 80084e8:	4611      	mov	r1, r2
 80084ea:	2200      	movs	r2, #0
 80084ec:	602a      	str	r2, [r5, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	f7f8 fae0 	bl	8000ab4 <_write>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_write_r+0x1e>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_write_r+0x1e>
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	20003bcc 	.word	0x20003bcc

08008504 <__errno>:
 8008504:	4b01      	ldr	r3, [pc, #4]	@ (800850c <__errno+0x8>)
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	2000003c 	.word	0x2000003c

08008510 <__libc_init_array>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	4d0d      	ldr	r5, [pc, #52]	@ (8008548 <__libc_init_array+0x38>)
 8008514:	4c0d      	ldr	r4, [pc, #52]	@ (800854c <__libc_init_array+0x3c>)
 8008516:	1b64      	subs	r4, r4, r5
 8008518:	10a4      	asrs	r4, r4, #2
 800851a:	2600      	movs	r6, #0
 800851c:	42a6      	cmp	r6, r4
 800851e:	d109      	bne.n	8008534 <__libc_init_array+0x24>
 8008520:	4d0b      	ldr	r5, [pc, #44]	@ (8008550 <__libc_init_array+0x40>)
 8008522:	4c0c      	ldr	r4, [pc, #48]	@ (8008554 <__libc_init_array+0x44>)
 8008524:	f000 fd22 	bl	8008f6c <_init>
 8008528:	1b64      	subs	r4, r4, r5
 800852a:	10a4      	asrs	r4, r4, #2
 800852c:	2600      	movs	r6, #0
 800852e:	42a6      	cmp	r6, r4
 8008530:	d105      	bne.n	800853e <__libc_init_array+0x2e>
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	f855 3b04 	ldr.w	r3, [r5], #4
 8008538:	4798      	blx	r3
 800853a:	3601      	adds	r6, #1
 800853c:	e7ee      	b.n	800851c <__libc_init_array+0xc>
 800853e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008542:	4798      	blx	r3
 8008544:	3601      	adds	r6, #1
 8008546:	e7f2      	b.n	800852e <__libc_init_array+0x1e>
 8008548:	080098a0 	.word	0x080098a0
 800854c:	080098a0 	.word	0x080098a0
 8008550:	080098a0 	.word	0x080098a0
 8008554:	080098a4 	.word	0x080098a4

08008558 <__retarget_lock_init_recursive>:
 8008558:	4770      	bx	lr

0800855a <__retarget_lock_acquire_recursive>:
 800855a:	4770      	bx	lr

0800855c <__retarget_lock_release_recursive>:
 800855c:	4770      	bx	lr
	...

08008560 <_free_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4605      	mov	r5, r0
 8008564:	2900      	cmp	r1, #0
 8008566:	d041      	beq.n	80085ec <_free_r+0x8c>
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f0c      	subs	r4, r1, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfb8      	it	lt
 8008572:	18e4      	addlt	r4, r4, r3
 8008574:	f000 f8e0 	bl	8008738 <__malloc_lock>
 8008578:	4a1d      	ldr	r2, [pc, #116]	@ (80085f0 <_free_r+0x90>)
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	b933      	cbnz	r3, 800858c <_free_r+0x2c>
 800857e:	6063      	str	r3, [r4, #4]
 8008580:	6014      	str	r4, [r2, #0]
 8008582:	4628      	mov	r0, r5
 8008584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008588:	f000 b8dc 	b.w	8008744 <__malloc_unlock>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d908      	bls.n	80085a2 <_free_r+0x42>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	1821      	adds	r1, r4, r0
 8008594:	428b      	cmp	r3, r1
 8008596:	bf01      	itttt	eq
 8008598:	6819      	ldreq	r1, [r3, #0]
 800859a:	685b      	ldreq	r3, [r3, #4]
 800859c:	1809      	addeq	r1, r1, r0
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	e7ed      	b.n	800857e <_free_r+0x1e>
 80085a2:	461a      	mov	r2, r3
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b10b      	cbz	r3, 80085ac <_free_r+0x4c>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x42>
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	1850      	adds	r0, r2, r1
 80085b0:	42a0      	cmp	r0, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x6c>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4401      	add	r1, r0
 80085b8:	1850      	adds	r0, r2, r1
 80085ba:	4283      	cmp	r3, r0
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	d1e0      	bne.n	8008582 <_free_r+0x22>
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	4408      	add	r0, r1
 80085c8:	6010      	str	r0, [r2, #0]
 80085ca:	e7da      	b.n	8008582 <_free_r+0x22>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x74>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d6      	b.n	8008582 <_free_r+0x22>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf04      	itt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	bf04      	itt	eq
 80085e4:	1809      	addeq	r1, r1, r0
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	6054      	str	r4, [r2, #4]
 80085ea:	e7ca      	b.n	8008582 <_free_r+0x22>
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	20003bd8 	.word	0x20003bd8

080085f4 <sbrk_aligned>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4e0f      	ldr	r6, [pc, #60]	@ (8008634 <sbrk_aligned+0x40>)
 80085f8:	460c      	mov	r4, r1
 80085fa:	6831      	ldr	r1, [r6, #0]
 80085fc:	4605      	mov	r5, r0
 80085fe:	b911      	cbnz	r1, 8008606 <sbrk_aligned+0x12>
 8008600:	f000 fca4 	bl	8008f4c <_sbrk_r>
 8008604:	6030      	str	r0, [r6, #0]
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 fc9f 	bl	8008f4c <_sbrk_r>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d103      	bne.n	800861a <sbrk_aligned+0x26>
 8008612:	f04f 34ff 	mov.w	r4, #4294967295
 8008616:	4620      	mov	r0, r4
 8008618:	bd70      	pop	{r4, r5, r6, pc}
 800861a:	1cc4      	adds	r4, r0, #3
 800861c:	f024 0403 	bic.w	r4, r4, #3
 8008620:	42a0      	cmp	r0, r4
 8008622:	d0f8      	beq.n	8008616 <sbrk_aligned+0x22>
 8008624:	1a21      	subs	r1, r4, r0
 8008626:	4628      	mov	r0, r5
 8008628:	f000 fc90 	bl	8008f4c <_sbrk_r>
 800862c:	3001      	adds	r0, #1
 800862e:	d1f2      	bne.n	8008616 <sbrk_aligned+0x22>
 8008630:	e7ef      	b.n	8008612 <sbrk_aligned+0x1e>
 8008632:	bf00      	nop
 8008634:	20003bd4 	.word	0x20003bd4

08008638 <_malloc_r>:
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800863c:	1ccd      	adds	r5, r1, #3
 800863e:	f025 0503 	bic.w	r5, r5, #3
 8008642:	3508      	adds	r5, #8
 8008644:	2d0c      	cmp	r5, #12
 8008646:	bf38      	it	cc
 8008648:	250c      	movcc	r5, #12
 800864a:	2d00      	cmp	r5, #0
 800864c:	4606      	mov	r6, r0
 800864e:	db01      	blt.n	8008654 <_malloc_r+0x1c>
 8008650:	42a9      	cmp	r1, r5
 8008652:	d904      	bls.n	800865e <_malloc_r+0x26>
 8008654:	230c      	movs	r3, #12
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	2000      	movs	r0, #0
 800865a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008734 <_malloc_r+0xfc>
 8008662:	f000 f869 	bl	8008738 <__malloc_lock>
 8008666:	f8d8 3000 	ldr.w	r3, [r8]
 800866a:	461c      	mov	r4, r3
 800866c:	bb44      	cbnz	r4, 80086c0 <_malloc_r+0x88>
 800866e:	4629      	mov	r1, r5
 8008670:	4630      	mov	r0, r6
 8008672:	f7ff ffbf 	bl	80085f4 <sbrk_aligned>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	4604      	mov	r4, r0
 800867a:	d158      	bne.n	800872e <_malloc_r+0xf6>
 800867c:	f8d8 4000 	ldr.w	r4, [r8]
 8008680:	4627      	mov	r7, r4
 8008682:	2f00      	cmp	r7, #0
 8008684:	d143      	bne.n	800870e <_malloc_r+0xd6>
 8008686:	2c00      	cmp	r4, #0
 8008688:	d04b      	beq.n	8008722 <_malloc_r+0xea>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	4639      	mov	r1, r7
 800868e:	4630      	mov	r0, r6
 8008690:	eb04 0903 	add.w	r9, r4, r3
 8008694:	f000 fc5a 	bl	8008f4c <_sbrk_r>
 8008698:	4581      	cmp	r9, r0
 800869a:	d142      	bne.n	8008722 <_malloc_r+0xea>
 800869c:	6821      	ldr	r1, [r4, #0]
 800869e:	1a6d      	subs	r5, r5, r1
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ffa6 	bl	80085f4 <sbrk_aligned>
 80086a8:	3001      	adds	r0, #1
 80086aa:	d03a      	beq.n	8008722 <_malloc_r+0xea>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	442b      	add	r3, r5
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	f8d8 3000 	ldr.w	r3, [r8]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	bb62      	cbnz	r2, 8008714 <_malloc_r+0xdc>
 80086ba:	f8c8 7000 	str.w	r7, [r8]
 80086be:	e00f      	b.n	80086e0 <_malloc_r+0xa8>
 80086c0:	6822      	ldr	r2, [r4, #0]
 80086c2:	1b52      	subs	r2, r2, r5
 80086c4:	d420      	bmi.n	8008708 <_malloc_r+0xd0>
 80086c6:	2a0b      	cmp	r2, #11
 80086c8:	d917      	bls.n	80086fa <_malloc_r+0xc2>
 80086ca:	1961      	adds	r1, r4, r5
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	6025      	str	r5, [r4, #0]
 80086d0:	bf18      	it	ne
 80086d2:	6059      	strne	r1, [r3, #4]
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	bf08      	it	eq
 80086d8:	f8c8 1000 	streq.w	r1, [r8]
 80086dc:	5162      	str	r2, [r4, r5]
 80086de:	604b      	str	r3, [r1, #4]
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f82f 	bl	8008744 <__malloc_unlock>
 80086e6:	f104 000b 	add.w	r0, r4, #11
 80086ea:	1d23      	adds	r3, r4, #4
 80086ec:	f020 0007 	bic.w	r0, r0, #7
 80086f0:	1ac2      	subs	r2, r0, r3
 80086f2:	bf1c      	itt	ne
 80086f4:	1a1b      	subne	r3, r3, r0
 80086f6:	50a3      	strne	r3, [r4, r2]
 80086f8:	e7af      	b.n	800865a <_malloc_r+0x22>
 80086fa:	6862      	ldr	r2, [r4, #4]
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	bf0c      	ite	eq
 8008700:	f8c8 2000 	streq.w	r2, [r8]
 8008704:	605a      	strne	r2, [r3, #4]
 8008706:	e7eb      	b.n	80086e0 <_malloc_r+0xa8>
 8008708:	4623      	mov	r3, r4
 800870a:	6864      	ldr	r4, [r4, #4]
 800870c:	e7ae      	b.n	800866c <_malloc_r+0x34>
 800870e:	463c      	mov	r4, r7
 8008710:	687f      	ldr	r7, [r7, #4]
 8008712:	e7b6      	b.n	8008682 <_malloc_r+0x4a>
 8008714:	461a      	mov	r2, r3
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	42a3      	cmp	r3, r4
 800871a:	d1fb      	bne.n	8008714 <_malloc_r+0xdc>
 800871c:	2300      	movs	r3, #0
 800871e:	6053      	str	r3, [r2, #4]
 8008720:	e7de      	b.n	80086e0 <_malloc_r+0xa8>
 8008722:	230c      	movs	r3, #12
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	4630      	mov	r0, r6
 8008728:	f000 f80c 	bl	8008744 <__malloc_unlock>
 800872c:	e794      	b.n	8008658 <_malloc_r+0x20>
 800872e:	6005      	str	r5, [r0, #0]
 8008730:	e7d6      	b.n	80086e0 <_malloc_r+0xa8>
 8008732:	bf00      	nop
 8008734:	20003bd8 	.word	0x20003bd8

08008738 <__malloc_lock>:
 8008738:	4801      	ldr	r0, [pc, #4]	@ (8008740 <__malloc_lock+0x8>)
 800873a:	f7ff bf0e 	b.w	800855a <__retarget_lock_acquire_recursive>
 800873e:	bf00      	nop
 8008740:	20003bd0 	.word	0x20003bd0

08008744 <__malloc_unlock>:
 8008744:	4801      	ldr	r0, [pc, #4]	@ (800874c <__malloc_unlock+0x8>)
 8008746:	f7ff bf09 	b.w	800855c <__retarget_lock_release_recursive>
 800874a:	bf00      	nop
 800874c:	20003bd0 	.word	0x20003bd0

08008750 <__sfputc_r>:
 8008750:	6893      	ldr	r3, [r2, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	b410      	push	{r4}
 8008758:	6093      	str	r3, [r2, #8]
 800875a:	da08      	bge.n	800876e <__sfputc_r+0x1e>
 800875c:	6994      	ldr	r4, [r2, #24]
 800875e:	42a3      	cmp	r3, r4
 8008760:	db01      	blt.n	8008766 <__sfputc_r+0x16>
 8008762:	290a      	cmp	r1, #10
 8008764:	d103      	bne.n	800876e <__sfputc_r+0x1e>
 8008766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876a:	f7ff bde8 	b.w	800833e <__swbuf_r>
 800876e:	6813      	ldr	r3, [r2, #0]
 8008770:	1c58      	adds	r0, r3, #1
 8008772:	6010      	str	r0, [r2, #0]
 8008774:	7019      	strb	r1, [r3, #0]
 8008776:	4608      	mov	r0, r1
 8008778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877c:	4770      	bx	lr

0800877e <__sfputs_r>:
 800877e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008780:	4606      	mov	r6, r0
 8008782:	460f      	mov	r7, r1
 8008784:	4614      	mov	r4, r2
 8008786:	18d5      	adds	r5, r2, r3
 8008788:	42ac      	cmp	r4, r5
 800878a:	d101      	bne.n	8008790 <__sfputs_r+0x12>
 800878c:	2000      	movs	r0, #0
 800878e:	e007      	b.n	80087a0 <__sfputs_r+0x22>
 8008790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008794:	463a      	mov	r2, r7
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff ffda 	bl	8008750 <__sfputc_r>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d1f3      	bne.n	8008788 <__sfputs_r+0xa>
 80087a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087a4 <_vfiprintf_r>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	460d      	mov	r5, r1
 80087aa:	b09d      	sub	sp, #116	@ 0x74
 80087ac:	4614      	mov	r4, r2
 80087ae:	4698      	mov	r8, r3
 80087b0:	4606      	mov	r6, r0
 80087b2:	b118      	cbz	r0, 80087bc <_vfiprintf_r+0x18>
 80087b4:	6a03      	ldr	r3, [r0, #32]
 80087b6:	b90b      	cbnz	r3, 80087bc <_vfiprintf_r+0x18>
 80087b8:	f7ff fcd8 	bl	800816c <__sinit>
 80087bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	d405      	bmi.n	80087ce <_vfiprintf_r+0x2a>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	059a      	lsls	r2, r3, #22
 80087c6:	d402      	bmi.n	80087ce <_vfiprintf_r+0x2a>
 80087c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ca:	f7ff fec6 	bl	800855a <__retarget_lock_acquire_recursive>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	071b      	lsls	r3, r3, #28
 80087d2:	d501      	bpl.n	80087d8 <_vfiprintf_r+0x34>
 80087d4:	692b      	ldr	r3, [r5, #16]
 80087d6:	b99b      	cbnz	r3, 8008800 <_vfiprintf_r+0x5c>
 80087d8:	4629      	mov	r1, r5
 80087da:	4630      	mov	r0, r6
 80087dc:	f7ff fdee 	bl	80083bc <__swsetup_r>
 80087e0:	b170      	cbz	r0, 8008800 <_vfiprintf_r+0x5c>
 80087e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087e4:	07dc      	lsls	r4, r3, #31
 80087e6:	d504      	bpl.n	80087f2 <_vfiprintf_r+0x4e>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	b01d      	add	sp, #116	@ 0x74
 80087ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	0598      	lsls	r0, r3, #22
 80087f6:	d4f7      	bmi.n	80087e8 <_vfiprintf_r+0x44>
 80087f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087fa:	f7ff feaf 	bl	800855c <__retarget_lock_release_recursive>
 80087fe:	e7f3      	b.n	80087e8 <_vfiprintf_r+0x44>
 8008800:	2300      	movs	r3, #0
 8008802:	9309      	str	r3, [sp, #36]	@ 0x24
 8008804:	2320      	movs	r3, #32
 8008806:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800880a:	f8cd 800c 	str.w	r8, [sp, #12]
 800880e:	2330      	movs	r3, #48	@ 0x30
 8008810:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089c0 <_vfiprintf_r+0x21c>
 8008814:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008818:	f04f 0901 	mov.w	r9, #1
 800881c:	4623      	mov	r3, r4
 800881e:	469a      	mov	sl, r3
 8008820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008824:	b10a      	cbz	r2, 800882a <_vfiprintf_r+0x86>
 8008826:	2a25      	cmp	r2, #37	@ 0x25
 8008828:	d1f9      	bne.n	800881e <_vfiprintf_r+0x7a>
 800882a:	ebba 0b04 	subs.w	fp, sl, r4
 800882e:	d00b      	beq.n	8008848 <_vfiprintf_r+0xa4>
 8008830:	465b      	mov	r3, fp
 8008832:	4622      	mov	r2, r4
 8008834:	4629      	mov	r1, r5
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff ffa1 	bl	800877e <__sfputs_r>
 800883c:	3001      	adds	r0, #1
 800883e:	f000 80a7 	beq.w	8008990 <_vfiprintf_r+0x1ec>
 8008842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008844:	445a      	add	r2, fp
 8008846:	9209      	str	r2, [sp, #36]	@ 0x24
 8008848:	f89a 3000 	ldrb.w	r3, [sl]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 809f 	beq.w	8008990 <_vfiprintf_r+0x1ec>
 8008852:	2300      	movs	r3, #0
 8008854:	f04f 32ff 	mov.w	r2, #4294967295
 8008858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885c:	f10a 0a01 	add.w	sl, sl, #1
 8008860:	9304      	str	r3, [sp, #16]
 8008862:	9307      	str	r3, [sp, #28]
 8008864:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008868:	931a      	str	r3, [sp, #104]	@ 0x68
 800886a:	4654      	mov	r4, sl
 800886c:	2205      	movs	r2, #5
 800886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008872:	4853      	ldr	r0, [pc, #332]	@ (80089c0 <_vfiprintf_r+0x21c>)
 8008874:	f7f7 fcbc 	bl	80001f0 <memchr>
 8008878:	9a04      	ldr	r2, [sp, #16]
 800887a:	b9d8      	cbnz	r0, 80088b4 <_vfiprintf_r+0x110>
 800887c:	06d1      	lsls	r1, r2, #27
 800887e:	bf44      	itt	mi
 8008880:	2320      	movmi	r3, #32
 8008882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008886:	0713      	lsls	r3, r2, #28
 8008888:	bf44      	itt	mi
 800888a:	232b      	movmi	r3, #43	@ 0x2b
 800888c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008890:	f89a 3000 	ldrb.w	r3, [sl]
 8008894:	2b2a      	cmp	r3, #42	@ 0x2a
 8008896:	d015      	beq.n	80088c4 <_vfiprintf_r+0x120>
 8008898:	9a07      	ldr	r2, [sp, #28]
 800889a:	4654      	mov	r4, sl
 800889c:	2000      	movs	r0, #0
 800889e:	f04f 0c0a 	mov.w	ip, #10
 80088a2:	4621      	mov	r1, r4
 80088a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a8:	3b30      	subs	r3, #48	@ 0x30
 80088aa:	2b09      	cmp	r3, #9
 80088ac:	d94b      	bls.n	8008946 <_vfiprintf_r+0x1a2>
 80088ae:	b1b0      	cbz	r0, 80088de <_vfiprintf_r+0x13a>
 80088b0:	9207      	str	r2, [sp, #28]
 80088b2:	e014      	b.n	80088de <_vfiprintf_r+0x13a>
 80088b4:	eba0 0308 	sub.w	r3, r0, r8
 80088b8:	fa09 f303 	lsl.w	r3, r9, r3
 80088bc:	4313      	orrs	r3, r2
 80088be:	9304      	str	r3, [sp, #16]
 80088c0:	46a2      	mov	sl, r4
 80088c2:	e7d2      	b.n	800886a <_vfiprintf_r+0xc6>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	1d19      	adds	r1, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9103      	str	r1, [sp, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bfbb      	ittet	lt
 80088d0:	425b      	neglt	r3, r3
 80088d2:	f042 0202 	orrlt.w	r2, r2, #2
 80088d6:	9307      	strge	r3, [sp, #28]
 80088d8:	9307      	strlt	r3, [sp, #28]
 80088da:	bfb8      	it	lt
 80088dc:	9204      	strlt	r2, [sp, #16]
 80088de:	7823      	ldrb	r3, [r4, #0]
 80088e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80088e2:	d10a      	bne.n	80088fa <_vfiprintf_r+0x156>
 80088e4:	7863      	ldrb	r3, [r4, #1]
 80088e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e8:	d132      	bne.n	8008950 <_vfiprintf_r+0x1ac>
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	1d1a      	adds	r2, r3, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	9203      	str	r2, [sp, #12]
 80088f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088f6:	3402      	adds	r4, #2
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089d0 <_vfiprintf_r+0x22c>
 80088fe:	7821      	ldrb	r1, [r4, #0]
 8008900:	2203      	movs	r2, #3
 8008902:	4650      	mov	r0, sl
 8008904:	f7f7 fc74 	bl	80001f0 <memchr>
 8008908:	b138      	cbz	r0, 800891a <_vfiprintf_r+0x176>
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	eba0 000a 	sub.w	r0, r0, sl
 8008910:	2240      	movs	r2, #64	@ 0x40
 8008912:	4082      	lsls	r2, r0
 8008914:	4313      	orrs	r3, r2
 8008916:	3401      	adds	r4, #1
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891e:	4829      	ldr	r0, [pc, #164]	@ (80089c4 <_vfiprintf_r+0x220>)
 8008920:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008924:	2206      	movs	r2, #6
 8008926:	f7f7 fc63 	bl	80001f0 <memchr>
 800892a:	2800      	cmp	r0, #0
 800892c:	d03f      	beq.n	80089ae <_vfiprintf_r+0x20a>
 800892e:	4b26      	ldr	r3, [pc, #152]	@ (80089c8 <_vfiprintf_r+0x224>)
 8008930:	bb1b      	cbnz	r3, 800897a <_vfiprintf_r+0x1d6>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	3307      	adds	r3, #7
 8008936:	f023 0307 	bic.w	r3, r3, #7
 800893a:	3308      	adds	r3, #8
 800893c:	9303      	str	r3, [sp, #12]
 800893e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008940:	443b      	add	r3, r7
 8008942:	9309      	str	r3, [sp, #36]	@ 0x24
 8008944:	e76a      	b.n	800881c <_vfiprintf_r+0x78>
 8008946:	fb0c 3202 	mla	r2, ip, r2, r3
 800894a:	460c      	mov	r4, r1
 800894c:	2001      	movs	r0, #1
 800894e:	e7a8      	b.n	80088a2 <_vfiprintf_r+0xfe>
 8008950:	2300      	movs	r3, #0
 8008952:	3401      	adds	r4, #1
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	4619      	mov	r1, r3
 8008958:	f04f 0c0a 	mov.w	ip, #10
 800895c:	4620      	mov	r0, r4
 800895e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008962:	3a30      	subs	r2, #48	@ 0x30
 8008964:	2a09      	cmp	r2, #9
 8008966:	d903      	bls.n	8008970 <_vfiprintf_r+0x1cc>
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0c6      	beq.n	80088fa <_vfiprintf_r+0x156>
 800896c:	9105      	str	r1, [sp, #20]
 800896e:	e7c4      	b.n	80088fa <_vfiprintf_r+0x156>
 8008970:	fb0c 2101 	mla	r1, ip, r1, r2
 8008974:	4604      	mov	r4, r0
 8008976:	2301      	movs	r3, #1
 8008978:	e7f0      	b.n	800895c <_vfiprintf_r+0x1b8>
 800897a:	ab03      	add	r3, sp, #12
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	462a      	mov	r2, r5
 8008980:	4b12      	ldr	r3, [pc, #72]	@ (80089cc <_vfiprintf_r+0x228>)
 8008982:	a904      	add	r1, sp, #16
 8008984:	4630      	mov	r0, r6
 8008986:	f3af 8000 	nop.w
 800898a:	4607      	mov	r7, r0
 800898c:	1c78      	adds	r0, r7, #1
 800898e:	d1d6      	bne.n	800893e <_vfiprintf_r+0x19a>
 8008990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008992:	07d9      	lsls	r1, r3, #31
 8008994:	d405      	bmi.n	80089a2 <_vfiprintf_r+0x1fe>
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	059a      	lsls	r2, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_vfiprintf_r+0x1fe>
 800899c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800899e:	f7ff fddd 	bl	800855c <__retarget_lock_release_recursive>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	065b      	lsls	r3, r3, #25
 80089a6:	f53f af1f 	bmi.w	80087e8 <_vfiprintf_r+0x44>
 80089aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089ac:	e71e      	b.n	80087ec <_vfiprintf_r+0x48>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <_vfiprintf_r+0x228>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 f879 	bl	8008ab0 <_printf_i>
 80089be:	e7e4      	b.n	800898a <_vfiprintf_r+0x1e6>
 80089c0:	08009864 	.word	0x08009864
 80089c4:	0800986e 	.word	0x0800986e
 80089c8:	00000000 	.word	0x00000000
 80089cc:	0800877f 	.word	0x0800877f
 80089d0:	0800986a 	.word	0x0800986a

080089d4 <_printf_common>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	4616      	mov	r6, r2
 80089da:	4698      	mov	r8, r3
 80089dc:	688a      	ldr	r2, [r1, #8]
 80089de:	690b      	ldr	r3, [r1, #16]
 80089e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089e4:	4293      	cmp	r3, r2
 80089e6:	bfb8      	it	lt
 80089e8:	4613      	movlt	r3, r2
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089f0:	4607      	mov	r7, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b10a      	cbz	r2, 80089fa <_printf_common+0x26>
 80089f6:	3301      	adds	r3, #1
 80089f8:	6033      	str	r3, [r6, #0]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	0699      	lsls	r1, r3, #26
 80089fe:	bf42      	ittt	mi
 8008a00:	6833      	ldrmi	r3, [r6, #0]
 8008a02:	3302      	addmi	r3, #2
 8008a04:	6033      	strmi	r3, [r6, #0]
 8008a06:	6825      	ldr	r5, [r4, #0]
 8008a08:	f015 0506 	ands.w	r5, r5, #6
 8008a0c:	d106      	bne.n	8008a1c <_printf_common+0x48>
 8008a0e:	f104 0a19 	add.w	sl, r4, #25
 8008a12:	68e3      	ldr	r3, [r4, #12]
 8008a14:	6832      	ldr	r2, [r6, #0]
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dc26      	bgt.n	8008a6a <_printf_common+0x96>
 8008a1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a20:	6822      	ldr	r2, [r4, #0]
 8008a22:	3b00      	subs	r3, #0
 8008a24:	bf18      	it	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	0692      	lsls	r2, r2, #26
 8008a2a:	d42b      	bmi.n	8008a84 <_printf_common+0xb0>
 8008a2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a30:	4641      	mov	r1, r8
 8008a32:	4638      	mov	r0, r7
 8008a34:	47c8      	blx	r9
 8008a36:	3001      	adds	r0, #1
 8008a38:	d01e      	beq.n	8008a78 <_printf_common+0xa4>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	f003 0306 	and.w	r3, r3, #6
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	bf02      	ittt	eq
 8008a46:	68e5      	ldreq	r5, [r4, #12]
 8008a48:	6833      	ldreq	r3, [r6, #0]
 8008a4a:	1aed      	subeq	r5, r5, r3
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	bf0c      	ite	eq
 8008a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a54:	2500      	movne	r5, #0
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bfc4      	itt	gt
 8008a5a:	1a9b      	subgt	r3, r3, r2
 8008a5c:	18ed      	addgt	r5, r5, r3
 8008a5e:	2600      	movs	r6, #0
 8008a60:	341a      	adds	r4, #26
 8008a62:	42b5      	cmp	r5, r6
 8008a64:	d11a      	bne.n	8008a9c <_printf_common+0xc8>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e008      	b.n	8008a7c <_printf_common+0xa8>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	4641      	mov	r1, r8
 8008a70:	4638      	mov	r0, r7
 8008a72:	47c8      	blx	r9
 8008a74:	3001      	adds	r0, #1
 8008a76:	d103      	bne.n	8008a80 <_printf_common+0xac>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a80:	3501      	adds	r5, #1
 8008a82:	e7c6      	b.n	8008a12 <_printf_common+0x3e>
 8008a84:	18e1      	adds	r1, r4, r3
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	2030      	movs	r0, #48	@ 0x30
 8008a8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a8e:	4422      	add	r2, r4
 8008a90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a98:	3302      	adds	r3, #2
 8008a9a:	e7c7      	b.n	8008a2c <_printf_common+0x58>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4641      	mov	r1, r8
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c8      	blx	r9
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d0e6      	beq.n	8008a78 <_printf_common+0xa4>
 8008aaa:	3601      	adds	r6, #1
 8008aac:	e7d9      	b.n	8008a62 <_printf_common+0x8e>
	...

08008ab0 <_printf_i>:
 8008ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	7e0f      	ldrb	r7, [r1, #24]
 8008ab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ab8:	2f78      	cmp	r7, #120	@ 0x78
 8008aba:	4691      	mov	r9, r2
 8008abc:	4680      	mov	r8, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	469a      	mov	sl, r3
 8008ac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ac6:	d807      	bhi.n	8008ad8 <_printf_i+0x28>
 8008ac8:	2f62      	cmp	r7, #98	@ 0x62
 8008aca:	d80a      	bhi.n	8008ae2 <_printf_i+0x32>
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	f000 80d1 	beq.w	8008c74 <_printf_i+0x1c4>
 8008ad2:	2f58      	cmp	r7, #88	@ 0x58
 8008ad4:	f000 80b8 	beq.w	8008c48 <_printf_i+0x198>
 8008ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008adc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ae0:	e03a      	b.n	8008b58 <_printf_i+0xa8>
 8008ae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ae6:	2b15      	cmp	r3, #21
 8008ae8:	d8f6      	bhi.n	8008ad8 <_printf_i+0x28>
 8008aea:	a101      	add	r1, pc, #4	@ (adr r1, 8008af0 <_printf_i+0x40>)
 8008aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008ad9 	.word	0x08008ad9
 8008afc:	08008ad9 	.word	0x08008ad9
 8008b00:	08008ad9 	.word	0x08008ad9
 8008b04:	08008ad9 	.word	0x08008ad9
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008ad9 	.word	0x08008ad9
 8008b10:	08008ad9 	.word	0x08008ad9
 8008b14:	08008ad9 	.word	0x08008ad9
 8008b18:	08008ad9 	.word	0x08008ad9
 8008b1c:	08008c5b 	.word	0x08008c5b
 8008b20:	08008b87 	.word	0x08008b87
 8008b24:	08008c15 	.word	0x08008c15
 8008b28:	08008ad9 	.word	0x08008ad9
 8008b2c:	08008ad9 	.word	0x08008ad9
 8008b30:	08008c7d 	.word	0x08008c7d
 8008b34:	08008ad9 	.word	0x08008ad9
 8008b38:	08008b87 	.word	0x08008b87
 8008b3c:	08008ad9 	.word	0x08008ad9
 8008b40:	08008ad9 	.word	0x08008ad9
 8008b44:	08008c1d 	.word	0x08008c1d
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6032      	str	r2, [r6, #0]
 8008b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e09c      	b.n	8008c96 <_printf_i+0x1e6>
 8008b5c:	6833      	ldr	r3, [r6, #0]
 8008b5e:	6820      	ldr	r0, [r4, #0]
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	6031      	str	r1, [r6, #0]
 8008b64:	0606      	lsls	r6, r0, #24
 8008b66:	d501      	bpl.n	8008b6c <_printf_i+0xbc>
 8008b68:	681d      	ldr	r5, [r3, #0]
 8008b6a:	e003      	b.n	8008b74 <_printf_i+0xc4>
 8008b6c:	0645      	lsls	r5, r0, #25
 8008b6e:	d5fb      	bpl.n	8008b68 <_printf_i+0xb8>
 8008b70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	da03      	bge.n	8008b80 <_printf_i+0xd0>
 8008b78:	232d      	movs	r3, #45	@ 0x2d
 8008b7a:	426d      	negs	r5, r5
 8008b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b80:	4858      	ldr	r0, [pc, #352]	@ (8008ce4 <_printf_i+0x234>)
 8008b82:	230a      	movs	r3, #10
 8008b84:	e011      	b.n	8008baa <_printf_i+0xfa>
 8008b86:	6821      	ldr	r1, [r4, #0]
 8008b88:	6833      	ldr	r3, [r6, #0]
 8008b8a:	0608      	lsls	r0, r1, #24
 8008b8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b90:	d402      	bmi.n	8008b98 <_printf_i+0xe8>
 8008b92:	0649      	lsls	r1, r1, #25
 8008b94:	bf48      	it	mi
 8008b96:	b2ad      	uxthmi	r5, r5
 8008b98:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b9a:	4852      	ldr	r0, [pc, #328]	@ (8008ce4 <_printf_i+0x234>)
 8008b9c:	6033      	str	r3, [r6, #0]
 8008b9e:	bf14      	ite	ne
 8008ba0:	230a      	movne	r3, #10
 8008ba2:	2308      	moveq	r3, #8
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008baa:	6866      	ldr	r6, [r4, #4]
 8008bac:	60a6      	str	r6, [r4, #8]
 8008bae:	2e00      	cmp	r6, #0
 8008bb0:	db05      	blt.n	8008bbe <_printf_i+0x10e>
 8008bb2:	6821      	ldr	r1, [r4, #0]
 8008bb4:	432e      	orrs	r6, r5
 8008bb6:	f021 0104 	bic.w	r1, r1, #4
 8008bba:	6021      	str	r1, [r4, #0]
 8008bbc:	d04b      	beq.n	8008c56 <_printf_i+0x1a6>
 8008bbe:	4616      	mov	r6, r2
 8008bc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bc4:	fb03 5711 	mls	r7, r3, r1, r5
 8008bc8:	5dc7      	ldrb	r7, [r0, r7]
 8008bca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bce:	462f      	mov	r7, r5
 8008bd0:	42bb      	cmp	r3, r7
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	d9f4      	bls.n	8008bc0 <_printf_i+0x110>
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d10b      	bne.n	8008bf2 <_printf_i+0x142>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	07df      	lsls	r7, r3, #31
 8008bde:	d508      	bpl.n	8008bf2 <_printf_i+0x142>
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	6861      	ldr	r1, [r4, #4]
 8008be4:	4299      	cmp	r1, r3
 8008be6:	bfde      	ittt	le
 8008be8:	2330      	movle	r3, #48	@ 0x30
 8008bea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bf2:	1b92      	subs	r2, r2, r6
 8008bf4:	6122      	str	r2, [r4, #16]
 8008bf6:	f8cd a000 	str.w	sl, [sp]
 8008bfa:	464b      	mov	r3, r9
 8008bfc:	aa03      	add	r2, sp, #12
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4640      	mov	r0, r8
 8008c02:	f7ff fee7 	bl	80089d4 <_printf_common>
 8008c06:	3001      	adds	r0, #1
 8008c08:	d14a      	bne.n	8008ca0 <_printf_i+0x1f0>
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0e:	b004      	add	sp, #16
 8008c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	f043 0320 	orr.w	r3, r3, #32
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	4832      	ldr	r0, [pc, #200]	@ (8008ce8 <_printf_i+0x238>)
 8008c1e:	2778      	movs	r7, #120	@ 0x78
 8008c20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	6831      	ldr	r1, [r6, #0]
 8008c28:	061f      	lsls	r7, r3, #24
 8008c2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c2e:	d402      	bmi.n	8008c36 <_printf_i+0x186>
 8008c30:	065f      	lsls	r7, r3, #25
 8008c32:	bf48      	it	mi
 8008c34:	b2ad      	uxthmi	r5, r5
 8008c36:	6031      	str	r1, [r6, #0]
 8008c38:	07d9      	lsls	r1, r3, #31
 8008c3a:	bf44      	itt	mi
 8008c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8008c40:	6023      	strmi	r3, [r4, #0]
 8008c42:	b11d      	cbz	r5, 8008c4c <_printf_i+0x19c>
 8008c44:	2310      	movs	r3, #16
 8008c46:	e7ad      	b.n	8008ba4 <_printf_i+0xf4>
 8008c48:	4826      	ldr	r0, [pc, #152]	@ (8008ce4 <_printf_i+0x234>)
 8008c4a:	e7e9      	b.n	8008c20 <_printf_i+0x170>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	f023 0320 	bic.w	r3, r3, #32
 8008c52:	6023      	str	r3, [r4, #0]
 8008c54:	e7f6      	b.n	8008c44 <_printf_i+0x194>
 8008c56:	4616      	mov	r6, r2
 8008c58:	e7bd      	b.n	8008bd6 <_printf_i+0x126>
 8008c5a:	6833      	ldr	r3, [r6, #0]
 8008c5c:	6825      	ldr	r5, [r4, #0]
 8008c5e:	6961      	ldr	r1, [r4, #20]
 8008c60:	1d18      	adds	r0, r3, #4
 8008c62:	6030      	str	r0, [r6, #0]
 8008c64:	062e      	lsls	r6, r5, #24
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	d501      	bpl.n	8008c6e <_printf_i+0x1be>
 8008c6a:	6019      	str	r1, [r3, #0]
 8008c6c:	e002      	b.n	8008c74 <_printf_i+0x1c4>
 8008c6e:	0668      	lsls	r0, r5, #25
 8008c70:	d5fb      	bpl.n	8008c6a <_printf_i+0x1ba>
 8008c72:	8019      	strh	r1, [r3, #0]
 8008c74:	2300      	movs	r3, #0
 8008c76:	6123      	str	r3, [r4, #16]
 8008c78:	4616      	mov	r6, r2
 8008c7a:	e7bc      	b.n	8008bf6 <_printf_i+0x146>
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	1d1a      	adds	r2, r3, #4
 8008c80:	6032      	str	r2, [r6, #0]
 8008c82:	681e      	ldr	r6, [r3, #0]
 8008c84:	6862      	ldr	r2, [r4, #4]
 8008c86:	2100      	movs	r1, #0
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f7f7 fab1 	bl	80001f0 <memchr>
 8008c8e:	b108      	cbz	r0, 8008c94 <_printf_i+0x1e4>
 8008c90:	1b80      	subs	r0, r0, r6
 8008c92:	6060      	str	r0, [r4, #4]
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	6123      	str	r3, [r4, #16]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c9e:	e7aa      	b.n	8008bf6 <_printf_i+0x146>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	4632      	mov	r2, r6
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	47d0      	blx	sl
 8008caa:	3001      	adds	r0, #1
 8008cac:	d0ad      	beq.n	8008c0a <_printf_i+0x15a>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	079b      	lsls	r3, r3, #30
 8008cb2:	d413      	bmi.n	8008cdc <_printf_i+0x22c>
 8008cb4:	68e0      	ldr	r0, [r4, #12]
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	4298      	cmp	r0, r3
 8008cba:	bfb8      	it	lt
 8008cbc:	4618      	movlt	r0, r3
 8008cbe:	e7a6      	b.n	8008c0e <_printf_i+0x15e>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	47d0      	blx	sl
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d09d      	beq.n	8008c0a <_printf_i+0x15a>
 8008cce:	3501      	adds	r5, #1
 8008cd0:	68e3      	ldr	r3, [r4, #12]
 8008cd2:	9903      	ldr	r1, [sp, #12]
 8008cd4:	1a5b      	subs	r3, r3, r1
 8008cd6:	42ab      	cmp	r3, r5
 8008cd8:	dcf2      	bgt.n	8008cc0 <_printf_i+0x210>
 8008cda:	e7eb      	b.n	8008cb4 <_printf_i+0x204>
 8008cdc:	2500      	movs	r5, #0
 8008cde:	f104 0619 	add.w	r6, r4, #25
 8008ce2:	e7f5      	b.n	8008cd0 <_printf_i+0x220>
 8008ce4:	08009875 	.word	0x08009875
 8008ce8:	08009886 	.word	0x08009886

08008cec <__sflush_r>:
 8008cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf4:	0716      	lsls	r6, r2, #28
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	d454      	bmi.n	8008da6 <__sflush_r+0xba>
 8008cfc:	684b      	ldr	r3, [r1, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	dc02      	bgt.n	8008d08 <__sflush_r+0x1c>
 8008d02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	dd48      	ble.n	8008d9a <__sflush_r+0xae>
 8008d08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	d045      	beq.n	8008d9a <__sflush_r+0xae>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d14:	682f      	ldr	r7, [r5, #0]
 8008d16:	6a21      	ldr	r1, [r4, #32]
 8008d18:	602b      	str	r3, [r5, #0]
 8008d1a:	d030      	beq.n	8008d7e <__sflush_r+0x92>
 8008d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	0759      	lsls	r1, r3, #29
 8008d22:	d505      	bpl.n	8008d30 <__sflush_r+0x44>
 8008d24:	6863      	ldr	r3, [r4, #4]
 8008d26:	1ad2      	subs	r2, r2, r3
 8008d28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d2a:	b10b      	cbz	r3, 8008d30 <__sflush_r+0x44>
 8008d2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	2300      	movs	r3, #0
 8008d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d34:	6a21      	ldr	r1, [r4, #32]
 8008d36:	4628      	mov	r0, r5
 8008d38:	47b0      	blx	r6
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	d106      	bne.n	8008d4e <__sflush_r+0x62>
 8008d40:	6829      	ldr	r1, [r5, #0]
 8008d42:	291d      	cmp	r1, #29
 8008d44:	d82b      	bhi.n	8008d9e <__sflush_r+0xb2>
 8008d46:	4a2a      	ldr	r2, [pc, #168]	@ (8008df0 <__sflush_r+0x104>)
 8008d48:	40ca      	lsrs	r2, r1
 8008d4a:	07d6      	lsls	r6, r2, #31
 8008d4c:	d527      	bpl.n	8008d9e <__sflush_r+0xb2>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	6062      	str	r2, [r4, #4]
 8008d52:	04d9      	lsls	r1, r3, #19
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	6022      	str	r2, [r4, #0]
 8008d58:	d504      	bpl.n	8008d64 <__sflush_r+0x78>
 8008d5a:	1c42      	adds	r2, r0, #1
 8008d5c:	d101      	bne.n	8008d62 <__sflush_r+0x76>
 8008d5e:	682b      	ldr	r3, [r5, #0]
 8008d60:	b903      	cbnz	r3, 8008d64 <__sflush_r+0x78>
 8008d62:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d66:	602f      	str	r7, [r5, #0]
 8008d68:	b1b9      	cbz	r1, 8008d9a <__sflush_r+0xae>
 8008d6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	d002      	beq.n	8008d78 <__sflush_r+0x8c>
 8008d72:	4628      	mov	r0, r5
 8008d74:	f7ff fbf4 	bl	8008560 <_free_r>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d7c:	e00d      	b.n	8008d9a <__sflush_r+0xae>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4628      	mov	r0, r5
 8008d82:	47b0      	blx	r6
 8008d84:	4602      	mov	r2, r0
 8008d86:	1c50      	adds	r0, r2, #1
 8008d88:	d1c9      	bne.n	8008d1e <__sflush_r+0x32>
 8008d8a:	682b      	ldr	r3, [r5, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0c6      	beq.n	8008d1e <__sflush_r+0x32>
 8008d90:	2b1d      	cmp	r3, #29
 8008d92:	d001      	beq.n	8008d98 <__sflush_r+0xac>
 8008d94:	2b16      	cmp	r3, #22
 8008d96:	d11e      	bne.n	8008dd6 <__sflush_r+0xea>
 8008d98:	602f      	str	r7, [r5, #0]
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	e022      	b.n	8008de4 <__sflush_r+0xf8>
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da2:	b21b      	sxth	r3, r3
 8008da4:	e01b      	b.n	8008dde <__sflush_r+0xf2>
 8008da6:	690f      	ldr	r7, [r1, #16]
 8008da8:	2f00      	cmp	r7, #0
 8008daa:	d0f6      	beq.n	8008d9a <__sflush_r+0xae>
 8008dac:	0793      	lsls	r3, r2, #30
 8008dae:	680e      	ldr	r6, [r1, #0]
 8008db0:	bf08      	it	eq
 8008db2:	694b      	ldreq	r3, [r1, #20]
 8008db4:	600f      	str	r7, [r1, #0]
 8008db6:	bf18      	it	ne
 8008db8:	2300      	movne	r3, #0
 8008dba:	eba6 0807 	sub.w	r8, r6, r7
 8008dbe:	608b      	str	r3, [r1, #8]
 8008dc0:	f1b8 0f00 	cmp.w	r8, #0
 8008dc4:	dde9      	ble.n	8008d9a <__sflush_r+0xae>
 8008dc6:	6a21      	ldr	r1, [r4, #32]
 8008dc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008dca:	4643      	mov	r3, r8
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4628      	mov	r0, r5
 8008dd0:	47b0      	blx	r6
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	dc08      	bgt.n	8008de8 <__sflush_r+0xfc>
 8008dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de8:	4407      	add	r7, r0
 8008dea:	eba8 0800 	sub.w	r8, r8, r0
 8008dee:	e7e7      	b.n	8008dc0 <__sflush_r+0xd4>
 8008df0:	20400001 	.word	0x20400001

08008df4 <_fflush_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	690b      	ldr	r3, [r1, #16]
 8008df8:	4605      	mov	r5, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	b913      	cbnz	r3, 8008e04 <_fflush_r+0x10>
 8008dfe:	2500      	movs	r5, #0
 8008e00:	4628      	mov	r0, r5
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	b118      	cbz	r0, 8008e0e <_fflush_r+0x1a>
 8008e06:	6a03      	ldr	r3, [r0, #32]
 8008e08:	b90b      	cbnz	r3, 8008e0e <_fflush_r+0x1a>
 8008e0a:	f7ff f9af 	bl	800816c <__sinit>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0f3      	beq.n	8008dfe <_fflush_r+0xa>
 8008e16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e18:	07d0      	lsls	r0, r2, #31
 8008e1a:	d404      	bmi.n	8008e26 <_fflush_r+0x32>
 8008e1c:	0599      	lsls	r1, r3, #22
 8008e1e:	d402      	bmi.n	8008e26 <_fflush_r+0x32>
 8008e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e22:	f7ff fb9a 	bl	800855a <__retarget_lock_acquire_recursive>
 8008e26:	4628      	mov	r0, r5
 8008e28:	4621      	mov	r1, r4
 8008e2a:	f7ff ff5f 	bl	8008cec <__sflush_r>
 8008e2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e30:	07da      	lsls	r2, r3, #31
 8008e32:	4605      	mov	r5, r0
 8008e34:	d4e4      	bmi.n	8008e00 <_fflush_r+0xc>
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	059b      	lsls	r3, r3, #22
 8008e3a:	d4e1      	bmi.n	8008e00 <_fflush_r+0xc>
 8008e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e3e:	f7ff fb8d 	bl	800855c <__retarget_lock_release_recursive>
 8008e42:	e7dd      	b.n	8008e00 <_fflush_r+0xc>

08008e44 <__swhatbuf_r>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	460c      	mov	r4, r1
 8008e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	b096      	sub	sp, #88	@ 0x58
 8008e50:	4615      	mov	r5, r2
 8008e52:	461e      	mov	r6, r3
 8008e54:	da0d      	bge.n	8008e72 <__swhatbuf_r+0x2e>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e5c:	f04f 0100 	mov.w	r1, #0
 8008e60:	bf14      	ite	ne
 8008e62:	2340      	movne	r3, #64	@ 0x40
 8008e64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e68:	2000      	movs	r0, #0
 8008e6a:	6031      	str	r1, [r6, #0]
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	b016      	add	sp, #88	@ 0x58
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
 8008e72:	466a      	mov	r2, sp
 8008e74:	f000 f848 	bl	8008f08 <_fstat_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	dbec      	blt.n	8008e56 <__swhatbuf_r+0x12>
 8008e7c:	9901      	ldr	r1, [sp, #4]
 8008e7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e86:	4259      	negs	r1, r3
 8008e88:	4159      	adcs	r1, r3
 8008e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e8e:	e7eb      	b.n	8008e68 <__swhatbuf_r+0x24>

08008e90 <__smakebuf_r>:
 8008e90:	898b      	ldrh	r3, [r1, #12]
 8008e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e94:	079d      	lsls	r5, r3, #30
 8008e96:	4606      	mov	r6, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	d507      	bpl.n	8008eac <__smakebuf_r+0x1c>
 8008e9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	6123      	str	r3, [r4, #16]
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	6163      	str	r3, [r4, #20]
 8008ea8:	b003      	add	sp, #12
 8008eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eac:	ab01      	add	r3, sp, #4
 8008eae:	466a      	mov	r2, sp
 8008eb0:	f7ff ffc8 	bl	8008e44 <__swhatbuf_r>
 8008eb4:	9f00      	ldr	r7, [sp, #0]
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff fbbc 	bl	8008638 <_malloc_r>
 8008ec0:	b948      	cbnz	r0, 8008ed6 <__smakebuf_r+0x46>
 8008ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec6:	059a      	lsls	r2, r3, #22
 8008ec8:	d4ee      	bmi.n	8008ea8 <__smakebuf_r+0x18>
 8008eca:	f023 0303 	bic.w	r3, r3, #3
 8008ece:	f043 0302 	orr.w	r3, r3, #2
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	e7e2      	b.n	8008e9c <__smakebuf_r+0xc>
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	6020      	str	r0, [r4, #0]
 8008eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ee6:	b15b      	cbz	r3, 8008f00 <__smakebuf_r+0x70>
 8008ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eec:	4630      	mov	r0, r6
 8008eee:	f000 f81d 	bl	8008f2c <_isatty_r>
 8008ef2:	b128      	cbz	r0, 8008f00 <__smakebuf_r+0x70>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f023 0303 	bic.w	r3, r3, #3
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	431d      	orrs	r5, r3
 8008f04:	81a5      	strh	r5, [r4, #12]
 8008f06:	e7cf      	b.n	8008ea8 <__smakebuf_r+0x18>

08008f08 <_fstat_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d07      	ldr	r5, [pc, #28]	@ (8008f28 <_fstat_r+0x20>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	602b      	str	r3, [r5, #0]
 8008f16:	f7f8 faea 	bl	80014ee <_fstat>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d102      	bne.n	8008f24 <_fstat_r+0x1c>
 8008f1e:	682b      	ldr	r3, [r5, #0]
 8008f20:	b103      	cbz	r3, 8008f24 <_fstat_r+0x1c>
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	bd38      	pop	{r3, r4, r5, pc}
 8008f26:	bf00      	nop
 8008f28:	20003bcc 	.word	0x20003bcc

08008f2c <_isatty_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d06      	ldr	r5, [pc, #24]	@ (8008f48 <_isatty_r+0x1c>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	f7f8 fae9 	bl	800150e <_isatty>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_isatty_r+0x1a>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_isatty_r+0x1a>
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	20003bcc 	.word	0x20003bcc

08008f4c <_sbrk_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d06      	ldr	r5, [pc, #24]	@ (8008f68 <_sbrk_r+0x1c>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	602b      	str	r3, [r5, #0]
 8008f58:	f7f8 faf2 	bl	8001540 <_sbrk>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_sbrk_r+0x1a>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_sbrk_r+0x1a>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	20003bcc 	.word	0x20003bcc

08008f6c <_init>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr

08008f78 <_fini>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr
