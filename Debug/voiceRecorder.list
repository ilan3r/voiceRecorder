
voiceRecorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08007058  08007058  00008058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007348  08007348  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007348  08007348  00008348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007350  08007350  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007350  08007350  00008350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007354  08007354  00008354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007358  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000080  080073d8  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080073d8  000092d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d704  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bd  00000000  00000000  000167b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00018b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000983  00000000  00000000  000197f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018252  00000000  00000000  0001a173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011017  00000000  00000000  000323c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6e6  00000000  00000000  000433dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  000cdb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d1524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007040 	.word	0x08007040

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007040 	.word	0x08007040

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <_write+0x28>)
 80005d4:	f002 f8b8 	bl	8002748 <HAL_UART_Transmit>
    return len;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000f4 	.word	0x200000f4

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fc3c 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f93c 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fa04 	bl	8000a04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f9d8 	bl	80009b0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000600:	f000 f9a0 	bl	8000944 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000604:	f002 fc5c 	bl	8002ec0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  char msg[] = "hello world!... \r\n";
 8000608:	4b85      	ldr	r3, [pc, #532]	@ (8000820 <main+0x238>)
 800060a:	f207 448c 	addw	r4, r7, #1164	@ 0x48c
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	682b      	ldr	r3, [r5, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	8022      	strh	r2, [r4, #0]
 800061a:	3402      	adds	r4, #2
 800061c:	0c1b      	lsrs	r3, r3, #16
 800061e:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (const uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000620:	f207 438c 	addw	r3, r7, #1164	@ 0x48c
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fddb 	bl	80001e0 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b29a      	uxth	r2, r3
 800062e:	f207 418c 	addw	r1, r7, #1164	@ 0x48c
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	487b      	ldr	r0, [pc, #492]	@ (8000824 <main+0x23c>)
 8000638:	f002 f886 	bl	8002748 <HAL_UART_Transmit>

  printf("hello from print\r\n");
 800063c:	487a      	ldr	r0, [pc, #488]	@ (8000828 <main+0x240>)
 800063e:	f005 fe9d 	bl	800637c <puts>



  printf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000642:	487a      	ldr	r0, [pc, #488]	@ (800082c <main+0x244>)
 8000644:	f005 fe9a 	bl	800637c <puts>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064c:	f000 fc80 	bl	8000f50 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000650:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8000654:	2201      	movs	r2, #1
 8000656:	4976      	ldr	r1, [pc, #472]	@ (8000830 <main+0x248>)
 8000658:	4618      	mov	r0, r3
 800065a:	f004 feb9 	bl	80053d0 <f_mount>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK) {
 8000664:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000668:	2b00      	cmp	r3, #0
 800066a:	d007      	beq.n	800067c <main+0x94>
	printf("f_mount error (%i)\r\n", fres);
 800066c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000670:	4619      	mov	r1, r3
 8000672:	4870      	ldr	r0, [pc, #448]	@ (8000834 <main+0x24c>)
 8000674:	f005 fe1a 	bl	80062ac <iprintf>
	while(1);
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <main+0x90>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 800067c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000680:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000684:	4619      	mov	r1, r3
 8000686:	486a      	ldr	r0, [pc, #424]	@ (8000830 <main+0x248>)
 8000688:	f005 fbfe 	bl	8005e88 <f_getfree>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK) {
 8000692:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000696:	2b00      	cmp	r3, #0
 8000698:	d007      	beq.n	80006aa <main+0xc2>
	printf("f_getfree error (%i)\r\n", fres);
 800069a:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800069e:	4619      	mov	r1, r3
 80006a0:	4865      	ldr	r0, [pc, #404]	@ (8000838 <main+0x250>)
 80006a2:	f005 fe03 	bl	80062ac <iprintf>
	while(1);
 80006a6:	bf00      	nop
 80006a8:	e7fd      	b.n	80006a6 <main+0xbe>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80006aa:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80006ae:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	3b02      	subs	r3, #2
 80006b8:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 80006bc:	f2a2 428c 	subw	r2, r2, #1164	@ 0x48c
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	8952      	ldrh	r2, [r2, #10]
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
  free_sectors = free_clusters * getFreeFs->csize;
 80006cc:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80006d0:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	895b      	ldrh	r3, [r3, #10]
 80006d8:	461a      	mov	r2, r3
 80006da:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80006de:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4

  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006ec:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	@ 0x4a8
 80006f0:	0859      	lsrs	r1, r3, #1
 80006f2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80006f6:	085b      	lsrs	r3, r3, #1
 80006f8:	461a      	mov	r2, r3
 80006fa:	4850      	ldr	r0, [pc, #320]	@ (800083c <main+0x254>)
 80006fc:	f005 fdd6 	bl	80062ac <iprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 8000700:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000704:	2201      	movs	r2, #1
 8000706:	494e      	ldr	r1, [pc, #312]	@ (8000840 <main+0x258>)
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fea7 	bl	800545c <f_open>
 800070e:	4603      	mov	r3, r0
 8000710:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if (fres != FR_OK) {
 8000714:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000718:	2b00      	cmp	r3, #0
 800071a:	d007      	beq.n	800072c <main+0x144>
	printf("f_open error (%i)\r\n", fres);
 800071c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000720:	4619      	mov	r1, r3
 8000722:	4848      	ldr	r0, [pc, #288]	@ (8000844 <main+0x25c>)
 8000724:	f005 fdc2 	bl	80062ac <iprintf>
	while(1);
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <main+0x140>
  }
  printf("I was able to open 'test.txt' for reading!\r\n");
 800072c:	4846      	ldr	r0, [pc, #280]	@ (8000848 <main+0x260>)
 800072e:	f005 fe25 	bl	800637c <puts>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000732:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	211e      	movs	r1, #30
 800073a:	4618      	mov	r0, r3
 800073c:	f005 fc59 	bl	8005ff2 <f_gets>
 8000740:	f8c7 04a0 	str.w	r0, [r7, #1184]	@ 0x4a0
  if(rres != 0) {
 8000744:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d005      	beq.n	8000758 <main+0x170>
	printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	483e      	ldr	r0, [pc, #248]	@ (800084c <main+0x264>)
 8000752:	f005 fdab 	bl	80062ac <iprintf>
 8000756:	e005      	b.n	8000764 <main+0x17c>
  } else {
	printf("f_gets error (%i)\r\n", fres);
 8000758:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 800075c:	4619      	mov	r1, r3
 800075e:	483c      	ldr	r0, [pc, #240]	@ (8000850 <main+0x268>)
 8000760:	f005 fda4 	bl	80062ac <iprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000764:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000768:	4618      	mov	r0, r3
 800076a:	f005 fb63 	bl	8005e34 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800076e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000772:	221a      	movs	r2, #26
 8000774:	4937      	ldr	r1, [pc, #220]	@ (8000854 <main+0x26c>)
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fe70 	bl	800545c <f_open>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if(fres == FR_OK) {
 8000782:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000786:	2b00      	cmp	r3, #0
 8000788:	d103      	bne.n	8000792 <main+0x1aa>
	printf("I was able to open 'write.txt' for writing\r\n");
 800078a:	4833      	ldr	r0, [pc, #204]	@ (8000858 <main+0x270>)
 800078c:	f005 fdf6 	bl	800637c <puts>
 8000790:	e005      	b.n	800079e <main+0x1b6>
  } else {
	printf("f_open error (%i)\r\n", fres);
 8000792:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000796:	4619      	mov	r1, r3
 8000798:	482a      	ldr	r0, [pc, #168]	@ (8000844 <main+0x25c>)
 800079a:	f005 fd87 	bl	80062ac <iprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4a2e      	ldr	r2, [pc, #184]	@ (800085c <main+0x274>)
 80007a2:	461c      	mov	r4, r3
 80007a4:	4615      	mov	r5, r2
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	682b      	ldr	r3, [r5, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	8022      	strh	r2, [r4, #0]
 80007b0:	3402      	adds	r4, #2
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80007b6:	463b      	mov	r3, r7
 80007b8:	1d39      	adds	r1, r7, #4
 80007ba:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80007be:	2213      	movs	r2, #19
 80007c0:	f005 f945 	bl	8005a4e <f_write>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
  if(fres == FR_OK) {
 80007ca:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d109      	bne.n	80007e6 <main+0x1fe>
	printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007d2:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80007d6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	4820      	ldr	r0, [pc, #128]	@ (8000860 <main+0x278>)
 80007e0:	f005 fd64 	bl	80062ac <iprintf>
 80007e4:	e005      	b.n	80007f2 <main+0x20a>
  } else {
	printf("f_write error (%i)\r\n", fres);
 80007e6:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80007ea:	4619      	mov	r1, r3
 80007ec:	481d      	ldr	r0, [pc, #116]	@ (8000864 <main+0x27c>)
 80007ee:	f005 fd5d 	bl	80062ac <iprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 80007f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fb1c 	bl	8005e34 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	490c      	ldr	r1, [pc, #48]	@ (8000830 <main+0x248>)
 8000800:	2000      	movs	r0, #0
 8000802:	f004 fde5 	bl	80053d0 <f_mount>

  printf("DONE! \r\n");
 8000806:	4818      	ldr	r0, [pc, #96]	@ (8000868 <main+0x280>)
 8000808:	f005 fdb8 	bl	800637c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800080c:	2120      	movs	r1, #32
 800080e:	4817      	ldr	r0, [pc, #92]	@ (800086c <main+0x284>)
 8000810:	f000 fe45 	bl	800149e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000814:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000818:	f000 fb9a 	bl	8000f50 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800081c:	bf00      	nop
 800081e:	e7f5      	b.n	800080c <main+0x224>
 8000820:	08007224 	.word	0x08007224
 8000824:	200000f4 	.word	0x200000f4
 8000828:	08007058 	.word	0x08007058
 800082c:	0800706c 	.word	0x0800706c
 8000830:	0800708c 	.word	0x0800708c
 8000834:	08007090 	.word	0x08007090
 8000838:	080070a8 	.word	0x080070a8
 800083c:	080070c0 	.word	0x080070c0
 8000840:	08007108 	.word	0x08007108
 8000844:	08007114 	.word	0x08007114
 8000848:	08007128 	.word	0x08007128
 800084c:	08007154 	.word	0x08007154
 8000850:	08007180 	.word	0x08007180
 8000854:	08007194 	.word	0x08007194
 8000858:	080071a0 	.word	0x080071a0
 800085c:	080071cc 	.word	0x080071cc
 8000860:	080071e0 	.word	0x080071e0
 8000864:	08007204 	.word	0x08007204
 8000868:	0800721c 	.word	0x0800721c
 800086c:	40020000 	.word	0x40020000

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	@ 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	@ 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f005 fe5c 	bl	800653c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b28      	ldr	r3, [pc, #160]	@ (800093c <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	@ (800093c <SystemClock_Config+0xcc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	@ (800093c <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008bc:	4a20      	ldr	r2, [pc, #128]	@ (8000940 <SystemClock_Config+0xd0>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d8:	2310      	movs	r3, #16
 80008da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e4:	2308      	movs	r3, #8
 80008e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fdeb 	bl	80014d4 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000904:	f000 f8e2 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2102      	movs	r1, #2
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f84d 	bl	80019c4 <HAL_RCC_ClockConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000930:	f000 f8cc 	bl	8000acc <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	@ 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <MX_SPI1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000978:	2238      	movs	r2, #56	@ 0x38
 800097a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000990:	220a      	movs	r2, #10
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000996:	f001 fa35 	bl	8001e04 <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a0:	f000 f894 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000009c 	.word	0x2000009c
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <MX_USART2_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e8:	f001 fe5e 	bl	80026a8 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f000 f86b 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000f4 	.word	0x200000f4
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a28      	ldr	r2, [pc, #160]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a21      	ldr	r2, [pc, #132]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a13      	ldr	r2, [pc, #76]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_GPIO_Init+0xc0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a90:	f000 fcec 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2120      	movs	r1, #32
 8000a98:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000a9a:	f000 fce7 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LD3_Pin;
 8000a9e:	2330      	movs	r3, #48	@ 0x30
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_GPIO_Init+0xc4>)
 8000ab6:	f000 fb55 	bl	8001164 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <HAL_SPI_MspInit+0xc0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d149      	bne.n	8000bde <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b27      	ldr	r3, [pc, #156]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a18      	ldr	r2, [pc, #96]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_SPI_MspInit+0xc4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <HAL_SPI_MspInit+0xc8>)
 8000bba:	f000 fad3 	bl	8001164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <HAL_SPI_MspInit+0xcc>)
 8000bda:	f000 fac3 	bl	8001164 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40013000 	.word	0x40013000
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	@ (8000c7c <HAL_UART_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c52:	230c      	movs	r3, #12
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <HAL_UART_MspInit+0x8c>)
 8000c6e:	f000 fa79 	bl	8001164 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	@ 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 f917 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e00a      	b.n	8000d0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf8:	f3af 8000 	nop.w
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1c5a      	adds	r2, r3, #1
 8000d02:	60ba      	str	r2, [r7, #8]
 8000d04:	b2ca      	uxtb	r2, r1
 8000d06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbf0      	blt.n	8000cf8 <_read+0x12>
  }

  return len;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d48:	605a      	str	r2, [r3, #4]
  return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_isatty>:

int _isatty(int file)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f005 fc0e 	bl	80065d8 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20018000 	.word	0x20018000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	2000013c 	.word	0x2000013c
 8000df0:	200002d8 	.word	0x200002d8

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e1c:	f7ff ffea 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f005 fbcd 	bl	80065e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fbcd 	bl	80005e8 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e5c:	08007358 	.word	0x08007358
  ldr r2, =_sbss
 8000e60:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e64:	200002d8 	.word	0x200002d8

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f931 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe1a 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f93b 	bl	800114a <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f911 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000140 	.word	0x20000140

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000140 	.word	0x20000140

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff47 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5c 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb0 	bl	80010b8 <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e159      	b.n	8001434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8148 	bne.w	800142e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d005      	beq.n	80011b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b03      	cmp	r3, #3
 8001222:	d017      	beq.n	8001254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d123      	bne.n	80012a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a2 	beq.w	800142e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b57      	ldr	r3, [pc, #348]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b54      	ldr	r3, [pc, #336]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a49      	ldr	r2, [pc, #292]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x202>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a48      	ldr	r2, [pc, #288]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x1fe>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a47      	ldr	r2, [pc, #284]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x1fa>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a46      	ldr	r2, [pc, #280]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x1f6>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a45      	ldr	r2, [pc, #276]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x1f2>
 8001352:	2304      	movs	r3, #4
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001356:	2307      	movs	r3, #7
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	4935      	ldr	r1, [pc, #212]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001386:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d4:	4a24      	ldr	r2, [pc, #144]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_GPIO_Init+0x304>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f aea2 	bls.w	8001180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001488:	e003      	b.n	8001492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b0:	887a      	ldrh	r2, [r7, #2]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4013      	ands	r3, r2
 80014b6:	041a      	lsls	r2, r3, #16
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	400b      	ands	r3, r1
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e267      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d075      	beq.n	80015de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014f2:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d00c      	beq.n	8001518 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b85      	ldr	r3, [pc, #532]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001506:	2b08      	cmp	r3, #8
 8001508:	d112      	bne.n	8001530 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150a:	4b82      	ldr	r3, [pc, #520]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001516:	d10b      	bne.n	8001530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	4b7e      	ldr	r3, [pc, #504]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d05b      	beq.n	80015dc <HAL_RCC_OscConfig+0x108>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d157      	bne.n	80015dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e242      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001538:	d106      	bne.n	8001548 <HAL_RCC_OscConfig+0x74>
 800153a:	4b76      	ldr	r3, [pc, #472]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a75      	ldr	r2, [pc, #468]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xb0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x98>
 8001552:	4b70      	ldr	r3, [pc, #448]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6f      	ldr	r2, [pc, #444]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b6d      	ldr	r3, [pc, #436]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6c      	ldr	r2, [pc, #432]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xb0>
 800156c:	4b69      	ldr	r3, [pc, #420]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a68      	ldr	r2, [pc, #416]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b66      	ldr	r3, [pc, #408]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a65      	ldr	r2, [pc, #404]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fcd4 	bl	8000f38 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fcd0 	bl	8000f38 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e207      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xc0>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fcc0 	bl	8000f38 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fcbc 	bl	8000f38 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	@ 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1f3      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b51      	ldr	r3, [pc, #324]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0xe8>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001602:	4b44      	ldr	r3, [pc, #272]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b41      	ldr	r3, [pc, #260]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x152>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1c7      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4937      	ldr	r1, [pc, #220]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_OscConfig+0x244>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fc75 	bl	8000f38 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fc71 	bl	8000f38 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1a8      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b2b      	ldr	r3, [pc, #172]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4925      	ldr	r1, [pc, #148]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <HAL_RCC_OscConfig+0x244>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fc54 	bl	8000f38 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fc50 	bl	8000f38 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e187      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d036      	beq.n	800172c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d016      	beq.n	80016f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_RCC_OscConfig+0x248>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fc34 	bl	8000f38 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc30 	bl	8000f38 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e167      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_RCC_OscConfig+0x240>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x200>
 80016f2:	e01b      	b.n	800172c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_RCC_OscConfig+0x248>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fc1d 	bl	8000f38 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	e00e      	b.n	8001720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fc19 	bl	8000f38 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d907      	bls.n	8001720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e150      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
 8001714:	40023800 	.word	0x40023800
 8001718:	42470000 	.word	0x42470000
 800171c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b88      	ldr	r3, [pc, #544]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 8001722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ea      	bne.n	8001702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8097 	beq.w	8001868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b81      	ldr	r3, [pc, #516]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10f      	bne.n	800176a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b7d      	ldr	r3, [pc, #500]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4a7c      	ldr	r2, [pc, #496]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	@ 0x40
 800175a:	4b7a      	ldr	r3, [pc, #488]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b77      	ldr	r3, [pc, #476]	@ (8001948 <HAL_RCC_OscConfig+0x474>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b74      	ldr	r3, [pc, #464]	@ (8001948 <HAL_RCC_OscConfig+0x474>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a73      	ldr	r2, [pc, #460]	@ (8001948 <HAL_RCC_OscConfig+0x474>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff fbd9 	bl	8000f38 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff fbd5 	bl	8000f38 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e10c      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b6a      	ldr	r3, [pc, #424]	@ (8001948 <HAL_RCC_OscConfig+0x474>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x2ea>
 80017b0:	4b64      	ldr	r3, [pc, #400]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b4:	4a63      	ldr	r2, [pc, #396]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80017bc:	e01c      	b.n	80017f8 <HAL_RCC_OscConfig+0x324>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x30c>
 80017c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0x324>
 80017e0:	4b58      	ldr	r3, [pc, #352]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e4:	4a57      	ldr	r2, [pc, #348]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ec:	4b55      	ldr	r3, [pc, #340]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f0:	4a54      	ldr	r2, [pc, #336]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d015      	beq.n	800182c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff fb9a 	bl	8000f38 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fb96 	bl	8000f38 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0cb      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181e:	4b49      	ldr	r3, [pc, #292]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0ee      	beq.n	8001808 <HAL_RCC_OscConfig+0x334>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fb84 	bl	8000f38 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff fb80 	bl	8000f38 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0b5      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	4b3e      	ldr	r3, [pc, #248]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ee      	bne.n	8001834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b39      	ldr	r3, [pc, #228]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	4a38      	ldr	r2, [pc, #224]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 8001862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80a1 	beq.w	80019b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001872:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b08      	cmp	r3, #8
 800187c:	d05c      	beq.n	8001938 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d141      	bne.n	800190a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_RCC_OscConfig+0x478>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fb54 	bl	8000f38 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fb50 	bl	8000f38 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e087      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	019b      	lsls	r3, r3, #6
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	491b      	ldr	r1, [pc, #108]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x478>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb29 	bl	8000f38 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff fb25 	bl	8000f38 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e05c      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x416>
 8001908:	e054      	b.n	80019b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <HAL_RCC_OscConfig+0x478>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fb12 	bl	8000f38 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff fb0e 	bl	8000f38 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e045      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_RCC_OscConfig+0x470>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x444>
 8001936:	e03d      	b.n	80019b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e038      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000
 800194c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <HAL_RCC_OscConfig+0x4ec>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d028      	beq.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d121      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11a      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001988:	4293      	cmp	r3, r2
 800198a:	d111      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0cc      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b68      	ldr	r3, [pc, #416]	@ (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d90c      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b65      	ldr	r3, [pc, #404]	@ (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b63      	ldr	r3, [pc, #396]	@ (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0b8      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a18:	4b59      	ldr	r3, [pc, #356]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a30:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a52      	ldr	r2, [pc, #328]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4b50      	ldr	r3, [pc, #320]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	494d      	ldr	r1, [pc, #308]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d044      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b47      	ldr	r3, [pc, #284]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d119      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e07f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b3f      	ldr	r3, [pc, #252]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	4b3b      	ldr	r3, [pc, #236]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e067      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 0203 	bic.w	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4934      	ldr	r1, [pc, #208]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff fa40 	bl	8000f38 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7ff fa3c 	bl	8000f38 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e04f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 020c 	and.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1eb      	bne.n	8001abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d20c      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e032      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b18:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4916      	ldr	r1, [pc, #88]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	490e      	ldr	r1, [pc, #56]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b4a:	f000 f821 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490a      	ldr	r1, [pc, #40]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f9a0 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	0800727c 	.word	0x0800727c
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	b094      	sub	sp, #80	@ 0x50
 8001b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba8:	4b79      	ldr	r3, [pc, #484]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	f200 80e1 	bhi.w	8001d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x3a>
 8001bc2:	e0db      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b73      	ldr	r3, [pc, #460]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bc8:	e0db      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bce:	e0d8      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bda:	4b6d      	ldr	r3, [pc, #436]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d063      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	2200      	movs	r2, #0
 8001bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c02:	4622      	mov	r2, r4
 8001c04:	462b      	mov	r3, r5
 8001c06:	f04f 0000 	mov.w	r0, #0
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	0159      	lsls	r1, r3, #5
 8001c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c14:	0150      	lsls	r0, r2, #5
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	1a51      	subs	r1, r2, r1
 8001c1e:	6139      	str	r1, [r7, #16]
 8001c20:	4629      	mov	r1, r5
 8001c22:	eb63 0301 	sbc.w	r3, r3, r1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c34:	4659      	mov	r1, fp
 8001c36:	018b      	lsls	r3, r1, #6
 8001c38:	4651      	mov	r1, sl
 8001c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c3e:	4651      	mov	r1, sl
 8001c40:	018a      	lsls	r2, r1, #6
 8001c42:	4651      	mov	r1, sl
 8001c44:	ebb2 0801 	subs.w	r8, r2, r1
 8001c48:	4659      	mov	r1, fp
 8001c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c62:	4690      	mov	r8, r2
 8001c64:	4699      	mov	r9, r3
 8001c66:	4623      	mov	r3, r4
 8001c68:	eb18 0303 	adds.w	r3, r8, r3
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	462b      	mov	r3, r5
 8001c70:	eb49 0303 	adc.w	r3, r9, r3
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c82:	4629      	mov	r1, r5
 8001c84:	024b      	lsls	r3, r1, #9
 8001c86:	4621      	mov	r1, r4
 8001c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	024a      	lsls	r2, r1, #9
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c96:	2200      	movs	r2, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ca0:	f7fe faf6 	bl	8000290 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cac:	e058      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cae:	4b38      	ldr	r3, [pc, #224]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4611      	mov	r1, r2
 8001cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cbe:	623b      	str	r3, [r7, #32]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cc8:	4642      	mov	r2, r8
 8001cca:	464b      	mov	r3, r9
 8001ccc:	f04f 0000 	mov.w	r0, #0
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	0159      	lsls	r1, r3, #5
 8001cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cda:	0150      	lsls	r0, r2, #5
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ce6:	4649      	mov	r1, r9
 8001ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d00:	ebb2 040a 	subs.w	r4, r2, sl
 8001d04:	eb63 050b 	sbc.w	r5, r3, fp
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	00eb      	lsls	r3, r5, #3
 8001d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d16:	00e2      	lsls	r2, r4, #3
 8001d18:	4614      	mov	r4, r2
 8001d1a:	461d      	mov	r5, r3
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	18e3      	adds	r3, r4, r3
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	464b      	mov	r3, r9
 8001d24:	eb45 0303 	adc.w	r3, r5, r3
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d36:	4629      	mov	r1, r5
 8001d38:	028b      	lsls	r3, r1, #10
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d40:	4621      	mov	r1, r4
 8001d42:	028a      	lsls	r2, r1, #10
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	61fa      	str	r2, [r7, #28]
 8001d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d54:	f7fe fa9c 	bl	8000290 <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3750      	adds	r7, #80	@ 0x50
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	@ (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	0800728c 	.word	0x0800728c

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de0:	f7ff ffdc 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0b5b      	lsrs	r3, r3, #13
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4903      	ldr	r1, [pc, #12]	@ (8001e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	0800728c 	.word	0x0800728c

08001e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07b      	b.n	8001f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d108      	bne.n	8001e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e26:	d009      	beq.n	8001e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
 8001e2e:	e005      	b.n	8001e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fe66 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	f003 0104 	and.w	r1, r3, #4
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	f003 0210 	and.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b088      	sub	sp, #32
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f26:	f7ff f807 	bl	8000f38 <HAL_GetTick>
 8001f2a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e12a      	b.n	8002196 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_SPI_Transmit+0x36>
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e122      	b.n	8002196 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_SPI_Transmit+0x48>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e11b      	b.n	8002196 <HAL_SPI_Transmit+0x280>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	88fa      	ldrh	r2, [r7, #6]
 8001f7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	88fa      	ldrh	r2, [r7, #6]
 8001f84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fac:	d10f      	bne.n	8001fce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd8:	2b40      	cmp	r3, #64	@ 0x40
 8001fda:	d007      	beq.n	8001fec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ff4:	d152      	bne.n	800209c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Transmit+0xee>
 8001ffe:	8b7b      	ldrh	r3, [r7, #26]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d145      	bne.n	8002090 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	881a      	ldrh	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	1c9a      	adds	r2, r3, #2
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002028:	e032      	b.n	8002090 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d112      	bne.n	800205e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	1c9a      	adds	r2, r3, #2
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800205c:	e018      	b.n	8002090 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205e:	f7fe ff6b 	bl	8000f38 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d803      	bhi.n	8002076 <HAL_SPI_Transmit+0x160>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d102      	bne.n	800207c <HAL_SPI_Transmit+0x166>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e082      	b.n	8002196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1c7      	bne.n	800202a <HAL_SPI_Transmit+0x114>
 800209a:	e053      	b.n	8002144 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_Transmit+0x194>
 80020a4:	8b7b      	ldrh	r3, [r7, #26]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d147      	bne.n	800213a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020d0:	e033      	b.n	800213a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d113      	bne.n	8002108 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	330c      	adds	r3, #12
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002106:	e018      	b.n	800213a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002108:	f7fe ff16 	bl	8000f38 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d803      	bhi.n	8002120 <HAL_SPI_Transmit+0x20a>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211e:	d102      	bne.n	8002126 <HAL_SPI_Transmit+0x210>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e02d      	b.n	8002196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1c6      	bne.n	80020d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fa59 	bl	8002600 <SPI_EndRxTxTransaction>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002194:	2300      	movs	r3, #0
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08a      	sub	sp, #40	@ 0x28
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021ac:	2301      	movs	r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b0:	f7fe fec2 	bl	8000f38 <HAL_GetTick>
 80021b4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021bc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d00c      	beq.n	80021e8 <HAL_SPI_TransmitReceive+0x4a>
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021d4:	d106      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_SPI_TransmitReceive+0x46>
 80021de:	7ffb      	ldrb	r3, [r7, #31]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d001      	beq.n	80021e8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
 80021e6:	e17f      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_SPI_TransmitReceive+0x5c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_SPI_TransmitReceive+0x5c>
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e174      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_SPI_TransmitReceive+0x6e>
 8002208:	2302      	movs	r3, #2
 800220a:	e16d      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x34a>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b04      	cmp	r3, #4
 800221e:	d003      	beq.n	8002228 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2205      	movs	r2, #5
 8002224:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	887a      	ldrh	r2, [r7, #2]
 800224a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	2b40      	cmp	r3, #64	@ 0x40
 800226a:	d007      	beq.n	800227c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002284:	d17e      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_SPI_TransmitReceive+0xf6>
 800228e:	8afb      	ldrh	r3, [r7, #22]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d16c      	bne.n	800236e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	1c9a      	adds	r2, r3, #2
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b8:	e059      	b.n	800236e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d11b      	bne.n	8002300 <HAL_SPI_TransmitReceive+0x162>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x162>
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d113      	bne.n	8002300 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	881a      	ldrh	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d119      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x1a4>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d014      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002322:	b292      	uxth	r2, r2
 8002324:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232a:	1c9a      	adds	r2, r3, #2
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800233e:	2301      	movs	r3, #1
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002342:	f7fe fdf9 	bl	8000f38 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234e:	429a      	cmp	r2, r3
 8002350:	d80d      	bhi.n	800236e <HAL_SPI_TransmitReceive+0x1d0>
 8002352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d009      	beq.n	800236e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0bc      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1a0      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x11c>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d19b      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x11c>
 8002382:	e082      	b.n	800248a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_SPI_TransmitReceive+0x1f4>
 800238c:	8afb      	ldrh	r3, [r7, #22]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d171      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	330c      	adds	r3, #12
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b8:	e05d      	b.n	8002476 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d11c      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x264>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_SPI_TransmitReceive+0x264>
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d114      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d119      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x2a6>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d014      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002440:	2301      	movs	r3, #1
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002444:	f7fe fd78 	bl	8000f38 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002450:	429a      	cmp	r2, r3
 8002452:	d803      	bhi.n	800245c <HAL_SPI_TransmitReceive+0x2be>
 8002454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d102      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x2c4>
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e038      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d19c      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x21c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d197      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800248a:	6a3a      	ldr	r2, [r7, #32]
 800248c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8b6 	bl	8002600 <SPI_EndRxTxTransaction>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e01d      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
  }
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3728      	adds	r7, #40	@ 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002500:	f7fe fd1a 	bl	8000f38 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002510:	f7fe fd12 	bl	8000f38 <HAL_GetTick>
 8002514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002516:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	015b      	lsls	r3, r3, #5
 800251c:	0d1b      	lsrs	r3, r3, #20
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002526:	e055      	b.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d051      	beq.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002530:	f7fe fd02 	bl	8000f38 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	429a      	cmp	r2, r3
 800253e:	d902      	bls.n	8002546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d13d      	bne.n	80025c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800255e:	d111      	bne.n	8002584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002568:	d004      	beq.n	8002574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002572:	d107      	bne.n	8002584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800258c:	d10f      	bne.n	80025ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e018      	b.n	80025f4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e002      	b.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d19a      	bne.n	8002528 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000000 	.word	0x20000000

08002600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2201      	movs	r2, #1
 8002614:	2102      	movs	r1, #2
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff ff6a 	bl	80024f0 <SPI_WaitFlagStateUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e032      	b.n	8002698 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002632:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <SPI_EndRxTxTransaction+0xa0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <SPI_EndRxTxTransaction+0xa4>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	0d5b      	lsrs	r3, r3, #21
 800263e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002650:	d112      	bne.n	8002678 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff ff47 	bl	80024f0 <SPI_WaitFlagStateUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d016      	beq.n	8002696 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e00f      	b.n	8002698 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3b01      	subs	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	2b80      	cmp	r3, #128	@ 0x80
 8002690:	d0f2      	beq.n	8002678 <SPI_EndRxTxTransaction+0x78>
 8002692:	e000      	b.n	8002696 <SPI_EndRxTxTransaction+0x96>
        break;
 8002694:	bf00      	nop
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000000 	.word	0x20000000
 80026a4:	165e9f81 	.word	0x165e9f81

080026a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e042      	b.n	8002740 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fa92 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	@ 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f973 	bl	80029d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b20      	cmp	r3, #32
 8002766:	d175      	bne.n	8002854 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_UART_Transmit+0x2c>
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e06e      	b.n	8002856 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2221      	movs	r2, #33	@ 0x21
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002786:	f7fe fbd7 	bl	8000f38 <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	88fa      	ldrh	r2, [r7, #6]
 8002790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a0:	d108      	bne.n	80027b4 <HAL_UART_Transmit+0x6c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d104      	bne.n	80027b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	e003      	b.n	80027bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027bc:	e02e      	b.n	800281c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f848 	bl	800285e <UART_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e03a      	b.n	8002856 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	3302      	adds	r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	e007      	b.n	800280e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3301      	adds	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1cb      	bne.n	80027be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	2140      	movs	r1, #64	@ 0x40
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f814 	bl	800285e <UART_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e006      	b.n	8002856 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e000      	b.n	8002856 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286e:	e03b      	b.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d037      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002878:	f7fe fb5e 	bl	8000f38 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	6a3a      	ldr	r2, [r7, #32]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <UART_WaitOnFlagUntilTimeout+0x30>
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e03a      	b.n	8002908 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d023      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b80      	cmp	r3, #128	@ 0x80
 80028a4:	d020      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b40      	cmp	r3, #64	@ 0x40
 80028aa:	d01d      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d116      	bne.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f81d 	bl	8002910 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2208      	movs	r2, #8
 80028da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e00f      	b.n	8002908 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4013      	ands	r3, r2
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	429a      	cmp	r2, r3
 8002904:	d0b4      	beq.n	8002870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002910:	b480      	push	{r7}
 8002912:	b095      	sub	sp, #84	@ 0x54
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002922:	e853 3f00 	ldrex	r3, [r3]
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800292e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002938:	643a      	str	r2, [r7, #64]	@ 0x40
 800293a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800293e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3314      	adds	r3, #20
 8002952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	61fb      	str	r3, [r7, #28]
   return(result);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3314      	adds	r3, #20
 800296a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800296c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e5      	bne.n	800294c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	2b01      	cmp	r3, #1
 8002986:	d119      	bne.n	80029bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	60bb      	str	r3, [r7, #8]
   return(result);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f023 0310 	bic.w	r3, r3, #16
 800299e:	647b      	str	r3, [r7, #68]	@ 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029a8:	61ba      	str	r2, [r7, #24]
 80029aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	6979      	ldr	r1, [r7, #20]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	613b      	str	r3, [r7, #16]
   return(result);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e5      	bne.n	8002988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029ca:	bf00      	nop
 80029cc:	3754      	adds	r7, #84	@ 0x54
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029dc:	b0c0      	sub	sp, #256	@ 0x100
 80029de:	af00      	add	r7, sp, #0
 80029e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	ea40 0301 	orr.w	r3, r0, r1
 8002a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a30:	f021 010c 	bic.w	r1, r1, #12
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a52:	6999      	ldr	r1, [r3, #24]
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	ea40 0301 	orr.w	r3, r0, r1
 8002a5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca4 <UART_SetConfig+0x2cc>)
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d005      	beq.n	8002a78 <UART_SetConfig+0xa0>
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b8d      	ldr	r3, [pc, #564]	@ (8002ca8 <UART_SetConfig+0x2d0>)
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d104      	bne.n	8002a82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7ff f9b0 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002a7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a80:	e003      	b.n	8002a8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a82:	f7ff f997 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002a86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a94:	f040 810c 	bne.w	8002cb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002aa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002aaa:	4622      	mov	r2, r4
 8002aac:	462b      	mov	r3, r5
 8002aae:	1891      	adds	r1, r2, r2
 8002ab0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ab2:	415b      	adcs	r3, r3
 8002ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ab6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002aba:	4621      	mov	r1, r4
 8002abc:	eb12 0801 	adds.w	r8, r2, r1
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	eb43 0901 	adc.w	r9, r3, r1
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ada:	4690      	mov	r8, r2
 8002adc:	4699      	mov	r9, r3
 8002ade:	4623      	mov	r3, r4
 8002ae0:	eb18 0303 	adds.w	r3, r8, r3
 8002ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ae8:	462b      	mov	r3, r5
 8002aea:	eb49 0303 	adc.w	r3, r9, r3
 8002aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002afe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b06:	460b      	mov	r3, r1
 8002b08:	18db      	adds	r3, r3, r3
 8002b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	eb42 0303 	adc.w	r3, r2, r3
 8002b12:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b1c:	f7fd fbb8 	bl	8000290 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4b61      	ldr	r3, [pc, #388]	@ (8002cac <UART_SetConfig+0x2d4>)
 8002b26:	fba3 2302 	umull	r2, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	011c      	lsls	r4, r3, #4
 8002b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b50:	4641      	mov	r1, r8
 8002b52:	eb12 0a01 	adds.w	sl, r2, r1
 8002b56:	4649      	mov	r1, r9
 8002b58:	eb43 0b01 	adc.w	fp, r3, r1
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b70:	4692      	mov	sl, r2
 8002b72:	469b      	mov	fp, r3
 8002b74:	4643      	mov	r3, r8
 8002b76:	eb1a 0303 	adds.w	r3, sl, r3
 8002b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	eb4b 0303 	adc.w	r3, fp, r3
 8002b84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002baa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bb2:	f7fd fb6d 	bl	8000290 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <UART_SetConfig+0x2d4>)
 8002bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2264      	movs	r2, #100	@ 0x64
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	1acb      	subs	r3, r1, r3
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bd2:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <UART_SetConfig+0x2d4>)
 8002bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002be0:	441c      	add	r4, r3
 8002be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1891      	adds	r1, r2, r2
 8002bfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bfc:	415b      	adcs	r3, r3
 8002bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c04:	4641      	mov	r1, r8
 8002c06:	1851      	adds	r1, r2, r1
 8002c08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	414b      	adcs	r3, r1
 8002c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c1c:	4659      	mov	r1, fp
 8002c1e:	00cb      	lsls	r3, r1, #3
 8002c20:	4651      	mov	r1, sl
 8002c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c26:	4651      	mov	r1, sl
 8002c28:	00ca      	lsls	r2, r1, #3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4642      	mov	r2, r8
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c38:	464b      	mov	r3, r9
 8002c3a:	460a      	mov	r2, r1
 8002c3c:	eb42 0303 	adc.w	r3, r2, r3
 8002c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c58:	460b      	mov	r3, r1
 8002c5a:	18db      	adds	r3, r3, r3
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c5e:	4613      	mov	r3, r2
 8002c60:	eb42 0303 	adc.w	r3, r2, r3
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c6e:	f7fd fb0f 	bl	8000290 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <UART_SetConfig+0x2d4>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2164      	movs	r1, #100	@ 0x64
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	3332      	adds	r3, #50	@ 0x32
 8002c8a:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <UART_SetConfig+0x2d4>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 0207 	and.w	r2, r3, #7
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4422      	add	r2, r4
 8002c9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ca0:	e106      	b.n	8002eb0 <UART_SetConfig+0x4d8>
 8002ca2:	bf00      	nop
 8002ca4:	40011000 	.word	0x40011000
 8002ca8:	40011400 	.word	0x40011400
 8002cac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002cc2:	4642      	mov	r2, r8
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	1891      	adds	r1, r2, r2
 8002cc8:	6239      	str	r1, [r7, #32]
 8002cca:	415b      	adcs	r3, r3
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	1854      	adds	r4, r2, r1
 8002cd6:	4649      	mov	r1, r9
 8002cd8:	eb43 0501 	adc.w	r5, r3, r1
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	00eb      	lsls	r3, r5, #3
 8002ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cea:	00e2      	lsls	r2, r4, #3
 8002cec:	4614      	mov	r4, r2
 8002cee:	461d      	mov	r5, r3
 8002cf0:	4643      	mov	r3, r8
 8002cf2:	18e3      	adds	r3, r4, r3
 8002cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	eb45 0303 	adc.w	r3, r5, r3
 8002cfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d1e:	4629      	mov	r1, r5
 8002d20:	008b      	lsls	r3, r1, #2
 8002d22:	4621      	mov	r1, r4
 8002d24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d28:	4621      	mov	r1, r4
 8002d2a:	008a      	lsls	r2, r1, #2
 8002d2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d30:	f7fd faae 	bl	8000290 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4b60      	ldr	r3, [pc, #384]	@ (8002ebc <UART_SetConfig+0x4e4>)
 8002d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	011c      	lsls	r4, r3, #4
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	1891      	adds	r1, r2, r2
 8002d5a:	61b9      	str	r1, [r7, #24]
 8002d5c:	415b      	adcs	r3, r3
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d64:	4641      	mov	r1, r8
 8002d66:	1851      	adds	r1, r2, r1
 8002d68:	6139      	str	r1, [r7, #16]
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	414b      	adcs	r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	00cb      	lsls	r3, r1, #3
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d86:	4651      	mov	r1, sl
 8002d88:	00ca      	lsls	r2, r1, #3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4642      	mov	r2, r8
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d98:	464b      	mov	r3, r9
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	eb42 0303 	adc.w	r3, r2, r3
 8002da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	008b      	lsls	r3, r1, #2
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	008a      	lsls	r2, r1, #2
 8002dca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dce:	f7fd fa5f 	bl	8000290 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4b38      	ldr	r3, [pc, #224]	@ (8002ebc <UART_SetConfig+0x4e4>)
 8002dda:	fba3 2301 	umull	r2, r3, r3, r1
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2264      	movs	r2, #100	@ 0x64
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	1acb      	subs	r3, r1, r3
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	3332      	adds	r3, #50	@ 0x32
 8002dec:	4a33      	ldr	r2, [pc, #204]	@ (8002ebc <UART_SetConfig+0x4e4>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df8:	441c      	add	r4, r3
 8002dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dfe:	2200      	movs	r2, #0
 8002e00:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e02:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e08:	4642      	mov	r2, r8
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	1891      	adds	r1, r2, r2
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	415b      	adcs	r3, r3
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e18:	4641      	mov	r1, r8
 8002e1a:	1851      	adds	r1, r2, r1
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	4649      	mov	r1, r9
 8002e20:	414b      	adcs	r3, r1
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e30:	4659      	mov	r1, fp
 8002e32:	00cb      	lsls	r3, r1, #3
 8002e34:	4651      	mov	r1, sl
 8002e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	00ca      	lsls	r2, r1, #3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	4642      	mov	r2, r8
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	eb42 0303 	adc.w	r3, r2, r3
 8002e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	008b      	lsls	r3, r1, #2
 8002e70:	4641      	mov	r1, r8
 8002e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e76:	4641      	mov	r1, r8
 8002e78:	008a      	lsls	r2, r1, #2
 8002e7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e7e:	f7fd fa07 	bl	8000290 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <UART_SetConfig+0x4e4>)
 8002e88:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2164      	movs	r1, #100	@ 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	3332      	adds	r3, #50	@ 0x32
 8002e9a:	4a08      	ldr	r2, [pc, #32]	@ (8002ebc <UART_SetConfig+0x4e4>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4422      	add	r2, r4
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebc:	51eb851f 	.word	0x51eb851f

08002ec0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002ec4:	4904      	ldr	r1, [pc, #16]	@ (8002ed8 <MX_FATFS_Init+0x18>)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_FATFS_Init+0x1c>)
 8002ec8:	f003 f91e 	bl	8006108 <FATFS_LinkDriver>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <MX_FATFS_Init+0x20>)
 8002ed2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000148 	.word	0x20000148
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	20000144 	.word	0x20000144

08002ee4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002ee8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;

	return USER_SPI_initialize(pdrv);
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f9d3 	bl	80032ac <USER_SPI_initialize>
 8002f06:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fab1 	bl	8003484 <USER_SPI_status>
 8002f22:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;

	return USER_SPI_read(pdrv, buff, sector, count);
 8002f3c:	7bf8      	ldrb	r0, [r7, #15]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	f000 fab4 	bl	80034b0 <USER_SPI_read>
 8002f48:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4603      	mov	r3, r0
 8002f60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff,  sector, count);
 8002f62:	7bf8      	ldrb	r0, [r7, #15]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	f000 fb07 	bl	800357c <USER_SPI_write>
 8002f6e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	603a      	str	r2, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
 8002f84:	460b      	mov	r3, r1
 8002f86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8002f88:	79b9      	ldrb	r1, [r7, #6]
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fb70 	bl	8003674 <USER_SPI_ioctl>
 8002f94:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002fa8:	f7fd ffc6 	bl	8000f38 <HAL_GetTick>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <SPI_Timer_On+0x20>)
 8002fb0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <SPI_Timer_On+0x24>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000150 	.word	0x20000150
 8002fc4:	20000154 	.word	0x20000154

08002fc8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002fcc:	f7fd ffb4 	bl	8000f38 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <SPI_Timer_Status+0x24>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <SPI_Timer_Status+0x28>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bf34      	ite	cc
 8002fe0:	2301      	movcc	r3, #1
 8002fe2:	2300      	movcs	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000150 	.word	0x20000150
 8002ff0:	20000154 	.word	0x20000154

08002ff4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002ffe:	f107 020f 	add.w	r2, r7, #15
 8003002:	1df9      	adds	r1, r7, #7
 8003004:	2332      	movs	r3, #50	@ 0x32
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2301      	movs	r3, #1
 800300a:	4804      	ldr	r0, [pc, #16]	@ (800301c <xchg_spi+0x28>)
 800300c:	f7ff f8c7 	bl	800219e <HAL_SPI_TransmitReceive>
    return rxDat;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000009c 	.word	0x2000009c

08003020 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e00a      	b.n	8003046 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	18d4      	adds	r4, r2, r3
 8003036:	20ff      	movs	r0, #255	@ 0xff
 8003038:	f7ff ffdc 	bl	8002ff4 <xchg_spi>
 800303c:	4603      	mov	r3, r0
 800303e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3f0      	bcc.n	8003030 <rcvr_spi_multi+0x10>
	}
}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b29a      	uxth	r2, r3
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4803      	ldr	r0, [pc, #12]	@ (800307c <xmit_spi_multi+0x24>)
 800306e:	f7fe ff52 	bl	8001f16 <HAL_SPI_Transmit>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000009c 	.word	0x2000009c

08003080 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003088:	f7fd ff56 	bl	8000f38 <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003092:	20ff      	movs	r0, #255	@ 0xff
 8003094:	f7ff ffae 	bl	8002ff4 <xchg_spi>
 8003098:	4603      	mov	r3, r0
 800309a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2bff      	cmp	r3, #255	@ 0xff
 80030a0:	d007      	beq.n	80030b2 <wait_ready+0x32>
 80030a2:	f7fd ff49 	bl	8000f38 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d8ef      	bhi.n	8003092 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2bff      	cmp	r3, #255	@ 0xff
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80030cc:	2201      	movs	r2, #1
 80030ce:	2110      	movs	r1, #16
 80030d0:	4803      	ldr	r0, [pc, #12]	@ (80030e0 <despiselect+0x18>)
 80030d2:	f7fe f9cb 	bl	800146c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80030d6:	20ff      	movs	r0, #255	@ 0xff
 80030d8:	f7ff ff8c 	bl	8002ff4 <xchg_spi>

}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40020000 	.word	0x40020000

080030e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80030e8:	2200      	movs	r2, #0
 80030ea:	2110      	movs	r1, #16
 80030ec:	4809      	ldr	r0, [pc, #36]	@ (8003114 <spiselect+0x30>)
 80030ee:	f7fe f9bd 	bl	800146c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80030f2:	20ff      	movs	r0, #255	@ 0xff
 80030f4:	f7ff ff7e 	bl	8002ff4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80030f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030fc:	f7ff ffc0 	bl	8003080 <wait_ready>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <spiselect+0x26>
 8003106:	2301      	movs	r3, #1
 8003108:	e002      	b.n	8003110 <spiselect+0x2c>

	despiselect();
 800310a:	f7ff ffdd 	bl	80030c8 <despiselect>
	return 0;	/* Timeout */
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40020000 	.word	0x40020000

08003118 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003122:	20c8      	movs	r0, #200	@ 0xc8
 8003124:	f7ff ff3c 	bl	8002fa0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003128:	20ff      	movs	r0, #255	@ 0xff
 800312a:	f7ff ff63 	bl	8002ff4 <xchg_spi>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2bff      	cmp	r3, #255	@ 0xff
 8003136:	d104      	bne.n	8003142 <rcvr_datablock+0x2a>
 8003138:	f7ff ff46 	bl	8002fc8 <SPI_Timer_Status>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f2      	bne.n	8003128 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2bfe      	cmp	r3, #254	@ 0xfe
 8003146:	d001      	beq.n	800314c <rcvr_datablock+0x34>
 8003148:	2300      	movs	r3, #0
 800314a:	e00a      	b.n	8003162 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff66 	bl	8003020 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003154:	20ff      	movs	r0, #255	@ 0xff
 8003156:	f7ff ff4d 	bl	8002ff4 <xchg_spi>
 800315a:	20ff      	movs	r0, #255	@ 0xff
 800315c:	f7ff ff4a 	bl	8002ff4 <xchg_spi>

	return 1;						/* Function succeeded */
 8003160:	2301      	movs	r3, #1
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003176:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800317a:	f7ff ff81 	bl	8003080 <wait_ready>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <xmit_datablock+0x1e>
 8003184:	2300      	movs	r3, #0
 8003186:	e01e      	b.n	80031c6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff32 	bl	8002ff4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	2bfd      	cmp	r3, #253	@ 0xfd
 8003194:	d016      	beq.n	80031c4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003196:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ff5c 	bl	8003058 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80031a0:	20ff      	movs	r0, #255	@ 0xff
 80031a2:	f7ff ff27 	bl	8002ff4 <xchg_spi>
 80031a6:	20ff      	movs	r0, #255	@ 0xff
 80031a8:	f7ff ff24 	bl	8002ff4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80031ac:	20ff      	movs	r0, #255	@ 0xff
 80031ae:	f7ff ff21 	bl	8002ff4 <xchg_spi>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d001      	beq.n	80031c4 <xmit_datablock+0x5a>
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <xmit_datablock+0x5c>
	}
	return 1;
 80031c4:	2301      	movs	r3, #1
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	6039      	str	r1, [r7, #0]
 80031d8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da0e      	bge.n	8003200 <send_cmd+0x32>
		cmd &= 0x7F;
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031e8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80031ea:	2100      	movs	r1, #0
 80031ec:	2037      	movs	r0, #55	@ 0x37
 80031ee:	f7ff ffee 	bl	80031ce <send_cmd>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d901      	bls.n	8003200 <send_cmd+0x32>
 80031fc:	7bbb      	ldrb	r3, [r7, #14]
 80031fe:	e051      	b.n	80032a4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d008      	beq.n	8003218 <send_cmd+0x4a>
		despiselect();
 8003206:	f7ff ff5f 	bl	80030c8 <despiselect>
		if (!spiselect()) return 0xFF;
 800320a:	f7ff ff6b 	bl	80030e4 <spiselect>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <send_cmd+0x4a>
 8003214:	23ff      	movs	r3, #255	@ 0xff
 8003216:	e045      	b.n	80032a4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800321e:	b2db      	uxtb	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fee7 	bl	8002ff4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	0e1b      	lsrs	r3, r3, #24
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fee1 	bl	8002ff4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fedb 	bl	8002ff4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fed5 	bl	8002ff4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fed0 	bl	8002ff4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <send_cmd+0x94>
 800325e:	2395      	movs	r3, #149	@ 0x95
 8003260:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d101      	bne.n	800326c <send_cmd+0x9e>
 8003268:	2387      	movs	r3, #135	@ 0x87
 800326a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fec0 	bl	8002ff4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d102      	bne.n	8003280 <send_cmd+0xb2>
 800327a:	20ff      	movs	r0, #255	@ 0xff
 800327c:	f7ff feba 	bl	8002ff4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003280:	230a      	movs	r3, #10
 8003282:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003284:	20ff      	movs	r0, #255	@ 0xff
 8003286:	f7ff feb5 	bl	8002ff4 <xchg_spi>
 800328a:	4603      	mov	r3, r0
 800328c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800328e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003292:	2b00      	cmp	r3, #0
 8003294:	da05      	bge.n	80032a2 <send_cmd+0xd4>
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	3b01      	subs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <send_cmd+0xb6>

	return res;							/* Return received response */
 80032a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <USER_SPI_initialize+0x14>
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d6      	b.n	800346e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80032c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003478 <USER_SPI_initialize+0x1cc>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <USER_SPI_initialize+0x2a>
 80032ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003478 <USER_SPI_initialize+0x1cc>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e0cb      	b.n	800346e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80032d6:	4b69      	ldr	r3, [pc, #420]	@ (800347c <USER_SPI_initialize+0x1d0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80032e0:	4b66      	ldr	r3, [pc, #408]	@ (800347c <USER_SPI_initialize+0x1d0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80032e8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80032ea:	230a      	movs	r3, #10
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e005      	b.n	80032fc <USER_SPI_initialize+0x50>
 80032f0:	20ff      	movs	r0, #255	@ 0xff
 80032f2:	f7ff fe7f 	bl	8002ff4 <xchg_spi>
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f6      	bne.n	80032f0 <USER_SPI_initialize+0x44>

	ty = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003306:	2100      	movs	r1, #0
 8003308:	2000      	movs	r0, #0
 800330a:	f7ff ff60 	bl	80031ce <send_cmd>
 800330e:	4603      	mov	r3, r0
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 808b 	bne.w	800342c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003316:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800331a:	f7ff fe41 	bl	8002fa0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800331e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003322:	2008      	movs	r0, #8
 8003324:	f7ff ff53 	bl	80031ce <send_cmd>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d151      	bne.n	80033d2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e00d      	b.n	8003350 <USER_SPI_initialize+0xa4>
 8003334:	7bfc      	ldrb	r4, [r7, #15]
 8003336:	20ff      	movs	r0, #255	@ 0xff
 8003338:	f7ff fe5c 	bl	8002ff4 <xchg_spi>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	f104 0310 	add.w	r3, r4, #16
 8003344:	443b      	add	r3, r7
 8003346:	f803 2c08 	strb.w	r2, [r3, #-8]
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	3301      	adds	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d9ee      	bls.n	8003334 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003356:	7abb      	ldrb	r3, [r7, #10]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d167      	bne.n	800342c <USER_SPI_initialize+0x180>
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	2baa      	cmp	r3, #170	@ 0xaa
 8003360:	d164      	bne.n	800342c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003362:	bf00      	nop
 8003364:	f7ff fe30 	bl	8002fc8 <SPI_Timer_Status>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <USER_SPI_initialize+0xd2>
 800336e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003372:	20a9      	movs	r0, #169	@ 0xa9
 8003374:	f7ff ff2b 	bl	80031ce <send_cmd>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f2      	bne.n	8003364 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800337e:	f7ff fe23 	bl	8002fc8 <SPI_Timer_Status>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d051      	beq.n	800342c <USER_SPI_initialize+0x180>
 8003388:	2100      	movs	r1, #0
 800338a:	203a      	movs	r0, #58	@ 0x3a
 800338c:	f7ff ff1f 	bl	80031ce <send_cmd>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d14a      	bne.n	800342c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	e00d      	b.n	80033b8 <USER_SPI_initialize+0x10c>
 800339c:	7bfc      	ldrb	r4, [r7, #15]
 800339e:	20ff      	movs	r0, #255	@ 0xff
 80033a0:	f7ff fe28 	bl	8002ff4 <xchg_spi>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	f104 0310 	add.w	r3, r4, #16
 80033ac:	443b      	add	r3, r7
 80033ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	3301      	adds	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d9ee      	bls.n	800339c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80033be:	7a3b      	ldrb	r3, [r7, #8]
 80033c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <USER_SPI_initialize+0x120>
 80033c8:	230c      	movs	r3, #12
 80033ca:	e000      	b.n	80033ce <USER_SPI_initialize+0x122>
 80033cc:	2304      	movs	r3, #4
 80033ce:	737b      	strb	r3, [r7, #13]
 80033d0:	e02c      	b.n	800342c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80033d2:	2100      	movs	r1, #0
 80033d4:	20a9      	movs	r0, #169	@ 0xa9
 80033d6:	f7ff fefa 	bl	80031ce <send_cmd>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d804      	bhi.n	80033ea <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80033e0:	2302      	movs	r3, #2
 80033e2:	737b      	strb	r3, [r7, #13]
 80033e4:	23a9      	movs	r3, #169	@ 0xa9
 80033e6:	73bb      	strb	r3, [r7, #14]
 80033e8:	e003      	b.n	80033f2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80033ea:	2301      	movs	r3, #1
 80033ec:	737b      	strb	r3, [r7, #13]
 80033ee:	2301      	movs	r3, #1
 80033f0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80033f2:	bf00      	nop
 80033f4:	f7ff fde8 	bl	8002fc8 <SPI_Timer_Status>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <USER_SPI_initialize+0x162>
 80033fe:	7bbb      	ldrb	r3, [r7, #14]
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fee3 	bl	80031ce <send_cmd>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f2      	bne.n	80033f4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800340e:	f7ff fddb 	bl	8002fc8 <SPI_Timer_Status>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <USER_SPI_initialize+0x17c>
 8003418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800341c:	2010      	movs	r0, #16
 800341e:	f7ff fed6 	bl	80031ce <send_cmd>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <USER_SPI_initialize+0x180>
				ty = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <USER_SPI_initialize+0x1d4>)
 800342e:	7b7b      	ldrb	r3, [r7, #13]
 8003430:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003432:	f7ff fe49 	bl	80030c8 <despiselect>

	if (ty) {			/* OK */
 8003436:	7b7b      	ldrb	r3, [r7, #13]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800343c:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <USER_SPI_initialize+0x1d0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <USER_SPI_initialize+0x1d0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0210 	orr.w	r2, r2, #16
 800344e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003450:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <USER_SPI_initialize+0x1cc>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <USER_SPI_initialize+0x1cc>)
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e002      	b.n	8003468 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <USER_SPI_initialize+0x1cc>)
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <USER_SPI_initialize+0x1cc>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}
 8003476:	bf00      	nop
 8003478:	20000020 	.word	0x20000020
 800347c:	2000009c 	.word	0x2000009c
 8003480:	2000014c 	.word	0x2000014c

08003484 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <USER_SPI_status+0x14>
 8003494:	2301      	movs	r3, #1
 8003496:	e002      	b.n	800349e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <USER_SPI_status+0x28>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000020 	.word	0x20000020

080034b0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <USER_SPI_read+0x1c>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <USER_SPI_read+0x20>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e04d      	b.n	800356c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <USER_SPI_read+0xc4>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <USER_SPI_read+0x32>
 80034de:	2303      	movs	r3, #3
 80034e0:	e044      	b.n	800356c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80034e2:	4b25      	ldr	r3, [pc, #148]	@ (8003578 <USER_SPI_read+0xc8>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <USER_SPI_read+0x44>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	025b      	lsls	r3, r3, #9
 80034f2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d111      	bne.n	800351e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	2011      	movs	r0, #17
 80034fe:	f7ff fe66 	bl	80031ce <send_cmd>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d129      	bne.n	800355c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003508:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800350c:	68b8      	ldr	r0, [r7, #8]
 800350e:	f7ff fe03 	bl	8003118 <rcvr_datablock>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d021      	beq.n	800355c <USER_SPI_read+0xac>
			count = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	e01e      	b.n	800355c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	2012      	movs	r0, #18
 8003522:	f7ff fe54 	bl	80031ce <send_cmd>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d117      	bne.n	800355c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800352c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003530:	68b8      	ldr	r0, [r7, #8]
 8003532:	f7ff fdf1 	bl	8003118 <rcvr_datablock>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <USER_SPI_read+0xa2>
				buff += 512;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003542:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	3b01      	subs	r3, #1
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ed      	bne.n	800352c <USER_SPI_read+0x7c>
 8003550:	e000      	b.n	8003554 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003552:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003554:	2100      	movs	r1, #0
 8003556:	200c      	movs	r0, #12
 8003558:	f7ff fe39 	bl	80031ce <send_cmd>
		}
	}
	despiselect();
 800355c:	f7ff fdb4 	bl	80030c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000020 	.word	0x20000020
 8003578:	2000014c 	.word	0x2000014c

0800357c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <USER_SPI_write+0x1c>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <USER_SPI_write+0x20>
 8003598:	2304      	movs	r3, #4
 800359a:	e063      	b.n	8003664 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800359c:	4b33      	ldr	r3, [pc, #204]	@ (800366c <USER_SPI_write+0xf0>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <USER_SPI_write+0x32>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e05a      	b.n	8003664 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80035ae:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <USER_SPI_write+0xf0>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <USER_SPI_write+0x44>
 80035bc:	2302      	movs	r3, #2
 80035be:	e051      	b.n	8003664 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80035c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003670 <USER_SPI_write+0xf4>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <USER_SPI_write+0x56>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	025b      	lsls	r3, r3, #9
 80035d0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d110      	bne.n	80035fa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	2018      	movs	r0, #24
 80035dc:	f7ff fdf7 	bl	80031ce <send_cmd>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d136      	bne.n	8003654 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80035e6:	21fe      	movs	r1, #254	@ 0xfe
 80035e8:	68b8      	ldr	r0, [r7, #8]
 80035ea:	f7ff fdbe 	bl	800316a <xmit_datablock>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02f      	beq.n	8003654 <USER_SPI_write+0xd8>
			count = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	e02c      	b.n	8003654 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80035fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <USER_SPI_write+0xf4>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f003 0306 	and.w	r3, r3, #6
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <USER_SPI_write+0x92>
 8003606:	6839      	ldr	r1, [r7, #0]
 8003608:	2097      	movs	r0, #151	@ 0x97
 800360a:	f7ff fde0 	bl	80031ce <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	2019      	movs	r0, #25
 8003612:	f7ff fddc 	bl	80031ce <send_cmd>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d11b      	bne.n	8003654 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800361c:	21fc      	movs	r1, #252	@ 0xfc
 800361e:	68b8      	ldr	r0, [r7, #8]
 8003620:	f7ff fda3 	bl	800316a <xmit_datablock>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <USER_SPI_write+0xc4>
				buff += 512;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003630:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ee      	bne.n	800361c <USER_SPI_write+0xa0>
 800363e:	e000      	b.n	8003642 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003640:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003642:	21fd      	movs	r1, #253	@ 0xfd
 8003644:	2000      	movs	r0, #0
 8003646:	f7ff fd90 	bl	800316a <xmit_datablock>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <USER_SPI_write+0xd8>
 8003650:	2301      	movs	r3, #1
 8003652:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003654:	f7ff fd38 	bl	80030c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000020 	.word	0x20000020
 8003670:	2000014c 	.word	0x2000014c

08003674 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	@ 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	603a      	str	r2, [r7, #0]
 800367e:	71fb      	strb	r3, [r7, #7]
 8003680:	460b      	mov	r3, r1
 8003682:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <USER_SPI_ioctl+0x1a>
 800368a:	2304      	movs	r3, #4
 800368c:	e15a      	b.n	8003944 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800368e:	4baf      	ldr	r3, [pc, #700]	@ (800394c <USER_SPI_ioctl+0x2d8>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <USER_SPI_ioctl+0x2c>
 800369c:	2303      	movs	r3, #3
 800369e:	e151      	b.n	8003944 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80036a6:	79bb      	ldrb	r3, [r7, #6]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	f200 8136 	bhi.w	800391a <USER_SPI_ioctl+0x2a6>
 80036ae:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <USER_SPI_ioctl+0x40>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	080036c9 	.word	0x080036c9
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	0800391b 	.word	0x0800391b
 80036c0:	08003789 	.word	0x08003789
 80036c4:	0800387f 	.word	0x0800387f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80036c8:	f7ff fd0c 	bl	80030e4 <spiselect>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8127 	beq.w	8003922 <USER_SPI_ioctl+0x2ae>
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80036da:	e122      	b.n	8003922 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80036dc:	2100      	movs	r1, #0
 80036de:	2009      	movs	r0, #9
 80036e0:	f7ff fd75 	bl	80031ce <send_cmd>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 811d 	bne.w	8003926 <USER_SPI_ioctl+0x2b2>
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	2110      	movs	r1, #16
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fd10 	bl	8003118 <rcvr_datablock>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8113 	beq.w	8003926 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003700:	7b3b      	ldrb	r3, [r7, #12]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d111      	bne.n	800372e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800370a:	7d7b      	ldrb	r3, [r7, #21]
 800370c:	461a      	mov	r2, r3
 800370e:	7d3b      	ldrb	r3, [r7, #20]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	4413      	add	r3, r2
 8003714:	461a      	mov	r2, r3
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800371e:	4413      	add	r3, r2
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	029a      	lsls	r2, r3, #10
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e028      	b.n	8003780 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800372e:	7c7b      	ldrb	r3, [r7, #17]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	b2da      	uxtb	r2, r3
 8003736:	7dbb      	ldrb	r3, [r7, #22]
 8003738:	09db      	lsrs	r3, r3, #7
 800373a:	b2db      	uxtb	r3, r3
 800373c:	4413      	add	r3, r2
 800373e:	b2da      	uxtb	r2, r3
 8003740:	7d7b      	ldrb	r3, [r7, #21]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 0306 	and.w	r3, r3, #6
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4413      	add	r3, r2
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3302      	adds	r3, #2
 8003752:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003756:	7d3b      	ldrb	r3, [r7, #20]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	7cbb      	ldrb	r3, [r7, #18]
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800376c:	4413      	add	r3, r2
 800376e:	3301      	adds	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003772:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003776:	3b09      	subs	r3, #9
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	409a      	lsls	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003786:	e0ce      	b.n	8003926 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003788:	4b71      	ldr	r3, [pc, #452]	@ (8003950 <USER_SPI_ioctl+0x2dc>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d031      	beq.n	80037f8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003794:	2100      	movs	r1, #0
 8003796:	208d      	movs	r0, #141	@ 0x8d
 8003798:	f7ff fd19 	bl	80031ce <send_cmd>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 80c3 	bne.w	800392a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80037a4:	20ff      	movs	r0, #255	@ 0xff
 80037a6:	f7ff fc25 	bl	8002ff4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	2110      	movs	r1, #16
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fcb1 	bl	8003118 <rcvr_datablock>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80b6 	beq.w	800392a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80037be:	2330      	movs	r3, #48	@ 0x30
 80037c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80037c4:	e007      	b.n	80037d6 <USER_SPI_ioctl+0x162>
 80037c6:	20ff      	movs	r0, #255	@ 0xff
 80037c8:	f7ff fc14 	bl	8002ff4 <xchg_spi>
 80037cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037d0:	3b01      	subs	r3, #1
 80037d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80037d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f3      	bne.n	80037c6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80037de:	7dbb      	ldrb	r3, [r7, #22]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	2310      	movs	r3, #16
 80037e8:	fa03 f202 	lsl.w	r2, r3, r2
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80037f6:	e098      	b.n	800392a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80037f8:	2100      	movs	r1, #0
 80037fa:	2009      	movs	r0, #9
 80037fc:	f7ff fce7 	bl	80031ce <send_cmd>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8091 	bne.w	800392a <USER_SPI_ioctl+0x2b6>
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	2110      	movs	r1, #16
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fc82 	bl	8003118 <rcvr_datablock>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8087 	beq.w	800392a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800381c:	4b4c      	ldr	r3, [pc, #304]	@ (8003950 <USER_SPI_ioctl+0x2dc>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003828:	7dbb      	ldrb	r3, [r7, #22]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003830:	7dfa      	ldrb	r2, [r7, #23]
 8003832:	09d2      	lsrs	r2, r2, #7
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	4413      	add	r3, r2
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	7e7b      	ldrb	r3, [r7, #25]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	461a      	mov	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e013      	b.n	8003876 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800384e:	7dbb      	ldrb	r3, [r7, #22]
 8003850:	109b      	asrs	r3, r3, #2
 8003852:	b29b      	uxth	r3, r3
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	3301      	adds	r3, #1
 800385a:	7dfa      	ldrb	r2, [r7, #23]
 800385c:	00d2      	lsls	r2, r2, #3
 800385e:	f002 0218 	and.w	r2, r2, #24
 8003862:	7df9      	ldrb	r1, [r7, #23]
 8003864:	0949      	lsrs	r1, r1, #5
 8003866:	b2c9      	uxtb	r1, r1
 8003868:	440a      	add	r2, r1
 800386a:	3201      	adds	r2, #1
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	461a      	mov	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800387c:	e055      	b.n	800392a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800387e:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <USER_SPI_ioctl+0x2dc>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	f003 0306 	and.w	r3, r3, #6
 8003886:	2b00      	cmp	r3, #0
 8003888:	d051      	beq.n	800392e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800388a:	f107 020c 	add.w	r2, r7, #12
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	210b      	movs	r1, #11
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff feee 	bl	8003674 <USER_SPI_ioctl>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d149      	bne.n	8003932 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800389e:	7b3b      	ldrb	r3, [r7, #12]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <USER_SPI_ioctl+0x23e>
 80038a8:	7dbb      	ldrb	r3, [r7, #22]
 80038aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d041      	beq.n	8003936 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80038c2:	4b23      	ldr	r3, [pc, #140]	@ (8003950 <USER_SPI_ioctl+0x2dc>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	025b      	lsls	r3, r3, #9
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	025b      	lsls	r3, r3, #9
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80038da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038dc:	2020      	movs	r0, #32
 80038de:	f7ff fc76 	bl	80031ce <send_cmd>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d128      	bne.n	800393a <USER_SPI_ioctl+0x2c6>
 80038e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ea:	2021      	movs	r0, #33	@ 0x21
 80038ec:	f7ff fc6f 	bl	80031ce <send_cmd>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d121      	bne.n	800393a <USER_SPI_ioctl+0x2c6>
 80038f6:	2100      	movs	r1, #0
 80038f8:	2026      	movs	r0, #38	@ 0x26
 80038fa:	f7ff fc68 	bl	80031ce <send_cmd>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11a      	bne.n	800393a <USER_SPI_ioctl+0x2c6>
 8003904:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003908:	f7ff fbba 	bl	8003080 <wait_ready>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d013      	beq.n	800393a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003912:	2300      	movs	r3, #0
 8003914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003918:	e00f      	b.n	800393a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800391a:	2304      	movs	r3, #4
 800391c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003920:	e00c      	b.n	800393c <USER_SPI_ioctl+0x2c8>
		break;
 8003922:	bf00      	nop
 8003924:	e00a      	b.n	800393c <USER_SPI_ioctl+0x2c8>
		break;
 8003926:	bf00      	nop
 8003928:	e008      	b.n	800393c <USER_SPI_ioctl+0x2c8>
		break;
 800392a:	bf00      	nop
 800392c:	e006      	b.n	800393c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800392e:	bf00      	nop
 8003930:	e004      	b.n	800393c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <USER_SPI_ioctl+0x2c8>
		break;
 800393a:	bf00      	nop
	}

	despiselect();
 800393c:	f7ff fbc4 	bl	80030c8 <despiselect>

	return res;
 8003940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003944:	4618      	mov	r0, r3
 8003946:	3730      	adds	r7, #48	@ 0x30
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000020 	.word	0x20000020
 8003950:	2000014c 	.word	0x2000014c

08003954 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	4a08      	ldr	r2, [pc, #32]	@ (8003984 <disk_status+0x30>)
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	79fa      	ldrb	r2, [r7, #7]
 800396c:	4905      	ldr	r1, [pc, #20]	@ (8003984 <disk_status+0x30>)
 800396e:	440a      	add	r2, r1
 8003970:	7a12      	ldrb	r2, [r2, #8]
 8003972:	4610      	mov	r0, r2
 8003974:	4798      	blx	r3
 8003976:	4603      	mov	r3, r0
 8003978:	73fb      	strb	r3, [r7, #15]
  return stat;
 800397a:	7bfb      	ldrb	r3, [r7, #15]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000180 	.word	0x20000180

08003988 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <disk_initialize+0x4c>)
 800399a:	5cd3      	ldrb	r3, [r2, r3]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d114      	bne.n	80039ca <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	4a0c      	ldr	r2, [pc, #48]	@ (80039d4 <disk_initialize+0x4c>)
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	79fa      	ldrb	r2, [r7, #7]
 80039ae:	4909      	ldr	r1, [pc, #36]	@ (80039d4 <disk_initialize+0x4c>)
 80039b0:	440a      	add	r2, r1
 80039b2:	7a12      	ldrb	r2, [r2, #8]
 80039b4:	4610      	mov	r0, r2
 80039b6:	4798      	blx	r3
 80039b8:	4603      	mov	r3, r0
 80039ba:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4a03      	ldr	r2, [pc, #12]	@ (80039d4 <disk_initialize+0x4c>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000180 	.word	0x20000180

080039d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4603      	mov	r3, r0
 80039e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <disk_read+0x3c>)
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	689c      	ldr	r4, [r3, #8]
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	4a07      	ldr	r2, [pc, #28]	@ (8003a14 <disk_read+0x3c>)
 80039f8:	4413      	add	r3, r2
 80039fa:	7a18      	ldrb	r0, [r3, #8]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	47a0      	blx	r4
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]
  return res;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000180 	.word	0x20000180

08003a18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <disk_write+0x3c>)
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	68dc      	ldr	r4, [r3, #12]
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	4a07      	ldr	r2, [pc, #28]	@ (8003a54 <disk_write+0x3c>)
 8003a38:	4413      	add	r3, r2
 8003a3a:	7a18      	ldrb	r0, [r3, #8]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	47a0      	blx	r4
 8003a44:	4603      	mov	r3, r0
 8003a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd90      	pop	{r4, r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000180 	.word	0x20000180

08003a58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	603a      	str	r2, [r7, #0]
 8003a62:	71fb      	strb	r3, [r7, #7]
 8003a64:	460b      	mov	r3, r1
 8003a66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	4a09      	ldr	r2, [pc, #36]	@ (8003a90 <disk_ioctl+0x38>)
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	79fa      	ldrb	r2, [r7, #7]
 8003a76:	4906      	ldr	r1, [pc, #24]	@ (8003a90 <disk_ioctl+0x38>)
 8003a78:	440a      	add	r2, r1
 8003a7a:	7a10      	ldrb	r0, [r2, #8]
 8003a7c:	79b9      	ldrb	r1, [r7, #6]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4798      	blx	r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	73fb      	strb	r3, [r7, #15]
  return res;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000180 	.word	0x20000180

08003a94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003aa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	b21a      	sxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b21b      	sxth	r3, r3
 8003ab6:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3303      	adds	r3, #3
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	3202      	adds	r2, #2
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	3201      	adds	r2, #1
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
	return rv;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	887a      	ldrh	r2, [r7, #2]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003b9a:	b480      	push	{r7}
 8003b9c:	b087      	sub	sp, #28
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	1c53      	adds	r3, r2, #1
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	1c59      	adds	r1, r3, #1
 8003bbe:	6179      	str	r1, [r7, #20]
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f1      	bne.n	8003bb4 <mem_cpy+0x1a>
	}
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	617a      	str	r2, [r7, #20]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f3      	bne.n	8003bec <mem_set+0x10>
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003c12:	b480      	push	{r7}
 8003c14:	b089      	sub	sp, #36	@ 0x24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	61fa      	str	r2, [r7, #28]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	61ba      	str	r2, [r7, #24]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	1acb      	subs	r3, r1, r3
 8003c3e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <mem_cmp+0x40>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0eb      	beq.n	8003c2a <mem_cmp+0x18>

	return r;
 8003c52:	697b      	ldr	r3, [r7, #20]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3724      	adds	r7, #36	@ 0x24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c6a:	e002      	b.n	8003c72 <chk_chr+0x12>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <chk_chr+0x26>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d1f2      	bne.n	8003c6c <chk_chr+0xc>
	return *str;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e029      	b.n	8003d00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003cac:	4a27      	ldr	r2, [pc, #156]	@ (8003d4c <chk_lock+0xb4>)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4413      	add	r3, r2
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01d      	beq.n	8003cf6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003cba:	4a24      	ldr	r2, [pc, #144]	@ (8003d4c <chk_lock+0xb4>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d116      	bne.n	8003cfa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d4c <chk_lock+0xb4>)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d10c      	bne.n	8003cfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d4c <chk_lock+0xb4>)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3308      	adds	r3, #8
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d102      	bne.n	8003cfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003cf4:	e007      	b.n	8003d06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d9d2      	bls.n	8003cac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d109      	bne.n	8003d20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <chk_lock+0x80>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d101      	bne.n	8003d1c <chk_lock+0x84>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e010      	b.n	8003d3e <chk_lock+0xa6>
 8003d1c:	2312      	movs	r3, #18
 8003d1e:	e00e      	b.n	8003d3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d108      	bne.n	8003d38 <chk_lock+0xa0>
 8003d26:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <chk_lock+0xb4>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	4413      	add	r3, r2
 8003d2e:	330c      	adds	r3, #12
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d36:	d101      	bne.n	8003d3c <chk_lock+0xa4>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	e000      	b.n	8003d3e <chk_lock+0xa6>
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000160 	.word	0x20000160

08003d50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	e002      	b.n	8003d62 <enq_lock+0x12>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d806      	bhi.n	8003d76 <enq_lock+0x26>
 8003d68:	4a09      	ldr	r2, [pc, #36]	@ (8003d90 <enq_lock+0x40>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f2      	bne.n	8003d5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000160 	.word	0x20000160

08003d94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e01f      	b.n	8003de4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003da4:	4a41      	ldr	r2, [pc, #260]	@ (8003eac <inc_lock+0x118>)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	4413      	add	r3, r2
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d113      	bne.n	8003dde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003db6:	4a3d      	ldr	r2, [pc, #244]	@ (8003eac <inc_lock+0x118>)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d109      	bne.n	8003dde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003dca:	4a38      	ldr	r2, [pc, #224]	@ (8003eac <inc_lock+0x118>)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d006      	beq.n	8003dec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d9dc      	bls.n	8003da4 <inc_lock+0x10>
 8003dea:	e000      	b.n	8003dee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003dec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d132      	bne.n	8003e5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e002      	b.n	8003e00 <inc_lock+0x6c>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d806      	bhi.n	8003e14 <inc_lock+0x80>
 8003e06:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <inc_lock+0x118>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	4413      	add	r3, r2
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f2      	bne.n	8003dfa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d101      	bne.n	8003e1e <inc_lock+0x8a>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e040      	b.n	8003ea0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4922      	ldr	r1, [pc, #136]	@ (8003eac <inc_lock+0x118>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	440b      	add	r3, r1
 8003e2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	491e      	ldr	r1, [pc, #120]	@ (8003eac <inc_lock+0x118>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	440b      	add	r3, r1
 8003e38:	3304      	adds	r3, #4
 8003e3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	491a      	ldr	r1, [pc, #104]	@ (8003eac <inc_lock+0x118>)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	440b      	add	r3, r1
 8003e48:	3308      	adds	r3, #8
 8003e4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003e4c:	4a17      	ldr	r2, [pc, #92]	@ (8003eac <inc_lock+0x118>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	4413      	add	r3, r2
 8003e54:	330c      	adds	r3, #12
 8003e56:	2200      	movs	r2, #0
 8003e58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <inc_lock+0xe0>
 8003e60:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <inc_lock+0x118>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	4413      	add	r3, r2
 8003e68:	330c      	adds	r3, #12
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <inc_lock+0xe0>
 8003e70:	2300      	movs	r3, #0
 8003e72:	e015      	b.n	8003ea0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d108      	bne.n	8003e8c <inc_lock+0xf8>
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003eac <inc_lock+0x118>)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	4413      	add	r3, r2
 8003e82:	330c      	adds	r3, #12
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	e001      	b.n	8003e90 <inc_lock+0xfc>
 8003e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e90:	4906      	ldr	r1, [pc, #24]	@ (8003eac <inc_lock+0x118>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	440b      	add	r3, r1
 8003e98:	330c      	adds	r3, #12
 8003e9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000160 	.word	0x20000160

08003eb0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d825      	bhi.n	8003f10 <dec_lock+0x60>
		n = Files[i].ctr;
 8003ec4:	4a17      	ldr	r2, [pc, #92]	@ (8003f24 <dec_lock+0x74>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	4413      	add	r3, r2
 8003ecc:	330c      	adds	r3, #12
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed8:	d101      	bne.n	8003ede <dec_lock+0x2e>
 8003eda:	2300      	movs	r3, #0
 8003edc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003ede:	89fb      	ldrh	r3, [r7, #14]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <dec_lock+0x3a>
 8003ee4:	89fb      	ldrh	r3, [r7, #14]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003eea:	4a0e      	ldr	r2, [pc, #56]	@ (8003f24 <dec_lock+0x74>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	4413      	add	r3, r2
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	89fa      	ldrh	r2, [r7, #14]
 8003ef6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003ef8:	89fb      	ldrh	r3, [r7, #14]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <dec_lock+0x5a>
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <dec_lock+0x74>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	4413      	add	r3, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	737b      	strb	r3, [r7, #13]
 8003f0e:	e001      	b.n	8003f14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003f10:	2302      	movs	r3, #2
 8003f12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003f14:	7b7b      	ldrb	r3, [r7, #13]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000160 	.word	0x20000160

08003f28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e010      	b.n	8003f58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003f36:	4a0d      	ldr	r2, [pc, #52]	@ (8003f6c <clear_lock+0x44>)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	4413      	add	r3, r2
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d105      	bne.n	8003f52 <clear_lock+0x2a>
 8003f46:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <clear_lock+0x44>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	4413      	add	r3, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3301      	adds	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d9eb      	bls.n	8003f36 <clear_lock+0xe>
	}
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	20000160 	.word	0x20000160

08003f70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	78db      	ldrb	r3, [r3, #3]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d034      	beq.n	8003fee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7858      	ldrb	r0, [r3, #1]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003f94:	2301      	movs	r3, #1
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	f7ff fd3e 	bl	8003a18 <disk_write>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	e022      	b.n	8003fee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	1ad2      	subs	r2, r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d217      	bcs.n	8003fee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	789b      	ldrb	r3, [r3, #2]
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	e010      	b.n	8003fe8 <sync_window+0x78>
					wsect += fs->fsize;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4413      	add	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7858      	ldrb	r0, [r3, #1]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003fda:	2301      	movs	r3, #1
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	f7ff fd1b 	bl	8003a18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d8eb      	bhi.n	8003fc6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d01b      	beq.n	8004048 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ffad 	bl	8003f70 <sync_window>
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d113      	bne.n	8004048 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7858      	ldrb	r0, [r3, #1]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800402a:	2301      	movs	r3, #1
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	f7ff fcd3 	bl	80039d8 <disk_read>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff87 	bl	8003f70 <sync_window>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d158      	bne.n	800411e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d148      	bne.n	8004106 <sync_fs+0xb2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	791b      	ldrb	r3, [r3, #4]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d144      	bne.n	8004106 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3330      	adds	r3, #48	@ 0x30
 8004080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fda8 	bl	8003bdc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3330      	adds	r3, #48	@ 0x30
 8004090:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004094:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fd37 	bl	8003b0c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3330      	adds	r3, #48	@ 0x30
 80040a2:	4921      	ldr	r1, [pc, #132]	@ (8004128 <sync_fs+0xd4>)
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fd4c 	bl	8003b42 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3330      	adds	r3, #48	@ 0x30
 80040ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80040b2:	491e      	ldr	r1, [pc, #120]	@ (800412c <sync_fs+0xd8>)
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fd44 	bl	8003b42 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3330      	adds	r3, #48	@ 0x30
 80040be:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7ff fd3a 	bl	8003b42 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3330      	adds	r3, #48	@ 0x30
 80040d2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7ff fd30 	bl	8003b42 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7858      	ldrb	r0, [r3, #1]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fa:	2301      	movs	r3, #1
 80040fc:	f7ff fc8c 	bl	8003a18 <disk_write>
			fs->fsi_flag = 0;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2200      	movs	r2, #0
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fca2 	bl	8003a58 <disk_ioctl>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <sync_fs+0xca>
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	41615252 	.word	0x41615252
 800412c:	61417272 	.word	0x61417272

08004130 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	3b02      	subs	r3, #2
 800413e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	3b02      	subs	r3, #2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d301      	bcc.n	8004150 <clust2sect+0x20>
 800414c:	2300      	movs	r3, #0
 800414e:	e008      	b.n	8004162 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	895b      	ldrh	r3, [r3, #10]
 8004154:	461a      	mov	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	fb03 f202 	mul.w	r2, r3, r2
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	4413      	add	r3, r2
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d904      	bls.n	800418e <get_fat+0x20>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <get_fat+0x26>
		val = 1;	/* Internal error */
 800418e:	2301      	movs	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e08e      	b.n	80042b2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004194:	f04f 33ff 	mov.w	r3, #4294967295
 8004198:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d061      	beq.n	8004266 <get_fat+0xf8>
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	dc7b      	bgt.n	800429e <get_fat+0x130>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d002      	beq.n	80041b0 <get_fat+0x42>
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d041      	beq.n	8004232 <get_fat+0xc4>
 80041ae:	e076      	b.n	800429e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0a5b      	lsrs	r3, r3, #9
 80041c6:	4413      	add	r3, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	6938      	ldr	r0, [r7, #16]
 80041cc:	f7ff ff14 	bl	8003ff8 <move_window>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d166      	bne.n	80042a4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	60fa      	str	r2, [r7, #12]
 80041dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0a5b      	lsrs	r3, r3, #9
 80041f2:	4413      	add	r3, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	6938      	ldr	r0, [r7, #16]
 80041f8:	f7ff fefe 	bl	8003ff8 <move_window>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d152      	bne.n	80042a8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4313      	orrs	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <get_fat+0xba>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	e002      	b.n	800422e <get_fat+0xc0>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422e:	617b      	str	r3, [r7, #20]
			break;
 8004230:	e03f      	b.n	80042b2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	4413      	add	r3, r2
 800423c:	4619      	mov	r1, r3
 800423e:	6938      	ldr	r0, [r7, #16]
 8004240:	f7ff feda 	bl	8003ff8 <move_window>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d130      	bne.n	80042ac <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004258:	4413      	add	r3, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fc1a 	bl	8003a94 <ld_word>
 8004260:	4603      	mov	r3, r0
 8004262:	617b      	str	r3, [r7, #20]
			break;
 8004264:	e025      	b.n	80042b2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	09db      	lsrs	r3, r3, #7
 800426e:	4413      	add	r3, r2
 8004270:	4619      	mov	r1, r3
 8004272:	6938      	ldr	r0, [r7, #16]
 8004274:	f7ff fec0 	bl	8003ff8 <move_window>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d118      	bne.n	80042b0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800428c:	4413      	add	r3, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fc19 	bl	8003ac6 <ld_dword>
 8004294:	4603      	mov	r3, r0
 8004296:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800429a:	617b      	str	r3, [r7, #20]
			break;
 800429c:	e009      	b.n	80042b2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800429e:	2301      	movs	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e006      	b.n	80042b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042a4:	bf00      	nop
 80042a6:	e004      	b.n	80042b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042a8:	bf00      	nop
 80042aa:	e002      	b.n	80042b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80042ac:	bf00      	nop
 80042ae:	e000      	b.n	80042b2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80042b0:	bf00      	nop
		}
	}

	return val;
 80042b2:	697b      	ldr	r3, [r7, #20]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	@ 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80042c8:	2302      	movs	r3, #2
 80042ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f240 80d9 	bls.w	8004486 <put_fat+0x1ca>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	f080 80d3 	bcs.w	8004486 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	f000 8096 	beq.w	8004416 <put_fat+0x15a>
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	f300 80cb 	bgt.w	8004486 <put_fat+0x1ca>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d002      	beq.n	80042fa <put_fat+0x3e>
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d06e      	beq.n	80043d6 <put_fat+0x11a>
 80042f8:	e0c5      	b.n	8004486 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4413      	add	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	0a5b      	lsrs	r3, r3, #9
 8004310:	4413      	add	r3, r2
 8004312:	4619      	mov	r1, r3
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff fe6f 	bl	8003ff8 <move_window>
 800431a:	4603      	mov	r3, r0
 800431c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800431e:	7ffb      	ldrb	r3, [r7, #31]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 80a9 	bne.w	8004478 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	61b9      	str	r1, [r7, #24]
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	4413      	add	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <put_fat+0xa4>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b25b      	sxtb	r3, r3
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	b25a      	sxtb	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	b25b      	sxtb	r3, r3
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	b25b      	sxtb	r3, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	b25b      	sxtb	r3, r3
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e001      	b.n	8004364 <put_fat+0xa8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1a      	ldr	r2, [r3, #32]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	0a5b      	lsrs	r3, r3, #9
 8004376:	4413      	add	r3, r2
 8004378:	4619      	mov	r1, r3
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff fe3c 	bl	8003ff8 <move_window>
 8004380:	4603      	mov	r3, r0
 8004382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004384:	7ffb      	ldrb	r3, [r7, #31]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d178      	bne.n	800447c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004396:	4413      	add	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <put_fat+0xf0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	091b      	lsrs	r3, r3, #4
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e00e      	b.n	80043ca <put_fat+0x10e>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	f023 030f 	bic.w	r3, r3, #15
 80043b6:	b25a      	sxtb	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	b25b      	sxtb	r3, r3
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	70da      	strb	r2, [r3, #3]
			break;
 80043d4:	e057      	b.n	8004486 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	4413      	add	r3, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fe08 	bl	8003ff8 <move_window>
 80043e8:	4603      	mov	r3, r0
 80043ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043ec:	7ffb      	ldrb	r3, [r7, #31]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d146      	bne.n	8004480 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004400:	4413      	add	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	b292      	uxth	r2, r2
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fb7f 	bl	8003b0c <st_word>
			fs->wflag = 1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	70da      	strb	r2, [r3, #3]
			break;
 8004414:	e037      	b.n	8004486 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1a      	ldr	r2, [r3, #32]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	09db      	lsrs	r3, r3, #7
 800441e:	4413      	add	r3, r2
 8004420:	4619      	mov	r1, r3
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff fde8 	bl	8003ff8 <move_window>
 8004428:	4603      	mov	r3, r0
 800442a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800442c:	7ffb      	ldrb	r3, [r7, #31]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d128      	bne.n	8004484 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004446:	4413      	add	r3, r2
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fb3c 	bl	8003ac6 <ld_dword>
 800444e:	4603      	mov	r3, r0
 8004450:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004454:	4323      	orrs	r3, r4
 8004456:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004466:	4413      	add	r3, r2
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fb69 	bl	8003b42 <st_dword>
			fs->wflag = 1;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	70da      	strb	r2, [r3, #3]
			break;
 8004476:	e006      	b.n	8004486 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004478:	bf00      	nop
 800447a:	e004      	b.n	8004486 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800447c:	bf00      	nop
 800447e:	e002      	b.n	8004486 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004480:	bf00      	nop
 8004482:	e000      	b.n	8004486 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004484:	bf00      	nop
		}
	}
	return res;
 8004486:	7ffb      	ldrb	r3, [r7, #31]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3724      	adds	r7, #36	@ 0x24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd90      	pop	{r4, r7, pc}

08004490 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d904      	bls.n	80044b6 <remove_chain+0x26>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d301      	bcc.n	80044ba <remove_chain+0x2a>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e04b      	b.n	8004552 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	69b8      	ldr	r0, [r7, #24]
 80044c8:	f7ff fef8 	bl	80042bc <put_fat>
 80044cc:	4603      	mov	r3, r0
 80044ce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80044d0:	7ffb      	ldrb	r3, [r7, #31]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <remove_chain+0x4a>
 80044d6:	7ffb      	ldrb	r3, [r7, #31]
 80044d8:	e03b      	b.n	8004552 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fe46 	bl	800416e <get_fat>
 80044e2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d031      	beq.n	800454e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <remove_chain+0x64>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e02e      	b.n	8004552 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d101      	bne.n	8004500 <remove_chain+0x70>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e028      	b.n	8004552 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004500:	2200      	movs	r2, #0
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	69b8      	ldr	r0, [r7, #24]
 8004506:	f7ff fed9 	bl	80042bc <put_fat>
 800450a:	4603      	mov	r3, r0
 800450c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800450e:	7ffb      	ldrb	r3, [r7, #31]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <remove_chain+0x88>
 8004514:	7ffb      	ldrb	r3, [r7, #31]
 8004516:	e01c      	b.n	8004552 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	3b02      	subs	r3, #2
 8004522:	429a      	cmp	r2, r3
 8004524:	d20b      	bcs.n	800453e <remove_chain+0xae>
			fs->free_clst++;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	791b      	ldrb	r3, [r3, #4]
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	b2da      	uxtb	r2, r3
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	d3c6      	bcc.n	80044da <remove_chain+0x4a>
 800454c:	e000      	b.n	8004550 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800454e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <create_chain+0x2c>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	429a      	cmp	r2, r3
 8004584:	d31b      	bcc.n	80045be <create_chain+0x64>
 8004586:	2301      	movs	r3, #1
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e018      	b.n	80045be <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fded 	bl	800416e <get_fat>
 8004594:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d801      	bhi.n	80045a0 <create_chain+0x46>
 800459c:	2301      	movs	r3, #1
 800459e:	e070      	b.n	8004682 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d101      	bne.n	80045ac <create_chain+0x52>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	e06a      	b.n	8004682 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d201      	bcs.n	80045ba <create_chain+0x60>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	e063      	b.n	8004682 <create_chain+0x128>
		scl = clst;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d307      	bcc.n	80045e2 <create_chain+0x88>
				ncl = 2;
 80045d2:	2302      	movs	r3, #2
 80045d4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d901      	bls.n	80045e2 <create_chain+0x88>
 80045de:	2300      	movs	r3, #0
 80045e0:	e04f      	b.n	8004682 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80045e2:	69f9      	ldr	r1, [r7, #28]
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff fdc2 	bl	800416e <get_fat>
 80045ea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00e      	beq.n	8004610 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d003      	beq.n	8004600 <create_chain+0xa6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d101      	bne.n	8004604 <create_chain+0xaa>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	e03e      	b.n	8004682 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	429a      	cmp	r2, r3
 800460a:	d1da      	bne.n	80045c2 <create_chain+0x68>
 800460c:	2300      	movs	r3, #0
 800460e:	e038      	b.n	8004682 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004610:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004612:	f04f 32ff 	mov.w	r2, #4294967295
 8004616:	69f9      	ldr	r1, [r7, #28]
 8004618:	6938      	ldr	r0, [r7, #16]
 800461a:	f7ff fe4f 	bl	80042bc <put_fat>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <create_chain+0xe2>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	6938      	ldr	r0, [r7, #16]
 8004634:	f7ff fe42 	bl	80042bc <put_fat>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d116      	bne.n	8004670 <create_chain+0x116>
		fs->last_clst = ncl;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	3b02      	subs	r3, #2
 8004652:	429a      	cmp	r2, r3
 8004654:	d804      	bhi.n	8004660 <create_chain+0x106>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	1e5a      	subs	r2, r3, #1
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	791b      	ldrb	r3, [r3, #4]
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	711a      	strb	r2, [r3, #4]
 800466e:	e007      	b.n	8004680 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d102      	bne.n	800467c <create_chain+0x122>
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	e000      	b.n	800467e <create_chain+0x124>
 800467c:	2301      	movs	r3, #1
 800467e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004680:	69fb      	ldr	r3, [r7, #28]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800468a:	b480      	push	{r7}
 800468c:	b087      	sub	sp, #28
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469e:	3304      	adds	r3, #4
 80046a0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	8952      	ldrh	r2, [r2, #10]
 80046aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1d1a      	adds	r2, r3, #4
 80046b4:	613a      	str	r2, [r7, #16]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <clmt_clust+0x3a>
 80046c0:	2300      	movs	r3, #0
 80046c2:	e010      	b.n	80046e6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d307      	bcc.n	80046dc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	3304      	adds	r3, #4
 80046d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80046da:	e7e9      	b.n	80046b0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80046dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4413      	add	r3, r2
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004708:	d204      	bcs.n	8004714 <dir_sdi+0x22>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004714:	2302      	movs	r3, #2
 8004716:	e063      	b.n	80047e0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <dir_sdi+0x46>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10c      	bne.n	8004758 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	8912      	ldrh	r2, [r2, #8]
 8004746:	4293      	cmp	r3, r2
 8004748:	d301      	bcc.n	800474e <dir_sdi+0x5c>
 800474a:	2302      	movs	r3, #2
 800474c:	e048      	b.n	80047e0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	61da      	str	r2, [r3, #28]
 8004756:	e029      	b.n	80047ac <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	895b      	ldrh	r3, [r3, #10]
 800475c:	025b      	lsls	r3, r3, #9
 800475e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004760:	e019      	b.n	8004796 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fd01 	bl	800416e <get_fat>
 800476c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d101      	bne.n	800477a <dir_sdi+0x88>
 8004776:	2301      	movs	r3, #1
 8004778:	e032      	b.n	80047e0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d904      	bls.n	800478a <dir_sdi+0x98>
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	429a      	cmp	r2, r3
 8004788:	d301      	bcc.n	800478e <dir_sdi+0x9c>
 800478a:	2302      	movs	r3, #2
 800478c:	e028      	b.n	80047e0 <dir_sdi+0xee>
			ofs -= csz;
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	429a      	cmp	r2, r3
 800479c:	d2e1      	bcs.n	8004762 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	6938      	ldr	r0, [r7, #16]
 80047a2:	f7ff fcc5 	bl	8004130 <clust2sect>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <dir_sdi+0xcc>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e010      	b.n	80047e0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	0a5b      	lsrs	r3, r3, #9
 80047c6:	441a      	add	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	3320      	adds	r3, #32
 80047fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <dir_next+0x28>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800480e:	d301      	bcc.n	8004814 <dir_next+0x2c>
 8004810:	2304      	movs	r3, #4
 8004812:	e0aa      	b.n	800496a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 8098 	bne.w	8004950 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	8912      	ldrh	r2, [r2, #8]
 800483a:	4293      	cmp	r3, r2
 800483c:	f0c0 8088 	bcc.w	8004950 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	61da      	str	r2, [r3, #28]
 8004846:	2304      	movs	r3, #4
 8004848:	e08f      	b.n	800496a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	8952      	ldrh	r2, [r2, #10]
 8004852:	3a01      	subs	r2, #1
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d17a      	bne.n	8004950 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f7ff fc83 	bl	800416e <get_fat>
 8004868:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d801      	bhi.n	8004874 <dir_next+0x8c>
 8004870:	2302      	movs	r3, #2
 8004872:	e07a      	b.n	800496a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d101      	bne.n	8004880 <dir_next+0x98>
 800487c:	2301      	movs	r3, #1
 800487e:	e074      	b.n	800496a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	429a      	cmp	r2, r3
 8004888:	d358      	bcc.n	800493c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	61da      	str	r2, [r3, #28]
 8004896:	2304      	movs	r3, #4
 8004898:	e067      	b.n	800496a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f7ff fe59 	bl	800455a <create_chain>
 80048a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <dir_next+0xcc>
 80048b0:	2307      	movs	r3, #7
 80048b2:	e05a      	b.n	800496a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <dir_next+0xd6>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e055      	b.n	800496a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d101      	bne.n	80048ca <dir_next+0xe2>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e04f      	b.n	800496a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fb50 	bl	8003f70 <sync_window>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <dir_next+0xf2>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e047      	b.n	800496a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3330      	adds	r3, #48	@ 0x30
 80048de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff f979 	bl	8003bdc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff fc1d 	bl	8004130 <clust2sect>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048fc:	e012      	b.n	8004924 <dir_next+0x13c>
						fs->wflag = 1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff fb33 	bl	8003f70 <sync_window>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <dir_next+0x12c>
 8004910:	2301      	movs	r3, #1
 8004912:	e02a      	b.n	800496a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	3301      	adds	r3, #1
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	895b      	ldrh	r3, [r3, #10]
 8004928:	461a      	mov	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4293      	cmp	r3, r2
 800492e:	d3e6      	bcc.n	80048fe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004942:	6979      	ldr	r1, [r7, #20]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff fbf3 	bl	8004130 <clust2sect>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	441a      	add	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004982:	2100      	movs	r1, #0
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff feb4 	bl	80046f2 <dir_sdi>
 800498a:	4603      	mov	r3, r0
 800498c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d12b      	bne.n	80049ec <dir_alloc+0x7a>
		n = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	4619      	mov	r1, r3
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff fb2a 	bl	8003ff8 <move_window>
 80049a4:	4603      	mov	r3, r0
 80049a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d11d      	bne.n	80049ea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2be5      	cmp	r3, #229	@ 0xe5
 80049b6:	d004      	beq.n	80049c2 <dir_alloc+0x50>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d107      	bne.n	80049d2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	3301      	adds	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d102      	bne.n	80049d6 <dir_alloc+0x64>
 80049d0:	e00c      	b.n	80049ec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80049d6:	2101      	movs	r1, #1
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff05 	bl	80047e8 <dir_next>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0d7      	beq.n	8004998 <dir_alloc+0x26>
 80049e8:	e000      	b.n	80049ec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80049ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d101      	bne.n	80049f6 <dir_alloc+0x84>
 80049f2:	2307      	movs	r3, #7
 80049f4:	75fb      	strb	r3, [r7, #23]
	return res;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	331a      	adds	r3, #26
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff f840 	bl	8003a94 <ld_word>
 8004a14:	4603      	mov	r3, r0
 8004a16:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d109      	bne.n	8004a34 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	3314      	adds	r3, #20
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff f835 	bl	8003a94 <ld_word>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004a34:	68fb      	ldr	r3, [r7, #12]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	331a      	adds	r3, #26
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	b292      	uxth	r2, r2
 8004a52:	4611      	mov	r1, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff f859 	bl	8003b0c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d109      	bne.n	8004a76 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f103 0214 	add.w	r2, r3, #20
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7ff f84b 	bl	8003b0c <st_word>
	}
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff fe2f 	bl	80046f2 <dir_sdi>
 8004a94:	4603      	mov	r3, r0
 8004a96:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <dir_find+0x24>
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	e03e      	b.n	8004b20 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6938      	ldr	r0, [r7, #16]
 8004aaa:	f7ff faa5 	bl	8003ff8 <move_window>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d12f      	bne.n	8004b18 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <dir_find+0x4e>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	75fb      	strb	r3, [r7, #23]
 8004aca:	e028      	b.n	8004b1e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	330b      	adds	r3, #11
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	330b      	adds	r3, #11
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <dir_find+0x86>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a18      	ldr	r0, [r3, #32]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3324      	adds	r3, #36	@ 0x24
 8004af6:	220b      	movs	r2, #11
 8004af8:	4619      	mov	r1, r3
 8004afa:	f7ff f88a 	bl	8003c12 <mem_cmp>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004b04:	2100      	movs	r1, #0
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fe6e 	bl	80047e8 <dir_next>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0c5      	beq.n	8004aa2 <dir_find+0x24>
 8004b16:	e002      	b.n	8004b1e <dir_find+0xa0>
		if (res != FR_OK) break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004b1c:	bf00      	nop

	return res;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004b36:	2101      	movs	r1, #1
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ff1a 	bl	8004972 <dir_alloc>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d11c      	bne.n	8004b82 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	68b8      	ldr	r0, [r7, #8]
 8004b50:	f7ff fa52 	bl	8003ff8 <move_window>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d111      	bne.n	8004b82 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	2220      	movs	r2, #32
 8004b64:	2100      	movs	r1, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff f838 	bl	8003bdc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a18      	ldr	r0, [r3, #32]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3324      	adds	r3, #36	@ 0x24
 8004b74:	220b      	movs	r2, #11
 8004b76:	4619      	mov	r1, r3
 8004b78:	f7ff f80f 	bl	8003b9a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3324      	adds	r3, #36	@ 0x24
 8004ba0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004ba2:	220b      	movs	r2, #11
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	68b8      	ldr	r0, [r7, #8]
 8004ba8:	f7ff f818 	bl	8003bdc <mem_set>
	si = i = 0; ni = 8;
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	61fa      	str	r2, [r7, #28]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004bc6:	7efb      	ldrb	r3, [r7, #27]
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d94e      	bls.n	8004c6a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004bcc:	7efb      	ldrb	r3, [r7, #27]
 8004bce:	2b2f      	cmp	r3, #47	@ 0x2f
 8004bd0:	d006      	beq.n	8004be0 <create_name+0x54>
 8004bd2:	7efb      	ldrb	r3, [r7, #27]
 8004bd4:	2b5c      	cmp	r3, #92	@ 0x5c
 8004bd6:	d110      	bne.n	8004bfa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004bd8:	e002      	b.n	8004be0 <create_name+0x54>
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b2f      	cmp	r3, #47	@ 0x2f
 8004bea:	d0f6      	beq.n	8004bda <create_name+0x4e>
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b5c      	cmp	r3, #92	@ 0x5c
 8004bf6:	d0f0      	beq.n	8004bda <create_name+0x4e>
			break;
 8004bf8:	e038      	b.n	8004c6c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004bfa:	7efb      	ldrb	r3, [r7, #27]
 8004bfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bfe:	d003      	beq.n	8004c08 <create_name+0x7c>
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d30c      	bcc.n	8004c22 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b0b      	cmp	r3, #11
 8004c0c:	d002      	beq.n	8004c14 <create_name+0x88>
 8004c0e:	7efb      	ldrb	r3, [r7, #27]
 8004c10:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c12:	d001      	beq.n	8004c18 <create_name+0x8c>
 8004c14:	2306      	movs	r3, #6
 8004c16:	e044      	b.n	8004ca2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004c18:	2308      	movs	r3, #8
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	230b      	movs	r3, #11
 8004c1e:	617b      	str	r3, [r7, #20]
			continue;
 8004c20:	e022      	b.n	8004c68 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004c22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da04      	bge.n	8004c34 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004c2a:	7efb      	ldrb	r3, [r7, #27]
 8004c2c:	3b80      	subs	r3, #128	@ 0x80
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <create_name+0x120>)
 8004c30:	5cd3      	ldrb	r3, [r2, r3]
 8004c32:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004c34:	7efb      	ldrb	r3, [r7, #27]
 8004c36:	4619      	mov	r1, r3
 8004c38:	481d      	ldr	r0, [pc, #116]	@ (8004cb0 <create_name+0x124>)
 8004c3a:	f7ff f811 	bl	8003c60 <chk_chr>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <create_name+0xbc>
 8004c44:	2306      	movs	r3, #6
 8004c46:	e02c      	b.n	8004ca2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004c48:	7efb      	ldrb	r3, [r7, #27]
 8004c4a:	2b60      	cmp	r3, #96	@ 0x60
 8004c4c:	d905      	bls.n	8004c5a <create_name+0xce>
 8004c4e:	7efb      	ldrb	r3, [r7, #27]
 8004c50:	2b7a      	cmp	r3, #122	@ 0x7a
 8004c52:	d802      	bhi.n	8004c5a <create_name+0xce>
 8004c54:	7efb      	ldrb	r3, [r7, #27]
 8004c56:	3b20      	subs	r3, #32
 8004c58:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	613a      	str	r2, [r7, #16]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4413      	add	r3, r2
 8004c64:	7efa      	ldrb	r2, [r7, #27]
 8004c66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004c68:	e7a6      	b.n	8004bb8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004c6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	441a      	add	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <create_name+0xf4>
 8004c7c:	2306      	movs	r3, #6
 8004c7e:	e010      	b.n	8004ca2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2be5      	cmp	r3, #229	@ 0xe5
 8004c86:	d102      	bne.n	8004c8e <create_name+0x102>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004c8e:	7efb      	ldrb	r3, [r7, #27]
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d801      	bhi.n	8004c98 <create_name+0x10c>
 8004c94:	2204      	movs	r2, #4
 8004c96:	e000      	b.n	8004c9a <create_name+0x10e>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	330b      	adds	r3, #11
 8004c9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004ca0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	08007294 	.word	0x08007294
 8004cb0:	08007238 	.word	0x08007238

08004cb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004cc8:	e002      	b.n	8004cd0 <follow_path+0x1c>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8004cd6:	d0f8      	beq.n	8004cca <follow_path+0x16>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b5c      	cmp	r3, #92	@ 0x5c
 8004cde:	d0f4      	beq.n	8004cca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b1f      	cmp	r3, #31
 8004cec:	d80a      	bhi.n	8004d04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2280      	movs	r2, #128	@ 0x80
 8004cf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fcfa 	bl	80046f2 <dir_sdi>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	75fb      	strb	r3, [r7, #23]
 8004d02:	e043      	b.n	8004d8c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d04:	463b      	mov	r3, r7
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff ff3f 	bl	8004b8c <create_name>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d134      	bne.n	8004d82 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff feb0 	bl	8004a7e <dir_find>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d127      	bne.n	8004d86 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004d36:	7afb      	ldrb	r3, [r7, #11]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d122      	bne.n	8004d86 <follow_path+0xd2>
 8004d40:	2305      	movs	r3, #5
 8004d42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004d44:	e01f      	b.n	8004d86 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d46:	7afb      	ldrb	r3, [r7, #11]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d11c      	bne.n	8004d8a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	799b      	ldrb	r3, [r3, #6]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004d5c:	2305      	movs	r3, #5
 8004d5e:	75fb      	strb	r3, [r7, #23]
 8004d60:	e014      	b.n	8004d8c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	4413      	add	r3, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff fe43 	bl	8004a00 <ld_clust>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d80:	e7c0      	b.n	8004d04 <follow_path+0x50>
			if (res != FR_OK) break;
 8004d82:	bf00      	nop
 8004d84:	e002      	b.n	8004d8c <follow_path+0xd8>
				break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d8a:	bf00      	nop
			}
		}
	}

	return res;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004da2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d031      	beq.n	8004e10 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e002      	b.n	8004dba <get_ldnumber+0x24>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3301      	adds	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d903      	bls.n	8004dca <get_ldnumber+0x34>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b3a      	cmp	r3, #58	@ 0x3a
 8004dc8:	d1f4      	bne.n	8004db4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b3a      	cmp	r3, #58	@ 0x3a
 8004dd0:	d11c      	bne.n	8004e0c <get_ldnumber+0x76>
			tp = *path;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	60fa      	str	r2, [r7, #12]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	3b30      	subs	r3, #48	@ 0x30
 8004de2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d80e      	bhi.n	8004e08 <get_ldnumber+0x72>
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d10a      	bne.n	8004e08 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <get_ldnumber+0x72>
					vol = (int)i;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	e002      	b.n	8004e12 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004e10:	693b      	ldr	r3, [r7, #16]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	70da      	strb	r2, [r3, #3]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f04f 32ff 	mov.w	r2, #4294967295
 8004e36:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff f8dc 	bl	8003ff8 <move_window>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <check_fs+0x2a>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e038      	b.n	8004ebc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3330      	adds	r3, #48	@ 0x30
 8004e4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe fe1e 	bl	8003a94 <ld_word>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <check_fs+0x48>
 8004e64:	2303      	movs	r3, #3
 8004e66:	e029      	b.n	8004ebc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e6e:	2be9      	cmp	r3, #233	@ 0xe9
 8004e70:	d009      	beq.n	8004e86 <check_fs+0x66>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e78:	2beb      	cmp	r3, #235	@ 0xeb
 8004e7a:	d11e      	bne.n	8004eba <check_fs+0x9a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004e82:	2b90      	cmp	r3, #144	@ 0x90
 8004e84:	d119      	bne.n	8004eba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3330      	adds	r3, #48	@ 0x30
 8004e8a:	3336      	adds	r3, #54	@ 0x36
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fe1a 	bl	8003ac6 <ld_dword>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <check_fs+0xa4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <check_fs+0x82>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e00c      	b.n	8004ebc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3330      	adds	r3, #48	@ 0x30
 8004ea6:	3352      	adds	r3, #82	@ 0x52
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe fe0c 	bl	8003ac6 <ld_dword>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <check_fs+0xa8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <check_fs+0x9a>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e000      	b.n	8004ebc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004eba:	2302      	movs	r3, #2
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	00544146 	.word	0x00544146
 8004ec8:	33544146 	.word	0x33544146

08004ecc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b096      	sub	sp, #88	@ 0x58
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff ff58 	bl	8004d96 <get_ldnumber>
 8004ee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da01      	bge.n	8004ef2 <find_volume+0x26>
 8004eee:	230b      	movs	r3, #11
 8004ef0:	e22d      	b.n	800534e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004ef2:	4aa1      	ldr	r2, [pc, #644]	@ (8005178 <find_volume+0x2ac>)
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <find_volume+0x3a>
 8004f02:	230c      	movs	r3, #12
 8004f04:	e223      	b.n	800534e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01a      	beq.n	8004f52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fd17 	bl	8003954 <disk_status>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <find_volume+0x82>
 8004f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004f4a:	230a      	movs	r3, #10
 8004f4c:	e1ff      	b.n	800534e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e1fd      	b.n	800534e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fd0f 	bl	8003988 <disk_initialize>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004f70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1e6      	b.n	800534e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <find_volume+0xca>
 8004f86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004f92:	230a      	movs	r3, #10
 8004f94:	e1db      	b.n	800534e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004f9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f9e:	f7ff ff3f 	bl	8004e20 <check_fs>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d149      	bne.n	8005044 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fb4:	e01e      	b.n	8004ff4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004fc4:	4413      	add	r3, r2
 8004fc6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	3304      	adds	r3, #4
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <find_volume+0x114>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe fd75 	bl	8003ac6 <ld_dword>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	e000      	b.n	8004fe2 <find_volume+0x116>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	3358      	adds	r3, #88	@ 0x58
 8004fe8:	443b      	add	r3, r7
 8004fea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d9dd      	bls.n	8004fb6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <find_volume+0x13e>
 8005004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005006:	3b01      	subs	r3, #1
 8005008:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800500a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	3358      	adds	r3, #88	@ 0x58
 8005010:	443b      	add	r3, r7
 8005012:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005016:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <find_volume+0x15e>
 800501e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005020:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005022:	f7ff fefd 	bl	8004e20 <check_fs>
 8005026:	4603      	mov	r3, r0
 8005028:	e000      	b.n	800502c <find_volume+0x160>
 800502a:	2303      	movs	r3, #3
 800502c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005030:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005034:	2b01      	cmp	r3, #1
 8005036:	d905      	bls.n	8005044 <find_volume+0x178>
 8005038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800503a:	3301      	adds	r3, #1
 800503c:	643b      	str	r3, [r7, #64]	@ 0x40
 800503e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005040:	2b03      	cmp	r3, #3
 8005042:	d9e2      	bls.n	800500a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005044:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005048:	2b04      	cmp	r3, #4
 800504a:	d101      	bne.n	8005050 <find_volume+0x184>
 800504c:	2301      	movs	r3, #1
 800504e:	e17e      	b.n	800534e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005050:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005054:	2b01      	cmp	r3, #1
 8005056:	d901      	bls.n	800505c <find_volume+0x190>
 8005058:	230d      	movs	r3, #13
 800505a:	e178      	b.n	800534e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	3330      	adds	r3, #48	@ 0x30
 8005060:	330b      	adds	r3, #11
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fd16 	bl	8003a94 <ld_word>
 8005068:	4603      	mov	r3, r0
 800506a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800506e:	d001      	beq.n	8005074 <find_volume+0x1a8>
 8005070:	230d      	movs	r3, #13
 8005072:	e16c      	b.n	800534e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	3330      	adds	r3, #48	@ 0x30
 8005078:	3316      	adds	r3, #22
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fd0a 	bl	8003a94 <ld_word>
 8005080:	4603      	mov	r3, r0
 8005082:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <find_volume+0x1cc>
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	3330      	adds	r3, #48	@ 0x30
 800508e:	3324      	adds	r3, #36	@ 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fd18 	bl	8003ac6 <ld_dword>
 8005096:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800509c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800509e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	789b      	ldrb	r3, [r3, #2]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d005      	beq.n	80050bc <find_volume+0x1f0>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d001      	beq.n	80050bc <find_volume+0x1f0>
 80050b8:	230d      	movs	r3, #13
 80050ba:	e148      	b.n	800534e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	789b      	ldrb	r3, [r3, #2]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d0:	461a      	mov	r2, r3
 80050d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	895b      	ldrh	r3, [r3, #10]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <find_volume+0x224>
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	895b      	ldrh	r3, [r3, #10]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e6:	895b      	ldrh	r3, [r3, #10]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <find_volume+0x228>
 80050f0:	230d      	movs	r3, #13
 80050f2:	e12c      	b.n	800534e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	3330      	adds	r3, #48	@ 0x30
 80050f8:	3311      	adds	r3, #17
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fcca 	bl	8003a94 <ld_word>
 8005100:	4603      	mov	r3, r0
 8005102:	461a      	mov	r2, r3
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	891b      	ldrh	r3, [r3, #8]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <find_volume+0x24e>
 8005116:	230d      	movs	r3, #13
 8005118:	e119      	b.n	800534e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	3330      	adds	r3, #48	@ 0x30
 800511e:	3313      	adds	r3, #19
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe fcb7 	bl	8003a94 <ld_word>
 8005126:	4603      	mov	r3, r0
 8005128:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800512a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <find_volume+0x272>
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	3330      	adds	r3, #48	@ 0x30
 8005134:	3320      	adds	r3, #32
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fcc5 	bl	8003ac6 <ld_dword>
 800513c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	3330      	adds	r3, #48	@ 0x30
 8005142:	330e      	adds	r3, #14
 8005144:	4618      	mov	r0, r3
 8005146:	f7fe fca5 	bl	8003a94 <ld_word>
 800514a:	4603      	mov	r3, r0
 800514c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800514e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <find_volume+0x28c>
 8005154:	230d      	movs	r3, #13
 8005156:	e0fa      	b.n	800534e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005158:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800515a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800515c:	4413      	add	r3, r2
 800515e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005160:	8912      	ldrh	r2, [r2, #8]
 8005162:	0912      	lsrs	r2, r2, #4
 8005164:	b292      	uxth	r2, r2
 8005166:	4413      	add	r3, r2
 8005168:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800516a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	429a      	cmp	r2, r3
 8005170:	d204      	bcs.n	800517c <find_volume+0x2b0>
 8005172:	230d      	movs	r3, #13
 8005174:	e0eb      	b.n	800534e <find_volume+0x482>
 8005176:	bf00      	nop
 8005178:	20000158 	.word	0x20000158
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800517c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005184:	8952      	ldrh	r2, [r2, #10]
 8005186:	fbb3 f3f2 	udiv	r3, r3, r2
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <find_volume+0x2ca>
 8005192:	230d      	movs	r3, #13
 8005194:	e0db      	b.n	800534e <find_volume+0x482>
		fmt = FS_FAT32;
 8005196:	2303      	movs	r3, #3
 8005198:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d802      	bhi.n	80051ac <find_volume+0x2e0>
 80051a6:	2302      	movs	r3, #2
 80051a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d802      	bhi.n	80051bc <find_volume+0x2f0>
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	1c9a      	adds	r2, r3, #2
 80051c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051c8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80051ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80051cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ce:	441a      	add	r2, r3
 80051d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80051d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	441a      	add	r2, r3
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80051de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d11e      	bne.n	8005224 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	3330      	adds	r3, #48	@ 0x30
 80051ea:	332a      	adds	r3, #42	@ 0x2a
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe fc51 	bl	8003a94 <ld_word>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <find_volume+0x330>
 80051f8:	230d      	movs	r3, #13
 80051fa:	e0a8      	b.n	800534e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80051fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fe:	891b      	ldrh	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <find_volume+0x33c>
 8005204:	230d      	movs	r3, #13
 8005206:	e0a2      	b.n	800534e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520a:	3330      	adds	r3, #48	@ 0x30
 800520c:	332c      	adds	r3, #44	@ 0x2c
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fc59 	bl	8003ac6 <ld_dword>
 8005214:	4602      	mov	r2, r0
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	647b      	str	r3, [r7, #68]	@ 0x44
 8005222:	e01f      	b.n	8005264 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	891b      	ldrh	r3, [r3, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <find_volume+0x364>
 800522c:	230d      	movs	r3, #13
 800522e:	e08e      	b.n	800534e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005232:	6a1a      	ldr	r2, [r3, #32]
 8005234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005236:	441a      	add	r2, r3
 8005238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800523c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005240:	2b02      	cmp	r3, #2
 8005242:	d103      	bne.n	800524c <find_volume+0x380>
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	e00a      	b.n	8005262 <find_volume+0x396>
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	4613      	mov	r3, r2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	4413      	add	r3, r2
 8005256:	085a      	lsrs	r2, r3, #1
 8005258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005262:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800526a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800526e:	0a5b      	lsrs	r3, r3, #9
 8005270:	429a      	cmp	r2, r3
 8005272:	d201      	bcs.n	8005278 <find_volume+0x3ac>
 8005274:	230d      	movs	r3, #13
 8005276:	e06a      	b.n	800534e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	f04f 32ff 	mov.w	r2, #4294967295
 800527e:	611a      	str	r2, [r3, #16]
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005286:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	2280      	movs	r2, #128	@ 0x80
 800528c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800528e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005292:	2b03      	cmp	r3, #3
 8005294:	d149      	bne.n	800532a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	3330      	adds	r3, #48	@ 0x30
 800529a:	3330      	adds	r3, #48	@ 0x30
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fbf9 	bl	8003a94 <ld_word>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d140      	bne.n	800532a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80052a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052aa:	3301      	adds	r3, #1
 80052ac:	4619      	mov	r1, r3
 80052ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052b0:	f7fe fea2 	bl	8003ff8 <move_window>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d137      	bne.n	800532a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	2200      	movs	r2, #0
 80052be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80052c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c2:	3330      	adds	r3, #48	@ 0x30
 80052c4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fbe3 	bl	8003a94 <ld_word>
 80052ce:	4603      	mov	r3, r0
 80052d0:	461a      	mov	r2, r3
 80052d2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d127      	bne.n	800532a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	3330      	adds	r3, #48	@ 0x30
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fbf1 	bl	8003ac6 <ld_dword>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005358 <find_volume+0x48c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d11e      	bne.n	800532a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	3330      	adds	r3, #48	@ 0x30
 80052f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe fbe6 	bl	8003ac6 <ld_dword>
 80052fa:	4603      	mov	r3, r0
 80052fc:	4a17      	ldr	r2, [pc, #92]	@ (800535c <find_volume+0x490>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d113      	bne.n	800532a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	3330      	adds	r3, #48	@ 0x30
 8005306:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fbdb 	bl	8003ac6 <ld_dword>
 8005310:	4602      	mov	r2, r0
 8005312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005314:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	3330      	adds	r3, #48	@ 0x30
 800531a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fbd1 	bl	8003ac6 <ld_dword>
 8005324:	4602      	mov	r2, r0
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005330:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005332:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <find_volume+0x494>)
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <find_volume+0x494>)
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	4b08      	ldr	r3, [pc, #32]	@ (8005360 <find_volume+0x494>)
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005346:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005348:	f7fe fdee 	bl	8003f28 <clear_lock>
#endif
	return FR_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3758      	adds	r7, #88	@ 0x58
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	41615252 	.word	0x41615252
 800535c:	61417272 	.word	0x61417272
 8005360:	2000015c 	.word	0x2000015c

08005364 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800536e:	2309      	movs	r3, #9
 8005370:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01c      	beq.n	80053b2 <validate+0x4e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d018      	beq.n	80053b2 <validate+0x4e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d013      	beq.n	80053b2 <validate+0x4e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	889a      	ldrh	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	88db      	ldrh	r3, [r3, #6]
 8005394:	429a      	cmp	r2, r3
 8005396:	d10c      	bne.n	80053b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe fad8 	bl	8003954 <disk_status>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <validate+0x4e>
			res = FR_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <validate+0x5a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	e000      	b.n	80053c0 <validate+0x5c>
 80053be:	2300      	movs	r3, #0
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	6013      	str	r3, [r2, #0]
	return res;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80053e2:	f107 0310 	add.w	r3, r7, #16
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fcd5 	bl	8004d96 <get_ldnumber>
 80053ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da01      	bge.n	80053f8 <f_mount+0x28>
 80053f4:	230b      	movs	r3, #11
 80053f6:	e02b      	b.n	8005450 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80053f8:	4a17      	ldr	r2, [pc, #92]	@ (8005458 <f_mount+0x88>)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005400:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005408:	69b8      	ldr	r0, [r7, #24]
 800540a:	f7fe fd8d 	bl	8003f28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	490d      	ldr	r1, [pc, #52]	@ (8005458 <f_mount+0x88>)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <f_mount+0x66>
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <f_mount+0x6a>
 8005436:	2300      	movs	r3, #0
 8005438:	e00a      	b.n	8005450 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800543a:	f107 010c 	add.w	r1, r7, #12
 800543e:	f107 0308 	add.w	r3, r7, #8
 8005442:	2200      	movs	r2, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fd41 	bl	8004ecc <find_volume>
 800544a:	4603      	mov	r3, r0
 800544c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800544e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000158 	.word	0x20000158

0800545c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b098      	sub	sp, #96	@ 0x60
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <f_open+0x18>
 8005470:	2309      	movs	r3, #9
 8005472:	e1a9      	b.n	80057c8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800547a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800547c:	79fa      	ldrb	r2, [r7, #7]
 800547e:	f107 0110 	add.w	r1, r7, #16
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fd20 	bl	8004ecc <find_volume>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005492:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 818d 	bne.w	80057b6 <f_open+0x35a>
		dj.obj.fs = fs;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	f107 0314 	add.w	r3, r7, #20
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fc03 	bl	8004cb4 <follow_path>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80054b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d118      	bne.n	80054ee <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80054bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da03      	bge.n	80054ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80054c6:	2306      	movs	r3, #6
 80054c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80054cc:	e00f      	b.n	80054ee <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf8c      	ite	hi
 80054d4:	2301      	movhi	r3, #1
 80054d6:	2300      	movls	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	f107 0314 	add.w	r3, r7, #20
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe fbd8 	bl	8003c98 <chk_lock>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	f003 031c 	and.w	r3, r3, #28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d07f      	beq.n	80055f8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80054f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d017      	beq.n	8005530 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005500:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005504:	2b04      	cmp	r3, #4
 8005506:	d10e      	bne.n	8005526 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005508:	f7fe fc22 	bl	8003d50 <enq_lock>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d006      	beq.n	8005520 <f_open+0xc4>
 8005512:	f107 0314 	add.w	r3, r7, #20
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fb06 	bl	8004b28 <dir_register>
 800551c:	4603      	mov	r3, r0
 800551e:	e000      	b.n	8005522 <f_open+0xc6>
 8005520:	2312      	movs	r3, #18
 8005522:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	f043 0308 	orr.w	r3, r3, #8
 800552c:	71fb      	strb	r3, [r7, #7]
 800552e:	e010      	b.n	8005552 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005530:	7ebb      	ldrb	r3, [r7, #26]
 8005532:	f003 0311 	and.w	r3, r3, #17
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <f_open+0xe6>
					res = FR_DENIED;
 800553a:	2307      	movs	r3, #7
 800553c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005540:	e007      	b.n	8005552 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <f_open+0xf6>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005552:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005556:	2b00      	cmp	r3, #0
 8005558:	d168      	bne.n	800562c <f_open+0x1d0>
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d063      	beq.n	800562c <f_open+0x1d0>
				dw = GET_FATTIME();
 8005564:	f7fd fcbe 	bl	8002ee4 <get_fattime>
 8005568:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800556a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556c:	330e      	adds	r3, #14
 800556e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fae6 	bl	8003b42 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005578:	3316      	adds	r3, #22
 800557a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe fae0 	bl	8003b42 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005584:	330b      	adds	r3, #11
 8005586:	2220      	movs	r2, #32
 8005588:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fa35 	bl	8004a00 <ld_clust>
 8005596:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800559c:	2200      	movs	r2, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fa4d 	bl	8004a3e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80055a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a6:	331c      	adds	r3, #28
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fac9 	bl	8003b42 <st_dword>
					fs->wflag = 1;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2201      	movs	r2, #1
 80055b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80055b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d037      	beq.n	800562c <f_open+0x1d0>
						dw = fs->winsect;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80055c2:	f107 0314 	add.w	r3, r7, #20
 80055c6:	2200      	movs	r2, #0
 80055c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe ff60 	bl	8004490 <remove_chain>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80055d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d126      	bne.n	800562c <f_open+0x1d0>
							res = move_window(fs, dw);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fd08 	bl	8003ff8 <move_window>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055f2:	3a01      	subs	r2, #1
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	e019      	b.n	800562c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80055f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d115      	bne.n	800562c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005600:	7ebb      	ldrb	r3, [r7, #26]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <f_open+0x1b6>
					res = FR_NO_FILE;
 800560a:	2304      	movs	r3, #4
 800560c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005610:	e00c      	b.n	800562c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <f_open+0x1d0>
 800561c:	7ebb      	ldrb	r3, [r7, #26]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <f_open+0x1d0>
						res = FR_DENIED;
 8005626:	2307      	movs	r3, #7
 8005628:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800562c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005630:	2b00      	cmp	r3, #0
 8005632:	d126      	bne.n	8005682 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005644:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800564e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	2b01      	cmp	r3, #1
 8005658:	bf8c      	ite	hi
 800565a:	2301      	movhi	r3, #1
 800565c:	2300      	movls	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	f107 0314 	add.w	r3, r7, #20
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fb93 	bl	8003d94 <inc_lock>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <f_open+0x226>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005682:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 8095 	bne.w	80057b6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff f9b4 	bl	8004a00 <ld_clust>
 8005698:	4602      	mov	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800569e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a0:	331c      	adds	r3, #28
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fa0f 	bl	8003ac6 <ld_dword>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	88da      	ldrh	r2, [r3, #6]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	79fa      	ldrb	r2, [r7, #7]
 80056c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3330      	adds	r3, #48	@ 0x30
 80056de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe fa79 	bl	8003bdc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d060      	beq.n	80057b6 <f_open+0x35a>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05c      	beq.n	80057b6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	895b      	ldrh	r3, [r3, #10]
 8005708:	025b      	lsls	r3, r3, #9
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	657b      	str	r3, [r7, #84]	@ 0x54
 8005718:	e016      	b.n	8005748 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fd25 	bl	800416e <get_fat>
 8005724:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005728:	2b01      	cmp	r3, #1
 800572a:	d802      	bhi.n	8005732 <f_open+0x2d6>
 800572c:	2302      	movs	r3, #2
 800572e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d102      	bne.n	8005740 <f_open+0x2e4>
 800573a:	2301      	movs	r3, #1
 800573c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005740:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	657b      	str	r3, [r7, #84]	@ 0x54
 8005748:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <f_open+0x2fc>
 8005750:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005754:	429a      	cmp	r2, r3
 8005756:	d8e0      	bhi.n	800571a <f_open+0x2be>
				}
				fp->clust = clst;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800575c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800575e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005762:	2b00      	cmp	r3, #0
 8005764:	d127      	bne.n	80057b6 <f_open+0x35a>
 8005766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576c:	2b00      	cmp	r3, #0
 800576e:	d022      	beq.n	80057b6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fcdb 	bl	8004130 <clust2sect>
 800577a:	6478      	str	r0, [r7, #68]	@ 0x44
 800577c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <f_open+0x32e>
						res = FR_INT_ERR;
 8005782:	2302      	movs	r3, #2
 8005784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005788:	e015      	b.n	80057b6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800578a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800578c:	0a5a      	lsrs	r2, r3, #9
 800578e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005790:	441a      	add	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	7858      	ldrb	r0, [r3, #1]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	2301      	movs	r3, #1
 80057a6:	f7fe f917 	bl	80039d8 <disk_read>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <f_open+0x35a>
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80057b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <f_open+0x368>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80057c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3760      	adds	r7, #96	@ 0x60
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08e      	sub	sp, #56	@ 0x38
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f107 0214 	add.w	r2, r7, #20
 80057ee:	4611      	mov	r1, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fdb7 	bl	8005364 <validate>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80057fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <f_read+0x44>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	7d5b      	ldrb	r3, [r3, #21]
 8005808:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800580c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <f_read+0x4a>
 8005814:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005818:	e115      	b.n	8005a46 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	7d1b      	ldrb	r3, [r3, #20]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <f_read+0x5a>
 8005826:	2307      	movs	r3, #7
 8005828:	e10d      	b.n	8005a46 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	429a      	cmp	r2, r3
 800583c:	f240 80fe 	bls.w	8005a3c <f_read+0x26c>
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005844:	e0fa      	b.n	8005a3c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	2b00      	cmp	r3, #0
 8005850:	f040 80c6 	bne.w	80059e0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	0a5b      	lsrs	r3, r3, #9
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	8952      	ldrh	r2, [r2, #10]
 800585e:	3a01      	subs	r2, #1
 8005860:	4013      	ands	r3, r2
 8005862:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d12f      	bne.n	80058ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	633b      	str	r3, [r7, #48]	@ 0x30
 8005878:	e013      	b.n	80058a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	4619      	mov	r1, r3
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7fe fefe 	bl	800468a <clmt_clust>
 800588e:	6338      	str	r0, [r7, #48]	@ 0x30
 8005890:	e007      	b.n	80058a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f7fe fc67 	bl	800416e <get_fat>
 80058a0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d804      	bhi.n	80058b2 <f_read+0xe2>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2202      	movs	r2, #2
 80058ac:	755a      	strb	r2, [r3, #21]
 80058ae:	2302      	movs	r3, #2
 80058b0:	e0c9      	b.n	8005a46 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d104      	bne.n	80058c4 <f_read+0xf4>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	755a      	strb	r2, [r3, #21]
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0c0      	b.n	8005a46 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f7fe fc2c 	bl	8004130 <clust2sect>
 80058d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <f_read+0x11a>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2202      	movs	r2, #2
 80058e4:	755a      	strb	r2, [r3, #21]
 80058e6:	2302      	movs	r3, #2
 80058e8:	e0ad      	b.n	8005a46 <f_read+0x276>
			sect += csect;
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	0a5b      	lsrs	r3, r3, #9
 80058f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d039      	beq.n	8005972 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	4413      	add	r3, r2
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	8952      	ldrh	r2, [r2, #10]
 8005908:	4293      	cmp	r3, r2
 800590a:	d905      	bls.n	8005918 <f_read+0x148>
					cc = fs->csize - csect;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	895b      	ldrh	r3, [r3, #10]
 8005910:	461a      	mov	r2, r3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	7858      	ldrb	r0, [r3, #1]
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005922:	f7fe f859 	bl	80039d8 <disk_read>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <f_read+0x166>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	755a      	strb	r2, [r3, #21]
 8005932:	2301      	movs	r3, #1
 8005934:	e087      	b.n	8005a46 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	7d1b      	ldrb	r3, [r3, #20]
 800593a:	b25b      	sxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	da14      	bge.n	800596a <f_read+0x19a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800594a:	429a      	cmp	r2, r3
 800594c:	d90d      	bls.n	800596a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	025b      	lsls	r3, r3, #9
 8005958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595a:	18d0      	adds	r0, r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3330      	adds	r3, #48	@ 0x30
 8005960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005964:	4619      	mov	r1, r3
 8005966:	f7fe f918 	bl	8003b9a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596c:	025b      	lsls	r3, r3, #9
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005970:	e050      	b.n	8005a14 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	429a      	cmp	r2, r3
 800597a:	d02e      	beq.n	80059da <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	7d1b      	ldrb	r3, [r3, #20]
 8005980:	b25b      	sxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	da18      	bge.n	80059b8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	7858      	ldrb	r0, [r3, #1]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	2301      	movs	r3, #1
 8005996:	f7fe f83f 	bl	8003a18 <disk_write>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <f_read+0x1da>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	755a      	strb	r2, [r3, #21]
 80059a6:	2301      	movs	r3, #1
 80059a8:	e04d      	b.n	8005a46 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	7d1b      	ldrb	r3, [r3, #20]
 80059ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	7858      	ldrb	r0, [r3, #1]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80059c2:	2301      	movs	r3, #1
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	f7fe f807 	bl	80039d8 <disk_read>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <f_read+0x20a>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	755a      	strb	r2, [r3, #21]
 80059d6:	2301      	movs	r3, #1
 80059d8:	e035      	b.n	8005a46 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80059ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d901      	bls.n	80059fa <f_read+0x22a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a08:	4413      	add	r3, r2
 8005a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a10:	f7fe f8c3 	bl	8003b9a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	4413      	add	r3, r2
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a22:	441a      	add	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	619a      	str	r2, [r3, #24]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2e:	441a      	add	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f47f af01 	bne.w	8005846 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3738      	adds	r7, #56	@ 0x38
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b08c      	sub	sp, #48	@ 0x30
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f107 0210 	add.w	r2, r7, #16
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fc78 	bl	8005364 <validate>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d107      	bne.n	8005a92 <f_write+0x44>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	7d5b      	ldrb	r3, [r3, #21]
 8005a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <f_write+0x4a>
 8005a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a96:	e14b      	b.n	8005d30 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	7d1b      	ldrb	r3, [r3, #20]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <f_write+0x5a>
 8005aa4:	2307      	movs	r3, #7
 8005aa6:	e143      	b.n	8005d30 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	441a      	add	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	f080 812d 	bcs.w	8005d14 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005ac2:	e127      	b.n	8005d14 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 80e3 	bne.w	8005c98 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	0a5b      	lsrs	r3, r3, #9
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	8952      	ldrh	r2, [r2, #10]
 8005adc:	3a01      	subs	r2, #1
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d143      	bne.n	8005b70 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10c      	bne.n	8005b0a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11a      	bne.n	8005b32 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fd2a 	bl	800455a <create_chain>
 8005b06:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005b08:	e013      	b.n	8005b32 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	4619      	mov	r1, r3
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7fe fdb6 	bl	800468a <clmt_clust>
 8005b1e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005b20:	e007      	b.n	8005b32 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7fe fd15 	bl	800455a <create_chain>
 8005b30:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80f2 	beq.w	8005d1e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d104      	bne.n	8005b4a <f_write+0xfc>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2202      	movs	r2, #2
 8005b44:	755a      	strb	r2, [r3, #21]
 8005b46:	2302      	movs	r3, #2
 8005b48:	e0f2      	b.n	8005d30 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d104      	bne.n	8005b5c <f_write+0x10e>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	755a      	strb	r2, [r3, #21]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0e9      	b.n	8005d30 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b60:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d102      	bne.n	8005b70 <f_write+0x122>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b6e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	7d1b      	ldrb	r3, [r3, #20]
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	da18      	bge.n	8005bac <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	7858      	ldrb	r0, [r3, #1]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f7fd ff45 	bl	8003a18 <disk_write>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <f_write+0x150>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	755a      	strb	r2, [r3, #21]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e0c8      	b.n	8005d30 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	7d1b      	ldrb	r3, [r3, #20]
 8005ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f7fe fabb 	bl	8004130 <clust2sect>
 8005bba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <f_write+0x17e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	755a      	strb	r2, [r3, #21]
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e0b1      	b.n	8005d30 <f_write+0x2e2>
			sect += csect;
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	0a5b      	lsrs	r3, r3, #9
 8005bd8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d03c      	beq.n	8005c5a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	4413      	add	r3, r2
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	8952      	ldrh	r2, [r2, #10]
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d905      	bls.n	8005bfa <f_write+0x1ac>
					cc = fs->csize - csect;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	895b      	ldrh	r3, [r3, #10]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	7858      	ldrb	r0, [r3, #1]
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	69f9      	ldr	r1, [r7, #28]
 8005c04:	f7fd ff08 	bl	8003a18 <disk_write>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <f_write+0x1ca>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	755a      	strb	r2, [r3, #21]
 8005c14:	2301      	movs	r3, #1
 8005c16:	e08b      	b.n	8005d30 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d915      	bls.n	8005c52 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	025b      	lsls	r3, r3, #9
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f7fd ffab 	bl	8003b9a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	7d1b      	ldrb	r3, [r3, #20]
 8005c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	025b      	lsls	r3, r3, #9
 8005c56:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005c58:	e03f      	b.n	8005cda <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d016      	beq.n	8005c92 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d210      	bcs.n	8005c92 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	7858      	ldrb	r0, [r3, #1]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	f7fd feab 	bl	80039d8 <disk_read>
 8005c82:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	755a      	strb	r2, [r3, #21]
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e04e      	b.n	8005d30 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d901      	bls.n	8005cb2 <f_write+0x264>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	4413      	add	r3, r2
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	69f9      	ldr	r1, [r7, #28]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fd ff67 	bl	8003b9a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	7d1b      	ldrb	r3, [r3, #20]
 8005cd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	4413      	add	r3, r2
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	441a      	add	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	619a      	str	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	bf38      	it	cc
 8005cfa:	461a      	movcc	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	60da      	str	r2, [r3, #12]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	441a      	add	r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f47f aed4 	bne.w	8005ac4 <f_write+0x76>
 8005d1c:	e000      	b.n	8005d20 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d1e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	7d1b      	ldrb	r3, [r3, #20]
 8005d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	@ 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f107 0208 	add.w	r2, r7, #8
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff fb0b 	bl	8005364 <validate>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d168      	bne.n	8005e2a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	7d1b      	ldrb	r3, [r3, #20]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d062      	beq.n	8005e2a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7d1b      	ldrb	r3, [r3, #20]
 8005d68:	b25b      	sxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da15      	bge.n	8005d9a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	7858      	ldrb	r0, [r3, #1]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1a      	ldr	r2, [r3, #32]
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f7fd fe4b 	bl	8003a18 <disk_write>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <f_sync+0x54>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e04f      	b.n	8005e2c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	7d1b      	ldrb	r3, [r3, #20]
 8005d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005d9a:	f7fd f8a3 	bl	8002ee4 <get_fattime>
 8005d9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f7fe f925 	bl	8003ff8 <move_window>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d138      	bne.n	8005e2a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	330b      	adds	r3, #11
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	330b      	adds	r3, #11
 8005dc8:	f042 0220 	orr.w	r2, r2, #32
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f7fe fe2f 	bl	8004a3e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f103 021c 	add.w	r2, r3, #28
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fd fea8 	bl	8003b42 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3316      	adds	r3, #22
 8005df6:	6939      	ldr	r1, [r7, #16]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fd fea2 	bl	8003b42 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3312      	adds	r3, #18
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fd fe81 	bl	8003b0c <st_word>
					fs->wflag = 1;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe f91e 	bl	8004054 <sync_fs>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7d1b      	ldrb	r3, [r3, #20]
 8005e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff7b 	bl	8005d38 <f_sync>
 8005e42:	4603      	mov	r3, r0
 8005e44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d118      	bne.n	8005e7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f107 0208 	add.w	r2, r7, #8
 8005e52:	4611      	mov	r1, r2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fa85 	bl	8005364 <validate>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10c      	bne.n	8005e7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe f821 	bl	8003eb0 <dec_lock>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b092      	sub	sp, #72	@ 0x48
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005e94:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005e98:	f107 030c 	add.w	r3, r7, #12
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff f814 	bl	8004ecc <find_volume>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8005eaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 8099 	bne.w	8005fe6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	3b02      	subs	r3, #2
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d804      	bhi.n	8005ed2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e089      	b.n	8005fe6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d128      	bne.n	8005f30 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005ee6:	f107 0314 	add.w	r3, r7, #20
 8005eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe f93e 	bl	800416e <get_fat>
 8005ef2:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d103      	bne.n	8005f04 <f_getfree+0x7c>
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f02:	e063      	b.n	8005fcc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d103      	bne.n	8005f12 <f_getfree+0x8a>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f10:	e05c      	b.n	8005fcc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <f_getfree+0x96>
 8005f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f20:	3301      	adds	r3, #1
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3db      	bcc.n	8005ee6 <f_getfree+0x5e>
 8005f2e:	e04d      	b.n	8005fcc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f40:	2300      	movs	r3, #0
 8005f42:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d113      	bne.n	8005f72 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f52:	4619      	mov	r1, r3
 8005f54:	f7fe f850 	bl	8003ff8 <move_window>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8005f5e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d131      	bne.n	8005fca <f_getfree+0x142>
							p = fs->win;
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	3330      	adds	r3, #48	@ 0x30
 8005f6a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8005f6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d10f      	bne.n	8005f9a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005f7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f7c:	f7fd fd8a 	bl	8003a94 <ld_word>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <f_getfree+0x104>
 8005f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f88:	3301      	adds	r3, #1
 8005f8a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	3302      	adds	r3, #2
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	3b02      	subs	r3, #2
 8005f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f98:	e010      	b.n	8005fbc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005f9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9c:	f7fd fd93 	bl	8003ac6 <ld_dword>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <f_getfree+0x128>
 8005faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fac:	3301      	adds	r3, #1
 8005fae:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1bd      	bne.n	8005f44 <f_getfree+0xbc>
 8005fc8:	e000      	b.n	8005fcc <f_getfree+0x144>
							if (res != FR_OK) break;
 8005fca:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	791a      	ldrb	r2, [r3, #4]
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005fe6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3748      	adds	r7, #72	@ 0x48
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b088      	sub	sp, #32
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006006:	e01c      	b.n	8006042 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	f107 0114 	add.w	r1, r7, #20
 8006010:	2201      	movs	r2, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fbdc 	bl	80057d0 <f_read>
		if (rc != 1) break;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d117      	bne.n	800604e <f_gets+0x5c>
		c = s[0];
 800601e:	7d3b      	ldrb	r3, [r7, #20]
 8006020:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006022:	7dfb      	ldrb	r3, [r7, #23]
 8006024:	2b0d      	cmp	r3, #13
 8006026:	d00b      	beq.n	8006040 <f_gets+0x4e>
		*p++ = c;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	61ba      	str	r2, [r7, #24]
 800602e:	7dfa      	ldrb	r2, [r7, #23]
 8006030:	701a      	strb	r2, [r3, #0]
		n++;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3301      	adds	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b0a      	cmp	r3, #10
 800603c:	d009      	beq.n	8006052 <f_gets+0x60>
 800603e:	e000      	b.n	8006042 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006040:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3b01      	subs	r3, #1
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	429a      	cmp	r2, r3
 800604a:	dbdd      	blt.n	8006008 <f_gets+0x16>
 800604c:	e002      	b.n	8006054 <f_gets+0x62>
		if (rc != 1) break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006052:	bf00      	nop
	}
	*p = 0;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <f_gets+0x72>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	e000      	b.n	8006066 <f_gets+0x74>
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006086:	4b1f      	ldr	r3, [pc, #124]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 8006088:	7a5b      	ldrb	r3, [r3, #9]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d131      	bne.n	80060f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006090:	4b1c      	ldr	r3, [pc, #112]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 8006092:	7a5b      	ldrb	r3, [r3, #9]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	4b1a      	ldr	r3, [pc, #104]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 800609a:	2100      	movs	r1, #0
 800609c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800609e:	4b19      	ldr	r3, [pc, #100]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 80060a0:	7a5b      	ldrb	r3, [r3, #9]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	4a17      	ldr	r2, [pc, #92]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80060ae:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 80060b0:	7a5b      	ldrb	r3, [r3, #9]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b13      	ldr	r3, [pc, #76]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 80060b8:	4413      	add	r3, r2
 80060ba:	79fa      	ldrb	r2, [r7, #7]
 80060bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80060be:	4b11      	ldr	r3, [pc, #68]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 80060c0:	7a5b      	ldrb	r3, [r3, #9]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	b2d1      	uxtb	r1, r2
 80060c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006104 <FATFS_LinkDriverEx+0x94>)
 80060ca:	7251      	strb	r1, [r2, #9]
 80060cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80060ce:	7dbb      	ldrb	r3, [r7, #22]
 80060d0:	3330      	adds	r3, #48	@ 0x30
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3301      	adds	r3, #1
 80060dc:	223a      	movs	r2, #58	@ 0x3a
 80060de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	3302      	adds	r3, #2
 80060e4:	222f      	movs	r2, #47	@ 0x2f
 80060e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	3303      	adds	r3, #3
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000180 	.word	0x20000180

08006108 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006112:	2200      	movs	r2, #0
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff ffaa 	bl	8006070 <FATFS_LinkDriverEx>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <std>:
 8006128:	2300      	movs	r3, #0
 800612a:	b510      	push	{r4, lr}
 800612c:	4604      	mov	r4, r0
 800612e:	e9c0 3300 	strd	r3, r3, [r0]
 8006132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006136:	6083      	str	r3, [r0, #8]
 8006138:	8181      	strh	r1, [r0, #12]
 800613a:	6643      	str	r3, [r0, #100]	@ 0x64
 800613c:	81c2      	strh	r2, [r0, #14]
 800613e:	6183      	str	r3, [r0, #24]
 8006140:	4619      	mov	r1, r3
 8006142:	2208      	movs	r2, #8
 8006144:	305c      	adds	r0, #92	@ 0x5c
 8006146:	f000 f9f9 	bl	800653c <memset>
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <std+0x58>)
 800614c:	6263      	str	r3, [r4, #36]	@ 0x24
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <std+0x5c>)
 8006150:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006152:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <std+0x60>)
 8006154:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006156:	4b0d      	ldr	r3, [pc, #52]	@ (800618c <std+0x64>)
 8006158:	6323      	str	r3, [r4, #48]	@ 0x30
 800615a:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <std+0x68>)
 800615c:	6224      	str	r4, [r4, #32]
 800615e:	429c      	cmp	r4, r3
 8006160:	d006      	beq.n	8006170 <std+0x48>
 8006162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006166:	4294      	cmp	r4, r2
 8006168:	d002      	beq.n	8006170 <std+0x48>
 800616a:	33d0      	adds	r3, #208	@ 0xd0
 800616c:	429c      	cmp	r4, r3
 800616e:	d105      	bne.n	800617c <std+0x54>
 8006170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006178:	f000 ba58 	b.w	800662c <__retarget_lock_init_recursive>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	bf00      	nop
 8006180:	0800638d 	.word	0x0800638d
 8006184:	080063af 	.word	0x080063af
 8006188:	080063e7 	.word	0x080063e7
 800618c:	0800640b 	.word	0x0800640b
 8006190:	2000018c 	.word	0x2000018c

08006194 <stdio_exit_handler>:
 8006194:	4a02      	ldr	r2, [pc, #8]	@ (80061a0 <stdio_exit_handler+0xc>)
 8006196:	4903      	ldr	r1, [pc, #12]	@ (80061a4 <stdio_exit_handler+0x10>)
 8006198:	4803      	ldr	r0, [pc, #12]	@ (80061a8 <stdio_exit_handler+0x14>)
 800619a:	f000 b869 	b.w	8006270 <_fwalk_sglue>
 800619e:	bf00      	nop
 80061a0:	20000024 	.word	0x20000024
 80061a4:	08006ec9 	.word	0x08006ec9
 80061a8:	20000034 	.word	0x20000034

080061ac <cleanup_stdio>:
 80061ac:	6841      	ldr	r1, [r0, #4]
 80061ae:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <cleanup_stdio+0x34>)
 80061b0:	4299      	cmp	r1, r3
 80061b2:	b510      	push	{r4, lr}
 80061b4:	4604      	mov	r4, r0
 80061b6:	d001      	beq.n	80061bc <cleanup_stdio+0x10>
 80061b8:	f000 fe86 	bl	8006ec8 <_fflush_r>
 80061bc:	68a1      	ldr	r1, [r4, #8]
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <cleanup_stdio+0x38>)
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d002      	beq.n	80061ca <cleanup_stdio+0x1e>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fe7f 	bl	8006ec8 <_fflush_r>
 80061ca:	68e1      	ldr	r1, [r4, #12]
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <cleanup_stdio+0x3c>)
 80061ce:	4299      	cmp	r1, r3
 80061d0:	d004      	beq.n	80061dc <cleanup_stdio+0x30>
 80061d2:	4620      	mov	r0, r4
 80061d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d8:	f000 be76 	b.w	8006ec8 <_fflush_r>
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	bf00      	nop
 80061e0:	2000018c 	.word	0x2000018c
 80061e4:	200001f4 	.word	0x200001f4
 80061e8:	2000025c 	.word	0x2000025c

080061ec <global_stdio_init.part.0>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <global_stdio_init.part.0+0x30>)
 80061f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006220 <global_stdio_init.part.0+0x34>)
 80061f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006224 <global_stdio_init.part.0+0x38>)
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	4620      	mov	r0, r4
 80061f8:	2200      	movs	r2, #0
 80061fa:	2104      	movs	r1, #4
 80061fc:	f7ff ff94 	bl	8006128 <std>
 8006200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006204:	2201      	movs	r2, #1
 8006206:	2109      	movs	r1, #9
 8006208:	f7ff ff8e 	bl	8006128 <std>
 800620c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006210:	2202      	movs	r2, #2
 8006212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006216:	2112      	movs	r1, #18
 8006218:	f7ff bf86 	b.w	8006128 <std>
 800621c:	200002c4 	.word	0x200002c4
 8006220:	2000018c 	.word	0x2000018c
 8006224:	08006195 	.word	0x08006195

08006228 <__sfp_lock_acquire>:
 8006228:	4801      	ldr	r0, [pc, #4]	@ (8006230 <__sfp_lock_acquire+0x8>)
 800622a:	f000 ba00 	b.w	800662e <__retarget_lock_acquire_recursive>
 800622e:	bf00      	nop
 8006230:	200002cd 	.word	0x200002cd

08006234 <__sfp_lock_release>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__sfp_lock_release+0x8>)
 8006236:	f000 b9fb 	b.w	8006630 <__retarget_lock_release_recursive>
 800623a:	bf00      	nop
 800623c:	200002cd 	.word	0x200002cd

08006240 <__sinit>:
 8006240:	b510      	push	{r4, lr}
 8006242:	4604      	mov	r4, r0
 8006244:	f7ff fff0 	bl	8006228 <__sfp_lock_acquire>
 8006248:	6a23      	ldr	r3, [r4, #32]
 800624a:	b11b      	cbz	r3, 8006254 <__sinit+0x14>
 800624c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006250:	f7ff bff0 	b.w	8006234 <__sfp_lock_release>
 8006254:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <__sinit+0x28>)
 8006256:	6223      	str	r3, [r4, #32]
 8006258:	4b04      	ldr	r3, [pc, #16]	@ (800626c <__sinit+0x2c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f5      	bne.n	800624c <__sinit+0xc>
 8006260:	f7ff ffc4 	bl	80061ec <global_stdio_init.part.0>
 8006264:	e7f2      	b.n	800624c <__sinit+0xc>
 8006266:	bf00      	nop
 8006268:	080061ad 	.word	0x080061ad
 800626c:	200002c4 	.word	0x200002c4

08006270 <_fwalk_sglue>:
 8006270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006274:	4607      	mov	r7, r0
 8006276:	4688      	mov	r8, r1
 8006278:	4614      	mov	r4, r2
 800627a:	2600      	movs	r6, #0
 800627c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006280:	f1b9 0901 	subs.w	r9, r9, #1
 8006284:	d505      	bpl.n	8006292 <_fwalk_sglue+0x22>
 8006286:	6824      	ldr	r4, [r4, #0]
 8006288:	2c00      	cmp	r4, #0
 800628a:	d1f7      	bne.n	800627c <_fwalk_sglue+0xc>
 800628c:	4630      	mov	r0, r6
 800628e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d907      	bls.n	80062a8 <_fwalk_sglue+0x38>
 8006298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800629c:	3301      	adds	r3, #1
 800629e:	d003      	beq.n	80062a8 <_fwalk_sglue+0x38>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c0      	blx	r8
 80062a6:	4306      	orrs	r6, r0
 80062a8:	3568      	adds	r5, #104	@ 0x68
 80062aa:	e7e9      	b.n	8006280 <_fwalk_sglue+0x10>

080062ac <iprintf>:
 80062ac:	b40f      	push	{r0, r1, r2, r3}
 80062ae:	b507      	push	{r0, r1, r2, lr}
 80062b0:	4906      	ldr	r1, [pc, #24]	@ (80062cc <iprintf+0x20>)
 80062b2:	ab04      	add	r3, sp, #16
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ba:	6881      	ldr	r1, [r0, #8]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	f000 fadb 	bl	8006878 <_vfiprintf_r>
 80062c2:	b003      	add	sp, #12
 80062c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062c8:	b004      	add	sp, #16
 80062ca:	4770      	bx	lr
 80062cc:	20000030 	.word	0x20000030

080062d0 <_puts_r>:
 80062d0:	6a03      	ldr	r3, [r0, #32]
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	6884      	ldr	r4, [r0, #8]
 80062d6:	4605      	mov	r5, r0
 80062d8:	460e      	mov	r6, r1
 80062da:	b90b      	cbnz	r3, 80062e0 <_puts_r+0x10>
 80062dc:	f7ff ffb0 	bl	8006240 <__sinit>
 80062e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062e2:	07db      	lsls	r3, r3, #31
 80062e4:	d405      	bmi.n	80062f2 <_puts_r+0x22>
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	0598      	lsls	r0, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_puts_r+0x22>
 80062ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ee:	f000 f99e 	bl	800662e <__retarget_lock_acquire_recursive>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	0719      	lsls	r1, r3, #28
 80062f6:	d502      	bpl.n	80062fe <_puts_r+0x2e>
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d135      	bne.n	800636a <_puts_r+0x9a>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f8c5 	bl	8006490 <__swsetup_r>
 8006306:	b380      	cbz	r0, 800636a <_puts_r+0x9a>
 8006308:	f04f 35ff 	mov.w	r5, #4294967295
 800630c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800630e:	07da      	lsls	r2, r3, #31
 8006310:	d405      	bmi.n	800631e <_puts_r+0x4e>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	059b      	lsls	r3, r3, #22
 8006316:	d402      	bmi.n	800631e <_puts_r+0x4e>
 8006318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800631a:	f000 f989 	bl	8006630 <__retarget_lock_release_recursive>
 800631e:	4628      	mov	r0, r5
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	2b00      	cmp	r3, #0
 8006324:	da04      	bge.n	8006330 <_puts_r+0x60>
 8006326:	69a2      	ldr	r2, [r4, #24]
 8006328:	429a      	cmp	r2, r3
 800632a:	dc17      	bgt.n	800635c <_puts_r+0x8c>
 800632c:	290a      	cmp	r1, #10
 800632e:	d015      	beq.n	800635c <_puts_r+0x8c>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	7019      	strb	r1, [r3, #0]
 8006338:	68a3      	ldr	r3, [r4, #8]
 800633a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800633e:	3b01      	subs	r3, #1
 8006340:	60a3      	str	r3, [r4, #8]
 8006342:	2900      	cmp	r1, #0
 8006344:	d1ed      	bne.n	8006322 <_puts_r+0x52>
 8006346:	2b00      	cmp	r3, #0
 8006348:	da11      	bge.n	800636e <_puts_r+0x9e>
 800634a:	4622      	mov	r2, r4
 800634c:	210a      	movs	r1, #10
 800634e:	4628      	mov	r0, r5
 8006350:	f000 f85f 	bl	8006412 <__swbuf_r>
 8006354:	3001      	adds	r0, #1
 8006356:	d0d7      	beq.n	8006308 <_puts_r+0x38>
 8006358:	250a      	movs	r5, #10
 800635a:	e7d7      	b.n	800630c <_puts_r+0x3c>
 800635c:	4622      	mov	r2, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f857 	bl	8006412 <__swbuf_r>
 8006364:	3001      	adds	r0, #1
 8006366:	d1e7      	bne.n	8006338 <_puts_r+0x68>
 8006368:	e7ce      	b.n	8006308 <_puts_r+0x38>
 800636a:	3e01      	subs	r6, #1
 800636c:	e7e4      	b.n	8006338 <_puts_r+0x68>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	220a      	movs	r2, #10
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e7ee      	b.n	8006358 <_puts_r+0x88>
	...

0800637c <puts>:
 800637c:	4b02      	ldr	r3, [pc, #8]	@ (8006388 <puts+0xc>)
 800637e:	4601      	mov	r1, r0
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	f7ff bfa5 	b.w	80062d0 <_puts_r>
 8006386:	bf00      	nop
 8006388:	20000030 	.word	0x20000030

0800638c <__sread>:
 800638c:	b510      	push	{r4, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	f000 f8fc 	bl	8006590 <_read_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	bfab      	itete	ge
 800639c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800639e:	89a3      	ldrhlt	r3, [r4, #12]
 80063a0:	181b      	addge	r3, r3, r0
 80063a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063a6:	bfac      	ite	ge
 80063a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063aa:	81a3      	strhlt	r3, [r4, #12]
 80063ac:	bd10      	pop	{r4, pc}

080063ae <__swrite>:
 80063ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b2:	461f      	mov	r7, r3
 80063b4:	898b      	ldrh	r3, [r1, #12]
 80063b6:	05db      	lsls	r3, r3, #23
 80063b8:	4605      	mov	r5, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	4616      	mov	r6, r2
 80063be:	d505      	bpl.n	80063cc <__swrite+0x1e>
 80063c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c4:	2302      	movs	r3, #2
 80063c6:	2200      	movs	r2, #0
 80063c8:	f000 f8d0 	bl	800656c <_lseek_r>
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	4632      	mov	r2, r6
 80063da:	463b      	mov	r3, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e2:	f000 b8e7 	b.w	80065b4 <_write_r>

080063e6 <__sseek>:
 80063e6:	b510      	push	{r4, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ee:	f000 f8bd 	bl	800656c <_lseek_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	bf15      	itete	ne
 80063f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006402:	81a3      	strheq	r3, [r4, #12]
 8006404:	bf18      	it	ne
 8006406:	81a3      	strhne	r3, [r4, #12]
 8006408:	bd10      	pop	{r4, pc}

0800640a <__sclose>:
 800640a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640e:	f000 b89d 	b.w	800654c <_close_r>

08006412 <__swbuf_r>:
 8006412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006414:	460e      	mov	r6, r1
 8006416:	4614      	mov	r4, r2
 8006418:	4605      	mov	r5, r0
 800641a:	b118      	cbz	r0, 8006424 <__swbuf_r+0x12>
 800641c:	6a03      	ldr	r3, [r0, #32]
 800641e:	b90b      	cbnz	r3, 8006424 <__swbuf_r+0x12>
 8006420:	f7ff ff0e 	bl	8006240 <__sinit>
 8006424:	69a3      	ldr	r3, [r4, #24]
 8006426:	60a3      	str	r3, [r4, #8]
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	071a      	lsls	r2, r3, #28
 800642c:	d501      	bpl.n	8006432 <__swbuf_r+0x20>
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	b943      	cbnz	r3, 8006444 <__swbuf_r+0x32>
 8006432:	4621      	mov	r1, r4
 8006434:	4628      	mov	r0, r5
 8006436:	f000 f82b 	bl	8006490 <__swsetup_r>
 800643a:	b118      	cbz	r0, 8006444 <__swbuf_r+0x32>
 800643c:	f04f 37ff 	mov.w	r7, #4294967295
 8006440:	4638      	mov	r0, r7
 8006442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	6922      	ldr	r2, [r4, #16]
 8006448:	1a98      	subs	r0, r3, r2
 800644a:	6963      	ldr	r3, [r4, #20]
 800644c:	b2f6      	uxtb	r6, r6
 800644e:	4283      	cmp	r3, r0
 8006450:	4637      	mov	r7, r6
 8006452:	dc05      	bgt.n	8006460 <__swbuf_r+0x4e>
 8006454:	4621      	mov	r1, r4
 8006456:	4628      	mov	r0, r5
 8006458:	f000 fd36 	bl	8006ec8 <_fflush_r>
 800645c:	2800      	cmp	r0, #0
 800645e:	d1ed      	bne.n	800643c <__swbuf_r+0x2a>
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	3b01      	subs	r3, #1
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	701e      	strb	r6, [r3, #0]
 800646e:	6962      	ldr	r2, [r4, #20]
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	429a      	cmp	r2, r3
 8006474:	d004      	beq.n	8006480 <__swbuf_r+0x6e>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	07db      	lsls	r3, r3, #31
 800647a:	d5e1      	bpl.n	8006440 <__swbuf_r+0x2e>
 800647c:	2e0a      	cmp	r6, #10
 800647e:	d1df      	bne.n	8006440 <__swbuf_r+0x2e>
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f000 fd20 	bl	8006ec8 <_fflush_r>
 8006488:	2800      	cmp	r0, #0
 800648a:	d0d9      	beq.n	8006440 <__swbuf_r+0x2e>
 800648c:	e7d6      	b.n	800643c <__swbuf_r+0x2a>
	...

08006490 <__swsetup_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4b29      	ldr	r3, [pc, #164]	@ (8006538 <__swsetup_r+0xa8>)
 8006494:	4605      	mov	r5, r0
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	460c      	mov	r4, r1
 800649a:	b118      	cbz	r0, 80064a4 <__swsetup_r+0x14>
 800649c:	6a03      	ldr	r3, [r0, #32]
 800649e:	b90b      	cbnz	r3, 80064a4 <__swsetup_r+0x14>
 80064a0:	f7ff fece 	bl	8006240 <__sinit>
 80064a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a8:	0719      	lsls	r1, r3, #28
 80064aa:	d422      	bmi.n	80064f2 <__swsetup_r+0x62>
 80064ac:	06da      	lsls	r2, r3, #27
 80064ae:	d407      	bmi.n	80064c0 <__swsetup_r+0x30>
 80064b0:	2209      	movs	r2, #9
 80064b2:	602a      	str	r2, [r5, #0]
 80064b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	f04f 30ff 	mov.w	r0, #4294967295
 80064be:	e033      	b.n	8006528 <__swsetup_r+0x98>
 80064c0:	0758      	lsls	r0, r3, #29
 80064c2:	d512      	bpl.n	80064ea <__swsetup_r+0x5a>
 80064c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064c6:	b141      	cbz	r1, 80064da <__swsetup_r+0x4a>
 80064c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <__swsetup_r+0x46>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f8af 	bl	8006634 <_free_r>
 80064d6:	2300      	movs	r3, #0
 80064d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	2300      	movs	r3, #0
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f043 0308 	orr.w	r3, r3, #8
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	b94b      	cbnz	r3, 800650a <__swsetup_r+0x7a>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006500:	d003      	beq.n	800650a <__swsetup_r+0x7a>
 8006502:	4621      	mov	r1, r4
 8006504:	4628      	mov	r0, r5
 8006506:	f000 fd2d 	bl	8006f64 <__smakebuf_r>
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	f013 0201 	ands.w	r2, r3, #1
 8006512:	d00a      	beq.n	800652a <__swsetup_r+0x9a>
 8006514:	2200      	movs	r2, #0
 8006516:	60a2      	str	r2, [r4, #8]
 8006518:	6962      	ldr	r2, [r4, #20]
 800651a:	4252      	negs	r2, r2
 800651c:	61a2      	str	r2, [r4, #24]
 800651e:	6922      	ldr	r2, [r4, #16]
 8006520:	b942      	cbnz	r2, 8006534 <__swsetup_r+0xa4>
 8006522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006526:	d1c5      	bne.n	80064b4 <__swsetup_r+0x24>
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	0799      	lsls	r1, r3, #30
 800652c:	bf58      	it	pl
 800652e:	6962      	ldrpl	r2, [r4, #20]
 8006530:	60a2      	str	r2, [r4, #8]
 8006532:	e7f4      	b.n	800651e <__swsetup_r+0x8e>
 8006534:	2000      	movs	r0, #0
 8006536:	e7f7      	b.n	8006528 <__swsetup_r+0x98>
 8006538:	20000030 	.word	0x20000030

0800653c <memset>:
 800653c:	4402      	add	r2, r0
 800653e:	4603      	mov	r3, r0
 8006540:	4293      	cmp	r3, r2
 8006542:	d100      	bne.n	8006546 <memset+0xa>
 8006544:	4770      	bx	lr
 8006546:	f803 1b01 	strb.w	r1, [r3], #1
 800654a:	e7f9      	b.n	8006540 <memset+0x4>

0800654c <_close_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4d06      	ldr	r5, [pc, #24]	@ (8006568 <_close_r+0x1c>)
 8006550:	2300      	movs	r3, #0
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	f7fa fbe2 	bl	8000d20 <_close>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_close_r+0x1a>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_close_r+0x1a>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	200002c8 	.word	0x200002c8

0800656c <_lseek_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d07      	ldr	r5, [pc, #28]	@ (800658c <_lseek_r+0x20>)
 8006570:	4604      	mov	r4, r0
 8006572:	4608      	mov	r0, r1
 8006574:	4611      	mov	r1, r2
 8006576:	2200      	movs	r2, #0
 8006578:	602a      	str	r2, [r5, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	f7fa fbf7 	bl	8000d6e <_lseek>
 8006580:	1c43      	adds	r3, r0, #1
 8006582:	d102      	bne.n	800658a <_lseek_r+0x1e>
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	b103      	cbz	r3, 800658a <_lseek_r+0x1e>
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	bd38      	pop	{r3, r4, r5, pc}
 800658c:	200002c8 	.word	0x200002c8

08006590 <_read_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d07      	ldr	r5, [pc, #28]	@ (80065b0 <_read_r+0x20>)
 8006594:	4604      	mov	r4, r0
 8006596:	4608      	mov	r0, r1
 8006598:	4611      	mov	r1, r2
 800659a:	2200      	movs	r2, #0
 800659c:	602a      	str	r2, [r5, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	f7fa fba1 	bl	8000ce6 <_read>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d102      	bne.n	80065ae <_read_r+0x1e>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	b103      	cbz	r3, 80065ae <_read_r+0x1e>
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	bd38      	pop	{r3, r4, r5, pc}
 80065b0:	200002c8 	.word	0x200002c8

080065b4 <_write_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4d07      	ldr	r5, [pc, #28]	@ (80065d4 <_write_r+0x20>)
 80065b8:	4604      	mov	r4, r0
 80065ba:	4608      	mov	r0, r1
 80065bc:	4611      	mov	r1, r2
 80065be:	2200      	movs	r2, #0
 80065c0:	602a      	str	r2, [r5, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f7f9 fffa 	bl	80005bc <_write>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_write_r+0x1e>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_write_r+0x1e>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	200002c8 	.word	0x200002c8

080065d8 <__errno>:
 80065d8:	4b01      	ldr	r3, [pc, #4]	@ (80065e0 <__errno+0x8>)
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20000030 	.word	0x20000030

080065e4 <__libc_init_array>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	4d0d      	ldr	r5, [pc, #52]	@ (800661c <__libc_init_array+0x38>)
 80065e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006620 <__libc_init_array+0x3c>)
 80065ea:	1b64      	subs	r4, r4, r5
 80065ec:	10a4      	asrs	r4, r4, #2
 80065ee:	2600      	movs	r6, #0
 80065f0:	42a6      	cmp	r6, r4
 80065f2:	d109      	bne.n	8006608 <__libc_init_array+0x24>
 80065f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006624 <__libc_init_array+0x40>)
 80065f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006628 <__libc_init_array+0x44>)
 80065f8:	f000 fd22 	bl	8007040 <_init>
 80065fc:	1b64      	subs	r4, r4, r5
 80065fe:	10a4      	asrs	r4, r4, #2
 8006600:	2600      	movs	r6, #0
 8006602:	42a6      	cmp	r6, r4
 8006604:	d105      	bne.n	8006612 <__libc_init_array+0x2e>
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	f855 3b04 	ldr.w	r3, [r5], #4
 800660c:	4798      	blx	r3
 800660e:	3601      	adds	r6, #1
 8006610:	e7ee      	b.n	80065f0 <__libc_init_array+0xc>
 8006612:	f855 3b04 	ldr.w	r3, [r5], #4
 8006616:	4798      	blx	r3
 8006618:	3601      	adds	r6, #1
 800661a:	e7f2      	b.n	8006602 <__libc_init_array+0x1e>
 800661c:	08007350 	.word	0x08007350
 8006620:	08007350 	.word	0x08007350
 8006624:	08007350 	.word	0x08007350
 8006628:	08007354 	.word	0x08007354

0800662c <__retarget_lock_init_recursive>:
 800662c:	4770      	bx	lr

0800662e <__retarget_lock_acquire_recursive>:
 800662e:	4770      	bx	lr

08006630 <__retarget_lock_release_recursive>:
 8006630:	4770      	bx	lr
	...

08006634 <_free_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4605      	mov	r5, r0
 8006638:	2900      	cmp	r1, #0
 800663a:	d041      	beq.n	80066c0 <_free_r+0x8c>
 800663c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006640:	1f0c      	subs	r4, r1, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfb8      	it	lt
 8006646:	18e4      	addlt	r4, r4, r3
 8006648:	f000 f8e0 	bl	800680c <__malloc_lock>
 800664c:	4a1d      	ldr	r2, [pc, #116]	@ (80066c4 <_free_r+0x90>)
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	b933      	cbnz	r3, 8006660 <_free_r+0x2c>
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	6014      	str	r4, [r2, #0]
 8006656:	4628      	mov	r0, r5
 8006658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800665c:	f000 b8dc 	b.w	8006818 <__malloc_unlock>
 8006660:	42a3      	cmp	r3, r4
 8006662:	d908      	bls.n	8006676 <_free_r+0x42>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	1821      	adds	r1, r4, r0
 8006668:	428b      	cmp	r3, r1
 800666a:	bf01      	itttt	eq
 800666c:	6819      	ldreq	r1, [r3, #0]
 800666e:	685b      	ldreq	r3, [r3, #4]
 8006670:	1809      	addeq	r1, r1, r0
 8006672:	6021      	streq	r1, [r4, #0]
 8006674:	e7ed      	b.n	8006652 <_free_r+0x1e>
 8006676:	461a      	mov	r2, r3
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	b10b      	cbz	r3, 8006680 <_free_r+0x4c>
 800667c:	42a3      	cmp	r3, r4
 800667e:	d9fa      	bls.n	8006676 <_free_r+0x42>
 8006680:	6811      	ldr	r1, [r2, #0]
 8006682:	1850      	adds	r0, r2, r1
 8006684:	42a0      	cmp	r0, r4
 8006686:	d10b      	bne.n	80066a0 <_free_r+0x6c>
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	4401      	add	r1, r0
 800668c:	1850      	adds	r0, r2, r1
 800668e:	4283      	cmp	r3, r0
 8006690:	6011      	str	r1, [r2, #0]
 8006692:	d1e0      	bne.n	8006656 <_free_r+0x22>
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	6053      	str	r3, [r2, #4]
 800669a:	4408      	add	r0, r1
 800669c:	6010      	str	r0, [r2, #0]
 800669e:	e7da      	b.n	8006656 <_free_r+0x22>
 80066a0:	d902      	bls.n	80066a8 <_free_r+0x74>
 80066a2:	230c      	movs	r3, #12
 80066a4:	602b      	str	r3, [r5, #0]
 80066a6:	e7d6      	b.n	8006656 <_free_r+0x22>
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	1821      	adds	r1, r4, r0
 80066ac:	428b      	cmp	r3, r1
 80066ae:	bf04      	itt	eq
 80066b0:	6819      	ldreq	r1, [r3, #0]
 80066b2:	685b      	ldreq	r3, [r3, #4]
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	bf04      	itt	eq
 80066b8:	1809      	addeq	r1, r1, r0
 80066ba:	6021      	streq	r1, [r4, #0]
 80066bc:	6054      	str	r4, [r2, #4]
 80066be:	e7ca      	b.n	8006656 <_free_r+0x22>
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop
 80066c4:	200002d4 	.word	0x200002d4

080066c8 <sbrk_aligned>:
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006708 <sbrk_aligned+0x40>)
 80066cc:	460c      	mov	r4, r1
 80066ce:	6831      	ldr	r1, [r6, #0]
 80066d0:	4605      	mov	r5, r0
 80066d2:	b911      	cbnz	r1, 80066da <sbrk_aligned+0x12>
 80066d4:	f000 fca4 	bl	8007020 <_sbrk_r>
 80066d8:	6030      	str	r0, [r6, #0]
 80066da:	4621      	mov	r1, r4
 80066dc:	4628      	mov	r0, r5
 80066de:	f000 fc9f 	bl	8007020 <_sbrk_r>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d103      	bne.n	80066ee <sbrk_aligned+0x26>
 80066e6:	f04f 34ff 	mov.w	r4, #4294967295
 80066ea:	4620      	mov	r0, r4
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	1cc4      	adds	r4, r0, #3
 80066f0:	f024 0403 	bic.w	r4, r4, #3
 80066f4:	42a0      	cmp	r0, r4
 80066f6:	d0f8      	beq.n	80066ea <sbrk_aligned+0x22>
 80066f8:	1a21      	subs	r1, r4, r0
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 fc90 	bl	8007020 <_sbrk_r>
 8006700:	3001      	adds	r0, #1
 8006702:	d1f2      	bne.n	80066ea <sbrk_aligned+0x22>
 8006704:	e7ef      	b.n	80066e6 <sbrk_aligned+0x1e>
 8006706:	bf00      	nop
 8006708:	200002d0 	.word	0x200002d0

0800670c <_malloc_r>:
 800670c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006710:	1ccd      	adds	r5, r1, #3
 8006712:	f025 0503 	bic.w	r5, r5, #3
 8006716:	3508      	adds	r5, #8
 8006718:	2d0c      	cmp	r5, #12
 800671a:	bf38      	it	cc
 800671c:	250c      	movcc	r5, #12
 800671e:	2d00      	cmp	r5, #0
 8006720:	4606      	mov	r6, r0
 8006722:	db01      	blt.n	8006728 <_malloc_r+0x1c>
 8006724:	42a9      	cmp	r1, r5
 8006726:	d904      	bls.n	8006732 <_malloc_r+0x26>
 8006728:	230c      	movs	r3, #12
 800672a:	6033      	str	r3, [r6, #0]
 800672c:	2000      	movs	r0, #0
 800672e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006808 <_malloc_r+0xfc>
 8006736:	f000 f869 	bl	800680c <__malloc_lock>
 800673a:	f8d8 3000 	ldr.w	r3, [r8]
 800673e:	461c      	mov	r4, r3
 8006740:	bb44      	cbnz	r4, 8006794 <_malloc_r+0x88>
 8006742:	4629      	mov	r1, r5
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff ffbf 	bl	80066c8 <sbrk_aligned>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	4604      	mov	r4, r0
 800674e:	d158      	bne.n	8006802 <_malloc_r+0xf6>
 8006750:	f8d8 4000 	ldr.w	r4, [r8]
 8006754:	4627      	mov	r7, r4
 8006756:	2f00      	cmp	r7, #0
 8006758:	d143      	bne.n	80067e2 <_malloc_r+0xd6>
 800675a:	2c00      	cmp	r4, #0
 800675c:	d04b      	beq.n	80067f6 <_malloc_r+0xea>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	4639      	mov	r1, r7
 8006762:	4630      	mov	r0, r6
 8006764:	eb04 0903 	add.w	r9, r4, r3
 8006768:	f000 fc5a 	bl	8007020 <_sbrk_r>
 800676c:	4581      	cmp	r9, r0
 800676e:	d142      	bne.n	80067f6 <_malloc_r+0xea>
 8006770:	6821      	ldr	r1, [r4, #0]
 8006772:	1a6d      	subs	r5, r5, r1
 8006774:	4629      	mov	r1, r5
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ffa6 	bl	80066c8 <sbrk_aligned>
 800677c:	3001      	adds	r0, #1
 800677e:	d03a      	beq.n	80067f6 <_malloc_r+0xea>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	442b      	add	r3, r5
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	f8d8 3000 	ldr.w	r3, [r8]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	bb62      	cbnz	r2, 80067e8 <_malloc_r+0xdc>
 800678e:	f8c8 7000 	str.w	r7, [r8]
 8006792:	e00f      	b.n	80067b4 <_malloc_r+0xa8>
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	1b52      	subs	r2, r2, r5
 8006798:	d420      	bmi.n	80067dc <_malloc_r+0xd0>
 800679a:	2a0b      	cmp	r2, #11
 800679c:	d917      	bls.n	80067ce <_malloc_r+0xc2>
 800679e:	1961      	adds	r1, r4, r5
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	6025      	str	r5, [r4, #0]
 80067a4:	bf18      	it	ne
 80067a6:	6059      	strne	r1, [r3, #4]
 80067a8:	6863      	ldr	r3, [r4, #4]
 80067aa:	bf08      	it	eq
 80067ac:	f8c8 1000 	streq.w	r1, [r8]
 80067b0:	5162      	str	r2, [r4, r5]
 80067b2:	604b      	str	r3, [r1, #4]
 80067b4:	4630      	mov	r0, r6
 80067b6:	f000 f82f 	bl	8006818 <__malloc_unlock>
 80067ba:	f104 000b 	add.w	r0, r4, #11
 80067be:	1d23      	adds	r3, r4, #4
 80067c0:	f020 0007 	bic.w	r0, r0, #7
 80067c4:	1ac2      	subs	r2, r0, r3
 80067c6:	bf1c      	itt	ne
 80067c8:	1a1b      	subne	r3, r3, r0
 80067ca:	50a3      	strne	r3, [r4, r2]
 80067cc:	e7af      	b.n	800672e <_malloc_r+0x22>
 80067ce:	6862      	ldr	r2, [r4, #4]
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	bf0c      	ite	eq
 80067d4:	f8c8 2000 	streq.w	r2, [r8]
 80067d8:	605a      	strne	r2, [r3, #4]
 80067da:	e7eb      	b.n	80067b4 <_malloc_r+0xa8>
 80067dc:	4623      	mov	r3, r4
 80067de:	6864      	ldr	r4, [r4, #4]
 80067e0:	e7ae      	b.n	8006740 <_malloc_r+0x34>
 80067e2:	463c      	mov	r4, r7
 80067e4:	687f      	ldr	r7, [r7, #4]
 80067e6:	e7b6      	b.n	8006756 <_malloc_r+0x4a>
 80067e8:	461a      	mov	r2, r3
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	d1fb      	bne.n	80067e8 <_malloc_r+0xdc>
 80067f0:	2300      	movs	r3, #0
 80067f2:	6053      	str	r3, [r2, #4]
 80067f4:	e7de      	b.n	80067b4 <_malloc_r+0xa8>
 80067f6:	230c      	movs	r3, #12
 80067f8:	6033      	str	r3, [r6, #0]
 80067fa:	4630      	mov	r0, r6
 80067fc:	f000 f80c 	bl	8006818 <__malloc_unlock>
 8006800:	e794      	b.n	800672c <_malloc_r+0x20>
 8006802:	6005      	str	r5, [r0, #0]
 8006804:	e7d6      	b.n	80067b4 <_malloc_r+0xa8>
 8006806:	bf00      	nop
 8006808:	200002d4 	.word	0x200002d4

0800680c <__malloc_lock>:
 800680c:	4801      	ldr	r0, [pc, #4]	@ (8006814 <__malloc_lock+0x8>)
 800680e:	f7ff bf0e 	b.w	800662e <__retarget_lock_acquire_recursive>
 8006812:	bf00      	nop
 8006814:	200002cc 	.word	0x200002cc

08006818 <__malloc_unlock>:
 8006818:	4801      	ldr	r0, [pc, #4]	@ (8006820 <__malloc_unlock+0x8>)
 800681a:	f7ff bf09 	b.w	8006630 <__retarget_lock_release_recursive>
 800681e:	bf00      	nop
 8006820:	200002cc 	.word	0x200002cc

08006824 <__sfputc_r>:
 8006824:	6893      	ldr	r3, [r2, #8]
 8006826:	3b01      	subs	r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	b410      	push	{r4}
 800682c:	6093      	str	r3, [r2, #8]
 800682e:	da08      	bge.n	8006842 <__sfputc_r+0x1e>
 8006830:	6994      	ldr	r4, [r2, #24]
 8006832:	42a3      	cmp	r3, r4
 8006834:	db01      	blt.n	800683a <__sfputc_r+0x16>
 8006836:	290a      	cmp	r1, #10
 8006838:	d103      	bne.n	8006842 <__sfputc_r+0x1e>
 800683a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800683e:	f7ff bde8 	b.w	8006412 <__swbuf_r>
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	1c58      	adds	r0, r3, #1
 8006846:	6010      	str	r0, [r2, #0]
 8006848:	7019      	strb	r1, [r3, #0]
 800684a:	4608      	mov	r0, r1
 800684c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006850:	4770      	bx	lr

08006852 <__sfputs_r>:
 8006852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	4614      	mov	r4, r2
 800685a:	18d5      	adds	r5, r2, r3
 800685c:	42ac      	cmp	r4, r5
 800685e:	d101      	bne.n	8006864 <__sfputs_r+0x12>
 8006860:	2000      	movs	r0, #0
 8006862:	e007      	b.n	8006874 <__sfputs_r+0x22>
 8006864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006868:	463a      	mov	r2, r7
 800686a:	4630      	mov	r0, r6
 800686c:	f7ff ffda 	bl	8006824 <__sfputc_r>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d1f3      	bne.n	800685c <__sfputs_r+0xa>
 8006874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006878 <_vfiprintf_r>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	460d      	mov	r5, r1
 800687e:	b09d      	sub	sp, #116	@ 0x74
 8006880:	4614      	mov	r4, r2
 8006882:	4698      	mov	r8, r3
 8006884:	4606      	mov	r6, r0
 8006886:	b118      	cbz	r0, 8006890 <_vfiprintf_r+0x18>
 8006888:	6a03      	ldr	r3, [r0, #32]
 800688a:	b90b      	cbnz	r3, 8006890 <_vfiprintf_r+0x18>
 800688c:	f7ff fcd8 	bl	8006240 <__sinit>
 8006890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006892:	07d9      	lsls	r1, r3, #31
 8006894:	d405      	bmi.n	80068a2 <_vfiprintf_r+0x2a>
 8006896:	89ab      	ldrh	r3, [r5, #12]
 8006898:	059a      	lsls	r2, r3, #22
 800689a:	d402      	bmi.n	80068a2 <_vfiprintf_r+0x2a>
 800689c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800689e:	f7ff fec6 	bl	800662e <__retarget_lock_acquire_recursive>
 80068a2:	89ab      	ldrh	r3, [r5, #12]
 80068a4:	071b      	lsls	r3, r3, #28
 80068a6:	d501      	bpl.n	80068ac <_vfiprintf_r+0x34>
 80068a8:	692b      	ldr	r3, [r5, #16]
 80068aa:	b99b      	cbnz	r3, 80068d4 <_vfiprintf_r+0x5c>
 80068ac:	4629      	mov	r1, r5
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff fdee 	bl	8006490 <__swsetup_r>
 80068b4:	b170      	cbz	r0, 80068d4 <_vfiprintf_r+0x5c>
 80068b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068b8:	07dc      	lsls	r4, r3, #31
 80068ba:	d504      	bpl.n	80068c6 <_vfiprintf_r+0x4e>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	b01d      	add	sp, #116	@ 0x74
 80068c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c6:	89ab      	ldrh	r3, [r5, #12]
 80068c8:	0598      	lsls	r0, r3, #22
 80068ca:	d4f7      	bmi.n	80068bc <_vfiprintf_r+0x44>
 80068cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068ce:	f7ff feaf 	bl	8006630 <__retarget_lock_release_recursive>
 80068d2:	e7f3      	b.n	80068bc <_vfiprintf_r+0x44>
 80068d4:	2300      	movs	r3, #0
 80068d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d8:	2320      	movs	r3, #32
 80068da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068de:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e2:	2330      	movs	r3, #48	@ 0x30
 80068e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a94 <_vfiprintf_r+0x21c>
 80068e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068ec:	f04f 0901 	mov.w	r9, #1
 80068f0:	4623      	mov	r3, r4
 80068f2:	469a      	mov	sl, r3
 80068f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068f8:	b10a      	cbz	r2, 80068fe <_vfiprintf_r+0x86>
 80068fa:	2a25      	cmp	r2, #37	@ 0x25
 80068fc:	d1f9      	bne.n	80068f2 <_vfiprintf_r+0x7a>
 80068fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006902:	d00b      	beq.n	800691c <_vfiprintf_r+0xa4>
 8006904:	465b      	mov	r3, fp
 8006906:	4622      	mov	r2, r4
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ffa1 	bl	8006852 <__sfputs_r>
 8006910:	3001      	adds	r0, #1
 8006912:	f000 80a7 	beq.w	8006a64 <_vfiprintf_r+0x1ec>
 8006916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006918:	445a      	add	r2, fp
 800691a:	9209      	str	r2, [sp, #36]	@ 0x24
 800691c:	f89a 3000 	ldrb.w	r3, [sl]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 809f 	beq.w	8006a64 <_vfiprintf_r+0x1ec>
 8006926:	2300      	movs	r3, #0
 8006928:	f04f 32ff 	mov.w	r2, #4294967295
 800692c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006930:	f10a 0a01 	add.w	sl, sl, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	9307      	str	r3, [sp, #28]
 8006938:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800693c:	931a      	str	r3, [sp, #104]	@ 0x68
 800693e:	4654      	mov	r4, sl
 8006940:	2205      	movs	r2, #5
 8006942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006946:	4853      	ldr	r0, [pc, #332]	@ (8006a94 <_vfiprintf_r+0x21c>)
 8006948:	f7f9 fc52 	bl	80001f0 <memchr>
 800694c:	9a04      	ldr	r2, [sp, #16]
 800694e:	b9d8      	cbnz	r0, 8006988 <_vfiprintf_r+0x110>
 8006950:	06d1      	lsls	r1, r2, #27
 8006952:	bf44      	itt	mi
 8006954:	2320      	movmi	r3, #32
 8006956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800695a:	0713      	lsls	r3, r2, #28
 800695c:	bf44      	itt	mi
 800695e:	232b      	movmi	r3, #43	@ 0x2b
 8006960:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006964:	f89a 3000 	ldrb.w	r3, [sl]
 8006968:	2b2a      	cmp	r3, #42	@ 0x2a
 800696a:	d015      	beq.n	8006998 <_vfiprintf_r+0x120>
 800696c:	9a07      	ldr	r2, [sp, #28]
 800696e:	4654      	mov	r4, sl
 8006970:	2000      	movs	r0, #0
 8006972:	f04f 0c0a 	mov.w	ip, #10
 8006976:	4621      	mov	r1, r4
 8006978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697c:	3b30      	subs	r3, #48	@ 0x30
 800697e:	2b09      	cmp	r3, #9
 8006980:	d94b      	bls.n	8006a1a <_vfiprintf_r+0x1a2>
 8006982:	b1b0      	cbz	r0, 80069b2 <_vfiprintf_r+0x13a>
 8006984:	9207      	str	r2, [sp, #28]
 8006986:	e014      	b.n	80069b2 <_vfiprintf_r+0x13a>
 8006988:	eba0 0308 	sub.w	r3, r0, r8
 800698c:	fa09 f303 	lsl.w	r3, r9, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	46a2      	mov	sl, r4
 8006996:	e7d2      	b.n	800693e <_vfiprintf_r+0xc6>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	1d19      	adds	r1, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	9103      	str	r1, [sp, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfbb      	ittet	lt
 80069a4:	425b      	neglt	r3, r3
 80069a6:	f042 0202 	orrlt.w	r2, r2, #2
 80069aa:	9307      	strge	r3, [sp, #28]
 80069ac:	9307      	strlt	r3, [sp, #28]
 80069ae:	bfb8      	it	lt
 80069b0:	9204      	strlt	r2, [sp, #16]
 80069b2:	7823      	ldrb	r3, [r4, #0]
 80069b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80069b6:	d10a      	bne.n	80069ce <_vfiprintf_r+0x156>
 80069b8:	7863      	ldrb	r3, [r4, #1]
 80069ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80069bc:	d132      	bne.n	8006a24 <_vfiprintf_r+0x1ac>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	9203      	str	r2, [sp, #12]
 80069c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069ca:	3402      	adds	r4, #2
 80069cc:	9305      	str	r3, [sp, #20]
 80069ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006aa4 <_vfiprintf_r+0x22c>
 80069d2:	7821      	ldrb	r1, [r4, #0]
 80069d4:	2203      	movs	r2, #3
 80069d6:	4650      	mov	r0, sl
 80069d8:	f7f9 fc0a 	bl	80001f0 <memchr>
 80069dc:	b138      	cbz	r0, 80069ee <_vfiprintf_r+0x176>
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	eba0 000a 	sub.w	r0, r0, sl
 80069e4:	2240      	movs	r2, #64	@ 0x40
 80069e6:	4082      	lsls	r2, r0
 80069e8:	4313      	orrs	r3, r2
 80069ea:	3401      	adds	r4, #1
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f2:	4829      	ldr	r0, [pc, #164]	@ (8006a98 <_vfiprintf_r+0x220>)
 80069f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069f8:	2206      	movs	r2, #6
 80069fa:	f7f9 fbf9 	bl	80001f0 <memchr>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d03f      	beq.n	8006a82 <_vfiprintf_r+0x20a>
 8006a02:	4b26      	ldr	r3, [pc, #152]	@ (8006a9c <_vfiprintf_r+0x224>)
 8006a04:	bb1b      	cbnz	r3, 8006a4e <_vfiprintf_r+0x1d6>
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	3307      	adds	r3, #7
 8006a0a:	f023 0307 	bic.w	r3, r3, #7
 8006a0e:	3308      	adds	r3, #8
 8006a10:	9303      	str	r3, [sp, #12]
 8006a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a14:	443b      	add	r3, r7
 8006a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a18:	e76a      	b.n	80068f0 <_vfiprintf_r+0x78>
 8006a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a1e:	460c      	mov	r4, r1
 8006a20:	2001      	movs	r0, #1
 8006a22:	e7a8      	b.n	8006976 <_vfiprintf_r+0xfe>
 8006a24:	2300      	movs	r3, #0
 8006a26:	3401      	adds	r4, #1
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f04f 0c0a 	mov.w	ip, #10
 8006a30:	4620      	mov	r0, r4
 8006a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a36:	3a30      	subs	r2, #48	@ 0x30
 8006a38:	2a09      	cmp	r2, #9
 8006a3a:	d903      	bls.n	8006a44 <_vfiprintf_r+0x1cc>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0c6      	beq.n	80069ce <_vfiprintf_r+0x156>
 8006a40:	9105      	str	r1, [sp, #20]
 8006a42:	e7c4      	b.n	80069ce <_vfiprintf_r+0x156>
 8006a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a48:	4604      	mov	r4, r0
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7f0      	b.n	8006a30 <_vfiprintf_r+0x1b8>
 8006a4e:	ab03      	add	r3, sp, #12
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	462a      	mov	r2, r5
 8006a54:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <_vfiprintf_r+0x228>)
 8006a56:	a904      	add	r1, sp, #16
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f3af 8000 	nop.w
 8006a5e:	4607      	mov	r7, r0
 8006a60:	1c78      	adds	r0, r7, #1
 8006a62:	d1d6      	bne.n	8006a12 <_vfiprintf_r+0x19a>
 8006a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a66:	07d9      	lsls	r1, r3, #31
 8006a68:	d405      	bmi.n	8006a76 <_vfiprintf_r+0x1fe>
 8006a6a:	89ab      	ldrh	r3, [r5, #12]
 8006a6c:	059a      	lsls	r2, r3, #22
 8006a6e:	d402      	bmi.n	8006a76 <_vfiprintf_r+0x1fe>
 8006a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a72:	f7ff fddd 	bl	8006630 <__retarget_lock_release_recursive>
 8006a76:	89ab      	ldrh	r3, [r5, #12]
 8006a78:	065b      	lsls	r3, r3, #25
 8006a7a:	f53f af1f 	bmi.w	80068bc <_vfiprintf_r+0x44>
 8006a7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a80:	e71e      	b.n	80068c0 <_vfiprintf_r+0x48>
 8006a82:	ab03      	add	r3, sp, #12
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	462a      	mov	r2, r5
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <_vfiprintf_r+0x228>)
 8006a8a:	a904      	add	r1, sp, #16
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f879 	bl	8006b84 <_printf_i>
 8006a92:	e7e4      	b.n	8006a5e <_vfiprintf_r+0x1e6>
 8006a94:	08007314 	.word	0x08007314
 8006a98:	0800731e 	.word	0x0800731e
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	08006853 	.word	0x08006853
 8006aa4:	0800731a 	.word	0x0800731a

08006aa8 <_printf_common>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	4698      	mov	r8, r3
 8006ab0:	688a      	ldr	r2, [r1, #8]
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	bfb8      	it	lt
 8006abc:	4613      	movlt	r3, r2
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b10a      	cbz	r2, 8006ace <_printf_common+0x26>
 8006aca:	3301      	adds	r3, #1
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	0699      	lsls	r1, r3, #26
 8006ad2:	bf42      	ittt	mi
 8006ad4:	6833      	ldrmi	r3, [r6, #0]
 8006ad6:	3302      	addmi	r3, #2
 8006ad8:	6033      	strmi	r3, [r6, #0]
 8006ada:	6825      	ldr	r5, [r4, #0]
 8006adc:	f015 0506 	ands.w	r5, r5, #6
 8006ae0:	d106      	bne.n	8006af0 <_printf_common+0x48>
 8006ae2:	f104 0a19 	add.w	sl, r4, #25
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dc26      	bgt.n	8006b3e <_printf_common+0x96>
 8006af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	3b00      	subs	r3, #0
 8006af8:	bf18      	it	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	0692      	lsls	r2, r2, #26
 8006afe:	d42b      	bmi.n	8006b58 <_printf_common+0xb0>
 8006b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b04:	4641      	mov	r1, r8
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c8      	blx	r9
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d01e      	beq.n	8006b4c <_printf_common+0xa4>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	6922      	ldr	r2, [r4, #16]
 8006b12:	f003 0306 	and.w	r3, r3, #6
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	bf02      	ittt	eq
 8006b1a:	68e5      	ldreq	r5, [r4, #12]
 8006b1c:	6833      	ldreq	r3, [r6, #0]
 8006b1e:	1aed      	subeq	r5, r5, r3
 8006b20:	68a3      	ldr	r3, [r4, #8]
 8006b22:	bf0c      	ite	eq
 8006b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b28:	2500      	movne	r5, #0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfc4      	itt	gt
 8006b2e:	1a9b      	subgt	r3, r3, r2
 8006b30:	18ed      	addgt	r5, r5, r3
 8006b32:	2600      	movs	r6, #0
 8006b34:	341a      	adds	r4, #26
 8006b36:	42b5      	cmp	r5, r6
 8006b38:	d11a      	bne.n	8006b70 <_printf_common+0xc8>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e008      	b.n	8006b50 <_printf_common+0xa8>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4652      	mov	r2, sl
 8006b42:	4641      	mov	r1, r8
 8006b44:	4638      	mov	r0, r7
 8006b46:	47c8      	blx	r9
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d103      	bne.n	8006b54 <_printf_common+0xac>
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	3501      	adds	r5, #1
 8006b56:	e7c6      	b.n	8006ae6 <_printf_common+0x3e>
 8006b58:	18e1      	adds	r1, r4, r3
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	2030      	movs	r0, #48	@ 0x30
 8006b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b62:	4422      	add	r2, r4
 8006b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	e7c7      	b.n	8006b00 <_printf_common+0x58>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4622      	mov	r2, r4
 8006b74:	4641      	mov	r1, r8
 8006b76:	4638      	mov	r0, r7
 8006b78:	47c8      	blx	r9
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d0e6      	beq.n	8006b4c <_printf_common+0xa4>
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7d9      	b.n	8006b36 <_printf_common+0x8e>
	...

08006b84 <_printf_i>:
 8006b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	7e0f      	ldrb	r7, [r1, #24]
 8006b8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b8c:	2f78      	cmp	r7, #120	@ 0x78
 8006b8e:	4691      	mov	r9, r2
 8006b90:	4680      	mov	r8, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	469a      	mov	sl, r3
 8006b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b9a:	d807      	bhi.n	8006bac <_printf_i+0x28>
 8006b9c:	2f62      	cmp	r7, #98	@ 0x62
 8006b9e:	d80a      	bhi.n	8006bb6 <_printf_i+0x32>
 8006ba0:	2f00      	cmp	r7, #0
 8006ba2:	f000 80d1 	beq.w	8006d48 <_printf_i+0x1c4>
 8006ba6:	2f58      	cmp	r7, #88	@ 0x58
 8006ba8:	f000 80b8 	beq.w	8006d1c <_printf_i+0x198>
 8006bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bb4:	e03a      	b.n	8006c2c <_printf_i+0xa8>
 8006bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bba:	2b15      	cmp	r3, #21
 8006bbc:	d8f6      	bhi.n	8006bac <_printf_i+0x28>
 8006bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8006bc4 <_printf_i+0x40>)
 8006bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006bad 	.word	0x08006bad
 8006bd0:	08006bad 	.word	0x08006bad
 8006bd4:	08006bad 	.word	0x08006bad
 8006bd8:	08006bad 	.word	0x08006bad
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006bad 	.word	0x08006bad
 8006be4:	08006bad 	.word	0x08006bad
 8006be8:	08006bad 	.word	0x08006bad
 8006bec:	08006bad 	.word	0x08006bad
 8006bf0:	08006d2f 	.word	0x08006d2f
 8006bf4:	08006c5b 	.word	0x08006c5b
 8006bf8:	08006ce9 	.word	0x08006ce9
 8006bfc:	08006bad 	.word	0x08006bad
 8006c00:	08006bad 	.word	0x08006bad
 8006c04:	08006d51 	.word	0x08006d51
 8006c08:	08006bad 	.word	0x08006bad
 8006c0c:	08006c5b 	.word	0x08006c5b
 8006c10:	08006bad 	.word	0x08006bad
 8006c14:	08006bad 	.word	0x08006bad
 8006c18:	08006cf1 	.word	0x08006cf1
 8006c1c:	6833      	ldr	r3, [r6, #0]
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6032      	str	r2, [r6, #0]
 8006c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e09c      	b.n	8006d6a <_printf_i+0x1e6>
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	1d19      	adds	r1, r3, #4
 8006c36:	6031      	str	r1, [r6, #0]
 8006c38:	0606      	lsls	r6, r0, #24
 8006c3a:	d501      	bpl.n	8006c40 <_printf_i+0xbc>
 8006c3c:	681d      	ldr	r5, [r3, #0]
 8006c3e:	e003      	b.n	8006c48 <_printf_i+0xc4>
 8006c40:	0645      	lsls	r5, r0, #25
 8006c42:	d5fb      	bpl.n	8006c3c <_printf_i+0xb8>
 8006c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c48:	2d00      	cmp	r5, #0
 8006c4a:	da03      	bge.n	8006c54 <_printf_i+0xd0>
 8006c4c:	232d      	movs	r3, #45	@ 0x2d
 8006c4e:	426d      	negs	r5, r5
 8006c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c54:	4858      	ldr	r0, [pc, #352]	@ (8006db8 <_printf_i+0x234>)
 8006c56:	230a      	movs	r3, #10
 8006c58:	e011      	b.n	8006c7e <_printf_i+0xfa>
 8006c5a:	6821      	ldr	r1, [r4, #0]
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	0608      	lsls	r0, r1, #24
 8006c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c64:	d402      	bmi.n	8006c6c <_printf_i+0xe8>
 8006c66:	0649      	lsls	r1, r1, #25
 8006c68:	bf48      	it	mi
 8006c6a:	b2ad      	uxthmi	r5, r5
 8006c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c6e:	4852      	ldr	r0, [pc, #328]	@ (8006db8 <_printf_i+0x234>)
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	bf14      	ite	ne
 8006c74:	230a      	movne	r3, #10
 8006c76:	2308      	moveq	r3, #8
 8006c78:	2100      	movs	r1, #0
 8006c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c7e:	6866      	ldr	r6, [r4, #4]
 8006c80:	60a6      	str	r6, [r4, #8]
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	db05      	blt.n	8006c92 <_printf_i+0x10e>
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	432e      	orrs	r6, r5
 8006c8a:	f021 0104 	bic.w	r1, r1, #4
 8006c8e:	6021      	str	r1, [r4, #0]
 8006c90:	d04b      	beq.n	8006d2a <_printf_i+0x1a6>
 8006c92:	4616      	mov	r6, r2
 8006c94:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c98:	fb03 5711 	mls	r7, r3, r1, r5
 8006c9c:	5dc7      	ldrb	r7, [r0, r7]
 8006c9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ca2:	462f      	mov	r7, r5
 8006ca4:	42bb      	cmp	r3, r7
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	d9f4      	bls.n	8006c94 <_printf_i+0x110>
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d10b      	bne.n	8006cc6 <_printf_i+0x142>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	07df      	lsls	r7, r3, #31
 8006cb2:	d508      	bpl.n	8006cc6 <_printf_i+0x142>
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	6861      	ldr	r1, [r4, #4]
 8006cb8:	4299      	cmp	r1, r3
 8006cba:	bfde      	ittt	le
 8006cbc:	2330      	movle	r3, #48	@ 0x30
 8006cbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cc6:	1b92      	subs	r2, r2, r6
 8006cc8:	6122      	str	r2, [r4, #16]
 8006cca:	f8cd a000 	str.w	sl, [sp]
 8006cce:	464b      	mov	r3, r9
 8006cd0:	aa03      	add	r2, sp, #12
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	f7ff fee7 	bl	8006aa8 <_printf_common>
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d14a      	bne.n	8006d74 <_printf_i+0x1f0>
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	b004      	add	sp, #16
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	f043 0320 	orr.w	r3, r3, #32
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	4832      	ldr	r0, [pc, #200]	@ (8006dbc <_printf_i+0x238>)
 8006cf2:	2778      	movs	r7, #120	@ 0x78
 8006cf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	6831      	ldr	r1, [r6, #0]
 8006cfc:	061f      	lsls	r7, r3, #24
 8006cfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d02:	d402      	bmi.n	8006d0a <_printf_i+0x186>
 8006d04:	065f      	lsls	r7, r3, #25
 8006d06:	bf48      	it	mi
 8006d08:	b2ad      	uxthmi	r5, r5
 8006d0a:	6031      	str	r1, [r6, #0]
 8006d0c:	07d9      	lsls	r1, r3, #31
 8006d0e:	bf44      	itt	mi
 8006d10:	f043 0320 	orrmi.w	r3, r3, #32
 8006d14:	6023      	strmi	r3, [r4, #0]
 8006d16:	b11d      	cbz	r5, 8006d20 <_printf_i+0x19c>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	e7ad      	b.n	8006c78 <_printf_i+0xf4>
 8006d1c:	4826      	ldr	r0, [pc, #152]	@ (8006db8 <_printf_i+0x234>)
 8006d1e:	e7e9      	b.n	8006cf4 <_printf_i+0x170>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	e7f6      	b.n	8006d18 <_printf_i+0x194>
 8006d2a:	4616      	mov	r6, r2
 8006d2c:	e7bd      	b.n	8006caa <_printf_i+0x126>
 8006d2e:	6833      	ldr	r3, [r6, #0]
 8006d30:	6825      	ldr	r5, [r4, #0]
 8006d32:	6961      	ldr	r1, [r4, #20]
 8006d34:	1d18      	adds	r0, r3, #4
 8006d36:	6030      	str	r0, [r6, #0]
 8006d38:	062e      	lsls	r6, r5, #24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	d501      	bpl.n	8006d42 <_printf_i+0x1be>
 8006d3e:	6019      	str	r1, [r3, #0]
 8006d40:	e002      	b.n	8006d48 <_printf_i+0x1c4>
 8006d42:	0668      	lsls	r0, r5, #25
 8006d44:	d5fb      	bpl.n	8006d3e <_printf_i+0x1ba>
 8006d46:	8019      	strh	r1, [r3, #0]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	e7bc      	b.n	8006cca <_printf_i+0x146>
 8006d50:	6833      	ldr	r3, [r6, #0]
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	6032      	str	r2, [r6, #0]
 8006d56:	681e      	ldr	r6, [r3, #0]
 8006d58:	6862      	ldr	r2, [r4, #4]
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7f9 fa47 	bl	80001f0 <memchr>
 8006d62:	b108      	cbz	r0, 8006d68 <_printf_i+0x1e4>
 8006d64:	1b80      	subs	r0, r0, r6
 8006d66:	6060      	str	r0, [r4, #4]
 8006d68:	6863      	ldr	r3, [r4, #4]
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d72:	e7aa      	b.n	8006cca <_printf_i+0x146>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	4632      	mov	r2, r6
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	47d0      	blx	sl
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d0ad      	beq.n	8006cde <_printf_i+0x15a>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	079b      	lsls	r3, r3, #30
 8006d86:	d413      	bmi.n	8006db0 <_printf_i+0x22c>
 8006d88:	68e0      	ldr	r0, [r4, #12]
 8006d8a:	9b03      	ldr	r3, [sp, #12]
 8006d8c:	4298      	cmp	r0, r3
 8006d8e:	bfb8      	it	lt
 8006d90:	4618      	movlt	r0, r3
 8006d92:	e7a6      	b.n	8006ce2 <_printf_i+0x15e>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4632      	mov	r2, r6
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	47d0      	blx	sl
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d09d      	beq.n	8006cde <_printf_i+0x15a>
 8006da2:	3501      	adds	r5, #1
 8006da4:	68e3      	ldr	r3, [r4, #12]
 8006da6:	9903      	ldr	r1, [sp, #12]
 8006da8:	1a5b      	subs	r3, r3, r1
 8006daa:	42ab      	cmp	r3, r5
 8006dac:	dcf2      	bgt.n	8006d94 <_printf_i+0x210>
 8006dae:	e7eb      	b.n	8006d88 <_printf_i+0x204>
 8006db0:	2500      	movs	r5, #0
 8006db2:	f104 0619 	add.w	r6, r4, #25
 8006db6:	e7f5      	b.n	8006da4 <_printf_i+0x220>
 8006db8:	08007325 	.word	0x08007325
 8006dbc:	08007336 	.word	0x08007336

08006dc0 <__sflush_r>:
 8006dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	0716      	lsls	r6, r2, #28
 8006dca:	4605      	mov	r5, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	d454      	bmi.n	8006e7a <__sflush_r+0xba>
 8006dd0:	684b      	ldr	r3, [r1, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	dc02      	bgt.n	8006ddc <__sflush_r+0x1c>
 8006dd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dd48      	ble.n	8006e6e <__sflush_r+0xae>
 8006ddc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	d045      	beq.n	8006e6e <__sflush_r+0xae>
 8006de2:	2300      	movs	r3, #0
 8006de4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006de8:	682f      	ldr	r7, [r5, #0]
 8006dea:	6a21      	ldr	r1, [r4, #32]
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	d030      	beq.n	8006e52 <__sflush_r+0x92>
 8006df0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	0759      	lsls	r1, r3, #29
 8006df6:	d505      	bpl.n	8006e04 <__sflush_r+0x44>
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	1ad2      	subs	r2, r2, r3
 8006dfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dfe:	b10b      	cbz	r3, 8006e04 <__sflush_r+0x44>
 8006e00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e02:	1ad2      	subs	r2, r2, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e08:	6a21      	ldr	r1, [r4, #32]
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b0      	blx	r6
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	d106      	bne.n	8006e22 <__sflush_r+0x62>
 8006e14:	6829      	ldr	r1, [r5, #0]
 8006e16:	291d      	cmp	r1, #29
 8006e18:	d82b      	bhi.n	8006e72 <__sflush_r+0xb2>
 8006e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ec4 <__sflush_r+0x104>)
 8006e1c:	40ca      	lsrs	r2, r1
 8006e1e:	07d6      	lsls	r6, r2, #31
 8006e20:	d527      	bpl.n	8006e72 <__sflush_r+0xb2>
 8006e22:	2200      	movs	r2, #0
 8006e24:	6062      	str	r2, [r4, #4]
 8006e26:	04d9      	lsls	r1, r3, #19
 8006e28:	6922      	ldr	r2, [r4, #16]
 8006e2a:	6022      	str	r2, [r4, #0]
 8006e2c:	d504      	bpl.n	8006e38 <__sflush_r+0x78>
 8006e2e:	1c42      	adds	r2, r0, #1
 8006e30:	d101      	bne.n	8006e36 <__sflush_r+0x76>
 8006e32:	682b      	ldr	r3, [r5, #0]
 8006e34:	b903      	cbnz	r3, 8006e38 <__sflush_r+0x78>
 8006e36:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e3a:	602f      	str	r7, [r5, #0]
 8006e3c:	b1b9      	cbz	r1, 8006e6e <__sflush_r+0xae>
 8006e3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e42:	4299      	cmp	r1, r3
 8006e44:	d002      	beq.n	8006e4c <__sflush_r+0x8c>
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7ff fbf4 	bl	8006634 <_free_r>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e50:	e00d      	b.n	8006e6e <__sflush_r+0xae>
 8006e52:	2301      	movs	r3, #1
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b0      	blx	r6
 8006e58:	4602      	mov	r2, r0
 8006e5a:	1c50      	adds	r0, r2, #1
 8006e5c:	d1c9      	bne.n	8006df2 <__sflush_r+0x32>
 8006e5e:	682b      	ldr	r3, [r5, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0c6      	beq.n	8006df2 <__sflush_r+0x32>
 8006e64:	2b1d      	cmp	r3, #29
 8006e66:	d001      	beq.n	8006e6c <__sflush_r+0xac>
 8006e68:	2b16      	cmp	r3, #22
 8006e6a:	d11e      	bne.n	8006eaa <__sflush_r+0xea>
 8006e6c:	602f      	str	r7, [r5, #0]
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e022      	b.n	8006eb8 <__sflush_r+0xf8>
 8006e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e76:	b21b      	sxth	r3, r3
 8006e78:	e01b      	b.n	8006eb2 <__sflush_r+0xf2>
 8006e7a:	690f      	ldr	r7, [r1, #16]
 8006e7c:	2f00      	cmp	r7, #0
 8006e7e:	d0f6      	beq.n	8006e6e <__sflush_r+0xae>
 8006e80:	0793      	lsls	r3, r2, #30
 8006e82:	680e      	ldr	r6, [r1, #0]
 8006e84:	bf08      	it	eq
 8006e86:	694b      	ldreq	r3, [r1, #20]
 8006e88:	600f      	str	r7, [r1, #0]
 8006e8a:	bf18      	it	ne
 8006e8c:	2300      	movne	r3, #0
 8006e8e:	eba6 0807 	sub.w	r8, r6, r7
 8006e92:	608b      	str	r3, [r1, #8]
 8006e94:	f1b8 0f00 	cmp.w	r8, #0
 8006e98:	dde9      	ble.n	8006e6e <__sflush_r+0xae>
 8006e9a:	6a21      	ldr	r1, [r4, #32]
 8006e9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e9e:	4643      	mov	r3, r8
 8006ea0:	463a      	mov	r2, r7
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b0      	blx	r6
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	dc08      	bgt.n	8006ebc <__sflush_r+0xfc>
 8006eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	4407      	add	r7, r0
 8006ebe:	eba8 0800 	sub.w	r8, r8, r0
 8006ec2:	e7e7      	b.n	8006e94 <__sflush_r+0xd4>
 8006ec4:	20400001 	.word	0x20400001

08006ec8 <_fflush_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	690b      	ldr	r3, [r1, #16]
 8006ecc:	4605      	mov	r5, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	b913      	cbnz	r3, 8006ed8 <_fflush_r+0x10>
 8006ed2:	2500      	movs	r5, #0
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	b118      	cbz	r0, 8006ee2 <_fflush_r+0x1a>
 8006eda:	6a03      	ldr	r3, [r0, #32]
 8006edc:	b90b      	cbnz	r3, 8006ee2 <_fflush_r+0x1a>
 8006ede:	f7ff f9af 	bl	8006240 <__sinit>
 8006ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0f3      	beq.n	8006ed2 <_fflush_r+0xa>
 8006eea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006eec:	07d0      	lsls	r0, r2, #31
 8006eee:	d404      	bmi.n	8006efa <_fflush_r+0x32>
 8006ef0:	0599      	lsls	r1, r3, #22
 8006ef2:	d402      	bmi.n	8006efa <_fflush_r+0x32>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ef6:	f7ff fb9a 	bl	800662e <__retarget_lock_acquire_recursive>
 8006efa:	4628      	mov	r0, r5
 8006efc:	4621      	mov	r1, r4
 8006efe:	f7ff ff5f 	bl	8006dc0 <__sflush_r>
 8006f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f04:	07da      	lsls	r2, r3, #31
 8006f06:	4605      	mov	r5, r0
 8006f08:	d4e4      	bmi.n	8006ed4 <_fflush_r+0xc>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	059b      	lsls	r3, r3, #22
 8006f0e:	d4e1      	bmi.n	8006ed4 <_fflush_r+0xc>
 8006f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f12:	f7ff fb8d 	bl	8006630 <__retarget_lock_release_recursive>
 8006f16:	e7dd      	b.n	8006ed4 <_fflush_r+0xc>

08006f18 <__swhatbuf_r>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	2900      	cmp	r1, #0
 8006f22:	b096      	sub	sp, #88	@ 0x58
 8006f24:	4615      	mov	r5, r2
 8006f26:	461e      	mov	r6, r3
 8006f28:	da0d      	bge.n	8006f46 <__swhatbuf_r+0x2e>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f30:	f04f 0100 	mov.w	r1, #0
 8006f34:	bf14      	ite	ne
 8006f36:	2340      	movne	r3, #64	@ 0x40
 8006f38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	6031      	str	r1, [r6, #0]
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	b016      	add	sp, #88	@ 0x58
 8006f44:	bd70      	pop	{r4, r5, r6, pc}
 8006f46:	466a      	mov	r2, sp
 8006f48:	f000 f848 	bl	8006fdc <_fstat_r>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	dbec      	blt.n	8006f2a <__swhatbuf_r+0x12>
 8006f50:	9901      	ldr	r1, [sp, #4]
 8006f52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f5a:	4259      	negs	r1, r3
 8006f5c:	4159      	adcs	r1, r3
 8006f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f62:	e7eb      	b.n	8006f3c <__swhatbuf_r+0x24>

08006f64 <__smakebuf_r>:
 8006f64:	898b      	ldrh	r3, [r1, #12]
 8006f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f68:	079d      	lsls	r5, r3, #30
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	d507      	bpl.n	8006f80 <__smakebuf_r+0x1c>
 8006f70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	2301      	movs	r3, #1
 8006f7a:	6163      	str	r3, [r4, #20]
 8006f7c:	b003      	add	sp, #12
 8006f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f80:	ab01      	add	r3, sp, #4
 8006f82:	466a      	mov	r2, sp
 8006f84:	f7ff ffc8 	bl	8006f18 <__swhatbuf_r>
 8006f88:	9f00      	ldr	r7, [sp, #0]
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff fbbc 	bl	800670c <_malloc_r>
 8006f94:	b948      	cbnz	r0, 8006faa <__smakebuf_r+0x46>
 8006f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9a:	059a      	lsls	r2, r3, #22
 8006f9c:	d4ee      	bmi.n	8006f7c <__smakebuf_r+0x18>
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	e7e2      	b.n	8006f70 <__smakebuf_r+0xc>
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	6020      	str	r0, [r4, #0]
 8006fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	9b01      	ldr	r3, [sp, #4]
 8006fb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fba:	b15b      	cbz	r3, 8006fd4 <__smakebuf_r+0x70>
 8006fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f000 f81d 	bl	8007000 <_isatty_r>
 8006fc6:	b128      	cbz	r0, 8006fd4 <__smakebuf_r+0x70>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	431d      	orrs	r5, r3
 8006fd8:	81a5      	strh	r5, [r4, #12]
 8006fda:	e7cf      	b.n	8006f7c <__smakebuf_r+0x18>

08006fdc <_fstat_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	@ (8006ffc <_fstat_r+0x20>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	f7f9 fea5 	bl	8000d38 <_fstat>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d102      	bne.n	8006ff8 <_fstat_r+0x1c>
 8006ff2:	682b      	ldr	r3, [r5, #0]
 8006ff4:	b103      	cbz	r3, 8006ff8 <_fstat_r+0x1c>
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	bd38      	pop	{r3, r4, r5, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200002c8 	.word	0x200002c8

08007000 <_isatty_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	@ (800701c <_isatty_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7f9 fea4 	bl	8000d58 <_isatty>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_isatty_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_isatty_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	200002c8 	.word	0x200002c8

08007020 <_sbrk_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	@ (800703c <_sbrk_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7f9 feac 	bl	8000d88 <_sbrk>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_sbrk_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_sbrk_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	200002c8 	.word	0x200002c8

08007040 <_init>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	bf00      	nop
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr

0800704c <_fini>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr
