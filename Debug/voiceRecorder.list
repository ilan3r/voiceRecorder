
voiceRecorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d80  08008d80  0000a080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d80  08008d80  00009d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d88  08008d88  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d88  08008d88  00009d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d8c  08008d8c  00009d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008d90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010174  20000080  08008e10  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200101f4  08008e10  0000a1f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010acb  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e07  00000000  00000000  0001ab7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b91  00000000  00000000  0001e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da1  00000000  00000000  0001f439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015650  00000000  00000000  000381da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8a6  00000000  00000000  0004d82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da0d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  000da114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000de624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008874 	.word	0x08008874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008874 	.word	0x08008874

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	68b9      	ldr	r1, [r7, #8]
 80005c2:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <_write+0x28>)
 80005c4:	f003 feaa 	bl	800431c <HAL_UART_Transmit>
    return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000019c 	.word	0x2000019c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fd71 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f919 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa2f 	bl	8000a48 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fa0d 	bl	8000a08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f9e1 	bl	80009b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005f2:	f000 f9a9 	bl	8000948 <MX_SPI1_Init>
  MX_FATFS_Init();
 80005f6:	f004 fa4d 	bl	8004a94 <MX_FATFS_Init>
  MX_I2S2_Init();
 80005fa:	f000 f977 	bl	80008ec <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  printf("start...\r\n");
 80005fe:	486a      	ldr	r0, [pc, #424]	@ (80007a8 <main+0x1d0>)
 8000600:	f007 fad6 	bl	8007bb0 <puts>
//  testSDCard();

  fresult = f_mount(&fatfs, "", 1);
 8000604:	2201      	movs	r2, #1
 8000606:	4969      	ldr	r1, [pc, #420]	@ (80007ac <main+0x1d4>)
 8000608:	4869      	ldr	r0, [pc, #420]	@ (80007b0 <main+0x1d8>)
 800060a:	f006 fc03 	bl	8006e14 <f_mount>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b68      	ldr	r3, [pc, #416]	@ (80007b4 <main+0x1dc>)
 8000614:	701a      	strb	r2, [r3, #0]

  if (fresult != FR_OK){
 8000616:	4b67      	ldr	r3, [pc, #412]	@ (80007b4 <main+0x1dc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <main+0x4e>
	  // do something
	  printf("there was an error with the mounting");
 800061e:	4866      	ldr	r0, [pc, #408]	@ (80007b8 <main+0x1e0>)
 8000620:	f007 fa5e 	bl	8007ae0 <iprintf>
 8000624:	e002      	b.n	800062c <main+0x54>

  }
  else{
	  printf("successfully mounted\r\n");
 8000626:	4865      	ldr	r0, [pc, #404]	@ (80007bc <main+0x1e4>)
 8000628:	f007 fac2 	bl	8007bb0 <puts>
  }

  fresult = f_open(&fil, "a.wav", FA_OPEN_EXISTING | FA_READ);
 800062c:	2201      	movs	r2, #1
 800062e:	4964      	ldr	r1, [pc, #400]	@ (80007c0 <main+0x1e8>)
 8000630:	4864      	ldr	r0, [pc, #400]	@ (80007c4 <main+0x1ec>)
 8000632:	f006 fc35 	bl	8006ea0 <f_open>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b5e      	ldr	r3, [pc, #376]	@ (80007b4 <main+0x1dc>)
 800063c:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK){
 800063e:	4b5d      	ldr	r3, [pc, #372]	@ (80007b4 <main+0x1dc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d007      	beq.n	8000656 <main+0x7e>
	  // do something
	  printf("could not read file, fresult is %d \r\n", fresult);
 8000646:	4b5b      	ldr	r3, [pc, #364]	@ (80007b4 <main+0x1dc>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	485e      	ldr	r0, [pc, #376]	@ (80007c8 <main+0x1f0>)
 800064e:	f007 fa47 	bl	8007ae0 <iprintf>
	  while (1);
 8000652:	bf00      	nop
 8000654:	e7fd      	b.n	8000652 <main+0x7a>
  }
  else{
	  printf("successfully opened file!\r\n");
 8000656:	485d      	ldr	r0, [pc, #372]	@ (80007cc <main+0x1f4>)
 8000658:	f007 faaa 	bl	8007bb0 <puts>
  }


  fresult = f_lseek(&fil, 44);
 800065c:	212c      	movs	r1, #44	@ 0x2c
 800065e:	4859      	ldr	r0, [pc, #356]	@ (80007c4 <main+0x1ec>)
 8000660:	f006 ff17 	bl	8007492 <f_lseek>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	4b52      	ldr	r3, [pc, #328]	@ (80007b4 <main+0x1dc>)
 800066a:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK){
 800066c:	4b51      	ldr	r3, [pc, #324]	@ (80007b4 <main+0x1dc>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d007      	beq.n	8000684 <main+0xac>
	  // do something
	  printf("could not seek file, fresult is %d \r\n", fresult);
 8000674:	4b4f      	ldr	r3, [pc, #316]	@ (80007b4 <main+0x1dc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	4855      	ldr	r0, [pc, #340]	@ (80007d0 <main+0x1f8>)
 800067c:	f007 fa30 	bl	8007ae0 <iprintf>
	  while (1);
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0xa8>
  }
  else{
	  printf("successfully seek within file!\r\n");
 8000684:	4853      	ldr	r0, [pc, #332]	@ (80007d4 <main+0x1fc>)
 8000686:	f007 fa93 	bl	8007bb0 <puts>
  }

  fresult = f_read(&fil, &recording_size, 4, (UINT *)fread_size);
 800068a:	4b53      	ldr	r3, [pc, #332]	@ (80007d8 <main+0x200>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2204      	movs	r2, #4
 8000690:	4952      	ldr	r1, [pc, #328]	@ (80007dc <main+0x204>)
 8000692:	484c      	ldr	r0, [pc, #304]	@ (80007c4 <main+0x1ec>)
 8000694:	f006 fdbe 	bl	8007214 <f_read>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b45      	ldr	r3, [pc, #276]	@ (80007b4 <main+0x1dc>)
 800069e:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK){
 80006a0:	4b44      	ldr	r3, [pc, #272]	@ (80007b4 <main+0x1dc>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d007      	beq.n	80006b8 <main+0xe0>
	  // do something
	  printf("could not read file, fresult is %d \r\n", fresult);
 80006a8:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <main+0x1dc>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4846      	ldr	r0, [pc, #280]	@ (80007c8 <main+0x1f0>)
 80006b0:	f007 fa16 	bl	8007ae0 <iprintf>
	  while (1);
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <main+0xdc>
  }
  else{
	  printf("successfully read file!\r\n");
 80006b8:	4849      	ldr	r0, [pc, #292]	@ (80007e0 <main+0x208>)
 80006ba:	f007 fa79 	bl	8007bb0 <puts>
	  printf("the recording size is: %lu", recording_size);
 80006be:	4b47      	ldr	r3, [pc, #284]	@ (80007dc <main+0x204>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4847      	ldr	r0, [pc, #284]	@ (80007e4 <main+0x20c>)
 80006c6:	f007 fa0b 	bl	8007ae0 <iprintf>
  }

  fresult = f_read(&fil, samples, 64000, (UINT *)fread_size);
 80006ca:	4b43      	ldr	r3, [pc, #268]	@ (80007d8 <main+0x200>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80006d2:	4945      	ldr	r1, [pc, #276]	@ (80007e8 <main+0x210>)
 80006d4:	483b      	ldr	r0, [pc, #236]	@ (80007c4 <main+0x1ec>)
 80006d6:	f006 fd9d 	bl	8007214 <f_read>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b35      	ldr	r3, [pc, #212]	@ (80007b4 <main+0x1dc>)
 80006e0:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK){
 80006e2:	4b34      	ldr	r3, [pc, #208]	@ (80007b4 <main+0x1dc>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <main+0x122>
	  // do something
	  printf("could read file part 2, fresult is %d \r\n", fresult);
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <main+0x1dc>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	483e      	ldr	r0, [pc, #248]	@ (80007ec <main+0x214>)
 80006f2:	f007 f9f5 	bl	8007ae0 <iprintf>
	  while (1);
 80006f6:	bf00      	nop
 80006f8:	e7fd      	b.n	80006f6 <main+0x11e>
  }
  else{
	  printf("successfully read file part 2!\r\n");
 80006fa:	483d      	ldr	r0, [pc, #244]	@ (80007f0 <main+0x218>)
 80006fc:	f007 fa58 	bl	8007bb0 <puts>
  }

  recording_size /= 2;
 8000700:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <main+0x204>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	4a35      	ldr	r2, [pc, #212]	@ (80007dc <main+0x204>)
 8000708:	6013      	str	r3, [r2, #0]

  printf("============== done file operations!\r\n");
 800070a:	483a      	ldr	r0, [pc, #232]	@ (80007f4 <main+0x21c>)
 800070c:	f007 fa50 	bl	8007bb0 <puts>

  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)samples, 32000);
 8000710:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000714:	4934      	ldr	r1, [pc, #208]	@ (80007e8 <main+0x210>)
 8000716:	4838      	ldr	r0, [pc, #224]	@ (80007f8 <main+0x220>)
 8000718:	f001 fd16 	bl	8002148 <HAL_I2S_Transmit_DMA>
//	        HAL_I2S_DMAStop(&hi2s2);
//	        printf("done DMA transfer \r\n");
//	        break;
//	    }

	    if (half_ready) {
 800071c:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <main+0x224>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d010      	beq.n	8000748 <main+0x170>
	        half_ready = 0;
 8000726:	4b35      	ldr	r3, [pc, #212]	@ (80007fc <main+0x224>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	        UINT bytes_read = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
	        f_read(&fil, &samples[0], 32000, &bytes_read);
 8000730:	463b      	mov	r3, r7
 8000732:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000736:	492c      	ldr	r1, [pc, #176]	@ (80007e8 <main+0x210>)
 8000738:	4822      	ldr	r0, [pc, #136]	@ (80007c4 <main+0x1ec>)
 800073a:	f006 fd6b 	bl	8007214 <f_read>


	        printf("half is ready, read %u bytes r\n", bytes_read);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	482f      	ldr	r0, [pc, #188]	@ (8000800 <main+0x228>)
 8000744:	f007 f9cc 	bl	8007ae0 <iprintf>
	    }

	    if (full_ready) {
 8000748:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <main+0x22c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d017      	beq.n	8000782 <main+0x1aa>
	        full_ready = 0;
 8000752:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <main+0x22c>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
	        UINT bytes_read = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
	        f_read(&fil, &samples[16000], 32000, bytes_read);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000762:	4929      	ldr	r1, [pc, #164]	@ (8000808 <main+0x230>)
 8000764:	4817      	ldr	r0, [pc, #92]	@ (80007c4 <main+0x1ec>)
 8000766:	f006 fd55 	bl	8007214 <f_read>


	        played_size += 64000;
 800076a:	4b28      	ldr	r3, [pc, #160]	@ (800080c <main+0x234>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f503 437a 	add.w	r3, r3, #64000	@ 0xfa00
 8000772:	4a26      	ldr	r2, [pc, #152]	@ (800080c <main+0x234>)
 8000774:	6013      	str	r3, [r2, #0]
	        printf("full is ready, read %u bytes \r\n", fread_size);
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <main+0x200>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4619      	mov	r1, r3
 800077c:	4824      	ldr	r0, [pc, #144]	@ (8000810 <main+0x238>)
 800077e:	f007 f9af 	bl	8007ae0 <iprintf>
	    }

	    if (played_size >= recording_size) {
 8000782:	4b22      	ldr	r3, [pc, #136]	@ (800080c <main+0x234>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <main+0x204>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3c6      	bcc.n	800071c <main+0x144>
	        HAL_I2S_DMAStop(&hi2s2);
 800078e:	481a      	ldr	r0, [pc, #104]	@ (80007f8 <main+0x220>)
 8000790:	f001 fd7e 	bl	8002290 <HAL_I2S_DMAStop>
	        printf("done DMA transfer\n");
 8000794:	481f      	ldr	r0, [pc, #124]	@ (8000814 <main+0x23c>)
 8000796:	f007 fa0b 	bl	8007bb0 <puts>
	        break;
 800079a:	bf00      	nop
 800079c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	08008a68 	.word	0x08008a68
 80007ac:	080088ac 	.word	0x080088ac
 80007b0:	200001e4 	.word	0x200001e4
 80007b4:	20000644 	.word	0x20000644
 80007b8:	08008a74 	.word	0x08008a74
 80007bc:	08008a9c 	.word	0x08008a9c
 80007c0:	08008ab4 	.word	0x08008ab4
 80007c4:	20000414 	.word	0x20000414
 80007c8:	08008abc 	.word	0x08008abc
 80007cc:	08008ae4 	.word	0x08008ae4
 80007d0:	08008b00 	.word	0x08008b00
 80007d4:	08008b28 	.word	0x08008b28
 80007d8:	20010048 	.word	0x20010048
 80007dc:	2001004c 	.word	0x2001004c
 80007e0:	08008b48 	.word	0x08008b48
 80007e4:	08008b64 	.word	0x08008b64
 80007e8:	20000648 	.word	0x20000648
 80007ec:	08008b80 	.word	0x08008b80
 80007f0:	08008bac 	.word	0x08008bac
 80007f4:	08008bcc 	.word	0x08008bcc
 80007f8:	2000009c 	.word	0x2000009c
 80007fc:	20010055 	.word	0x20010055
 8000800:	08008bf4 	.word	0x08008bf4
 8000804:	20010056 	.word	0x20010056
 8000808:	20008348 	.word	0x20008348
 800080c:	20010050 	.word	0x20010050
 8000810:	08008c14 	.word	0x08008c14
 8000814:	08008c34 	.word	0x08008c34

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	@ 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	@ 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f007 faa2 	bl	8007d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a27      	ldr	r2, [pc, #156]	@ (80008e4 <SystemClock_Config+0xcc>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
 800084c:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000864:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <SystemClock_Config+0xd0>)
 8000866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000880:	2310      	movs	r3, #16
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800088c:	2308      	movs	r3, #8
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000898:	2307      	movs	r3, #7
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fab3 	bl	8002e0c <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ac:	f000 f968 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2102      	movs	r1, #2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fd15 	bl	80032fc <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d8:	f000 f952 	bl	8000b80 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	@ 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_I2S2_Init+0x54>)
 80008f2:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <MX_I2S2_Init+0x58>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_I2S2_Init+0x54>)
 80008f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_I2S2_Init+0x54>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000904:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_I2S2_Init+0x54>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_I2S2_Init+0x54>)
 800090c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000910:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_I2S2_Init+0x54>)
 8000914:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000918:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_I2S2_Init+0x54>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_I2S2_Init+0x54>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_I2S2_Init+0x54>)
 8000928:	2201      	movs	r2, #1
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_I2S2_Init+0x54>)
 800092e:	f001 facb 	bl	8001ec8 <HAL_I2S_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000938:	f000 f922 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000009c 	.word	0x2000009c
 8000944:	40003800 	.word	0x40003800

08000948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_SPI1_Init+0x64>)
 800094e:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <MX_SPI1_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_SPI1_Init+0x64>)
 8000954:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_SPI1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_SPI1_Init+0x64>)
 8000974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_SPI1_Init+0x64>)
 800097c:	2238      	movs	r2, #56	@ 0x38
 800097e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <MX_SPI1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_SPI1_Init+0x64>)
 8000994:	220a      	movs	r2, #10
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_SPI1_Init+0x64>)
 800099a:	f003 f81d 	bl	80039d8 <HAL_SPI_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a4:	f000 f8ec 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000144 	.word	0x20000144
 80009b0:	40013000 	.word	0x40013000

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_USART2_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ec:	f003 fc46 	bl	800427c <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f8c3 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000019c 	.word	0x2000019c
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_DMA_Init+0x3c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <MX_DMA_Init+0x3c>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_DMA_Init+0x3c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 fc95 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a34:	200f      	movs	r0, #15
 8000a36:	f000 fcae 	bl	8001396 <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a28      	ldr	r2, [pc, #160]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a21      	ldr	r2, [pc, #132]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_GPIO_Init+0xc0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <MX_GPIO_Init+0xc4>)
 8000ad4:	f001 f9de 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2120      	movs	r1, #32
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <MX_GPIO_Init+0xc4>)
 8000ade:	f001 f9d9 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LD3_Pin;
 8000ae2:	2330      	movs	r3, #48	@ 0x30
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_GPIO_Init+0xc4>)
 8000afa:	f001 f847 	bl	8001b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	@ 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef * hi2s){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	callback_result = HALF_COMPLETED;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
	half_ready = 1;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	printf("HALF callback\r\n");
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8000b26:	f007 f843 	bl	8007bb0 <puts>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20010054 	.word	0x20010054
 8000b38:	20010055 	.word	0x20010055
 8000b3c:	08008c48 	.word	0x08008c48

08000b40 <HAL_I2S_TxCpltCallback>:



void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef * hi2s){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	// whenever called, 32000 samples already got played
	full_ready = 1;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_I2S_TxCpltCallback+0x30>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
	callback_result = FULL_COMPLETED;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_I2S_TxCpltCallback+0x34>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	701a      	strb	r2, [r3, #0]
	played_size += 32000;
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_I2S_TxCpltCallback+0x38>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8000b5c:	4a06      	ldr	r2, [pc, #24]	@ (8000b78 <HAL_I2S_TxCpltCallback+0x38>)
 8000b5e:	6013      	str	r3, [r2, #0]
	printf("FULL callback\r\n");
 8000b60:	4806      	ldr	r0, [pc, #24]	@ (8000b7c <HAL_I2S_TxCpltCallback+0x3c>)
 8000b62:	f007 f825 	bl	8007bb0 <puts>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20010056 	.word	0x20010056
 8000b74:	20010054 	.word	0x20010054
 8000b78:	20010050 	.word	0x20010050
 8000b7c:	08008c58 	.word	0x08008c58

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	@ 0x40
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a51      	ldr	r2, [pc, #324]	@ (8000d50 <HAL_I2S_MspInit+0x174>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f040 809b 	bne.w	8000d46 <HAL_I2S_MspInit+0x16a>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c14:	23c0      	movs	r3, #192	@ 0xc0
 8000c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fd8b 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8000c2c:	f7ff ffa8 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a46      	ldr	r2, [pc, #280]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	4b40      	ldr	r3, [pc, #256]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c54:	4a3f      	ldr	r2, [pc, #252]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b39      	ldr	r3, [pc, #228]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	4a38      	ldr	r2, [pc, #224]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c78:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <HAL_I2S_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c84:	2304      	movs	r3, #4
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c94:	2306      	movs	r3, #6
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	482e      	ldr	r0, [pc, #184]	@ (8000d58 <HAL_I2S_MspInit+0x17c>)
 8000ca0:	f000 ff74 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ca4:	2348      	movs	r3, #72	@ 0x48
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4826      	ldr	r0, [pc, #152]	@ (8000d58 <HAL_I2S_MspInit+0x17c>)
 8000cc0:	f000 ff64 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cc4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481e      	ldr	r0, [pc, #120]	@ (8000d5c <HAL_I2S_MspInit+0x180>)
 8000ce2:	f000 ff53 	bl	8001b8c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <HAL_I2S_MspInit+0x188>)
 8000cea:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000cf4:	2240      	movs	r2, #64	@ 0x40
 8000cf6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d04:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d0c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d14:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d2a:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d2c:	f000 fb4e 	bl	80013cc <HAL_DMA_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_I2S_MspInit+0x15e>
    {
      Error_Handler();
 8000d36:	f7ff ff23 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_I2S_MspInit+0x184>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000d46:	bf00      	nop
 8000d48:	3740      	adds	r7, #64	@ 0x40
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40003800 	.word	0x40003800
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	200000e4 	.word	0x200000e4
 8000d64:	40026070 	.word	0x40026070

08000d68 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <HAL_SPI_MspInit+0xc0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d149      	bne.n	8000e1e <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a26      	ldr	r2, [pc, #152]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000d94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a1f      	ldr	r2, [pc, #124]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a18      	ldr	r2, [pc, #96]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_SPI_MspInit+0xc4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dde:	23c0      	movs	r3, #192	@ 0xc0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <HAL_SPI_MspInit+0xc8>)
 8000dfa:	f000 fec7 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <HAL_SPI_MspInit+0xcc>)
 8000e1a:	f000 feb7 	bl	8001b8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400

08000e38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <HAL_UART_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12b      	bne.n	8000eb2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e92:	230c      	movs	r3, #12
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <HAL_UART_MspInit+0x8c>)
 8000eae:	f000 fe6d 	bl	8001b8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	@ 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f923 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <DMA1_Stream4_IRQHandler+0x10>)
 8000f2e:	f000 fbc3 	bl	80016b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000e4 	.word	0x200000e4

08000f3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f4e:	f3af 8000 	nop.w
 8000f52:	4601      	mov	r1, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf0      	blt.n	8000f4e <_read+0x12>
  }

  return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_isatty>:

int _isatty(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f006 fefc 	bl	8007e0c <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20018000 	.word	0x20018000
 8001040:	00000400 	.word	0x00000400
 8001044:	20010058 	.word	0x20010058
 8001048:	200101f8 	.word	0x200101f8

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800109e:	f006 febb 	bl	8007e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fa99 	bl	80005d8 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010b4:	08008d90 	.word	0x08008d90
  ldr r2, =_sbss
 80010b8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010bc:	200101f4 	.word	0x200101f4

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f92b 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fd48 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f943 	bl	80013b2 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f90b 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008
 800118c:	2001005c 	.word	0x2001005c

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2001005c 	.word	0x2001005c

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	@ (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	@ (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff feda 	bl	8001190 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e099      	b.n	800151c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001408:	e00f      	b.n	800142a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140a:	f7ff fec1 	bl	8001190 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b05      	cmp	r3, #5
 8001416:	d908      	bls.n	800142a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e078      	b.n	800151c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e8      	bne.n	800140a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <HAL_DMA_Init+0x158>)
 8001444:	4013      	ands	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	2b04      	cmp	r3, #4
 8001482:	d107      	bne.n	8001494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4313      	orrs	r3, r2
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d117      	bne.n	80014ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00e      	beq.n	80014ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fadf 	bl	8001a94 <DMA_CheckFifoParam>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2240      	movs	r2, #64	@ 0x40
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80014ea:	2301      	movs	r3, #1
 80014ec:	e016      	b.n	800151c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fa96 	bl	8001a28 <DMA_CalcBaseAndBitshift>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001504:	223f      	movs	r2, #63	@ 0x3f
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	f010803f 	.word	0xf010803f

08001528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_DMA_Start_IT+0x26>
 800154a:	2302      	movs	r3, #2
 800154c:	e040      	b.n	80015d0 <HAL_DMA_Start_IT+0xa8>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d12f      	bne.n	80015c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fa28 	bl	80019cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	223f      	movs	r2, #63	@ 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0216 	orr.w	r2, r2, #22
 8001596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0208 	orr.w	r2, r2, #8
 80015ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e005      	b.n	80015ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015e6:	f7ff fdd3 	bl	8001190 <HAL_GetTick>
 80015ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e052      	b.n	80016b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0216 	bic.w	r2, r2, #22
 8001618:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001628:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <HAL_DMA_Abort+0x62>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165a:	e013      	b.n	8001684 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165c:	f7ff fd98 	bl	8001190 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b05      	cmp	r3, #5
 8001668:	d90c      	bls.n	8001684 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2220      	movs	r2, #32
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e015      	b.n	80016b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e4      	bne.n	800165c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001696:	223f      	movs	r2, #63	@ 0x3f
 8001698:	409a      	lsls	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001900 <HAL_DMA_IRQHandler+0x248>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001904 <HAL_DMA_IRQHandler+0x24c>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0a9b      	lsrs	r3, r3, #10
 80016d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e2:	2208      	movs	r2, #8
 80016e4:	409a      	lsls	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d01a      	beq.n	8001724 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0204 	bic.w	r2, r2, #4
 800170a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001710:	2208      	movs	r2, #8
 8001712:	409a      	lsls	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001728:	2201      	movs	r2, #1
 800172a:	409a      	lsls	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d012      	beq.n	800175a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001746:	2201      	movs	r2, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001752:	f043 0202 	orr.w	r2, r3, #2
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175e:	2204      	movs	r2, #4
 8001760:	409a      	lsls	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d012      	beq.n	8001790 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00b      	beq.n	8001790 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	2204      	movs	r2, #4
 800177e:	409a      	lsls	r2, r3
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001788:	f043 0204 	orr.w	r2, r3, #4
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001794:	2210      	movs	r2, #16
 8001796:	409a      	lsls	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d043      	beq.n	8001828 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03c      	beq.n	8001828 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b2:	2210      	movs	r2, #16
 80017b4:	409a      	lsls	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d018      	beq.n	80017fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d108      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d024      	beq.n	8001828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
 80017e6:	e01f      	b.n	8001828 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01b      	beq.n	8001828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
 80017f8:	e016      	b.n	8001828 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d107      	bne.n	8001818 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0208 	bic.w	r2, r2, #8
 8001816:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182c:	2220      	movs	r2, #32
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 808f 	beq.w	8001958 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8087 	beq.w	8001958 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184e:	2220      	movs	r2, #32
 8001850:	409a      	lsls	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b05      	cmp	r3, #5
 8001860:	d136      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0216 	bic.w	r2, r2, #22
 8001870:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001880:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d103      	bne.n	8001892 <HAL_DMA_IRQHandler+0x1da>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0208 	bic.w	r2, r2, #8
 80018a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a6:	223f      	movs	r2, #63	@ 0x3f
 80018a8:	409a      	lsls	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d07e      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
        }
        return;
 80018ce:	e079      	b.n	80019c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01d      	beq.n	800191a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10d      	bne.n	8001908 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d031      	beq.n	8001958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
 80018fc:	e02c      	b.n	8001958 <HAL_DMA_IRQHandler+0x2a0>
 80018fe:	bf00      	nop
 8001900:	20000000 	.word	0x20000000
 8001904:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d023      	beq.n	8001958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
 8001918:	e01e      	b.n	8001958 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10f      	bne.n	8001948 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0210 	bic.w	r2, r2, #16
 8001936:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195c:	2b00      	cmp	r3, #0
 800195e:	d032      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d022      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2205      	movs	r2, #5
 8001970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	3301      	adds	r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	d307      	bcc.n	80019a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f2      	bne.n	8001984 <HAL_DMA_IRQHandler+0x2cc>
 800199e:	e000      	b.n	80019a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
 80019c2:	e000      	b.n	80019c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019c4:	bf00      	nop
    }
  }
}
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b40      	cmp	r3, #64	@ 0x40
 80019f8:	d108      	bne.n	8001a0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a0a:	e007      	b.n	8001a1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	3b10      	subs	r3, #16
 8001a38:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <DMA_CalcBaseAndBitshift+0x64>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a42:	4a13      	ldr	r2, [pc, #76]	@ (8001a90 <DMA_CalcBaseAndBitshift+0x68>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d909      	bls.n	8001a6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	1d1a      	adds	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a68:	e007      	b.n	8001a7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	aaaaaaab 	.word	0xaaaaaaab
 8001a90:	08008cc4 	.word	0x08008cc4

08001a94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d11f      	bne.n	8001aee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d856      	bhi.n	8001b62 <DMA_CheckFifoParam+0xce>
 8001ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <DMA_CheckFifoParam+0x28>)
 8001ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aba:	bf00      	nop
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001adf 	.word	0x08001adf
 8001ac4:	08001acd 	.word	0x08001acd
 8001ac8:	08001b63 	.word	0x08001b63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d046      	beq.n	8001b66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001adc:	e043      	b.n	8001b66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ae6:	d140      	bne.n	8001b6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aec:	e03d      	b.n	8001b6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001af6:	d121      	bne.n	8001b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d837      	bhi.n	8001b6e <DMA_CheckFifoParam+0xda>
 8001afe:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <DMA_CheckFifoParam+0x70>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b1b 	.word	0x08001b1b
 8001b0c:	08001b15 	.word	0x08001b15
 8001b10:	08001b2d 	.word	0x08001b2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
      break;
 8001b18:	e030      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d025      	beq.n	8001b72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b2a:	e022      	b.n	8001b72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b34:	d11f      	bne.n	8001b76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b3a:	e01c      	b.n	8001b76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d903      	bls.n	8001b4a <DMA_CheckFifoParam+0xb6>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d003      	beq.n	8001b50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b48:	e018      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4e:	e015      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00e      	beq.n	8001b7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b60:	e00b      	b.n	8001b7a <DMA_CheckFifoParam+0xe6>
      break;
 8001b62:	bf00      	nop
 8001b64:	e00a      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      break;
 8001b66:	bf00      	nop
 8001b68:	e008      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      break;
 8001b6a:	bf00      	nop
 8001b6c:	e006      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e004      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      break;
 8001b72:	bf00      	nop
 8001b74:	e002      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b76:	bf00      	nop
 8001b78:	e000      	b.n	8001b7c <DMA_CheckFifoParam+0xe8>
      break;
 8001b7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e159      	b.n	8001e5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8148 	bne.w	8001e56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a2 	beq.w	8001e56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b57      	ldr	r3, [pc, #348]	@ (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a56      	ldr	r2, [pc, #344]	@ (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b54      	ldr	r3, [pc, #336]	@ (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_GPIO_Init+0x2ec>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a49      	ldr	r2, [pc, #292]	@ (8001e7c <HAL_GPIO_Init+0x2f0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x202>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a48      	ldr	r2, [pc, #288]	@ (8001e80 <HAL_GPIO_Init+0x2f4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x1fe>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a47      	ldr	r2, [pc, #284]	@ (8001e84 <HAL_GPIO_Init+0x2f8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x1fa>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a46      	ldr	r2, [pc, #280]	@ (8001e88 <HAL_GPIO_Init+0x2fc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x1f6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a45      	ldr	r2, [pc, #276]	@ (8001e8c <HAL_GPIO_Init+0x300>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x1f2>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e008      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f002 0203 	and.w	r2, r2, #3
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da0:	4935      	ldr	r1, [pc, #212]	@ (8001e78 <HAL_GPIO_Init+0x2ec>)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e26:	4a1a      	ldr	r2, [pc, #104]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e50:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	f67f aea2 	bls.w	8001ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e128      	b.n	800212c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a90      	ldr	r2, [pc, #576]	@ (8002134 <HAL_I2S_Init+0x26c>)
 8001ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7fe fe71 	bl	8000bdc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001f10:	f023 030f 	bic.w	r3, r3, #15
 8001f14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d060      	beq.n	8001fe8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001f2e:	2310      	movs	r3, #16
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e001      	b.n	8001f38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d802      	bhi.n	8001f46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f001 fce6 	bl	8003918 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f56:	d125      	bne.n	8001fa4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d010      	beq.n	8001f82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	461a      	mov	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	3305      	adds	r3, #5
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	e01f      	b.n	8001fc2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	461a      	mov	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	3305      	adds	r3, #5
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e00e      	b.n	8001fc2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	3305      	adds	r3, #5
 8001fc0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4a5c      	ldr	r2, [pc, #368]	@ (8002138 <HAL_I2S_Init+0x270>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	08db      	lsrs	r3, r3, #3
 8001fcc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	e003      	b.n	8001ff0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d902      	bls.n	8001ffc <HAL_I2S_Init+0x134>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2bff      	cmp	r3, #255	@ 0xff
 8001ffa:	d907      	bls.n	800200c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002000:	f043 0210 	orr.w	r2, r3, #16
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e08f      	b.n	800212c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	ea42 0103 	orr.w	r1, r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	430a      	orrs	r2, r1
 800201e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800202a:	f023 030f 	bic.w	r3, r3, #15
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6851      	ldr	r1, [r2, #4]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6892      	ldr	r2, [r2, #8]
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68d2      	ldr	r2, [r2, #12]
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6992      	ldr	r2, [r2, #24]
 8002042:	430a      	orrs	r2, r1
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d161      	bne.n	800211c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a38      	ldr	r2, [pc, #224]	@ (800213c <HAL_I2S_Init+0x274>)
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a37      	ldr	r2, [pc, #220]	@ (8002140 <HAL_I2S_Init+0x278>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_I2S_Init+0x1a4>
 8002068:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <HAL_I2S_Init+0x27c>)
 800206a:	e001      	b.n	8002070 <HAL_I2S_Init+0x1a8>
 800206c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	4932      	ldr	r1, [pc, #200]	@ (8002140 <HAL_I2S_Init+0x278>)
 8002078:	428a      	cmp	r2, r1
 800207a:	d101      	bne.n	8002080 <HAL_I2S_Init+0x1b8>
 800207c:	4a31      	ldr	r2, [pc, #196]	@ (8002144 <HAL_I2S_Init+0x27c>)
 800207e:	e001      	b.n	8002084 <HAL_I2S_Init+0x1bc>
 8002080:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002084:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002088:	f023 030f 	bic.w	r3, r3, #15
 800208c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2b      	ldr	r2, [pc, #172]	@ (8002140 <HAL_I2S_Init+0x278>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_I2S_Init+0x1d4>
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <HAL_I2S_Init+0x27c>)
 800209a:	e001      	b.n	80020a0 <HAL_I2S_Init+0x1d8>
 800209c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020a0:	2202      	movs	r2, #2
 80020a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <HAL_I2S_Init+0x278>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_I2S_Init+0x1ea>
 80020ae:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <HAL_I2S_Init+0x27c>)
 80020b0:	e001      	b.n	80020b6 <HAL_I2S_Init+0x1ee>
 80020b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020c2:	d003      	beq.n	80020cc <HAL_I2S_Init+0x204>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80020cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	e001      	b.n	80020d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002104:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <HAL_I2S_Init+0x278>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_I2S_Init+0x24c>
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_I2S_Init+0x27c>)
 8002112:	e001      	b.n	8002118 <HAL_I2S_Init+0x250>
 8002114:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002118:	897a      	ldrh	r2, [r7, #10]
 800211a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	080027d1 	.word	0x080027d1
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	08002959 	.word	0x08002959
 8002140:	40003800 	.word	0x40003800
 8002144:	40003400 	.word	0x40003400

08002148 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_I2S_Transmit_DMA+0x1a>
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e08a      	b.n	800227c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	e082      	b.n	800227c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_I2S_Transmit_DMA+0x3e>
 8002182:	2302      	movs	r3, #2
 8002184:	e07a      	b.n	800227c <HAL_I2S_Transmit_DMA+0x134>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d002      	beq.n	80021ba <HAL_I2S_Transmit_DMA+0x72>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d10a      	bne.n	80021d0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021ce:	e005      	b.n	80021dc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	88fa      	ldrh	r2, [r7, #6]
 80021d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	88fa      	ldrh	r2, [r7, #6]
 80021da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e0:	4a28      	ldr	r2, [pc, #160]	@ (8002284 <HAL_I2S_Transmit_DMA+0x13c>)
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e8:	4a27      	ldr	r2, [pc, #156]	@ (8002288 <HAL_I2S_Transmit_DMA+0x140>)
 80021ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f0:	4a26      	ldr	r2, [pc, #152]	@ (800228c <HAL_I2S_Transmit_DMA+0x144>)
 80021f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80021fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002204:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800220c:	f7ff f98c 	bl	8001528 <HAL_DMA_Start_IT>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00f      	beq.n	8002236 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f043 0208 	orr.w	r2, r3, #8
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e022      	b.n	800227c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0202 	orr.w	r2, r2, #2
 800225a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002278:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	080026af 	.word	0x080026af
 8002288:	0800266d 	.word	0x0800266d
 800228c:	080026cb 	.word	0x080026cb

08002290 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022a4:	d004      	beq.n	80022b0 <HAL_I2S_DMAStop+0x20>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80d1 	bne.w	8002452 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00f      	beq.n	80022d8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f98b 	bl	80015d8 <HAL_DMA_Abort>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022cc:	f043 0208 	orr.w	r2, r3, #8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80022d8:	2364      	movs	r3, #100	@ 0x64
 80022da:	2201      	movs	r2, #1
 80022dc:	2102      	movs	r1, #2
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fb00 	bl	80028e4 <I2S_WaitFlagStateUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002302:	2364      	movs	r3, #100	@ 0x64
 8002304:	2200      	movs	r2, #0
 8002306:	2180      	movs	r1, #128	@ 0x80
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 faeb 	bl	80028e4 <I2S_WaitFlagStateUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00b      	beq.n	800232c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800233a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0202 	bic.w	r2, r2, #2
 8002358:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b05      	cmp	r3, #5
 8002364:	f040 8165 	bne.w	8002632 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00f      	beq.n	8002390 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f92f 	bl	80015d8 <HAL_DMA_Abort>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002384:	f043 0208 	orr.w	r2, r3, #8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a8a      	ldr	r2, [pc, #552]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_I2S_DMAStop+0x10e>
 800239a:	4b8a      	ldr	r3, [pc, #552]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 800239c:	e001      	b.n	80023a2 <HAL_I2S_DMAStop+0x112>
 800239e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4985      	ldr	r1, [pc, #532]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 80023aa:	428b      	cmp	r3, r1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2S_DMAStop+0x122>
 80023ae:	4b85      	ldr	r3, [pc, #532]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 80023b0:	e001      	b.n	80023b6 <HAL_I2S_DMAStop+0x126>
 80023b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ba:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a7e      	ldr	r2, [pc, #504]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_I2S_DMAStop+0x13e>
 80023ca:	4b7e      	ldr	r3, [pc, #504]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 80023cc:	e001      	b.n	80023d2 <HAL_I2S_DMAStop+0x142>
 80023ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a79      	ldr	r2, [pc, #484]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_I2S_DMAStop+0x154>
 80023e0:	4b78      	ldr	r3, [pc, #480]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 80023e2:	e001      	b.n	80023e8 <HAL_I2S_DMAStop+0x158>
 80023e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a73      	ldr	r2, [pc, #460]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_I2S_DMAStop+0x16c>
 80023f8:	4b72      	ldr	r3, [pc, #456]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 80023fa:	e001      	b.n	8002400 <HAL_I2S_DMAStop+0x170>
 80023fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	496e      	ldr	r1, [pc, #440]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 8002408:	428b      	cmp	r3, r1
 800240a:	d101      	bne.n	8002410 <HAL_I2S_DMAStop+0x180>
 800240c:	4b6d      	ldr	r3, [pc, #436]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 800240e:	e001      	b.n	8002414 <HAL_I2S_DMAStop+0x184>
 8002410:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800243a:	e0fa      	b.n	8002632 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a5f      	ldr	r2, [pc, #380]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_I2S_DMAStop+0x1ba>
 8002446:	4b5f      	ldr	r3, [pc, #380]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 8002448:	e001      	b.n	800244e <HAL_I2S_DMAStop+0x1be>
 800244a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800244e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002450:	e0ef      	b.n	8002632 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800245a:	d005      	beq.n	8002468 <HAL_I2S_DMAStop+0x1d8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002464:	f040 80e5 	bne.w	8002632 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00f      	beq.n	8002490 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f8af 	bl	80015d8 <HAL_DMA_Abort>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002484:	f043 0208 	orr.w	r2, r3, #8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b05      	cmp	r3, #5
 800249a:	f040 809a 	bne.w	80025d2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00f      	beq.n	80024c6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f894 	bl	80015d8 <HAL_DMA_Abort>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f043 0208 	orr.w	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80024c6:	f7fe fe63 	bl	8001190 <HAL_GetTick>
 80024ca:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80024cc:	e012      	b.n	80024f4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80024ce:	f7fe fe5f 	bl	8001190 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	@ 0x64
 80024da:	d90b      	bls.n	80024f4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_I2S_DMAStop+0x272>
 80024fe:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 8002500:	e001      	b.n	8002506 <HAL_I2S_DMAStop+0x276>
 8002502:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d1de      	bne.n	80024ce <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002510:	e012      	b.n	8002538 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002512:	f7fe fe3d 	bl	8001190 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	@ 0x64
 800251e:	d90b      	bls.n	8002538 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a20      	ldr	r2, [pc, #128]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_I2S_DMAStop+0x2b6>
 8002542:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 8002544:	e001      	b.n	800254a <HAL_I2S_DMAStop+0x2ba>
 8002546:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002550:	2b80      	cmp	r3, #128	@ 0x80
 8002552:	d0de      	beq.n	8002512 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_I2S_DMAStop+0x2d2>
 800255e:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 8002560:	e001      	b.n	8002566 <HAL_I2S_DMAStop+0x2d6>
 8002562:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4914      	ldr	r1, [pc, #80]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 800256e:	428b      	cmp	r3, r1
 8002570:	d101      	bne.n	8002576 <HAL_I2S_DMAStop+0x2e6>
 8002572:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 8002574:	e001      	b.n	800257a <HAL_I2S_DMAStop+0x2ea>
 8002576:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800257a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_I2S_DMAStop+0x302>
 800258e:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 8002590:	e001      	b.n	8002596 <HAL_I2S_DMAStop+0x306>
 8002592:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_I2S_DMAStop+0x31a>
 80025a6:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 80025a8:	e001      	b.n	80025ae <HAL_I2S_DMAStop+0x31e>
 80025aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4902      	ldr	r1, [pc, #8]	@ (80025c0 <HAL_I2S_DMAStop+0x330>)
 80025b6:	428b      	cmp	r3, r1
 80025b8:	d106      	bne.n	80025c8 <HAL_I2S_DMAStop+0x338>
 80025ba:	4b02      	ldr	r3, [pc, #8]	@ (80025c4 <HAL_I2S_DMAStop+0x334>)
 80025bc:	e006      	b.n	80025cc <HAL_I2S_DMAStop+0x33c>
 80025be:	bf00      	nop
 80025c0:	40003800 	.word	0x40003800
 80025c4:	40003400 	.word	0x40003400
 80025c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025cc:	f022 0202 	bic.w	r2, r2, #2
 80025d0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002610:	d10c      	bne.n	800262c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77fb      	strb	r3, [r7, #31]
 800262a:	e002      	b.n	8002632 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800263a:	7ffb      	ldrb	r3, [r7, #31]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002678:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0202 	bic.w	r2, r2, #2
 8002690:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7fe fa4d 	bl	8000b40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7fe fa27 	bl	8000b10 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0203 	bic.w	r2, r2, #3
 80026e6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	f043 0208 	orr.w	r2, r3, #8
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff ffa5 	bl	8002658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	881a      	ldrh	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	1c9a      	adds	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10e      	bne.n	800276a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800275a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7fe f9eb 	bl	8000b40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	b292      	uxth	r2, r2
 8002786:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	1c9a      	adds	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10e      	bne.n	80027c8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff3e 	bl	8002644 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d13a      	bne.n	8002862 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d109      	bne.n	800280a <I2S_IRQHandler+0x3a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002800:	2b40      	cmp	r3, #64	@ 0x40
 8002802:	d102      	bne.n	800280a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ffb4 	bl	8002772 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002810:	2b40      	cmp	r3, #64	@ 0x40
 8002812:	d126      	bne.n	8002862 <I2S_IRQHandler+0x92>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b20      	cmp	r3, #32
 8002820:	d11f      	bne.n	8002862 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002830:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fefb 	bl	8002658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b03      	cmp	r3, #3
 800286c:	d136      	bne.n	80028dc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d109      	bne.n	800288c <I2S_IRQHandler+0xbc>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	d102      	bne.n	800288c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ff45 	bl	8002716 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b08      	cmp	r3, #8
 8002894:	d122      	bne.n	80028dc <I2S_IRQHandler+0x10c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d11b      	bne.n	80028dc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028b2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f043 0204 	orr.w	r2, r3, #4
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff febe 	bl	8002658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028dc:	bf00      	nop
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f4:	f7fe fc4c 	bl	8001190 <HAL_GetTick>
 80028f8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80028fa:	e018      	b.n	800292e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d014      	beq.n	800292e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002904:	f7fe fc44 	bl	8001190 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d902      	bls.n	800291a <I2S_WaitFlagStateUntilTimeout+0x36>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e00f      	b.n	800294e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	429a      	cmp	r2, r3
 800294a:	d1d7      	bne.n	80028fc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a92      	ldr	r2, [pc, #584]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002972:	4b92      	ldr	r3, [pc, #584]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002974:	e001      	b.n	800297a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a8b      	ldr	r2, [pc, #556]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002990:	4b8a      	ldr	r3, [pc, #552]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002992:	e001      	b.n	8002998 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029a4:	d004      	beq.n	80029b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 8099 	bne.w	8002ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f925 	bl	8002c14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9c8 	bl	8002d74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ea:	2b40      	cmp	r3, #64	@ 0x40
 80029ec:	d13a      	bne.n	8002a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d035      	beq.n	8002a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002a02:	4b6e      	ldr	r3, [pc, #440]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a04:	e001      	b.n	8002a0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002a06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4969      	ldr	r1, [pc, #420]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a12:	428b      	cmp	r3, r1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a16:	4b69      	ldr	r3, [pc, #420]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a18:	e001      	b.n	8002a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f043 0202 	orr.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fdfa 	bl	8002658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	f040 80c3 	bne.w	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80bd 	beq.w	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a49      	ldr	r2, [pc, #292]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a96:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a98:	e001      	b.n	8002a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4944      	ldr	r1, [pc, #272]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002aa6:	428b      	cmp	r3, r1
 8002aa8:	d101      	bne.n	8002aae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002aaa:	4b44      	ldr	r3, [pc, #272]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002aac:	e001      	b.n	8002ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002aae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ab2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ab6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fdbc 	bl	8002658 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ae0:	e089      	b.n	8002bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d107      	bne.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8be 	bl	8002c78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8fd 	bl	8002d10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d12f      	bne.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02a      	beq.n	8002b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b46:	e001      	b.n	8002b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4919      	ldr	r1, [pc, #100]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d101      	bne.n	8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b58:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b5a:	e001      	b.n	8002b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fd6c 	bl	8002658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d136      	bne.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d031      	beq.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a07      	ldr	r2, [pc, #28]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ba0:	e001      	b.n	8002ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ba2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4902      	ldr	r1, [pc, #8]	@ (8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bae:	428b      	cmp	r3, r1
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002bb2:	4b02      	ldr	r3, [pc, #8]	@ (8002bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bb4:	e006      	b.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002bb6:	bf00      	nop
 8002bb8:	40003800 	.word	0x40003800
 8002bbc:	40003400 	.word	0x40003400
 8002bc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bc8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fd32 	bl	8002658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bf4:	e000      	b.n	8002bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bf6:	bf00      	nop
}
 8002bf8:	bf00      	nop
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c99      	adds	r1, r3, #2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6251      	str	r1, [r2, #36]	@ 0x24
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d113      	bne.n	8002c6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffc9 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	1c99      	adds	r1, r3, #2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6251      	str	r1, [r2, #36]	@ 0x24
 8002c8a:	8819      	ldrh	r1, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <I2SEx_TxISR_I2SExt+0x90>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <I2SEx_TxISR_I2SExt+0x22>
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <I2SEx_TxISR_I2SExt+0x94>)
 8002c98:	e001      	b.n	8002c9e <I2SEx_TxISR_I2SExt+0x26>
 8002c9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c9e:	460a      	mov	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d121      	bne.n	8002cfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <I2SEx_TxISR_I2SExt+0x90>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <I2SEx_TxISR_I2SExt+0x50>
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <I2SEx_TxISR_I2SExt+0x94>)
 8002cc6:	e001      	b.n	8002ccc <I2SEx_TxISR_I2SExt+0x54>
 8002cc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	490d      	ldr	r1, [pc, #52]	@ (8002d08 <I2SEx_TxISR_I2SExt+0x90>)
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	d101      	bne.n	8002cdc <I2SEx_TxISR_I2SExt+0x64>
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <I2SEx_TxISR_I2SExt+0x94>)
 8002cda:	e001      	b.n	8002ce0 <I2SEx_TxISR_I2SExt+0x68>
 8002cdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ce0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ce4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff81 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40003800 	.word	0x40003800
 8002d0c:	40003400 	.word	0x40003400

08002d10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68d8      	ldr	r0, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	1c99      	adds	r1, r3, #2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002d28:	b282      	uxth	r2, r0
 8002d2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d113      	bne.n	8002d6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ff4a 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a20      	ldr	r2, [pc, #128]	@ (8002e04 <I2SEx_RxISR_I2SExt+0x90>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <I2SEx_RxISR_I2SExt+0x16>
 8002d86:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <I2SEx_RxISR_I2SExt+0x94>)
 8002d88:	e001      	b.n	8002d8e <I2SEx_RxISR_I2SExt+0x1a>
 8002d8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d8e:	68d8      	ldr	r0, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	1c99      	adds	r1, r3, #2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002d9a:	b282      	uxth	r2, r0
 8002d9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d121      	bne.n	8002dfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <I2SEx_RxISR_I2SExt+0x90>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d101      	bne.n	8002dc4 <I2SEx_RxISR_I2SExt+0x50>
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <I2SEx_RxISR_I2SExt+0x94>)
 8002dc2:	e001      	b.n	8002dc8 <I2SEx_RxISR_I2SExt+0x54>
 8002dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	490d      	ldr	r1, [pc, #52]	@ (8002e04 <I2SEx_RxISR_I2SExt+0x90>)
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d101      	bne.n	8002dd8 <I2SEx_RxISR_I2SExt+0x64>
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <I2SEx_RxISR_I2SExt+0x94>)
 8002dd6:	e001      	b.n	8002ddc <I2SEx_RxISR_I2SExt+0x68>
 8002dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ddc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002de0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff03 	bl	8002c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40003800 	.word	0x40003800
 8002e08:	40003400 	.word	0x40003400

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e267      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d075      	beq.n	8002f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e2a:	4b88      	ldr	r3, [pc, #544]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d00c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e36:	4b85      	ldr	r3, [pc, #532]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d112      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e42:	4b82      	ldr	r3, [pc, #520]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4e:	d10b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4b7e      	ldr	r3, [pc, #504]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d05b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x108>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d157      	bne.n	8002f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e242      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x74>
 8002e72:	4b76      	ldr	r3, [pc, #472]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x98>
 8002e8a:	4b70      	ldr	r3, [pc, #448]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6d      	ldr	r3, [pc, #436]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002ea4:	4b69      	ldr	r3, [pc, #420]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a68      	ldr	r2, [pc, #416]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a65      	ldr	r2, [pc, #404]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f964 	bl	8001190 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe f960 	bl	8001190 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e207      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5b      	ldr	r3, [pc, #364]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xc0>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe f950 	bl	8001190 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe f94c 	bl	8001190 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1f3      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b51      	ldr	r3, [pc, #324]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xe8>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f22:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2e:	4b47      	ldr	r3, [pc, #284]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b44      	ldr	r3, [pc, #272]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b41      	ldr	r3, [pc, #260]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c7      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4937      	ldr	r1, [pc, #220]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x244>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe f905 	bl	8001190 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe f901 	bl	8001190 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a8      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b28      	ldr	r3, [pc, #160]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4925      	ldr	r1, [pc, #148]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b24      	ldr	r3, [pc, #144]	@ (8003050 <HAL_RCC_OscConfig+0x244>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe f8e4 	bl	8001190 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fe f8e0 	bl	8001190 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e187      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d036      	beq.n	8003064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <HAL_RCC_OscConfig+0x248>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe f8c4 	bl	8001190 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7fe f8c0 	bl	8001190 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e167      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8003020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x200>
 800302a:	e01b      	b.n	8003064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCC_OscConfig+0x248>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fe f8ad 	bl	8001190 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	e00e      	b.n	8003058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe f8a9 	bl	8001190 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d907      	bls.n	8003058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e150      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
 800304c:	40023800 	.word	0x40023800
 8003050:	42470000 	.word	0x42470000
 8003054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	4b88      	ldr	r3, [pc, #544]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800305a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ea      	bne.n	800303a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8097 	beq.w	80031a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003076:	4b81      	ldr	r3, [pc, #516]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	4b7d      	ldr	r3, [pc, #500]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	4a7c      	ldr	r2, [pc, #496]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003090:	6413      	str	r3, [r2, #64]	@ 0x40
 8003092:	4b7a      	ldr	r3, [pc, #488]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b77      	ldr	r3, [pc, #476]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d118      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b74      	ldr	r3, [pc, #464]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a73      	ldr	r2, [pc, #460]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe f869 	bl	8001190 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fe f865 	bl	8001190 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e10c      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2ea>
 80030e8:	4b64      	ldr	r3, [pc, #400]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4a63      	ldr	r2, [pc, #396]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f4:	e01c      	b.n	8003130 <HAL_RCC_OscConfig+0x324>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x30c>
 80030fe:	4b5f      	ldr	r3, [pc, #380]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003102:	4a5e      	ldr	r2, [pc, #376]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6713      	str	r3, [r2, #112]	@ 0x70
 800310a:	4b5c      	ldr	r3, [pc, #368]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310e:	4a5b      	ldr	r2, [pc, #364]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6713      	str	r3, [r2, #112]	@ 0x70
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0x324>
 8003118:	4b58      	ldr	r3, [pc, #352]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	4a57      	ldr	r2, [pc, #348]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6713      	str	r3, [r2, #112]	@ 0x70
 8003124:	4b55      	ldr	r3, [pc, #340]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	4a54      	ldr	r2, [pc, #336]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800312a:	f023 0304 	bic.w	r3, r3, #4
 800312e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d015      	beq.n	8003164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe f82a 	bl	8001190 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe f826 	bl	8001190 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0cb      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	4b49      	ldr	r3, [pc, #292]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ee      	beq.n	8003140 <HAL_RCC_OscConfig+0x334>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fe f814 	bl	8001190 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fe f810 	bl	8001190 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0b5      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	4b3e      	ldr	r3, [pc, #248]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ee      	bne.n	800316c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003194:	4b39      	ldr	r3, [pc, #228]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	4a38      	ldr	r2, [pc, #224]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a1 	beq.w	80032ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031aa:	4b34      	ldr	r3, [pc, #208]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d05c      	beq.n	8003270 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d141      	bne.n	8003242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fd ffe4 	bl	8001190 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fd ffe0 	bl	8001190 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e087      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b27      	ldr	r3, [pc, #156]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	019b      	lsls	r3, r3, #6
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	3b01      	subs	r3, #1
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	491b      	ldr	r1, [pc, #108]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003214:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fd ffb9 	bl	8001190 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003222:	f7fd ffb5 	bl	8001190 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e05c      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	4b11      	ldr	r3, [pc, #68]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x416>
 8003240:	e054      	b.n	80032ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd ffa2 	bl	8001190 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fd ff9e 	bl	8001190 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e045      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	4b06      	ldr	r3, [pc, #24]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x444>
 800326e:	e03d      	b.n	80032ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e038      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000
 8003284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x4ec>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d028      	beq.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d121      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d11a      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d111      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	3b01      	subs	r3, #1
 80032d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0cc      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b68      	ldr	r3, [pc, #416]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d90c      	bls.n	8003338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b65      	ldr	r3, [pc, #404]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b63      	ldr	r3, [pc, #396]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003350:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800335a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003368:	4b53      	ldr	r3, [pc, #332]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b50      	ldr	r3, [pc, #320]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	494d      	ldr	r1, [pc, #308]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d044      	beq.n	800341c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b47      	ldr	r3, [pc, #284]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d119      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	4b3b      	ldr	r3, [pc, #236]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e067      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4934      	ldr	r1, [pc, #208]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7fd fed0 	bl	8001190 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fd fecc 	bl	8001190 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e04f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d20c      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e032      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4916      	ldr	r1, [pc, #88]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	490e      	ldr	r1, [pc, #56]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	4602      	mov	r2, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	490a      	ldr	r1, [pc, #40]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	4a09      	ldr	r2, [pc, #36]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800349e:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fe30 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	08008cac 	.word	0x08008cac
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b094      	sub	sp, #80	@ 0x50
 80034ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e0:	4b79      	ldr	r3, [pc, #484]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d00d      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x40>
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	f200 80e1 	bhi.w	80036b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x34>
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fa:	e0db      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b73      	ldr	r3, [pc, #460]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x204>)
 80034fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003500:	e0db      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003502:	4b73      	ldr	r3, [pc, #460]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003504:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003506:	e0d8      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003508:	4b6f      	ldr	r3, [pc, #444]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003510:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003512:	4b6d      	ldr	r3, [pc, #436]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d063      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351e:	4b6a      	ldr	r3, [pc, #424]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	2200      	movs	r2, #0
 8003526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003528:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003530:	633b      	str	r3, [r7, #48]	@ 0x30
 8003532:	2300      	movs	r3, #0
 8003534:	637b      	str	r3, [r7, #52]	@ 0x34
 8003536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800353a:	4622      	mov	r2, r4
 800353c:	462b      	mov	r3, r5
 800353e:	f04f 0000 	mov.w	r0, #0
 8003542:	f04f 0100 	mov.w	r1, #0
 8003546:	0159      	lsls	r1, r3, #5
 8003548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354c:	0150      	lsls	r0, r2, #5
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4621      	mov	r1, r4
 8003554:	1a51      	subs	r1, r2, r1
 8003556:	6139      	str	r1, [r7, #16]
 8003558:	4629      	mov	r1, r5
 800355a:	eb63 0301 	sbc.w	r3, r3, r1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800356c:	4659      	mov	r1, fp
 800356e:	018b      	lsls	r3, r1, #6
 8003570:	4651      	mov	r1, sl
 8003572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003576:	4651      	mov	r1, sl
 8003578:	018a      	lsls	r2, r1, #6
 800357a:	4651      	mov	r1, sl
 800357c:	ebb2 0801 	subs.w	r8, r2, r1
 8003580:	4659      	mov	r1, fp
 8003582:	eb63 0901 	sbc.w	r9, r3, r1
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359a:	4690      	mov	r8, r2
 800359c:	4699      	mov	r9, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	eb18 0303 	adds.w	r3, r8, r3
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	462b      	mov	r3, r5
 80035a8:	eb49 0303 	adc.w	r3, r9, r3
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ba:	4629      	mov	r1, r5
 80035bc:	024b      	lsls	r3, r1, #9
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035c4:	4621      	mov	r1, r4
 80035c6:	024a      	lsls	r2, r1, #9
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ce:	2200      	movs	r2, #0
 80035d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035d8:	f7fc fe52 	bl	8000280 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e4:	e058      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e6:	4b38      	ldr	r3, [pc, #224]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	2200      	movs	r2, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	4611      	mov	r1, r2
 80035f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	f04f 0000 	mov.w	r0, #0
 8003608:	f04f 0100 	mov.w	r1, #0
 800360c:	0159      	lsls	r1, r3, #5
 800360e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003612:	0150      	lsls	r0, r2, #5
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4641      	mov	r1, r8
 800361a:	ebb2 0a01 	subs.w	sl, r2, r1
 800361e:	4649      	mov	r1, r9
 8003620:	eb63 0b01 	sbc.w	fp, r3, r1
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003638:	ebb2 040a 	subs.w	r4, r2, sl
 800363c:	eb63 050b 	sbc.w	r5, r3, fp
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	00eb      	lsls	r3, r5, #3
 800364a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364e:	00e2      	lsls	r2, r4, #3
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	4643      	mov	r3, r8
 8003656:	18e3      	adds	r3, r4, r3
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	464b      	mov	r3, r9
 800365c:	eb45 0303 	adc.w	r3, r5, r3
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800366e:	4629      	mov	r1, r5
 8003670:	028b      	lsls	r3, r1, #10
 8003672:	4621      	mov	r1, r4
 8003674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003678:	4621      	mov	r1, r4
 800367a:	028a      	lsls	r2, r1, #10
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003682:	2200      	movs	r2, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	61fa      	str	r2, [r7, #28]
 8003688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800368c:	f7fc fdf8 	bl	8000280 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003698:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	3301      	adds	r3, #1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036b2:	e002      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x204>)
 80036b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3750      	adds	r7, #80	@ 0x50
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	007a1200 	.word	0x007a1200

080036d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036f0:	f7ff fff0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0a9b      	lsrs	r3, r3, #10
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4903      	ldr	r1, [pc, #12]	@ (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	08008cbc 	.word	0x08008cbc

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003718:	f7ff ffdc 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0b5b      	lsrs	r3, r3, #13
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	@ (8003738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	08008cbc 	.word	0x08008cbc

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003760:	2b00      	cmp	r3, #0
 8003762:	d035      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003764:	4b67      	ldr	r3, [pc, #412]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800376a:	f7fd fd11 	bl	8001190 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003772:	f7fd fd0d 	bl	8001190 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0ba      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003784:	4b60      	ldr	r3, [pc, #384]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	019a      	lsls	r2, r3, #6
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	071b      	lsls	r3, r3, #28
 800379c:	495a      	ldr	r1, [pc, #360]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037a4:	4b57      	ldr	r3, [pc, #348]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037aa:	f7fd fcf1 	bl	8001190 <HAL_GetTick>
 80037ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b2:	f7fd fced 	bl	8001190 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e09a      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c4:	4b50      	ldr	r3, [pc, #320]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8083 	beq.w	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b49      	ldr	r3, [pc, #292]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	4a48      	ldr	r2, [pc, #288]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ee:	4b46      	ldr	r3, [pc, #280]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037fa:	4b44      	ldr	r3, [pc, #272]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a43      	ldr	r2, [pc, #268]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003804:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003806:	f7fd fcc3 	bl	8001190 <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd fcbf 	bl	8001190 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e06c      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003820:	4b3a      	ldr	r3, [pc, #232]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800382c:	4b36      	ldr	r3, [pc, #216]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003834:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	d028      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384a:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003852:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003854:	4b2e      	ldr	r3, [pc, #184]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800385a:	4b2d      	ldr	r3, [pc, #180]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003860:	4a29      	ldr	r2, [pc, #164]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003866:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d114      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003872:	f7fd fc8d 	bl	8001190 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	e00a      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fd fc89 	bl	8001190 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e034      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ee      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a8:	d10d      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80038ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038be:	4912      	ldr	r1, [pc, #72]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]
 80038c4:	e005      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038c6:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038cc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038d0:	6093      	str	r3, [r2, #8]
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038de:	490a      	ldr	r1, [pc, #40]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7c1a      	ldrb	r2, [r3, #16]
 80038f4:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038f6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	42470068 	.word	0x42470068
 8003908:	40023800 	.word	0x40023800
 800390c:	40007000 	.word	0x40007000
 8003910:	42470e40 	.word	0x42470e40
 8003914:	424711e0 	.word	0x424711e0

08003918 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d13f      	bne.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003936:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800393e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800394c:	d12f      	bne.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800394e:	4b1f      	ldr	r3, [pc, #124]	@ (80039cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003950:	617b      	str	r3, [r7, #20]
          break;
 8003952:	e02f      	b.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003954:	4b1c      	ldr	r3, [pc, #112]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003960:	d108      	bne.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003962:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800396a:	4a19      	ldr	r2, [pc, #100]	@ (80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	e007      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003974:	4b14      	ldr	r3, [pc, #80]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800397c:	4a15      	ldr	r2, [pc, #84]	@ (80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003984:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003998:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399e:	0f1b      	lsrs	r3, r3, #28
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	617b      	str	r3, [r7, #20]
          break;
 80039ac:	e002      	b.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
          break;
 80039b2:	bf00      	nop
        }
      }
      break;
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80039b6:	bf00      	nop
    }
  }
  return frequency;
 80039b8:	697b      	ldr	r3, [r7, #20]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00bb8000 	.word	0x00bb8000
 80039d0:	007a1200 	.word	0x007a1200
 80039d4:	00f42400 	.word	0x00f42400

080039d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e07b      	b.n	8003ae2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039fa:	d009      	beq.n	8003a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
 8003a02:	e005      	b.n	8003a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd f99c 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a94:	ea42 0103 	orr.w	r1, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	f003 0104 	and.w	r1, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	f003 0210 	and.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b088      	sub	sp, #32
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003afa:	f7fd fb49 	bl	8001190 <HAL_GetTick>
 8003afe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d001      	beq.n	8003b14 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
 8003b12:	e12a      	b.n	8003d6a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Transmit+0x36>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e122      	b.n	8003d6a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Transmit+0x48>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e11b      	b.n	8003d6a <HAL_SPI_Transmit+0x280>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b80:	d10f      	bne.n	8003ba2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ba0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	2b40      	cmp	r3, #64	@ 0x40
 8003bae:	d007      	beq.n	8003bc0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc8:	d152      	bne.n	8003c70 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_SPI_Transmit+0xee>
 8003bd2:	8b7b      	ldrh	r3, [r7, #26]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d145      	bne.n	8003c64 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	881a      	ldrh	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	1c9a      	adds	r2, r3, #2
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bfc:	e032      	b.n	8003c64 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d112      	bne.n	8003c32 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c30:	e018      	b.n	8003c64 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c32:	f7fd faad 	bl	8001190 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d803      	bhi.n	8003c4a <HAL_SPI_Transmit+0x160>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d102      	bne.n	8003c50 <HAL_SPI_Transmit+0x166>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e082      	b.n	8003d6a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1c7      	bne.n	8003bfe <HAL_SPI_Transmit+0x114>
 8003c6e:	e053      	b.n	8003d18 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_SPI_Transmit+0x194>
 8003c78:	8b7b      	ldrh	r3, [r7, #26]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d147      	bne.n	8003d0e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	7812      	ldrb	r2, [r2, #0]
 8003c8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ca4:	e033      	b.n	8003d0e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d113      	bne.n	8003cdc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cda:	e018      	b.n	8003d0e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cdc:	f7fd fa58 	bl	8001190 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d803      	bhi.n	8003cf4 <HAL_SPI_Transmit+0x20a>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d102      	bne.n	8003cfa <HAL_SPI_Transmit+0x210>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e02d      	b.n	8003d6a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1c6      	bne.n	8003ca6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	6839      	ldr	r1, [r7, #0]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fa59 	bl	80041d4 <SPI_EndRxTxTransaction>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b08a      	sub	sp, #40	@ 0x28
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d80:	2301      	movs	r3, #1
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d84:	f7fd fa04 	bl	8001190 <HAL_GetTick>
 8003d88:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d90:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d98:	887b      	ldrh	r3, [r7, #2]
 8003d9a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d9c:	7ffb      	ldrb	r3, [r7, #31]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d00c      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x4a>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003da8:	d106      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x46>
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d001      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
 8003dba:	e17f      	b.n	80040bc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x5c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x5c>
 8003dc8:	887b      	ldrh	r3, [r7, #2]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e174      	b.n	80040bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x6e>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e16d      	b.n	80040bc <HAL_SPI_TransmitReceive+0x34a>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d003      	beq.n	8003dfc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2205      	movs	r2, #5
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	887a      	ldrh	r2, [r7, #2]
 8003e12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	887a      	ldrh	r2, [r7, #2]
 8003e1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b40      	cmp	r3, #64	@ 0x40
 8003e3e:	d007      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e58:	d17e      	bne.n	8003f58 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0xf6>
 8003e62:	8afb      	ldrh	r3, [r7, #22]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d16c      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e8c:	e059      	b.n	8003f42 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x162>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_SPI_TransmitReceive+0x162>
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d113      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	881a      	ldrh	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d119      	bne.n	8003f16 <HAL_SPI_TransmitReceive+0x1a4>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d014      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f12:	2301      	movs	r3, #1
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f16:	f7fd f93b 	bl	8001190 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d80d      	bhi.n	8003f42 <HAL_SPI_TransmitReceive+0x1d0>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d009      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0bc      	b.n	80040bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1a0      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x11c>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d19b      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x11c>
 8003f56:	e082      	b.n	800405e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x1f4>
 8003f60:	8afb      	ldrh	r3, [r7, #22]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d171      	bne.n	800404a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8c:	e05d      	b.n	800404a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11c      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x264>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d017      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0x264>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d114      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d119      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x2a6>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004014:	2301      	movs	r3, #1
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004018:	f7fd f8ba 	bl	8001190 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004024:	429a      	cmp	r2, r3
 8004026:	d803      	bhi.n	8004030 <HAL_SPI_TransmitReceive+0x2be>
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d102      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x2c4>
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e038      	b.n	80040bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d19c      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x21c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d197      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800405e:	6a3a      	ldr	r2, [r7, #32]
 8004060:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8b6 	bl	80041d4 <SPI_EndRxTxTransaction>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e01d      	b.n	80040bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3728      	adds	r7, #40	@ 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040d4:	f7fd f85c 	bl	8001190 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4413      	add	r3, r2
 80040e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040e4:	f7fd f854 	bl	8001190 <HAL_GetTick>
 80040e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	015b      	lsls	r3, r3, #5
 80040f0:	0d1b      	lsrs	r3, r3, #20
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040fa:	e055      	b.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d051      	beq.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004104:	f7fd f844 	bl	8001190 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	429a      	cmp	r2, r3
 8004112:	d902      	bls.n	800411a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d13d      	bne.n	8004196 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004132:	d111      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800413c:	d004      	beq.n	8004148 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d107      	bne.n	8004158 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004160:	d10f      	bne.n	8004182 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e018      	b.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	e002      	b.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d19a      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000000 	.word	0x20000000

080041d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2201      	movs	r2, #1
 80041e8:	2102      	movs	r1, #2
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff6a 	bl	80040c4 <SPI_WaitFlagStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e032      	b.n	800426c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004206:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <SPI_EndRxTxTransaction+0xa0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <SPI_EndRxTxTransaction+0xa4>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	0d5b      	lsrs	r3, r3, #21
 8004212:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004224:	d112      	bne.n	800424c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	2180      	movs	r1, #128	@ 0x80
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff ff47 	bl	80040c4 <SPI_WaitFlagStateUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d016      	beq.n	800426a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e00f      	b.n	800426c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3b01      	subs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	d0f2      	beq.n	800424c <SPI_EndRxTxTransaction+0x78>
 8004266:	e000      	b.n	800426a <SPI_EndRxTxTransaction+0x96>
        break;
 8004268:	bf00      	nop
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000000 	.word	0x20000000
 8004278:	165e9f81 	.word	0x165e9f81

0800427c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e042      	b.n	8004314 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc fdc8 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2224      	movs	r2, #36	@ 0x24
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f973 	bl	80045ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b20      	cmp	r3, #32
 800433a:	d175      	bne.n	8004428 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_UART_Transmit+0x2c>
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e06e      	b.n	800442a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2221      	movs	r2, #33	@ 0x21
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435a:	f7fc ff19 	bl	8001190 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004374:	d108      	bne.n	8004388 <HAL_UART_Transmit+0x6c>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e003      	b.n	8004390 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004390:	e02e      	b.n	80043f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	2180      	movs	r1, #128	@ 0x80
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f848 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e03a      	b.n	800442a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	3302      	adds	r3, #2
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e007      	b.n	80043e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	3301      	adds	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1cb      	bne.n	8004392 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	2140      	movs	r1, #64	@ 0x40
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f814 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e006      	b.n	800442a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004442:	e03b      	b.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d037      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7fc fea0 	bl	8001190 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	6a3a      	ldr	r2, [r7, #32]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <UART_WaitOnFlagUntilTimeout+0x30>
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e03a      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d023      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b80      	cmp	r3, #128	@ 0x80
 8004478:	d020      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d01d      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b08      	cmp	r3, #8
 800448c:	d116      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f81d 	bl	80044e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2208      	movs	r2, #8
 80044ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e00f      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d0b4      	beq.n	8004444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b095      	sub	sp, #84	@ 0x54
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800450c:	643a      	str	r2, [r7, #64]	@ 0x40
 800450e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800451a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004540:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	2b01      	cmp	r3, #1
 800455a:	d119      	bne.n	8004590 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60bb      	str	r3, [r7, #8]
   return(result);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0310 	bic.w	r3, r3, #16
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800457c:	61ba      	str	r2, [r7, #24]
 800457e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	613b      	str	r3, [r7, #16]
   return(result);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800459e:	bf00      	nop
 80045a0:	3754      	adds	r7, #84	@ 0x54
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b0:	b0c0      	sub	sp, #256	@ 0x100
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	68d9      	ldr	r1, [r3, #12]
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	ea40 0301 	orr.w	r3, r0, r1
 80045d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004604:	f021 010c 	bic.w	r1, r1, #12
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004612:	430b      	orrs	r3, r1
 8004614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004626:	6999      	ldr	r1, [r3, #24]
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	ea40 0301 	orr.w	r3, r0, r1
 8004632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b8f      	ldr	r3, [pc, #572]	@ (8004878 <UART_SetConfig+0x2cc>)
 800463c:	429a      	cmp	r2, r3
 800463e:	d005      	beq.n	800464c <UART_SetConfig+0xa0>
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b8d      	ldr	r3, [pc, #564]	@ (800487c <UART_SetConfig+0x2d0>)
 8004648:	429a      	cmp	r2, r3
 800464a:	d104      	bne.n	8004656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7ff f862 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8004650:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004654:	e003      	b.n	800465e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004656:	f7ff f849 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 800465a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004668:	f040 810c 	bne.w	8004884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800466c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004676:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800467a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800467e:	4622      	mov	r2, r4
 8004680:	462b      	mov	r3, r5
 8004682:	1891      	adds	r1, r2, r2
 8004684:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004686:	415b      	adcs	r3, r3
 8004688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800468a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800468e:	4621      	mov	r1, r4
 8004690:	eb12 0801 	adds.w	r8, r2, r1
 8004694:	4629      	mov	r1, r5
 8004696:	eb43 0901 	adc.w	r9, r3, r1
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ae:	4690      	mov	r8, r2
 80046b0:	4699      	mov	r9, r3
 80046b2:	4623      	mov	r3, r4
 80046b4:	eb18 0303 	adds.w	r3, r8, r3
 80046b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046bc:	462b      	mov	r3, r5
 80046be:	eb49 0303 	adc.w	r3, r9, r3
 80046c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046da:	460b      	mov	r3, r1
 80046dc:	18db      	adds	r3, r3, r3
 80046de:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e0:	4613      	mov	r3, r2
 80046e2:	eb42 0303 	adc.w	r3, r2, r3
 80046e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046f0:	f7fb fdc6 	bl	8000280 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4b61      	ldr	r3, [pc, #388]	@ (8004880 <UART_SetConfig+0x2d4>)
 80046fa:	fba3 2302 	umull	r2, r3, r3, r2
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	011c      	lsls	r4, r3, #4
 8004702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800470c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	1891      	adds	r1, r2, r2
 800471a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800471c:	415b      	adcs	r3, r3
 800471e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004724:	4641      	mov	r1, r8
 8004726:	eb12 0a01 	adds.w	sl, r2, r1
 800472a:	4649      	mov	r1, r9
 800472c:	eb43 0b01 	adc.w	fp, r3, r1
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800473c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004744:	4692      	mov	sl, r2
 8004746:	469b      	mov	fp, r3
 8004748:	4643      	mov	r3, r8
 800474a:	eb1a 0303 	adds.w	r3, sl, r3
 800474e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004752:	464b      	mov	r3, r9
 8004754:	eb4b 0303 	adc.w	r3, fp, r3
 8004758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004768:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800476c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004770:	460b      	mov	r3, r1
 8004772:	18db      	adds	r3, r3, r3
 8004774:	643b      	str	r3, [r7, #64]	@ 0x40
 8004776:	4613      	mov	r3, r2
 8004778:	eb42 0303 	adc.w	r3, r2, r3
 800477c:	647b      	str	r3, [r7, #68]	@ 0x44
 800477e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004786:	f7fb fd7b 	bl	8000280 <__aeabi_uldivmod>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4611      	mov	r1, r2
 8004790:	4b3b      	ldr	r3, [pc, #236]	@ (8004880 <UART_SetConfig+0x2d4>)
 8004792:	fba3 2301 	umull	r2, r3, r3, r1
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2264      	movs	r2, #100	@ 0x64
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	1acb      	subs	r3, r1, r3
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047a6:	4b36      	ldr	r3, [pc, #216]	@ (8004880 <UART_SetConfig+0x2d4>)
 80047a8:	fba3 2302 	umull	r2, r3, r3, r2
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047b4:	441c      	add	r4, r3
 80047b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047c8:	4642      	mov	r2, r8
 80047ca:	464b      	mov	r3, r9
 80047cc:	1891      	adds	r1, r2, r2
 80047ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047d0:	415b      	adcs	r3, r3
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047d8:	4641      	mov	r1, r8
 80047da:	1851      	adds	r1, r2, r1
 80047dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80047de:	4649      	mov	r1, r9
 80047e0:	414b      	adcs	r3, r1
 80047e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047f0:	4659      	mov	r1, fp
 80047f2:	00cb      	lsls	r3, r1, #3
 80047f4:	4651      	mov	r1, sl
 80047f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fa:	4651      	mov	r1, sl
 80047fc:	00ca      	lsls	r2, r1, #3
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	4603      	mov	r3, r0
 8004804:	4642      	mov	r2, r8
 8004806:	189b      	adds	r3, r3, r2
 8004808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800480c:	464b      	mov	r3, r9
 800480e:	460a      	mov	r2, r1
 8004810:	eb42 0303 	adc.w	r3, r2, r3
 8004814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004824:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800482c:	460b      	mov	r3, r1
 800482e:	18db      	adds	r3, r3, r3
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004832:	4613      	mov	r3, r2
 8004834:	eb42 0303 	adc.w	r3, r2, r3
 8004838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800483a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800483e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004842:	f7fb fd1d 	bl	8000280 <__aeabi_uldivmod>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <UART_SetConfig+0x2d4>)
 800484c:	fba3 1302 	umull	r1, r3, r3, r2
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	2164      	movs	r1, #100	@ 0x64
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	3332      	adds	r3, #50	@ 0x32
 800485e:	4a08      	ldr	r2, [pc, #32]	@ (8004880 <UART_SetConfig+0x2d4>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	f003 0207 	and.w	r2, r3, #7
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4422      	add	r2, r4
 8004872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004874:	e106      	b.n	8004a84 <UART_SetConfig+0x4d8>
 8004876:	bf00      	nop
 8004878:	40011000 	.word	0x40011000
 800487c:	40011400 	.word	0x40011400
 8004880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800488e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004896:	4642      	mov	r2, r8
 8004898:	464b      	mov	r3, r9
 800489a:	1891      	adds	r1, r2, r2
 800489c:	6239      	str	r1, [r7, #32]
 800489e:	415b      	adcs	r3, r3
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048a6:	4641      	mov	r1, r8
 80048a8:	1854      	adds	r4, r2, r1
 80048aa:	4649      	mov	r1, r9
 80048ac:	eb43 0501 	adc.w	r5, r3, r1
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	00eb      	lsls	r3, r5, #3
 80048ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048be:	00e2      	lsls	r2, r4, #3
 80048c0:	4614      	mov	r4, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	4643      	mov	r3, r8
 80048c6:	18e3      	adds	r3, r4, r3
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048cc:	464b      	mov	r3, r9
 80048ce:	eb45 0303 	adc.w	r3, r5, r3
 80048d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048f2:	4629      	mov	r1, r5
 80048f4:	008b      	lsls	r3, r1, #2
 80048f6:	4621      	mov	r1, r4
 80048f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048fc:	4621      	mov	r1, r4
 80048fe:	008a      	lsls	r2, r1, #2
 8004900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004904:	f7fb fcbc 	bl	8000280 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b60      	ldr	r3, [pc, #384]	@ (8004a90 <UART_SetConfig+0x4e4>)
 800490e:	fba3 2302 	umull	r2, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	011c      	lsls	r4, r3, #4
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	61b9      	str	r1, [r7, #24]
 8004930:	415b      	adcs	r3, r3
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004938:	4641      	mov	r1, r8
 800493a:	1851      	adds	r1, r2, r1
 800493c:	6139      	str	r1, [r7, #16]
 800493e:	4649      	mov	r1, r9
 8004940:	414b      	adcs	r3, r1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004950:	4659      	mov	r1, fp
 8004952:	00cb      	lsls	r3, r1, #3
 8004954:	4651      	mov	r1, sl
 8004956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495a:	4651      	mov	r1, sl
 800495c:	00ca      	lsls	r2, r1, #3
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	4603      	mov	r3, r0
 8004964:	4642      	mov	r2, r8
 8004966:	189b      	adds	r3, r3, r2
 8004968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800496c:	464b      	mov	r3, r9
 800496e:	460a      	mov	r2, r1
 8004970:	eb42 0303 	adc.w	r3, r2, r3
 8004974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004990:	4649      	mov	r1, r9
 8004992:	008b      	lsls	r3, r1, #2
 8004994:	4641      	mov	r1, r8
 8004996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499a:	4641      	mov	r1, r8
 800499c:	008a      	lsls	r2, r1, #2
 800499e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049a2:	f7fb fc6d 	bl	8000280 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4611      	mov	r1, r2
 80049ac:	4b38      	ldr	r3, [pc, #224]	@ (8004a90 <UART_SetConfig+0x4e4>)
 80049ae:	fba3 2301 	umull	r2, r3, r3, r1
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	2264      	movs	r2, #100	@ 0x64
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	1acb      	subs	r3, r1, r3
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	3332      	adds	r3, #50	@ 0x32
 80049c0:	4a33      	ldr	r2, [pc, #204]	@ (8004a90 <UART_SetConfig+0x4e4>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049cc:	441c      	add	r4, r3
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80049d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	415b      	adcs	r3, r3
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ec:	4641      	mov	r1, r8
 80049ee:	1851      	adds	r1, r2, r1
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	4649      	mov	r1, r9
 80049f4:	414b      	adcs	r3, r1
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a04:	4659      	mov	r1, fp
 8004a06:	00cb      	lsls	r3, r1, #3
 8004a08:	4651      	mov	r1, sl
 8004a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0e:	4651      	mov	r1, sl
 8004a10:	00ca      	lsls	r2, r1, #3
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	4642      	mov	r2, r8
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a1e:	464b      	mov	r3, r9
 8004a20:	460a      	mov	r2, r1
 8004a22:	eb42 0303 	adc.w	r3, r2, r3
 8004a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a32:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a40:	4649      	mov	r1, r9
 8004a42:	008b      	lsls	r3, r1, #2
 8004a44:	4641      	mov	r1, r8
 8004a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	008a      	lsls	r2, r1, #2
 8004a4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a52:	f7fb fc15 	bl	8000280 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a90 <UART_SetConfig+0x4e4>)
 8004a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	2164      	movs	r1, #100	@ 0x64
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	3332      	adds	r3, #50	@ 0x32
 8004a6e:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <UART_SetConfig+0x4e4>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	f003 020f 	and.w	r2, r3, #15
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4422      	add	r2, r4
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a90:	51eb851f 	.word	0x51eb851f

08004a94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004a98:	4904      	ldr	r1, [pc, #16]	@ (8004aac <MX_FATFS_Init+0x18>)
 8004a9a:	4805      	ldr	r0, [pc, #20]	@ (8004ab0 <MX_FATFS_Init+0x1c>)
 8004a9c:	f002 ff4e 	bl	800793c <FATFS_LinkDriver>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b03      	ldr	r3, [pc, #12]	@ (8004ab4 <MX_FATFS_Init+0x20>)
 8004aa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004aa8:	bf00      	nop
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20010064 	.word	0x20010064
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	20010060 	.word	0x20010060

08004ab8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004abc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;

	return USER_SPI_initialize(pdrv);
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f9d3 	bl	8004e80 <USER_SPI_initialize>
 8004ada:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fab1 	bl	8005058 <USER_SPI_status>
 8004af6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;

	return USER_SPI_read(pdrv, buff, sector, count);
 8004b10:	7bf8      	ldrb	r0, [r7, #15]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	f000 fab4 	bl	8005084 <USER_SPI_read>
 8004b1c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff,  sector, count);
 8004b36:	7bf8      	ldrb	r0, [r7, #15]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	f000 fb07 	bl	8005150 <USER_SPI_write>
 8004b42:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	603a      	str	r2, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004b5c:	79b9      	ldrb	r1, [r7, #6]
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fb70 	bl	8005248 <USER_SPI_ioctl>
 8004b68:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004b7c:	f7fc fb08 	bl	8001190 <HAL_GetTick>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4a04      	ldr	r2, [pc, #16]	@ (8004b94 <SPI_Timer_On+0x20>)
 8004b84:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004b86:	4a04      	ldr	r2, [pc, #16]	@ (8004b98 <SPI_Timer_On+0x24>)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6013      	str	r3, [r2, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2001006c 	.word	0x2001006c
 8004b98:	20010070 	.word	0x20010070

08004b9c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004ba0:	f7fc faf6 	bl	8001190 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <SPI_Timer_Status+0x24>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <SPI_Timer_Status+0x28>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	bf34      	ite	cc
 8004bb4:	2301      	movcc	r3, #1
 8004bb6:	2300      	movcs	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	2001006c 	.word	0x2001006c
 8004bc4:	20010070 	.word	0x20010070

08004bc8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004bd2:	f107 020f 	add.w	r2, r7, #15
 8004bd6:	1df9      	adds	r1, r7, #7
 8004bd8:	2332      	movs	r3, #50	@ 0x32
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4804      	ldr	r0, [pc, #16]	@ (8004bf0 <xchg_spi+0x28>)
 8004be0:	f7ff f8c7 	bl	8003d72 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000144 	.word	0x20000144

08004bf4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e00a      	b.n	8004c1a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	18d4      	adds	r4, r2, r3
 8004c0a:	20ff      	movs	r0, #255	@ 0xff
 8004c0c:	f7ff ffdc 	bl	8004bc8 <xchg_spi>
 8004c10:	4603      	mov	r3, r0
 8004c12:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d3f0      	bcc.n	8004c04 <rcvr_spi_multi+0x10>
	}
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}

08004c2c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4803      	ldr	r0, [pc, #12]	@ (8004c50 <xmit_spi_multi+0x24>)
 8004c42:	f7fe ff52 	bl	8003aea <HAL_SPI_Transmit>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000144 	.word	0x20000144

08004c54 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004c5c:	f7fc fa98 	bl	8001190 <HAL_GetTick>
 8004c60:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004c66:	20ff      	movs	r0, #255	@ 0xff
 8004c68:	f7ff ffae 	bl	8004bc8 <xchg_spi>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2bff      	cmp	r3, #255	@ 0xff
 8004c74:	d007      	beq.n	8004c86 <wait_ready+0x32>
 8004c76:	f7fc fa8b 	bl	8001190 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d8ef      	bhi.n	8004c66 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2bff      	cmp	r3, #255	@ 0xff
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	4803      	ldr	r0, [pc, #12]	@ (8004cb4 <despiselect+0x18>)
 8004ca6:	f7fd f8f5 	bl	8001e94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004caa:	20ff      	movs	r0, #255	@ 0xff
 8004cac:	f7ff ff8c 	bl	8004bc8 <xchg_spi>

}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40020000 	.word	0x40020000

08004cb8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2110      	movs	r1, #16
 8004cc0:	4809      	ldr	r0, [pc, #36]	@ (8004ce8 <spiselect+0x30>)
 8004cc2:	f7fd f8e7 	bl	8001e94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004cc6:	20ff      	movs	r0, #255	@ 0xff
 8004cc8:	f7ff ff7e 	bl	8004bc8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004ccc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004cd0:	f7ff ffc0 	bl	8004c54 <wait_ready>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <spiselect+0x26>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e002      	b.n	8004ce4 <spiselect+0x2c>

	despiselect();
 8004cde:	f7ff ffdd 	bl	8004c9c <despiselect>
	return 0;	/* Timeout */
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40020000 	.word	0x40020000

08004cec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004cf6:	20c8      	movs	r0, #200	@ 0xc8
 8004cf8:	f7ff ff3c 	bl	8004b74 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004cfc:	20ff      	movs	r0, #255	@ 0xff
 8004cfe:	f7ff ff63 	bl	8004bc8 <xchg_spi>
 8004d02:	4603      	mov	r3, r0
 8004d04:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	2bff      	cmp	r3, #255	@ 0xff
 8004d0a:	d104      	bne.n	8004d16 <rcvr_datablock+0x2a>
 8004d0c:	f7ff ff46 	bl	8004b9c <SPI_Timer_Status>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f2      	bne.n	8004cfc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2bfe      	cmp	r3, #254	@ 0xfe
 8004d1a:	d001      	beq.n	8004d20 <rcvr_datablock+0x34>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e00a      	b.n	8004d36 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ff66 	bl	8004bf4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004d28:	20ff      	movs	r0, #255	@ 0xff
 8004d2a:	f7ff ff4d 	bl	8004bc8 <xchg_spi>
 8004d2e:	20ff      	movs	r0, #255	@ 0xff
 8004d30:	f7ff ff4a 	bl	8004bc8 <xchg_spi>

	return 1;						/* Function succeeded */
 8004d34:	2301      	movs	r3, #1
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004d4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d4e:	f7ff ff81 	bl	8004c54 <wait_ready>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <xmit_datablock+0x1e>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e01e      	b.n	8004d9a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff32 	bl	8004bc8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2bfd      	cmp	r3, #253	@ 0xfd
 8004d68:	d016      	beq.n	8004d98 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004d6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ff5c 	bl	8004c2c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004d74:	20ff      	movs	r0, #255	@ 0xff
 8004d76:	f7ff ff27 	bl	8004bc8 <xchg_spi>
 8004d7a:	20ff      	movs	r0, #255	@ 0xff
 8004d7c:	f7ff ff24 	bl	8004bc8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004d80:	20ff      	movs	r0, #255	@ 0xff
 8004d82:	f7ff ff21 	bl	8004bc8 <xchg_spi>
 8004d86:	4603      	mov	r3, r0
 8004d88:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d001      	beq.n	8004d98 <xmit_datablock+0x5a>
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <xmit_datablock+0x5c>
	}
	return 1;
 8004d98:	2301      	movs	r3, #1
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	6039      	str	r1, [r7, #0]
 8004dac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	da0e      	bge.n	8004dd4 <send_cmd+0x32>
		cmd &= 0x7F;
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dbc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2037      	movs	r0, #55	@ 0x37
 8004dc2:	f7ff ffee 	bl	8004da2 <send_cmd>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004dca:	7bbb      	ldrb	r3, [r7, #14]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d901      	bls.n	8004dd4 <send_cmd+0x32>
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
 8004dd2:	e051      	b.n	8004e78 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d008      	beq.n	8004dec <send_cmd+0x4a>
		despiselect();
 8004dda:	f7ff ff5f 	bl	8004c9c <despiselect>
		if (!spiselect()) return 0xFF;
 8004dde:	f7ff ff6b 	bl	8004cb8 <spiselect>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <send_cmd+0x4a>
 8004de8:	23ff      	movs	r3, #255	@ 0xff
 8004dea:	e045      	b.n	8004e78 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fee7 	bl	8004bc8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fee1 	bl	8004bc8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fedb 	bl	8004bc8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fed5 	bl	8004bc8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fed0 	bl	8004bc8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <send_cmd+0x94>
 8004e32:	2395      	movs	r3, #149	@ 0x95
 8004e34:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d101      	bne.n	8004e40 <send_cmd+0x9e>
 8004e3c:	2387      	movs	r3, #135	@ 0x87
 8004e3e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fec0 	bl	8004bc8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d102      	bne.n	8004e54 <send_cmd+0xb2>
 8004e4e:	20ff      	movs	r0, #255	@ 0xff
 8004e50:	f7ff feba 	bl	8004bc8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004e54:	230a      	movs	r3, #10
 8004e56:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004e58:	20ff      	movs	r0, #255	@ 0xff
 8004e5a:	f7ff feb5 	bl	8004bc8 <xchg_spi>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da05      	bge.n	8004e76 <send_cmd+0xd4>
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <USER_SPI_initialize+0x14>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0d6      	b.n	8005042 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004e94:	4b6d      	ldr	r3, [pc, #436]	@ (800504c <USER_SPI_initialize+0x1cc>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <USER_SPI_initialize+0x2a>
 8004ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800504c <USER_SPI_initialize+0x1cc>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	e0cb      	b.n	8005042 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004eaa:	4b69      	ldr	r3, [pc, #420]	@ (8005050 <USER_SPI_initialize+0x1d0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004eb4:	4b66      	ldr	r3, [pc, #408]	@ (8005050 <USER_SPI_initialize+0x1d0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8004ebc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004ebe:	230a      	movs	r3, #10
 8004ec0:	73fb      	strb	r3, [r7, #15]
 8004ec2:	e005      	b.n	8004ed0 <USER_SPI_initialize+0x50>
 8004ec4:	20ff      	movs	r0, #255	@ 0xff
 8004ec6:	f7ff fe7f 	bl	8004bc8 <xchg_spi>
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f6      	bne.n	8004ec4 <USER_SPI_initialize+0x44>

	ty = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004eda:	2100      	movs	r1, #0
 8004edc:	2000      	movs	r0, #0
 8004ede:	f7ff ff60 	bl	8004da2 <send_cmd>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 808b 	bne.w	8005000 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004eea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004eee:	f7ff fe41 	bl	8004b74 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004ef2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004ef6:	2008      	movs	r0, #8
 8004ef8:	f7ff ff53 	bl	8004da2 <send_cmd>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d151      	bne.n	8004fa6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]
 8004f06:	e00d      	b.n	8004f24 <USER_SPI_initialize+0xa4>
 8004f08:	7bfc      	ldrb	r4, [r7, #15]
 8004f0a:	20ff      	movs	r0, #255	@ 0xff
 8004f0c:	f7ff fe5c 	bl	8004bc8 <xchg_spi>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	f104 0310 	add.w	r3, r4, #16
 8004f18:	443b      	add	r3, r7
 8004f1a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	3301      	adds	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d9ee      	bls.n	8004f08 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004f2a:	7abb      	ldrb	r3, [r7, #10]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d167      	bne.n	8005000 <USER_SPI_initialize+0x180>
 8004f30:	7afb      	ldrb	r3, [r7, #11]
 8004f32:	2baa      	cmp	r3, #170	@ 0xaa
 8004f34:	d164      	bne.n	8005000 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004f36:	bf00      	nop
 8004f38:	f7ff fe30 	bl	8004b9c <SPI_Timer_Status>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <USER_SPI_initialize+0xd2>
 8004f42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004f46:	20a9      	movs	r0, #169	@ 0xa9
 8004f48:	f7ff ff2b 	bl	8004da2 <send_cmd>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f2      	bne.n	8004f38 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004f52:	f7ff fe23 	bl	8004b9c <SPI_Timer_Status>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d051      	beq.n	8005000 <USER_SPI_initialize+0x180>
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	203a      	movs	r0, #58	@ 0x3a
 8004f60:	f7ff ff1f 	bl	8004da2 <send_cmd>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d14a      	bne.n	8005000 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e00d      	b.n	8004f8c <USER_SPI_initialize+0x10c>
 8004f70:	7bfc      	ldrb	r4, [r7, #15]
 8004f72:	20ff      	movs	r0, #255	@ 0xff
 8004f74:	f7ff fe28 	bl	8004bc8 <xchg_spi>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f104 0310 	add.w	r3, r4, #16
 8004f80:	443b      	add	r3, r7
 8004f82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d9ee      	bls.n	8004f70 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004f92:	7a3b      	ldrb	r3, [r7, #8]
 8004f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <USER_SPI_initialize+0x120>
 8004f9c:	230c      	movs	r3, #12
 8004f9e:	e000      	b.n	8004fa2 <USER_SPI_initialize+0x122>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	737b      	strb	r3, [r7, #13]
 8004fa4:	e02c      	b.n	8005000 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	20a9      	movs	r0, #169	@ 0xa9
 8004faa:	f7ff fefa 	bl	8004da2 <send_cmd>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d804      	bhi.n	8004fbe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	737b      	strb	r3, [r7, #13]
 8004fb8:	23a9      	movs	r3, #169	@ 0xa9
 8004fba:	73bb      	strb	r3, [r7, #14]
 8004fbc:	e003      	b.n	8004fc6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	737b      	strb	r3, [r7, #13]
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004fc6:	bf00      	nop
 8004fc8:	f7ff fde8 	bl	8004b9c <SPI_Timer_Status>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <USER_SPI_initialize+0x162>
 8004fd2:	7bbb      	ldrb	r3, [r7, #14]
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fee3 	bl	8004da2 <send_cmd>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f2      	bne.n	8004fc8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004fe2:	f7ff fddb 	bl	8004b9c <SPI_Timer_Status>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <USER_SPI_initialize+0x17c>
 8004fec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ff0:	2010      	movs	r0, #16
 8004ff2:	f7ff fed6 	bl	8004da2 <send_cmd>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <USER_SPI_initialize+0x180>
				ty = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005000:	4a14      	ldr	r2, [pc, #80]	@ (8005054 <USER_SPI_initialize+0x1d4>)
 8005002:	7b7b      	ldrb	r3, [r7, #13]
 8005004:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005006:	f7ff fe49 	bl	8004c9c <despiselect>

	if (ty) {			/* OK */
 800500a:	7b7b      	ldrb	r3, [r7, #13]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d012      	beq.n	8005036 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005010:	4b0f      	ldr	r3, [pc, #60]	@ (8005050 <USER_SPI_initialize+0x1d0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800501a:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <USER_SPI_initialize+0x1d0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0210 	orr.w	r2, r2, #16
 8005022:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005024:	4b09      	ldr	r3, [pc, #36]	@ (800504c <USER_SPI_initialize+0x1cc>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <USER_SPI_initialize+0x1cc>)
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e002      	b.n	800503c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005036:	4b05      	ldr	r3, [pc, #20]	@ (800504c <USER_SPI_initialize+0x1cc>)
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <USER_SPI_initialize+0x1cc>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b2db      	uxtb	r3, r3
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}
 800504a:	bf00      	nop
 800504c:	20000020 	.word	0x20000020
 8005050:	20000144 	.word	0x20000144
 8005054:	20010068 	.word	0x20010068

08005058 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <USER_SPI_status+0x14>
 8005068:	2301      	movs	r3, #1
 800506a:	e002      	b.n	8005072 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800506c:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <USER_SPI_status+0x28>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b2db      	uxtb	r3, r3
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000020 	.word	0x20000020

08005084 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <USER_SPI_read+0x1c>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <USER_SPI_read+0x20>
 80050a0:	2304      	movs	r3, #4
 80050a2:	e04d      	b.n	8005140 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80050a4:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <USER_SPI_read+0xc4>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <USER_SPI_read+0x32>
 80050b2:	2303      	movs	r3, #3
 80050b4:	e044      	b.n	8005140 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80050b6:	4b25      	ldr	r3, [pc, #148]	@ (800514c <USER_SPI_read+0xc8>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <USER_SPI_read+0x44>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	025b      	lsls	r3, r3, #9
 80050c6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d111      	bne.n	80050f2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	2011      	movs	r0, #17
 80050d2:	f7ff fe66 	bl	8004da2 <send_cmd>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d129      	bne.n	8005130 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80050dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050e0:	68b8      	ldr	r0, [r7, #8]
 80050e2:	f7ff fe03 	bl	8004cec <rcvr_datablock>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d021      	beq.n	8005130 <USER_SPI_read+0xac>
			count = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	e01e      	b.n	8005130 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	2012      	movs	r0, #18
 80050f6:	f7ff fe54 	bl	8004da2 <send_cmd>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d117      	bne.n	8005130 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005104:	68b8      	ldr	r0, [r7, #8]
 8005106:	f7ff fdf1 	bl	8004cec <rcvr_datablock>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <USER_SPI_read+0xa2>
				buff += 512;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005116:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ed      	bne.n	8005100 <USER_SPI_read+0x7c>
 8005124:	e000      	b.n	8005128 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005126:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005128:	2100      	movs	r1, #0
 800512a:	200c      	movs	r0, #12
 800512c:	f7ff fe39 	bl	8004da2 <send_cmd>
		}
	}
	despiselect();
 8005130:	f7ff fdb4 	bl	8004c9c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000020 	.word	0x20000020
 800514c:	20010068 	.word	0x20010068

08005150 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4603      	mov	r3, r0
 800515e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <USER_SPI_write+0x1c>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <USER_SPI_write+0x20>
 800516c:	2304      	movs	r3, #4
 800516e:	e063      	b.n	8005238 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005170:	4b33      	ldr	r3, [pc, #204]	@ (8005240 <USER_SPI_write+0xf0>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <USER_SPI_write+0x32>
 800517e:	2303      	movs	r3, #3
 8005180:	e05a      	b.n	8005238 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005182:	4b2f      	ldr	r3, [pc, #188]	@ (8005240 <USER_SPI_write+0xf0>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <USER_SPI_write+0x44>
 8005190:	2302      	movs	r3, #2
 8005192:	e051      	b.n	8005238 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005194:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <USER_SPI_write+0xf4>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <USER_SPI_write+0x56>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	025b      	lsls	r3, r3, #9
 80051a4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d110      	bne.n	80051ce <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	2018      	movs	r0, #24
 80051b0:	f7ff fdf7 	bl	8004da2 <send_cmd>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d136      	bne.n	8005228 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80051ba:	21fe      	movs	r1, #254	@ 0xfe
 80051bc:	68b8      	ldr	r0, [r7, #8]
 80051be:	f7ff fdbe 	bl	8004d3e <xmit_datablock>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d02f      	beq.n	8005228 <USER_SPI_write+0xd8>
			count = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	e02c      	b.n	8005228 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80051ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005244 <USER_SPI_write+0xf4>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	f003 0306 	and.w	r3, r3, #6
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <USER_SPI_write+0x92>
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	2097      	movs	r0, #151	@ 0x97
 80051de:	f7ff fde0 	bl	8004da2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	2019      	movs	r0, #25
 80051e6:	f7ff fddc 	bl	8004da2 <send_cmd>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d11b      	bne.n	8005228 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80051f0:	21fc      	movs	r1, #252	@ 0xfc
 80051f2:	68b8      	ldr	r0, [r7, #8]
 80051f4:	f7ff fda3 	bl	8004d3e <xmit_datablock>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <USER_SPI_write+0xc4>
				buff += 512;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005204:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	3b01      	subs	r3, #1
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ee      	bne.n	80051f0 <USER_SPI_write+0xa0>
 8005212:	e000      	b.n	8005216 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005214:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005216:	21fd      	movs	r1, #253	@ 0xfd
 8005218:	2000      	movs	r0, #0
 800521a:	f7ff fd90 	bl	8004d3e <xmit_datablock>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <USER_SPI_write+0xd8>
 8005224:	2301      	movs	r3, #1
 8005226:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005228:	f7ff fd38 	bl	8004c9c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000020 	.word	0x20000020
 8005244:	20010068 	.word	0x20010068

08005248 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08c      	sub	sp, #48	@ 0x30
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	603a      	str	r2, [r7, #0]
 8005252:	71fb      	strb	r3, [r7, #7]
 8005254:	460b      	mov	r3, r1
 8005256:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <USER_SPI_ioctl+0x1a>
 800525e:	2304      	movs	r3, #4
 8005260:	e15a      	b.n	8005518 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005262:	4baf      	ldr	r3, [pc, #700]	@ (8005520 <USER_SPI_ioctl+0x2d8>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <USER_SPI_ioctl+0x2c>
 8005270:	2303      	movs	r3, #3
 8005272:	e151      	b.n	8005518 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800527a:	79bb      	ldrb	r3, [r7, #6]
 800527c:	2b04      	cmp	r3, #4
 800527e:	f200 8136 	bhi.w	80054ee <USER_SPI_ioctl+0x2a6>
 8005282:	a201      	add	r2, pc, #4	@ (adr r2, 8005288 <USER_SPI_ioctl+0x40>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	0800529d 	.word	0x0800529d
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080054ef 	.word	0x080054ef
 8005294:	0800535d 	.word	0x0800535d
 8005298:	08005453 	.word	0x08005453
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800529c:	f7ff fd0c 	bl	8004cb8 <spiselect>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8127 	beq.w	80054f6 <USER_SPI_ioctl+0x2ae>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80052ae:	e122      	b.n	80054f6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80052b0:	2100      	movs	r1, #0
 80052b2:	2009      	movs	r0, #9
 80052b4:	f7ff fd75 	bl	8004da2 <send_cmd>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 811d 	bne.w	80054fa <USER_SPI_ioctl+0x2b2>
 80052c0:	f107 030c 	add.w	r3, r7, #12
 80052c4:	2110      	movs	r1, #16
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fd10 	bl	8004cec <rcvr_datablock>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8113 	beq.w	80054fa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80052d4:	7b3b      	ldrb	r3, [r7, #12]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d111      	bne.n	8005302 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80052de:	7d7b      	ldrb	r3, [r7, #21]
 80052e0:	461a      	mov	r2, r3
 80052e2:	7d3b      	ldrb	r3, [r7, #20]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	4413      	add	r3, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80052f2:	4413      	add	r3, r2
 80052f4:	3301      	adds	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	029a      	lsls	r2, r3, #10
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e028      	b.n	8005354 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005302:	7c7b      	ldrb	r3, [r7, #17]
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	b2da      	uxtb	r2, r3
 800530a:	7dbb      	ldrb	r3, [r7, #22]
 800530c:	09db      	lsrs	r3, r3, #7
 800530e:	b2db      	uxtb	r3, r3
 8005310:	4413      	add	r3, r2
 8005312:	b2da      	uxtb	r2, r3
 8005314:	7d7b      	ldrb	r3, [r7, #21]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0306 	and.w	r3, r3, #6
 800531e:	b2db      	uxtb	r3, r3
 8005320:	4413      	add	r3, r2
 8005322:	b2db      	uxtb	r3, r3
 8005324:	3302      	adds	r3, #2
 8005326:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800532a:	7d3b      	ldrb	r3, [r7, #20]
 800532c:	099b      	lsrs	r3, r3, #6
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	7cbb      	ldrb	r3, [r7, #18]
 800533a:	029b      	lsls	r3, r3, #10
 800533c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005340:	4413      	add	r3, r2
 8005342:	3301      	adds	r3, #1
 8005344:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005346:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800534a:	3b09      	subs	r3, #9
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	409a      	lsls	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800535a:	e0ce      	b.n	80054fa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800535c:	4b71      	ldr	r3, [pc, #452]	@ (8005524 <USER_SPI_ioctl+0x2dc>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d031      	beq.n	80053cc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005368:	2100      	movs	r1, #0
 800536a:	208d      	movs	r0, #141	@ 0x8d
 800536c:	f7ff fd19 	bl	8004da2 <send_cmd>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	f040 80c3 	bne.w	80054fe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005378:	20ff      	movs	r0, #255	@ 0xff
 800537a:	f7ff fc25 	bl	8004bc8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800537e:	f107 030c 	add.w	r3, r7, #12
 8005382:	2110      	movs	r1, #16
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fcb1 	bl	8004cec <rcvr_datablock>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80b6 	beq.w	80054fe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005392:	2330      	movs	r3, #48	@ 0x30
 8005394:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005398:	e007      	b.n	80053aa <USER_SPI_ioctl+0x162>
 800539a:	20ff      	movs	r0, #255	@ 0xff
 800539c:	f7ff fc14 	bl	8004bc8 <xchg_spi>
 80053a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053a4:	3b01      	subs	r3, #1
 80053a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80053aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f3      	bne.n	800539a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80053b2:	7dbb      	ldrb	r3, [r7, #22]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	2310      	movs	r3, #16
 80053bc:	fa03 f202 	lsl.w	r2, r3, r2
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80053ca:	e098      	b.n	80054fe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80053cc:	2100      	movs	r1, #0
 80053ce:	2009      	movs	r0, #9
 80053d0:	f7ff fce7 	bl	8004da2 <send_cmd>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 8091 	bne.w	80054fe <USER_SPI_ioctl+0x2b6>
 80053dc:	f107 030c 	add.w	r3, r7, #12
 80053e0:	2110      	movs	r1, #16
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fc82 	bl	8004cec <rcvr_datablock>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8087 	beq.w	80054fe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80053f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005524 <USER_SPI_ioctl+0x2dc>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d012      	beq.n	8005422 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80053fc:	7dbb      	ldrb	r3, [r7, #22]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005404:	7dfa      	ldrb	r2, [r7, #23]
 8005406:	09d2      	lsrs	r2, r2, #7
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	4413      	add	r3, r2
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	7e7b      	ldrb	r3, [r7, #25]
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	b2db      	uxtb	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	461a      	mov	r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e013      	b.n	800544a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005422:	7dbb      	ldrb	r3, [r7, #22]
 8005424:	109b      	asrs	r3, r3, #2
 8005426:	b29b      	uxth	r3, r3
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	3301      	adds	r3, #1
 800542e:	7dfa      	ldrb	r2, [r7, #23]
 8005430:	00d2      	lsls	r2, r2, #3
 8005432:	f002 0218 	and.w	r2, r2, #24
 8005436:	7df9      	ldrb	r1, [r7, #23]
 8005438:	0949      	lsrs	r1, r1, #5
 800543a:	b2c9      	uxtb	r1, r1
 800543c:	440a      	add	r2, r1
 800543e:	3201      	adds	r2, #1
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	461a      	mov	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005450:	e055      	b.n	80054fe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005452:	4b34      	ldr	r3, [pc, #208]	@ (8005524 <USER_SPI_ioctl+0x2dc>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f003 0306 	and.w	r3, r3, #6
 800545a:	2b00      	cmp	r3, #0
 800545c:	d051      	beq.n	8005502 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800545e:	f107 020c 	add.w	r2, r7, #12
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	210b      	movs	r1, #11
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff feee 	bl	8005248 <USER_SPI_ioctl>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d149      	bne.n	8005506 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005472:	7b3b      	ldrb	r3, [r7, #12]
 8005474:	099b      	lsrs	r3, r3, #6
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d104      	bne.n	8005486 <USER_SPI_ioctl+0x23e>
 800547c:	7dbb      	ldrb	r3, [r7, #22]
 800547e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d041      	beq.n	800550a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005496:	4b23      	ldr	r3, [pc, #140]	@ (8005524 <USER_SPI_ioctl+0x2dc>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	025b      	lsls	r3, r3, #9
 80054a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	025b      	lsls	r3, r3, #9
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80054ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054b0:	2020      	movs	r0, #32
 80054b2:	f7ff fc76 	bl	8004da2 <send_cmd>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d128      	bne.n	800550e <USER_SPI_ioctl+0x2c6>
 80054bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054be:	2021      	movs	r0, #33	@ 0x21
 80054c0:	f7ff fc6f 	bl	8004da2 <send_cmd>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d121      	bne.n	800550e <USER_SPI_ioctl+0x2c6>
 80054ca:	2100      	movs	r1, #0
 80054cc:	2026      	movs	r0, #38	@ 0x26
 80054ce:	f7ff fc68 	bl	8004da2 <send_cmd>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11a      	bne.n	800550e <USER_SPI_ioctl+0x2c6>
 80054d8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80054dc:	f7ff fbba 	bl	8004c54 <wait_ready>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d013      	beq.n	800550e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80054ec:	e00f      	b.n	800550e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80054ee:	2304      	movs	r3, #4
 80054f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80054f4:	e00c      	b.n	8005510 <USER_SPI_ioctl+0x2c8>
		break;
 80054f6:	bf00      	nop
 80054f8:	e00a      	b.n	8005510 <USER_SPI_ioctl+0x2c8>
		break;
 80054fa:	bf00      	nop
 80054fc:	e008      	b.n	8005510 <USER_SPI_ioctl+0x2c8>
		break;
 80054fe:	bf00      	nop
 8005500:	e006      	b.n	8005510 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005502:	bf00      	nop
 8005504:	e004      	b.n	8005510 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <USER_SPI_ioctl+0x2c8>
		break;
 800550e:	bf00      	nop
	}

	despiselect();
 8005510:	f7ff fbc4 	bl	8004c9c <despiselect>

	return res;
 8005514:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005518:	4618      	mov	r0, r3
 800551a:	3730      	adds	r7, #48	@ 0x30
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000020 	.word	0x20000020
 8005524:	20010068 	.word	0x20010068

08005528 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	4a08      	ldr	r2, [pc, #32]	@ (8005558 <disk_status+0x30>)
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	79fa      	ldrb	r2, [r7, #7]
 8005540:	4905      	ldr	r1, [pc, #20]	@ (8005558 <disk_status+0x30>)
 8005542:	440a      	add	r2, r1
 8005544:	7a12      	ldrb	r2, [r2, #8]
 8005546:	4610      	mov	r0, r2
 8005548:	4798      	blx	r3
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	2001009c 	.word	0x2001009c

0800555c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	4a0e      	ldr	r2, [pc, #56]	@ (80055a8 <disk_initialize+0x4c>)
 800556e:	5cd3      	ldrb	r3, [r2, r3]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d114      	bne.n	800559e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	4a0c      	ldr	r2, [pc, #48]	@ (80055a8 <disk_initialize+0x4c>)
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	79fa      	ldrb	r2, [r7, #7]
 8005582:	4909      	ldr	r1, [pc, #36]	@ (80055a8 <disk_initialize+0x4c>)
 8005584:	440a      	add	r2, r1
 8005586:	7a12      	ldrb	r2, [r2, #8]
 8005588:	4610      	mov	r0, r2
 800558a:	4798      	blx	r3
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4a03      	ldr	r2, [pc, #12]	@ (80055a8 <disk_initialize+0x4c>)
 800559a:	2101      	movs	r1, #1
 800559c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2001009c 	.word	0x2001009c

080055ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	4a0a      	ldr	r2, [pc, #40]	@ (80055e8 <disk_read+0x3c>)
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	689c      	ldr	r4, [r3, #8]
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	4a07      	ldr	r2, [pc, #28]	@ (80055e8 <disk_read+0x3c>)
 80055cc:	4413      	add	r3, r2
 80055ce:	7a18      	ldrb	r0, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	47a0      	blx	r4
 80055d8:	4603      	mov	r3, r0
 80055da:	75fb      	strb	r3, [r7, #23]
  return res;
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd90      	pop	{r4, r7, pc}
 80055e6:	bf00      	nop
 80055e8:	2001009c 	.word	0x2001009c

080055ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005628 <disk_write+0x3c>)
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	68dc      	ldr	r4, [r3, #12]
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	4a07      	ldr	r2, [pc, #28]	@ (8005628 <disk_write+0x3c>)
 800560c:	4413      	add	r3, r2
 800560e:	7a18      	ldrb	r0, [r3, #8]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	47a0      	blx	r4
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]
  return res;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
}
 800561e:	4618      	mov	r0, r3
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd90      	pop	{r4, r7, pc}
 8005626:	bf00      	nop
 8005628:	2001009c 	.word	0x2001009c

0800562c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3301      	adds	r3, #1
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800563c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	b21a      	sxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b21b      	sxth	r3, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	b21b      	sxth	r3, r3
 800564e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005650:	89fb      	ldrh	r3, [r7, #14]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3303      	adds	r3, #3
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	3202      	adds	r2, #2
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	3201      	adds	r2, #1
 8005684:	7812      	ldrb	r2, [r2, #0]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
	return rv;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	887b      	ldrh	r3, [r7, #2]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	887a      	ldrh	r2, [r7, #2]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005732:	b480      	push	{r7}
 8005734:	b087      	sub	sp, #28
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00d      	beq.n	8005768 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	1c53      	adds	r3, r2, #1
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	6179      	str	r1, [r7, #20]
 8005758:	7812      	ldrb	r2, [r2, #0]
 800575a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1f1      	bne.n	800574c <mem_cpy+0x1a>
	}
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	617a      	str	r2, [r7, #20]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3b01      	subs	r3, #1
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f3      	bne.n	8005784 <mem_set+0x10>
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80057aa:	b480      	push	{r7}
 80057ac:	b089      	sub	sp, #36	@ 0x24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	61fa      	str	r2, [r7, #28]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	4619      	mov	r1, r3
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	61ba      	str	r2, [r7, #24]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	1acb      	subs	r3, r1, r3
 80057d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3b01      	subs	r3, #1
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <mem_cmp+0x40>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0eb      	beq.n	80057c2 <mem_cmp+0x18>

	return r;
 80057ea:	697b      	ldr	r3, [r7, #20]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3724      	adds	r7, #36	@ 0x24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005802:	e002      	b.n	800580a <chk_chr+0x12>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3301      	adds	r3, #1
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <chk_chr+0x26>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	4293      	cmp	r3, r2
 800581c:	d1f2      	bne.n	8005804 <chk_chr+0xc>
	return *str;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	781b      	ldrb	r3, [r3, #0]
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	e029      	b.n	8005898 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005844:	4a27      	ldr	r2, [pc, #156]	@ (80058e4 <chk_lock+0xb4>)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	4413      	add	r3, r2
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01d      	beq.n	800588e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005852:	4a24      	ldr	r2, [pc, #144]	@ (80058e4 <chk_lock+0xb4>)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	4413      	add	r3, r2
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d116      	bne.n	8005892 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005864:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <chk_lock+0xb4>)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005874:	429a      	cmp	r2, r3
 8005876:	d10c      	bne.n	8005892 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005878:	4a1a      	ldr	r2, [pc, #104]	@ (80058e4 <chk_lock+0xb4>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	4413      	add	r3, r2
 8005880:	3308      	adds	r3, #8
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005888:	429a      	cmp	r2, r3
 800588a:	d102      	bne.n	8005892 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800588c:	e007      	b.n	800589e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d9d2      	bls.n	8005844 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d109      	bne.n	80058b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <chk_lock+0x80>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d101      	bne.n	80058b4 <chk_lock+0x84>
 80058b0:	2300      	movs	r3, #0
 80058b2:	e010      	b.n	80058d6 <chk_lock+0xa6>
 80058b4:	2312      	movs	r3, #18
 80058b6:	e00e      	b.n	80058d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d108      	bne.n	80058d0 <chk_lock+0xa0>
 80058be:	4a09      	ldr	r2, [pc, #36]	@ (80058e4 <chk_lock+0xb4>)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	4413      	add	r3, r2
 80058c6:	330c      	adds	r3, #12
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ce:	d101      	bne.n	80058d4 <chk_lock+0xa4>
 80058d0:	2310      	movs	r3, #16
 80058d2:	e000      	b.n	80058d6 <chk_lock+0xa6>
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	2001007c 	.word	0x2001007c

080058e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058ee:	2300      	movs	r3, #0
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	e002      	b.n	80058fa <enq_lock+0x12>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3301      	adds	r3, #1
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d806      	bhi.n	800590e <enq_lock+0x26>
 8005900:	4a09      	ldr	r2, [pc, #36]	@ (8005928 <enq_lock+0x40>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	4413      	add	r3, r2
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f2      	bne.n	80058f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b02      	cmp	r3, #2
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	2001007c 	.word	0x2001007c

0800592c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e01f      	b.n	800597c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800593c:	4a41      	ldr	r2, [pc, #260]	@ (8005a44 <inc_lock+0x118>)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	4413      	add	r3, r2
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d113      	bne.n	8005976 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800594e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a44 <inc_lock+0x118>)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	4413      	add	r3, r2
 8005956:	3304      	adds	r3, #4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800595e:	429a      	cmp	r2, r3
 8005960:	d109      	bne.n	8005976 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005962:	4a38      	ldr	r2, [pc, #224]	@ (8005a44 <inc_lock+0x118>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	4413      	add	r3, r2
 800596a:	3308      	adds	r3, #8
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005972:	429a      	cmp	r2, r3
 8005974:	d006      	beq.n	8005984 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d9dc      	bls.n	800593c <inc_lock+0x10>
 8005982:	e000      	b.n	8005986 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005984:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d132      	bne.n	80059f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e002      	b.n	8005998 <inc_lock+0x6c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d806      	bhi.n	80059ac <inc_lock+0x80>
 800599e:	4a29      	ldr	r2, [pc, #164]	@ (8005a44 <inc_lock+0x118>)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	4413      	add	r3, r2
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f2      	bne.n	8005992 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d101      	bne.n	80059b6 <inc_lock+0x8a>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e040      	b.n	8005a38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4922      	ldr	r1, [pc, #136]	@ (8005a44 <inc_lock+0x118>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	440b      	add	r3, r1
 80059c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	491e      	ldr	r1, [pc, #120]	@ (8005a44 <inc_lock+0x118>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	440b      	add	r3, r1
 80059d0:	3304      	adds	r3, #4
 80059d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	491a      	ldr	r1, [pc, #104]	@ (8005a44 <inc_lock+0x118>)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	440b      	add	r3, r1
 80059e0:	3308      	adds	r3, #8
 80059e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80059e4:	4a17      	ldr	r2, [pc, #92]	@ (8005a44 <inc_lock+0x118>)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	4413      	add	r3, r2
 80059ec:	330c      	adds	r3, #12
 80059ee:	2200      	movs	r2, #0
 80059f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d009      	beq.n	8005a0c <inc_lock+0xe0>
 80059f8:	4a12      	ldr	r2, [pc, #72]	@ (8005a44 <inc_lock+0x118>)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	4413      	add	r3, r2
 8005a00:	330c      	adds	r3, #12
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <inc_lock+0xe0>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e015      	b.n	8005a38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d108      	bne.n	8005a24 <inc_lock+0xf8>
 8005a12:	4a0c      	ldr	r2, [pc, #48]	@ (8005a44 <inc_lock+0x118>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	4413      	add	r3, r2
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	e001      	b.n	8005a28 <inc_lock+0xfc>
 8005a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a28:	4906      	ldr	r1, [pc, #24]	@ (8005a44 <inc_lock+0x118>)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	440b      	add	r3, r1
 8005a30:	330c      	adds	r3, #12
 8005a32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	2001007c 	.word	0x2001007c

08005a48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e010      	b.n	8005a78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a56:	4a0d      	ldr	r2, [pc, #52]	@ (8005a8c <clear_lock+0x44>)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	4413      	add	r3, r2
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d105      	bne.n	8005a72 <clear_lock+0x2a>
 8005a66:	4a09      	ldr	r2, [pc, #36]	@ (8005a8c <clear_lock+0x44>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	4413      	add	r3, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d9eb      	bls.n	8005a56 <clear_lock+0xe>
	}
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2001007c 	.word	0x2001007c

08005a90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	78db      	ldrb	r3, [r3, #3]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d034      	beq.n	8005b0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	7858      	ldrb	r0, [r3, #1]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	f7ff fd98 	bl	80055ec <disk_write>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	e022      	b.n	8005b0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d217      	bcs.n	8005b0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	789b      	ldrb	r3, [r3, #2]
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	e010      	b.n	8005b08 <sync_window+0x78>
					wsect += fs->fsize;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	7858      	ldrb	r0, [r3, #1]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005afa:	2301      	movs	r3, #1
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	f7ff fd75 	bl	80055ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d8eb      	bhi.n	8005ae6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d01b      	beq.n	8005b68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ffad 	bl	8005a90 <sync_window>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d113      	bne.n	8005b68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7858      	ldrb	r0, [r3, #1]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	f7ff fd2d 	bl	80055ac <disk_read>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	3b02      	subs	r3, #2
 8005b80:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	3b02      	subs	r3, #2
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d301      	bcc.n	8005b92 <clust2sect+0x20>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e008      	b.n	8005ba4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	895b      	ldrh	r3, [r3, #10]
 8005b96:	461a      	mov	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	fb03 f202 	mul.w	r2, r3, r2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	4413      	add	r3, r2
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d904      	bls.n	8005bd0 <get_fat+0x20>
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d302      	bcc.n	8005bd6 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e08e      	b.n	8005cf4 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bda:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d061      	beq.n	8005ca8 <get_fat+0xf8>
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	dc7b      	bgt.n	8005ce0 <get_fat+0x130>
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d002      	beq.n	8005bf2 <get_fat+0x42>
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d041      	beq.n	8005c74 <get_fat+0xc4>
 8005bf0:	e076      	b.n	8005ce0 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	0a5b      	lsrs	r3, r3, #9
 8005c08:	4413      	add	r3, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6938      	ldr	r0, [r7, #16]
 8005c0e:	f7ff ff83 	bl	8005b18 <move_window>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d166      	bne.n	8005ce6 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	60fa      	str	r2, [r7, #12]
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4413      	add	r3, r2
 8005c26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c2a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	0a5b      	lsrs	r3, r3, #9
 8005c34:	4413      	add	r3, r2
 8005c36:	4619      	mov	r1, r3
 8005c38:	6938      	ldr	r0, [r7, #16]
 8005c3a:	f7ff ff6d 	bl	8005b18 <move_window>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d152      	bne.n	8005cea <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <get_fat+0xba>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	e002      	b.n	8005c70 <get_fat+0xc0>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c70:	617b      	str	r3, [r7, #20]
			break;
 8005c72:	e03f      	b.n	8005cf4 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6a1a      	ldr	r2, [r3, #32]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	4413      	add	r3, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6938      	ldr	r0, [r7, #16]
 8005c82:	f7ff ff49 	bl	8005b18 <move_window>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d130      	bne.n	8005cee <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fcc5 	bl	800562c <ld_word>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	617b      	str	r3, [r7, #20]
			break;
 8005ca6:	e025      	b.n	8005cf4 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	6a1a      	ldr	r2, [r3, #32]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	4413      	add	r3, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6938      	ldr	r0, [r7, #16]
 8005cb6:	f7ff ff2f 	bl	8005b18 <move_window>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d118      	bne.n	8005cf2 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005cce:	4413      	add	r3, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fcc4 	bl	800565e <ld_dword>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005cdc:	617b      	str	r3, [r7, #20]
			break;
 8005cde:	e009      	b.n	8005cf4 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e006      	b.n	8005cf4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ce6:	bf00      	nop
 8005ce8:	e004      	b.n	8005cf4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cf2:	bf00      	nop
		}
	}

	return val;
 8005cf4:	697b      	ldr	r3, [r7, #20]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005cfe:	b590      	push	{r4, r7, lr}
 8005d00:	b089      	sub	sp, #36	@ 0x24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f240 80d9 	bls.w	8005ec8 <put_fat+0x1ca>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	f080 80d3 	bcs.w	8005ec8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	f000 8096 	beq.w	8005e58 <put_fat+0x15a>
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	f300 80cb 	bgt.w	8005ec8 <put_fat+0x1ca>
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d002      	beq.n	8005d3c <put_fat+0x3e>
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d06e      	beq.n	8005e18 <put_fat+0x11a>
 8005d3a:	e0c5      	b.n	8005ec8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4413      	add	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	0a5b      	lsrs	r3, r3, #9
 8005d52:	4413      	add	r3, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fede 	bl	8005b18 <move_window>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d60:	7ffb      	ldrb	r3, [r7, #31]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 80a9 	bne.w	8005eba <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	61b9      	str	r1, [r7, #24]
 8005d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d78:	4413      	add	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00d      	beq.n	8005da2 <put_fat+0xa4>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	b25b      	sxtb	r3, r3
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	b25a      	sxtb	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	b25b      	sxtb	r3, r3
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	b25b      	sxtb	r3, r3
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	e001      	b.n	8005da6 <put_fat+0xa8>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	0a5b      	lsrs	r3, r3, #9
 8005db8:	4413      	add	r3, r2
 8005dba:	4619      	mov	r1, r3
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff feab 	bl	8005b18 <move_window>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dc6:	7ffb      	ldrb	r3, [r7, #31]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d178      	bne.n	8005ebe <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd8:	4413      	add	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <put_fat+0xf0>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	e00e      	b.n	8005e0c <put_fat+0x10e>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	b25b      	sxtb	r3, r3
 8005df4:	f023 030f 	bic.w	r3, r3, #15
 8005df8:	b25a      	sxtb	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	b25b      	sxtb	r3, r3
 8005e06:	4313      	orrs	r3, r2
 8005e08:	b25b      	sxtb	r3, r3
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	70da      	strb	r2, [r3, #3]
			break;
 8005e16:	e057      	b.n	8005ec8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	0a1b      	lsrs	r3, r3, #8
 8005e20:	4413      	add	r3, r2
 8005e22:	4619      	mov	r1, r3
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff fe77 	bl	8005b18 <move_window>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d146      	bne.n	8005ec2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005e42:	4413      	add	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	b292      	uxth	r2, r2
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fc2a 	bl	80056a4 <st_word>
			fs->wflag = 1;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	70da      	strb	r2, [r3, #3]
			break;
 8005e56:	e037      	b.n	8005ec8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1a      	ldr	r2, [r3, #32]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	09db      	lsrs	r3, r3, #7
 8005e60:	4413      	add	r3, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fe57 	bl	8005b18 <move_window>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e6e:	7ffb      	ldrb	r3, [r7, #31]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d128      	bne.n	8005ec6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005e88:	4413      	add	r3, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff fbe7 	bl	800565e <ld_dword>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e96:	4323      	orrs	r3, r4
 8005e98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005ea8:	4413      	add	r3, r2
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fc14 	bl	80056da <st_dword>
			fs->wflag = 1;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	70da      	strb	r2, [r3, #3]
			break;
 8005eb8:	e006      	b.n	8005ec8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005eba:	bf00      	nop
 8005ebc:	e004      	b.n	8005ec8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005ec6:	bf00      	nop
		}
	}
	return res;
 8005ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3724      	adds	r7, #36	@ 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}

08005ed2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b088      	sub	sp, #32
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d904      	bls.n	8005ef8 <remove_chain+0x26>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d301      	bcc.n	8005efc <remove_chain+0x2a>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e04b      	b.n	8005f94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	69b8      	ldr	r0, [r7, #24]
 8005f0a:	f7ff fef8 	bl	8005cfe <put_fat>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005f12:	7ffb      	ldrb	r3, [r7, #31]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <remove_chain+0x4a>
 8005f18:	7ffb      	ldrb	r3, [r7, #31]
 8005f1a:	e03b      	b.n	8005f94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff fe46 	bl	8005bb0 <get_fat>
 8005f24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d031      	beq.n	8005f90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <remove_chain+0x64>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e02e      	b.n	8005f94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d101      	bne.n	8005f42 <remove_chain+0x70>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e028      	b.n	8005f94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005f42:	2200      	movs	r2, #0
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	69b8      	ldr	r0, [r7, #24]
 8005f48:	f7ff fed9 	bl	8005cfe <put_fat>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005f50:	7ffb      	ldrb	r3, [r7, #31]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <remove_chain+0x88>
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
 8005f58:	e01c      	b.n	8005f94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	3b02      	subs	r3, #2
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d20b      	bcs.n	8005f80 <remove_chain+0xae>
			fs->free_clst++;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	791b      	ldrb	r3, [r3, #4]
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d3c6      	bcc.n	8005f1c <remove_chain+0x4a>
 8005f8e:	e000      	b.n	8005f92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005f90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10d      	bne.n	8005fce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <create_chain+0x2c>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d31b      	bcc.n	8006000 <create_chain+0x64>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e018      	b.n	8006000 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fded 	bl	8005bb0 <get_fat>
 8005fd6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d801      	bhi.n	8005fe2 <create_chain+0x46>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e070      	b.n	80060c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d101      	bne.n	8005fee <create_chain+0x52>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	e06a      	b.n	80060c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d201      	bcs.n	8005ffc <create_chain+0x60>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	e063      	b.n	80060c4 <create_chain+0x128>
		scl = clst;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	3301      	adds	r3, #1
 8006008:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	429a      	cmp	r2, r3
 8006012:	d307      	bcc.n	8006024 <create_chain+0x88>
				ncl = 2;
 8006014:	2302      	movs	r3, #2
 8006016:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	429a      	cmp	r2, r3
 800601e:	d901      	bls.n	8006024 <create_chain+0x88>
 8006020:	2300      	movs	r3, #0
 8006022:	e04f      	b.n	80060c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fdc2 	bl	8005bb0 <get_fat>
 800602c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00e      	beq.n	8006052 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d003      	beq.n	8006042 <create_chain+0xa6>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d101      	bne.n	8006046 <create_chain+0xaa>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	e03e      	b.n	80060c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	429a      	cmp	r2, r3
 800604c:	d1da      	bne.n	8006004 <create_chain+0x68>
 800604e:	2300      	movs	r3, #0
 8006050:	e038      	b.n	80060c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006052:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	69f9      	ldr	r1, [r7, #28]
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f7ff fe4f 	bl	8005cfe <put_fat>
 8006060:	4603      	mov	r3, r0
 8006062:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <create_chain+0xe2>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d006      	beq.n	800607e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6938      	ldr	r0, [r7, #16]
 8006076:	f7ff fe42 	bl	8005cfe <put_fat>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d116      	bne.n	80060b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	3b02      	subs	r3, #2
 8006094:	429a      	cmp	r2, r3
 8006096:	d804      	bhi.n	80060a2 <create_chain+0x106>
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	1e5a      	subs	r2, r3, #1
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	791b      	ldrb	r3, [r3, #4]
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	711a      	strb	r2, [r3, #4]
 80060b0:	e007      	b.n	80060c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d102      	bne.n	80060be <create_chain+0x122>
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295
 80060bc:	e000      	b.n	80060c0 <create_chain+0x124>
 80060be:	2301      	movs	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80060c2:	69fb      	ldr	r3, [r7, #28]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	3304      	adds	r3, #4
 80060e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	0a5b      	lsrs	r3, r3, #9
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	8952      	ldrh	r2, [r2, #10]
 80060ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1d1a      	adds	r2, r3, #4
 80060f6:	613a      	str	r2, [r7, #16]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <clmt_clust+0x3a>
 8006102:	2300      	movs	r3, #0
 8006104:	e010      	b.n	8006128 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	429a      	cmp	r2, r3
 800610c:	d307      	bcc.n	800611e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3304      	adds	r3, #4
 800611a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800611c:	e7e9      	b.n	80060f2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800611e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800614a:	d204      	bcs.n	8006156 <dir_sdi+0x22>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006156:	2302      	movs	r3, #2
 8006158:	e063      	b.n	8006222 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <dir_sdi+0x46>
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d902      	bls.n	800617a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10c      	bne.n	800619a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	8912      	ldrh	r2, [r2, #8]
 8006188:	4293      	cmp	r3, r2
 800618a:	d301      	bcc.n	8006190 <dir_sdi+0x5c>
 800618c:	2302      	movs	r3, #2
 800618e:	e048      	b.n	8006222 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	61da      	str	r2, [r3, #28]
 8006198:	e029      	b.n	80061ee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	895b      	ldrh	r3, [r3, #10]
 800619e:	025b      	lsls	r3, r3, #9
 80061a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061a2:	e019      	b.n	80061d8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6979      	ldr	r1, [r7, #20]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fd01 	bl	8005bb0 <get_fat>
 80061ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d101      	bne.n	80061bc <dir_sdi+0x88>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e032      	b.n	8006222 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d904      	bls.n	80061cc <dir_sdi+0x98>
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d301      	bcc.n	80061d0 <dir_sdi+0x9c>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e028      	b.n	8006222 <dir_sdi+0xee>
			ofs -= csz;
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d2e1      	bcs.n	80061a4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80061e0:	6979      	ldr	r1, [r7, #20]
 80061e2:	6938      	ldr	r0, [r7, #16]
 80061e4:	f7ff fcc5 	bl	8005b72 <clust2sect>
 80061e8:	4602      	mov	r2, r0
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <dir_sdi+0xcc>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e010      	b.n	8006222 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	0a5b      	lsrs	r3, r3, #9
 8006208:	441a      	add	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	441a      	add	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	3320      	adds	r3, #32
 8006240:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <dir_next+0x28>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006250:	d301      	bcc.n	8006256 <dir_next+0x2c>
 8006252:	2304      	movs	r3, #4
 8006254:	e0aa      	b.n	80063ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 8098 	bne.w	8006392 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	8912      	ldrh	r2, [r2, #8]
 800627c:	4293      	cmp	r3, r2
 800627e:	f0c0 8088 	bcc.w	8006392 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	61da      	str	r2, [r3, #28]
 8006288:	2304      	movs	r3, #4
 800628a:	e08f      	b.n	80063ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	0a5b      	lsrs	r3, r3, #9
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	8952      	ldrh	r2, [r2, #10]
 8006294:	3a01      	subs	r2, #1
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d17a      	bne.n	8006392 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7ff fc83 	bl	8005bb0 <get_fat>
 80062aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d801      	bhi.n	80062b6 <dir_next+0x8c>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e07a      	b.n	80063ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d101      	bne.n	80062c2 <dir_next+0x98>
 80062be:	2301      	movs	r3, #1
 80062c0:	e074      	b.n	80063ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d358      	bcc.n	800637e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	61da      	str	r2, [r3, #28]
 80062d8:	2304      	movs	r3, #4
 80062da:	e067      	b.n	80063ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7ff fe59 	bl	8005f9c <create_chain>
 80062ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <dir_next+0xcc>
 80062f2:	2307      	movs	r3, #7
 80062f4:	e05a      	b.n	80063ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <dir_next+0xd6>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e055      	b.n	80063ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d101      	bne.n	800630c <dir_next+0xe2>
 8006308:	2301      	movs	r3, #1
 800630a:	e04f      	b.n	80063ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fbbf 	bl	8005a90 <sync_window>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <dir_next+0xf2>
 8006318:	2301      	movs	r3, #1
 800631a:	e047      	b.n	80063ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3330      	adds	r3, #48	@ 0x30
 8006320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fa24 	bl	8005774 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	6979      	ldr	r1, [r7, #20]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff fc1d 	bl	8005b72 <clust2sect>
 8006338:	4602      	mov	r2, r0
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800633e:	e012      	b.n	8006366 <dir_next+0x13c>
						fs->wflag = 1;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff fba2 	bl	8005a90 <sync_window>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <dir_next+0x12c>
 8006352:	2301      	movs	r3, #1
 8006354:	e02a      	b.n	80063ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3301      	adds	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	895b      	ldrh	r3, [r3, #10]
 800636a:	461a      	mov	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4293      	cmp	r3, r2
 8006370:	d3e6      	bcc.n	8006340 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad2      	subs	r2, r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006384:	6979      	ldr	r1, [r7, #20]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff fbf3 	bl	8005b72 <clust2sect>
 800638c:	4602      	mov	r2, r0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff feb4 	bl	8006134 <dir_sdi>
 80063cc:	4603      	mov	r3, r0
 80063ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d12b      	bne.n	800642e <dir_alloc+0x7a>
		n = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4619      	mov	r1, r3
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff fb99 	bl	8005b18 <move_window>
 80063e6:	4603      	mov	r3, r0
 80063e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11d      	bne.n	800642c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2be5      	cmp	r3, #229	@ 0xe5
 80063f8:	d004      	beq.n	8006404 <dir_alloc+0x50>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	3301      	adds	r3, #1
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d102      	bne.n	8006418 <dir_alloc+0x64>
 8006412:	e00c      	b.n	800642e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006418:	2101      	movs	r1, #1
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff ff05 	bl	800622a <dir_next>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0d7      	beq.n	80063da <dir_alloc+0x26>
 800642a:	e000      	b.n	800642e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800642c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d101      	bne.n	8006438 <dir_alloc+0x84>
 8006434:	2307      	movs	r3, #7
 8006436:	75fb      	strb	r3, [r7, #23]
	return res;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	331a      	adds	r3, #26
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff f8eb 	bl	800562c <ld_word>
 8006456:	4603      	mov	r3, r0
 8006458:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b03      	cmp	r3, #3
 8006460:	d109      	bne.n	8006476 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	3314      	adds	r3, #20
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff f8e0 	bl	800562c <ld_word>
 800646c:	4603      	mov	r3, r0
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	331a      	adds	r3, #26
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	b292      	uxth	r2, r2
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff f904 	bl	80056a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d109      	bne.n	80064b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f103 0214 	add.w	r2, r3, #20
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0c1b      	lsrs	r3, r3, #16
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f7ff f8f6 	bl	80056a4 <st_word>
	}
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fe2f 	bl	8006134 <dir_sdi>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <dir_find+0x24>
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	e03e      	b.n	8006562 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	4619      	mov	r1, r3
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f7ff fb14 	bl	8005b18 <move_window>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d12f      	bne.n	800655a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <dir_find+0x4e>
 8006508:	2304      	movs	r3, #4
 800650a:	75fb      	strb	r3, [r7, #23]
 800650c:	e028      	b.n	8006560 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	330b      	adds	r3, #11
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800651a:	b2da      	uxtb	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	330b      	adds	r3, #11
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <dir_find+0x86>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a18      	ldr	r0, [r3, #32]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3324      	adds	r3, #36	@ 0x24
 8006538:	220b      	movs	r2, #11
 800653a:	4619      	mov	r1, r3
 800653c:	f7ff f935 	bl	80057aa <mem_cmp>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006546:	2100      	movs	r1, #0
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe6e 	bl	800622a <dir_next>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0c5      	beq.n	80064e4 <dir_find+0x24>
 8006558:	e002      	b.n	8006560 <dir_find+0xa0>
		if (res != FR_OK) break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800655e:	bf00      	nop

	return res;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006578:	2101      	movs	r1, #1
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff ff1a 	bl	80063b4 <dir_alloc>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11c      	bne.n	80065c4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	4619      	mov	r1, r3
 8006590:	68b8      	ldr	r0, [r7, #8]
 8006592:	f7ff fac1 	bl	8005b18 <move_window>
 8006596:	4603      	mov	r3, r0
 8006598:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d111      	bne.n	80065c4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	2220      	movs	r2, #32
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff f8e3 	bl	8005774 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a18      	ldr	r0, [r3, #32]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3324      	adds	r3, #36	@ 0x24
 80065b6:	220b      	movs	r2, #11
 80065b8:	4619      	mov	r1, r3
 80065ba:	f7ff f8ba 	bl	8005732 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2201      	movs	r2, #1
 80065c2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3324      	adds	r3, #36	@ 0x24
 80065e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80065e6:	220b      	movs	r2, #11
 80065e8:	2120      	movs	r1, #32
 80065ea:	68b8      	ldr	r0, [r7, #8]
 80065ec:	f7ff f8c2 	bl	8005774 <mem_set>
	si = i = 0; ni = 8;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	2308      	movs	r3, #8
 80065fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	61fa      	str	r2, [r7, #28]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800660a:	7efb      	ldrb	r3, [r7, #27]
 800660c:	2b20      	cmp	r3, #32
 800660e:	d94e      	bls.n	80066ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006610:	7efb      	ldrb	r3, [r7, #27]
 8006612:	2b2f      	cmp	r3, #47	@ 0x2f
 8006614:	d006      	beq.n	8006624 <create_name+0x54>
 8006616:	7efb      	ldrb	r3, [r7, #27]
 8006618:	2b5c      	cmp	r3, #92	@ 0x5c
 800661a:	d110      	bne.n	800663e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800661c:	e002      	b.n	8006624 <create_name+0x54>
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	3301      	adds	r3, #1
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b2f      	cmp	r3, #47	@ 0x2f
 800662e:	d0f6      	beq.n	800661e <create_name+0x4e>
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b5c      	cmp	r3, #92	@ 0x5c
 800663a:	d0f0      	beq.n	800661e <create_name+0x4e>
			break;
 800663c:	e038      	b.n	80066b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800663e:	7efb      	ldrb	r3, [r7, #27]
 8006640:	2b2e      	cmp	r3, #46	@ 0x2e
 8006642:	d003      	beq.n	800664c <create_name+0x7c>
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	429a      	cmp	r2, r3
 800664a:	d30c      	bcc.n	8006666 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b0b      	cmp	r3, #11
 8006650:	d002      	beq.n	8006658 <create_name+0x88>
 8006652:	7efb      	ldrb	r3, [r7, #27]
 8006654:	2b2e      	cmp	r3, #46	@ 0x2e
 8006656:	d001      	beq.n	800665c <create_name+0x8c>
 8006658:	2306      	movs	r3, #6
 800665a:	e044      	b.n	80066e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800665c:	2308      	movs	r3, #8
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	230b      	movs	r3, #11
 8006662:	617b      	str	r3, [r7, #20]
			continue;
 8006664:	e022      	b.n	80066ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006666:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800666a:	2b00      	cmp	r3, #0
 800666c:	da04      	bge.n	8006678 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800666e:	7efb      	ldrb	r3, [r7, #27]
 8006670:	3b80      	subs	r3, #128	@ 0x80
 8006672:	4a1f      	ldr	r2, [pc, #124]	@ (80066f0 <create_name+0x120>)
 8006674:	5cd3      	ldrb	r3, [r2, r3]
 8006676:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006678:	7efb      	ldrb	r3, [r7, #27]
 800667a:	4619      	mov	r1, r3
 800667c:	481d      	ldr	r0, [pc, #116]	@ (80066f4 <create_name+0x124>)
 800667e:	f7ff f8bb 	bl	80057f8 <chk_chr>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <create_name+0xbc>
 8006688:	2306      	movs	r3, #6
 800668a:	e02c      	b.n	80066e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800668c:	7efb      	ldrb	r3, [r7, #27]
 800668e:	2b60      	cmp	r3, #96	@ 0x60
 8006690:	d905      	bls.n	800669e <create_name+0xce>
 8006692:	7efb      	ldrb	r3, [r7, #27]
 8006694:	2b7a      	cmp	r3, #122	@ 0x7a
 8006696:	d802      	bhi.n	800669e <create_name+0xce>
 8006698:	7efb      	ldrb	r3, [r7, #27]
 800669a:	3b20      	subs	r3, #32
 800669c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	613a      	str	r2, [r7, #16]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	4413      	add	r3, r2
 80066a8:	7efa      	ldrb	r2, [r7, #27]
 80066aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80066ac:	e7a6      	b.n	80065fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80066ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	441a      	add	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <create_name+0xf4>
 80066c0:	2306      	movs	r3, #6
 80066c2:	e010      	b.n	80066e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2be5      	cmp	r3, #229	@ 0xe5
 80066ca:	d102      	bne.n	80066d2 <create_name+0x102>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2205      	movs	r2, #5
 80066d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80066d2:	7efb      	ldrb	r3, [r7, #27]
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d801      	bhi.n	80066dc <create_name+0x10c>
 80066d8:	2204      	movs	r2, #4
 80066da:	e000      	b.n	80066de <create_name+0x10e>
 80066dc:	2200      	movs	r2, #0
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	330b      	adds	r3, #11
 80066e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80066e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	08008ccc 	.word	0x08008ccc
 80066f4:	08008c68 	.word	0x08008c68

080066f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800670c:	e002      	b.n	8006714 <follow_path+0x1c>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b2f      	cmp	r3, #47	@ 0x2f
 800671a:	d0f8      	beq.n	800670e <follow_path+0x16>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b5c      	cmp	r3, #92	@ 0x5c
 8006722:	d0f4      	beq.n	800670e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2200      	movs	r2, #0
 8006728:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b1f      	cmp	r3, #31
 8006730:	d80a      	bhi.n	8006748 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2280      	movs	r2, #128	@ 0x80
 8006736:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800673a:	2100      	movs	r1, #0
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fcf9 	bl	8006134 <dir_sdi>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
 8006746:	e043      	b.n	80067d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006748:	463b      	mov	r3, r7
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ff3f 	bl	80065d0 <create_name>
 8006752:	4603      	mov	r3, r0
 8006754:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d134      	bne.n	80067c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff feaf 	bl	80064c0 <dir_find>
 8006762:	4603      	mov	r3, r0
 8006764:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800676c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b04      	cmp	r3, #4
 8006778:	d127      	bne.n	80067ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800677a:	7afb      	ldrb	r3, [r7, #11]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d122      	bne.n	80067ca <follow_path+0xd2>
 8006784:	2305      	movs	r3, #5
 8006786:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006788:	e01f      	b.n	80067ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11c      	bne.n	80067ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	799b      	ldrb	r3, [r3, #6]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80067a0:	2305      	movs	r3, #5
 80067a2:	75fb      	strb	r3, [r7, #23]
 80067a4:	e014      	b.n	80067d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b4:	4413      	add	r3, r2
 80067b6:	4619      	mov	r1, r3
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff fe42 	bl	8006442 <ld_clust>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067c4:	e7c0      	b.n	8006748 <follow_path+0x50>
			if (res != FR_OK) break;
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <follow_path+0xd8>
				break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067ce:	bf00      	nop
			}
		}
	}

	return res;
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80067da:	b480      	push	{r7}
 80067dc:	b087      	sub	sp, #28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d031      	beq.n	8006854 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e002      	b.n	80067fe <get_ldnumber+0x24>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3301      	adds	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b20      	cmp	r3, #32
 8006804:	d903      	bls.n	800680e <get_ldnumber+0x34>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b3a      	cmp	r3, #58	@ 0x3a
 800680c:	d1f4      	bne.n	80067f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b3a      	cmp	r3, #58	@ 0x3a
 8006814:	d11c      	bne.n	8006850 <get_ldnumber+0x76>
			tp = *path;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	60fa      	str	r2, [r7, #12]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	3b30      	subs	r3, #48	@ 0x30
 8006826:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b09      	cmp	r3, #9
 800682c:	d80e      	bhi.n	800684c <get_ldnumber+0x72>
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	429a      	cmp	r2, r3
 8006834:	d10a      	bne.n	800684c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d107      	bne.n	800684c <get_ldnumber+0x72>
					vol = (int)i;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3301      	adds	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	e002      	b.n	8006856 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006850:	2300      	movs	r3, #0
 8006852:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006854:	693b      	ldr	r3, [r7, #16]
}
 8006856:	4618      	mov	r0, r3
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	70da      	strb	r2, [r3, #3]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff f94a 	bl	8005b18 <move_window>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <check_fs+0x2a>
 800688a:	2304      	movs	r3, #4
 800688c:	e038      	b.n	8006900 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3330      	adds	r3, #48	@ 0x30
 8006892:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fec8 	bl	800562c <ld_word>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <check_fs+0x48>
 80068a8:	2303      	movs	r3, #3
 80068aa:	e029      	b.n	8006900 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068b2:	2be9      	cmp	r3, #233	@ 0xe9
 80068b4:	d009      	beq.n	80068ca <check_fs+0x66>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068bc:	2beb      	cmp	r3, #235	@ 0xeb
 80068be:	d11e      	bne.n	80068fe <check_fs+0x9a>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80068c6:	2b90      	cmp	r3, #144	@ 0x90
 80068c8:	d119      	bne.n	80068fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3330      	adds	r3, #48	@ 0x30
 80068ce:	3336      	adds	r3, #54	@ 0x36
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fec4 	bl	800565e <ld_dword>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80068dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006908 <check_fs+0xa4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d101      	bne.n	80068e6 <check_fs+0x82>
 80068e2:	2300      	movs	r3, #0
 80068e4:	e00c      	b.n	8006900 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3330      	adds	r3, #48	@ 0x30
 80068ea:	3352      	adds	r3, #82	@ 0x52
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe feb6 	bl	800565e <ld_dword>
 80068f2:	4603      	mov	r3, r0
 80068f4:	4a05      	ldr	r2, [pc, #20]	@ (800690c <check_fs+0xa8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d101      	bne.n	80068fe <check_fs+0x9a>
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80068fe:	2302      	movs	r3, #2
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	00544146 	.word	0x00544146
 800690c:	33544146 	.word	0x33544146

08006910 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b096      	sub	sp, #88	@ 0x58
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff ff58 	bl	80067da <get_ldnumber>
 800692a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800692c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	da01      	bge.n	8006936 <find_volume+0x26>
 8006932:	230b      	movs	r3, #11
 8006934:	e22d      	b.n	8006d92 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006936:	4aa1      	ldr	r2, [pc, #644]	@ (8006bbc <find_volume+0x2ac>)
 8006938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800693a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <find_volume+0x3a>
 8006946:	230c      	movs	r3, #12
 8006948:	e223      	b.n	8006d92 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800694e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01a      	beq.n	8006996 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fddf 	bl	8005528 <disk_status>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006970:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10c      	bne.n	8006996 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <find_volume+0x82>
 8006982:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800698e:	230a      	movs	r3, #10
 8006990:	e1ff      	b.n	8006d92 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006992:	2300      	movs	r3, #0
 8006994:	e1fd      	b.n	8006d92 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800699c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fdd7 	bl	800555c <disk_initialize>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80069b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80069c0:	2303      	movs	r3, #3
 80069c2:	e1e6      	b.n	8006d92 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <find_volume+0xca>
 80069ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80069d6:	230a      	movs	r3, #10
 80069d8:	e1db      	b.n	8006d92 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80069de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80069e2:	f7ff ff3f 	bl	8006864 <check_fs>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80069ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d149      	bne.n	8006a88 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069f4:	2300      	movs	r3, #0
 80069f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80069f8:	e01e      	b.n	8006a38 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006a08:	4413      	add	r3, r2
 8006a0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	3304      	adds	r3, #4
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d006      	beq.n	8006a24 <find_volume+0x114>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	3308      	adds	r3, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fe1f 	bl	800565e <ld_dword>
 8006a20:	4602      	mov	r2, r0
 8006a22:	e000      	b.n	8006a26 <find_volume+0x116>
 8006a24:	2200      	movs	r2, #0
 8006a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	3358      	adds	r3, #88	@ 0x58
 8006a2c:	443b      	add	r3, r7
 8006a2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a34:	3301      	adds	r3, #1
 8006a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d9dd      	bls.n	80069fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a3e:	2300      	movs	r3, #0
 8006a40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <find_volume+0x13e>
 8006a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	3358      	adds	r3, #88	@ 0x58
 8006a54:	443b      	add	r3, r7
 8006a56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <find_volume+0x15e>
 8006a62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a66:	f7ff fefd 	bl	8006864 <check_fs>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	e000      	b.n	8006a70 <find_volume+0x160>
 8006a6e:	2303      	movs	r3, #3
 8006a70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d905      	bls.n	8006a88 <find_volume+0x178>
 8006a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a7e:	3301      	adds	r3, #1
 8006a80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d9e2      	bls.n	8006a4e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d101      	bne.n	8006a94 <find_volume+0x184>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e17e      	b.n	8006d92 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d901      	bls.n	8006aa0 <find_volume+0x190>
 8006a9c:	230d      	movs	r3, #13
 8006a9e:	e178      	b.n	8006d92 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	3330      	adds	r3, #48	@ 0x30
 8006aa4:	330b      	adds	r3, #11
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fdc0 	bl	800562c <ld_word>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab2:	d001      	beq.n	8006ab8 <find_volume+0x1a8>
 8006ab4:	230d      	movs	r3, #13
 8006ab6:	e16c      	b.n	8006d92 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	3330      	adds	r3, #48	@ 0x30
 8006abc:	3316      	adds	r3, #22
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fdb4 	bl	800562c <ld_word>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <find_volume+0x1cc>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	3330      	adds	r3, #48	@ 0x30
 8006ad2:	3324      	adds	r3, #36	@ 0x24
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe fdc2 	bl	800565e <ld_dword>
 8006ada:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ae0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aee:	789b      	ldrb	r3, [r3, #2]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d005      	beq.n	8006b00 <find_volume+0x1f0>
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	789b      	ldrb	r3, [r3, #2]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d001      	beq.n	8006b00 <find_volume+0x1f0>
 8006afc:	230d      	movs	r3, #13
 8006afe:	e148      	b.n	8006d92 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	789b      	ldrb	r3, [r3, #2]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
 8006b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b14:	461a      	mov	r2, r3
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	895b      	ldrh	r3, [r3, #10]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d008      	beq.n	8006b34 <find_volume+0x224>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	895b      	ldrh	r3, [r3, #10]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	895b      	ldrh	r3, [r3, #10]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <find_volume+0x228>
 8006b34:	230d      	movs	r3, #13
 8006b36:	e12c      	b.n	8006d92 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3a:	3330      	adds	r3, #48	@ 0x30
 8006b3c:	3311      	adds	r3, #17
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fd74 	bl	800562c <ld_word>
 8006b44:	4603      	mov	r3, r0
 8006b46:	461a      	mov	r2, r3
 8006b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	891b      	ldrh	r3, [r3, #8]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <find_volume+0x24e>
 8006b5a:	230d      	movs	r3, #13
 8006b5c:	e119      	b.n	8006d92 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b60:	3330      	adds	r3, #48	@ 0x30
 8006b62:	3313      	adds	r3, #19
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe fd61 	bl	800562c <ld_word>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <find_volume+0x272>
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	3330      	adds	r3, #48	@ 0x30
 8006b78:	3320      	adds	r3, #32
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fd6f 	bl	800565e <ld_dword>
 8006b80:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	3330      	adds	r3, #48	@ 0x30
 8006b86:	330e      	adds	r3, #14
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fd4f 	bl	800562c <ld_word>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <find_volume+0x28c>
 8006b98:	230d      	movs	r3, #13
 8006b9a:	e0fa      	b.n	8006d92 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b9c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba0:	4413      	add	r3, r2
 8006ba2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ba4:	8912      	ldrh	r2, [r2, #8]
 8006ba6:	0912      	lsrs	r2, r2, #4
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	4413      	add	r3, r2
 8006bac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d204      	bcs.n	8006bc0 <find_volume+0x2b0>
 8006bb6:	230d      	movs	r3, #13
 8006bb8:	e0eb      	b.n	8006d92 <find_volume+0x482>
 8006bba:	bf00      	nop
 8006bbc:	20010074 	.word	0x20010074
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bc8:	8952      	ldrh	r2, [r2, #10]
 8006bca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bce:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <find_volume+0x2ca>
 8006bd6:	230d      	movs	r3, #13
 8006bd8:	e0db      	b.n	8006d92 <find_volume+0x482>
		fmt = FS_FAT32;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d802      	bhi.n	8006bf0 <find_volume+0x2e0>
 8006bea:	2302      	movs	r3, #2
 8006bec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d802      	bhi.n	8006c00 <find_volume+0x2f0>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c06:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c0c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006c0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c12:	441a      	add	r2, r3
 8006c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c16:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006c18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1c:	441a      	add	r2, r3
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8006c22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d11e      	bne.n	8006c68 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2c:	3330      	adds	r3, #48	@ 0x30
 8006c2e:	332a      	adds	r3, #42	@ 0x2a
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fcfb 	bl	800562c <ld_word>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <find_volume+0x330>
 8006c3c:	230d      	movs	r3, #13
 8006c3e:	e0a8      	b.n	8006d92 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c42:	891b      	ldrh	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <find_volume+0x33c>
 8006c48:	230d      	movs	r3, #13
 8006c4a:	e0a2      	b.n	8006d92 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	3330      	adds	r3, #48	@ 0x30
 8006c50:	332c      	adds	r3, #44	@ 0x2c
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fd03 	bl	800565e <ld_dword>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c66:	e01f      	b.n	8006ca8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	891b      	ldrh	r3, [r3, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <find_volume+0x364>
 8006c70:	230d      	movs	r3, #13
 8006c72:	e08e      	b.n	8006d92 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	6a1a      	ldr	r2, [r3, #32]
 8006c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c7a:	441a      	add	r2, r3
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d103      	bne.n	8006c90 <find_volume+0x380>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	e00a      	b.n	8006ca6 <find_volume+0x396>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	695a      	ldr	r2, [r3, #20]
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	085a      	lsrs	r2, r3, #1
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006ca6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cae:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006cb2:	0a5b      	lsrs	r3, r3, #9
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d201      	bcs.n	8006cbc <find_volume+0x3ac>
 8006cb8:	230d      	movs	r3, #13
 8006cba:	e06a      	b.n	8006d92 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	611a      	str	r2, [r3, #16]
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	2280      	movs	r2, #128	@ 0x80
 8006cd0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006cd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d149      	bne.n	8006d6e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cdc:	3330      	adds	r3, #48	@ 0x30
 8006cde:	3330      	adds	r3, #48	@ 0x30
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fe fca3 	bl	800562c <ld_word>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d140      	bne.n	8006d6e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cee:	3301      	adds	r3, #1
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cf4:	f7fe ff10 	bl	8005b18 <move_window>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d137      	bne.n	8006d6e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d00:	2200      	movs	r2, #0
 8006d02:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d06:	3330      	adds	r3, #48	@ 0x30
 8006d08:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe fc8d 	bl	800562c <ld_word>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d127      	bne.n	8006d6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	3330      	adds	r3, #48	@ 0x30
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fc9b 	bl	800565e <ld_dword>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d9c <find_volume+0x48c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d11e      	bne.n	8006d6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	3330      	adds	r3, #48	@ 0x30
 8006d34:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fc90 	bl	800565e <ld_dword>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4a17      	ldr	r2, [pc, #92]	@ (8006da0 <find_volume+0x490>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d113      	bne.n	8006d6e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d48:	3330      	adds	r3, #48	@ 0x30
 8006d4a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fc85 	bl	800565e <ld_dword>
 8006d54:	4602      	mov	r2, r0
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	3330      	adds	r3, #48	@ 0x30
 8006d5e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fc7b 	bl	800565e <ld_dword>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d70:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006d74:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d76:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <find_volume+0x494>)
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	4b09      	ldr	r3, [pc, #36]	@ (8006da4 <find_volume+0x494>)
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	4b08      	ldr	r3, [pc, #32]	@ (8006da4 <find_volume+0x494>)
 8006d84:	881a      	ldrh	r2, [r3, #0]
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d8c:	f7fe fe5c 	bl	8005a48 <clear_lock>
#endif
	return FR_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3758      	adds	r7, #88	@ 0x58
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	41615252 	.word	0x41615252
 8006da0:	61417272 	.word	0x61417272
 8006da4:	20010078 	.word	0x20010078

08006da8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006db2:	2309      	movs	r3, #9
 8006db4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01c      	beq.n	8006df6 <validate+0x4e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d018      	beq.n	8006df6 <validate+0x4e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d013      	beq.n	8006df6 <validate+0x4e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	889a      	ldrh	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	88db      	ldrh	r3, [r3, #6]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d10c      	bne.n	8006df6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	785b      	ldrb	r3, [r3, #1]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fba0 	bl	8005528 <disk_status>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <validate+0x4e>
			res = FR_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <validate+0x5a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	e000      	b.n	8006e04 <validate+0x5c>
 8006e02:	2300      	movs	r3, #0
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	6013      	str	r3, [r2, #0]
	return res;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e26:	f107 0310 	add.w	r3, r7, #16
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fcd5 	bl	80067da <get_ldnumber>
 8006e30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	da01      	bge.n	8006e3c <f_mount+0x28>
 8006e38:	230b      	movs	r3, #11
 8006e3a:	e02b      	b.n	8006e94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e3c:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <f_mount+0x88>)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e4c:	69b8      	ldr	r0, [r7, #24]
 8006e4e:	f7fe fdfb 	bl	8005a48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	490d      	ldr	r1, [pc, #52]	@ (8006e9c <f_mount+0x88>)
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <f_mount+0x66>
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d001      	beq.n	8006e7e <f_mount+0x6a>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e00a      	b.n	8006e94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e7e:	f107 010c 	add.w	r1, r7, #12
 8006e82:	f107 0308 	add.w	r3, r7, #8
 8006e86:	2200      	movs	r2, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fd41 	bl	8006910 <find_volume>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20010074 	.word	0x20010074

08006ea0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b098      	sub	sp, #96	@ 0x60
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <f_open+0x18>
 8006eb4:	2309      	movs	r3, #9
 8006eb6:	e1a9      	b.n	800720c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ebe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ec0:	79fa      	ldrb	r2, [r7, #7]
 8006ec2:	f107 0110 	add.w	r1, r7, #16
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fd20 	bl	8006910 <find_volume>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 818d 	bne.w	80071fa <f_open+0x35a>
		dj.obj.fs = fs;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	f107 0314 	add.w	r3, r7, #20
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff fc03 	bl	80066f8 <follow_path>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d118      	bne.n	8006f32 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006f00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f04:	b25b      	sxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da03      	bge.n	8006f12 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006f0a:	2306      	movs	r3, #6
 8006f0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006f10:	e00f      	b.n	8006f32 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	bf8c      	ite	hi
 8006f18:	2301      	movhi	r3, #1
 8006f1a:	2300      	movls	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f107 0314 	add.w	r3, r7, #20
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fc82 	bl	8005830 <chk_lock>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	f003 031c 	and.w	r3, r3, #28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d07f      	beq.n	800703c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d017      	beq.n	8006f74 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d10e      	bne.n	8006f6a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f4c:	f7fe fccc 	bl	80058e8 <enq_lock>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <f_open+0xc4>
 8006f56:	f107 0314 	add.w	r3, r7, #20
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fb05 	bl	800656a <dir_register>
 8006f60:	4603      	mov	r3, r0
 8006f62:	e000      	b.n	8006f66 <f_open+0xc6>
 8006f64:	2312      	movs	r3, #18
 8006f66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	f043 0308 	orr.w	r3, r3, #8
 8006f70:	71fb      	strb	r3, [r7, #7]
 8006f72:	e010      	b.n	8006f96 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f74:	7ebb      	ldrb	r3, [r7, #26]
 8006f76:	f003 0311 	and.w	r3, r3, #17
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <f_open+0xe6>
					res = FR_DENIED;
 8006f7e:	2307      	movs	r3, #7
 8006f80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006f84:	e007      	b.n	8006f96 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <f_open+0xf6>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d168      	bne.n	8007070 <f_open+0x1d0>
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d063      	beq.n	8007070 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006fa8:	f7fd fd86 	bl	8004ab8 <get_fattime>
 8006fac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb0:	330e      	adds	r3, #14
 8006fb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fb90 	bl	80056da <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fbc:	3316      	adds	r3, #22
 8006fbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe fb8a 	bl	80056da <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc8:	330b      	adds	r3, #11
 8006fca:	2220      	movs	r2, #32
 8006fcc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff fa34 	bl	8006442 <ld_clust>
 8006fda:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fa4c 	bl	8006480 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fea:	331c      	adds	r3, #28
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fb73 	bl	80056da <st_dword>
					fs->wflag = 1;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d037      	beq.n	8007070 <f_open+0x1d0>
						dw = fs->winsect;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007006:	f107 0314 	add.w	r3, r7, #20
 800700a:	2200      	movs	r2, #0
 800700c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe ff5f 	bl	8005ed2 <remove_chain>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800701a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800701e:	2b00      	cmp	r3, #0
 8007020:	d126      	bne.n	8007070 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fd76 	bl	8005b18 <move_window>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007036:	3a01      	subs	r2, #1
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	e019      	b.n	8007070 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800703c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007040:	2b00      	cmp	r3, #0
 8007042:	d115      	bne.n	8007070 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007044:	7ebb      	ldrb	r3, [r7, #26]
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <f_open+0x1b6>
					res = FR_NO_FILE;
 800704e:	2304      	movs	r3, #4
 8007050:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007054:	e00c      	b.n	8007070 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <f_open+0x1d0>
 8007060:	7ebb      	ldrb	r3, [r7, #26]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <f_open+0x1d0>
						res = FR_DENIED;
 800706a:	2307      	movs	r3, #7
 800706c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007070:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007074:	2b00      	cmp	r3, #0
 8007076:	d126      	bne.n	80070c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007088:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	2b01      	cmp	r3, #1
 800709c:	bf8c      	ite	hi
 800709e:	2301      	movhi	r3, #1
 80070a0:	2300      	movls	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	f107 0314 	add.w	r3, r7, #20
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fc3d 	bl	800592c <inc_lock>
 80070b2:	4602      	mov	r2, r0
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <f_open+0x226>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80070c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 8095 	bne.w	80071fa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070d4:	4611      	mov	r1, r2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff f9b3 	bl	8006442 <ld_clust>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80070e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e4:	331c      	adds	r3, #28
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fab9 	bl	800565e <ld_dword>
 80070ec:	4602      	mov	r2, r0
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	88da      	ldrh	r2, [r3, #6]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	79fa      	ldrb	r2, [r7, #7]
 800710a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3330      	adds	r3, #48	@ 0x30
 8007122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007126:	2100      	movs	r1, #0
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fb23 	bl	8005774 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d060      	beq.n	80071fa <f_open+0x35a>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05c      	beq.n	80071fa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	895b      	ldrh	r3, [r3, #10]
 800714c:	025b      	lsls	r3, r3, #9
 800714e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	657b      	str	r3, [r7, #84]	@ 0x54
 800715c:	e016      	b.n	800718c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fd24 	bl	8005bb0 <get_fat>
 8007168:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800716a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800716c:	2b01      	cmp	r3, #1
 800716e:	d802      	bhi.n	8007176 <f_open+0x2d6>
 8007170:	2302      	movs	r3, #2
 8007172:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717c:	d102      	bne.n	8007184 <f_open+0x2e4>
 800717e:	2301      	movs	r3, #1
 8007180:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	657b      	str	r3, [r7, #84]	@ 0x54
 800718c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <f_open+0x2fc>
 8007194:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007198:	429a      	cmp	r2, r3
 800719a:	d8e0      	bhi.n	800715e <f_open+0x2be>
				}
				fp->clust = clst;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80071a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d127      	bne.n	80071fa <f_open+0x35a>
 80071aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fcda 	bl	8005b72 <clust2sect>
 80071be:	6478      	str	r0, [r7, #68]	@ 0x44
 80071c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <f_open+0x32e>
						res = FR_INT_ERR;
 80071c6:	2302      	movs	r3, #2
 80071c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80071cc:	e015      	b.n	80071fa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80071ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071d0:	0a5a      	lsrs	r2, r3, #9
 80071d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	7858      	ldrb	r0, [r3, #1]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a1a      	ldr	r2, [r3, #32]
 80071e8:	2301      	movs	r3, #1
 80071ea:	f7fe f9df 	bl	80055ac <disk_read>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <f_open+0x35a>
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80071fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <f_open+0x368>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007208:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800720c:	4618      	mov	r0, r3
 800720e:	3760      	adds	r7, #96	@ 0x60
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08e      	sub	sp, #56	@ 0x38
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f107 0214 	add.w	r2, r7, #20
 8007232:	4611      	mov	r1, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fdb7 	bl	8006da8 <validate>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007240:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007244:	2b00      	cmp	r3, #0
 8007246:	d107      	bne.n	8007258 <f_read+0x44>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	7d5b      	ldrb	r3, [r3, #21]
 800724c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007250:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <f_read+0x4a>
 8007258:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800725c:	e115      	b.n	800748a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	7d1b      	ldrb	r3, [r3, #20]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <f_read+0x5a>
 800726a:	2307      	movs	r3, #7
 800726c:	e10d      	b.n	800748a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	429a      	cmp	r2, r3
 8007280:	f240 80fe 	bls.w	8007480 <f_read+0x26c>
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007288:	e0fa      	b.n	8007480 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 80c6 	bne.w	8007424 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	0a5b      	lsrs	r3, r3, #9
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	8952      	ldrh	r2, [r2, #10]
 80072a2:	3a01      	subs	r2, #1
 80072a4:	4013      	ands	r3, r2
 80072a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d12f      	bne.n	800730e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80072bc:	e013      	b.n	80072e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	4619      	mov	r1, r3
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7fe fefd 	bl	80060cc <clmt_clust>
 80072d2:	6338      	str	r0, [r7, #48]	@ 0x30
 80072d4:	e007      	b.n	80072e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f7fe fc66 	bl	8005bb0 <get_fat>
 80072e4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d804      	bhi.n	80072f6 <f_read+0xe2>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2202      	movs	r2, #2
 80072f0:	755a      	strb	r2, [r3, #21]
 80072f2:	2302      	movs	r3, #2
 80072f4:	e0c9      	b.n	800748a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d104      	bne.n	8007308 <f_read+0xf4>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	755a      	strb	r2, [r3, #21]
 8007304:	2301      	movs	r3, #1
 8007306:	e0c0      	b.n	800748a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800730c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f7fe fc2b 	bl	8005b72 <clust2sect>
 800731c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <f_read+0x11a>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2202      	movs	r2, #2
 8007328:	755a      	strb	r2, [r3, #21]
 800732a:	2302      	movs	r3, #2
 800732c:	e0ad      	b.n	800748a <f_read+0x276>
			sect += csect;
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	0a5b      	lsrs	r3, r3, #9
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800733c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733e:	2b00      	cmp	r3, #0
 8007340:	d039      	beq.n	80073b6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007346:	4413      	add	r3, r2
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	8952      	ldrh	r2, [r2, #10]
 800734c:	4293      	cmp	r3, r2
 800734e:	d905      	bls.n	800735c <f_read+0x148>
					cc = fs->csize - csect;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	895b      	ldrh	r3, [r3, #10]
 8007354:	461a      	mov	r2, r3
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	7858      	ldrb	r0, [r3, #1]
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007366:	f7fe f921 	bl	80055ac <disk_read>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <f_read+0x166>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2201      	movs	r2, #1
 8007374:	755a      	strb	r2, [r3, #21]
 8007376:	2301      	movs	r3, #1
 8007378:	e087      	b.n	800748a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	7d1b      	ldrb	r3, [r3, #20]
 800737e:	b25b      	sxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	da14      	bge.n	80073ae <f_read+0x19a>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800738e:	429a      	cmp	r2, r3
 8007390:	d90d      	bls.n	80073ae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	025b      	lsls	r3, r3, #9
 800739c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800739e:	18d0      	adds	r0, r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3330      	adds	r3, #48	@ 0x30
 80073a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073a8:	4619      	mov	r1, r3
 80073aa:	f7fe f9c2 	bl	8005732 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80073ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b0:	025b      	lsls	r3, r3, #9
 80073b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80073b4:	e050      	b.n	8007458 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d02e      	beq.n	800741e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	7d1b      	ldrb	r3, [r3, #20]
 80073c4:	b25b      	sxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da18      	bge.n	80073fc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	7858      	ldrb	r0, [r3, #1]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1a      	ldr	r2, [r3, #32]
 80073d8:	2301      	movs	r3, #1
 80073da:	f7fe f907 	bl	80055ec <disk_write>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <f_read+0x1da>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	755a      	strb	r2, [r3, #21]
 80073ea:	2301      	movs	r3, #1
 80073ec:	e04d      	b.n	800748a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	7d1b      	ldrb	r3, [r3, #20]
 80073f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	7858      	ldrb	r0, [r3, #1]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007406:	2301      	movs	r3, #1
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	f7fe f8cf 	bl	80055ac <disk_read>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <f_read+0x20a>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	755a      	strb	r2, [r3, #21]
 800741a:	2301      	movs	r3, #1
 800741c:	e035      	b.n	800748a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007430:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	429a      	cmp	r2, r3
 8007438:	d901      	bls.n	800743e <f_read+0x22a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744c:	4413      	add	r3, r2
 800744e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007450:	4619      	mov	r1, r3
 8007452:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007454:	f7fe f96d 	bl	8005732 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800745a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745c:	4413      	add	r3, r2
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	619a      	str	r2, [r3, #24]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007472:	441a      	add	r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f47f af01 	bne.w	800728a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3738      	adds	r7, #56	@ 0x38
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b090      	sub	sp, #64	@ 0x40
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f107 0208 	add.w	r2, r7, #8
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff fc7f 	bl	8006da8 <validate>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80074b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <f_lseek+0x2e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	7d5b      	ldrb	r3, [r3, #21]
 80074bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80074c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <f_lseek+0x3c>
 80074c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80074cc:	e1e6      	b.n	800789c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 80d1 	beq.w	800767a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d15a      	bne.n	8007596 <f_lseek+0x104>
			tbl = fp->cltbl;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	1d1a      	adds	r2, r3, #4
 80074ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	2302      	movs	r3, #2
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d03a      	beq.n	8007576 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	2300      	movs	r3, #0
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750a:	3302      	adds	r3, #2
 800750c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007514:	3301      	adds	r3, #1
 8007516:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fb47 	bl	8005bb0 <get_fat>
 8007522:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	2b01      	cmp	r3, #1
 8007528:	d804      	bhi.n	8007534 <f_lseek+0xa2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2202      	movs	r2, #2
 800752e:	755a      	strb	r2, [r3, #21]
 8007530:	2302      	movs	r3, #2
 8007532:	e1b3      	b.n	800789c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d104      	bne.n	8007546 <f_lseek+0xb4>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	755a      	strb	r2, [r3, #21]
 8007542:	2301      	movs	r3, #1
 8007544:	e1aa      	b.n	800789c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754c:	429a      	cmp	r2, r3
 800754e:	d0de      	beq.n	800750e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	429a      	cmp	r2, r3
 8007556:	d809      	bhi.n	800756c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	627a      	str	r2, [r7, #36]	@ 0x24
 800755e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	627a      	str	r2, [r7, #36]	@ 0x24
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007572:	429a      	cmp	r2, r3
 8007574:	d3c4      	bcc.n	8007500 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800757c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800757e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	429a      	cmp	r2, r3
 8007584:	d803      	bhi.n	800758e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e184      	b.n	8007898 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800758e:	2311      	movs	r3, #17
 8007590:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007594:	e180      	b.n	8007898 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d902      	bls.n	80075a6 <f_lseek+0x114>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 8172 	beq.w	8007898 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fe fd86 	bl	80060cc <clmt_clust>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7fe facf 	bl	8005b72 <clust2sect>
 80075d4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <f_lseek+0x154>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	755a      	strb	r2, [r3, #21]
 80075e2:	2302      	movs	r3, #2
 80075e4:	e15a      	b.n	800789c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	0a5b      	lsrs	r3, r3, #9
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	8952      	ldrh	r2, [r2, #10]
 80075f0:	3a01      	subs	r2, #1
 80075f2:	4013      	ands	r3, r2
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	4413      	add	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8148 	beq.w	8007898 <f_lseek+0x406>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	429a      	cmp	r2, r3
 8007610:	f000 8142 	beq.w	8007898 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	7d1b      	ldrb	r3, [r3, #20]
 8007618:	b25b      	sxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	da18      	bge.n	8007650 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	7858      	ldrb	r0, [r3, #1]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1a      	ldr	r2, [r3, #32]
 800762c:	2301      	movs	r3, #1
 800762e:	f7fd ffdd 	bl	80055ec <disk_write>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <f_lseek+0x1b0>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	755a      	strb	r2, [r3, #21]
 800763e:	2301      	movs	r3, #1
 8007640:	e12c      	b.n	800789c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7d1b      	ldrb	r3, [r3, #20]
 8007646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800764a:	b2da      	uxtb	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	7858      	ldrb	r0, [r3, #1]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800765a:	2301      	movs	r3, #1
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	f7fd ffa5 	bl	80055ac <disk_read>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <f_lseek+0x1e0>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	755a      	strb	r2, [r3, #21]
 800766e:	2301      	movs	r3, #1
 8007670:	e114      	b.n	800789c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	621a      	str	r2, [r3, #32]
 8007678:	e10e      	b.n	8007898 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d908      	bls.n	8007696 <f_lseek+0x204>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	7d1b      	ldrb	r3, [r3, #20]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076a4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80a7 	beq.w	80077fc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	895b      	ldrh	r3, [r3, #10]
 80076b2:	025b      	lsls	r3, r3, #9
 80076b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	1e5a      	subs	r2, r3, #1
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	1e59      	subs	r1, r3, #1
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d30f      	bcc.n	80076f4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	1e5a      	subs	r2, r3, #1
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	425b      	negs	r3, r3
 80076dc:	401a      	ands	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076f2:	e022      	b.n	800773a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80076fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d119      	bne.n	8007734 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2100      	movs	r1, #0
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fc49 	bl	8005f9c <create_chain>
 800770a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800770c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770e:	2b01      	cmp	r3, #1
 8007710:	d104      	bne.n	800771c <f_lseek+0x28a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	755a      	strb	r2, [r3, #21]
 8007718:	2302      	movs	r3, #2
 800771a:	e0bf      	b.n	800789c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d104      	bne.n	800772e <f_lseek+0x29c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	755a      	strb	r2, [r3, #21]
 800772a:	2301      	movs	r3, #1
 800772c:	e0b6      	b.n	800789c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007732:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007738:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800773a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773c:	2b00      	cmp	r3, #0
 800773e:	d05d      	beq.n	80077fc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007740:	e03a      	b.n	80077b8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	441a      	add	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7d1b      	ldrb	r3, [r3, #20]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fc18 	bl	8005f9c <create_chain>
 800776c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	2b00      	cmp	r3, #0
 8007772:	d108      	bne.n	8007786 <f_lseek+0x2f4>
							ofs = 0; break;
 8007774:	2300      	movs	r3, #0
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	e022      	b.n	80077c0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fa16 	bl	8005bb0 <get_fat>
 8007784:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d104      	bne.n	8007798 <f_lseek+0x306>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	755a      	strb	r2, [r3, #21]
 8007794:	2301      	movs	r3, #1
 8007796:	e081      	b.n	800789c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779a:	2b01      	cmp	r3, #1
 800779c:	d904      	bls.n	80077a8 <f_lseek+0x316>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d304      	bcc.n	80077b2 <f_lseek+0x320>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	755a      	strb	r2, [r3, #21]
 80077ae:	2302      	movs	r3, #2
 80077b0:	e074      	b.n	800789c <f_lseek+0x40a>
					fp->clust = clst;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077b6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d8c0      	bhi.n	8007742 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699a      	ldr	r2, [r3, #24]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	441a      	add	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d012      	beq.n	80077fc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe f9c9 	bl	8005b72 <clust2sect>
 80077e0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80077e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <f_lseek+0x360>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	755a      	strb	r2, [r3, #21]
 80077ee:	2302      	movs	r3, #2
 80077f0:	e054      	b.n	800789c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	0a5b      	lsrs	r3, r3, #9
 80077f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077f8:	4413      	add	r3, r2
 80077fa:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	429a      	cmp	r2, r3
 8007806:	d90a      	bls.n	800781e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	7d1b      	ldrb	r3, [r3, #20]
 8007814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007818:	b2da      	uxtb	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	2b00      	cmp	r3, #0
 8007828:	d036      	beq.n	8007898 <f_lseek+0x406>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007830:	429a      	cmp	r2, r3
 8007832:	d031      	beq.n	8007898 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	b25b      	sxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	da18      	bge.n	8007870 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	7858      	ldrb	r0, [r3, #1]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1a      	ldr	r2, [r3, #32]
 800784c:	2301      	movs	r3, #1
 800784e:	f7fd fecd 	bl	80055ec <disk_write>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <f_lseek+0x3d0>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	755a      	strb	r2, [r3, #21]
 800785e:	2301      	movs	r3, #1
 8007860:	e01c      	b.n	800789c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7d1b      	ldrb	r3, [r3, #20]
 8007866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800786a:	b2da      	uxtb	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	7858      	ldrb	r0, [r3, #1]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800787a:	2301      	movs	r3, #1
 800787c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800787e:	f7fd fe95 	bl	80055ac <disk_read>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <f_lseek+0x400>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	755a      	strb	r2, [r3, #21]
 800788e:	2301      	movs	r3, #1
 8007890:	e004      	b.n	800789c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007896:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007898:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800789c:	4618      	mov	r0, r3
 800789e:	3740      	adds	r7, #64	@ 0x40
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80078b2:	2301      	movs	r3, #1
 80078b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80078ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078bc:	7a5b      	ldrb	r3, [r3, #9]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d131      	bne.n	8007928 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078c6:	7a5b      	ldrb	r3, [r3, #9]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078ce:	2100      	movs	r1, #0
 80078d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80078d2:	4b19      	ldr	r3, [pc, #100]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078d4:	7a5b      	ldrb	r3, [r3, #9]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	4a17      	ldr	r2, [pc, #92]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80078e2:	4b15      	ldr	r3, [pc, #84]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078e4:	7a5b      	ldrb	r3, [r3, #9]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078ec:	4413      	add	r3, r2
 80078ee:	79fa      	ldrb	r2, [r7, #7]
 80078f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078f2:	4b11      	ldr	r3, [pc, #68]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078f4:	7a5b      	ldrb	r3, [r3, #9]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	b2d1      	uxtb	r1, r2
 80078fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007938 <FATFS_LinkDriverEx+0x94>)
 80078fe:	7251      	strb	r1, [r2, #9]
 8007900:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007902:	7dbb      	ldrb	r3, [r7, #22]
 8007904:	3330      	adds	r3, #48	@ 0x30
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3301      	adds	r3, #1
 8007910:	223a      	movs	r2, #58	@ 0x3a
 8007912:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3302      	adds	r3, #2
 8007918:	222f      	movs	r2, #47	@ 0x2f
 800791a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3303      	adds	r3, #3
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
}
 800792a:	4618      	mov	r0, r3
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	2001009c 	.word	0x2001009c

0800793c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007946:	2200      	movs	r2, #0
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff ffaa 	bl	80078a4 <FATFS_LinkDriverEx>
 8007950:	4603      	mov	r3, r0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <std>:
 800795c:	2300      	movs	r3, #0
 800795e:	b510      	push	{r4, lr}
 8007960:	4604      	mov	r4, r0
 8007962:	e9c0 3300 	strd	r3, r3, [r0]
 8007966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800796a:	6083      	str	r3, [r0, #8]
 800796c:	8181      	strh	r1, [r0, #12]
 800796e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007970:	81c2      	strh	r2, [r0, #14]
 8007972:	6183      	str	r3, [r0, #24]
 8007974:	4619      	mov	r1, r3
 8007976:	2208      	movs	r2, #8
 8007978:	305c      	adds	r0, #92	@ 0x5c
 800797a:	f000 f9f9 	bl	8007d70 <memset>
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <std+0x58>)
 8007980:	6263      	str	r3, [r4, #36]	@ 0x24
 8007982:	4b0d      	ldr	r3, [pc, #52]	@ (80079b8 <std+0x5c>)
 8007984:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007986:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <std+0x60>)
 8007988:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800798a:	4b0d      	ldr	r3, [pc, #52]	@ (80079c0 <std+0x64>)
 800798c:	6323      	str	r3, [r4, #48]	@ 0x30
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <std+0x68>)
 8007990:	6224      	str	r4, [r4, #32]
 8007992:	429c      	cmp	r4, r3
 8007994:	d006      	beq.n	80079a4 <std+0x48>
 8007996:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800799a:	4294      	cmp	r4, r2
 800799c:	d002      	beq.n	80079a4 <std+0x48>
 800799e:	33d0      	adds	r3, #208	@ 0xd0
 80079a0:	429c      	cmp	r4, r3
 80079a2:	d105      	bne.n	80079b0 <std+0x54>
 80079a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ac:	f000 ba58 	b.w	8007e60 <__retarget_lock_init_recursive>
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	08007bc1 	.word	0x08007bc1
 80079b8:	08007be3 	.word	0x08007be3
 80079bc:	08007c1b 	.word	0x08007c1b
 80079c0:	08007c3f 	.word	0x08007c3f
 80079c4:	200100a8 	.word	0x200100a8

080079c8 <stdio_exit_handler>:
 80079c8:	4a02      	ldr	r2, [pc, #8]	@ (80079d4 <stdio_exit_handler+0xc>)
 80079ca:	4903      	ldr	r1, [pc, #12]	@ (80079d8 <stdio_exit_handler+0x10>)
 80079cc:	4803      	ldr	r0, [pc, #12]	@ (80079dc <stdio_exit_handler+0x14>)
 80079ce:	f000 b869 	b.w	8007aa4 <_fwalk_sglue>
 80079d2:	bf00      	nop
 80079d4:	20000024 	.word	0x20000024
 80079d8:	080086fd 	.word	0x080086fd
 80079dc:	20000034 	.word	0x20000034

080079e0 <cleanup_stdio>:
 80079e0:	6841      	ldr	r1, [r0, #4]
 80079e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <cleanup_stdio+0x34>)
 80079e4:	4299      	cmp	r1, r3
 80079e6:	b510      	push	{r4, lr}
 80079e8:	4604      	mov	r4, r0
 80079ea:	d001      	beq.n	80079f0 <cleanup_stdio+0x10>
 80079ec:	f000 fe86 	bl	80086fc <_fflush_r>
 80079f0:	68a1      	ldr	r1, [r4, #8]
 80079f2:	4b09      	ldr	r3, [pc, #36]	@ (8007a18 <cleanup_stdio+0x38>)
 80079f4:	4299      	cmp	r1, r3
 80079f6:	d002      	beq.n	80079fe <cleanup_stdio+0x1e>
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fe7f 	bl	80086fc <_fflush_r>
 80079fe:	68e1      	ldr	r1, [r4, #12]
 8007a00:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <cleanup_stdio+0x3c>)
 8007a02:	4299      	cmp	r1, r3
 8007a04:	d004      	beq.n	8007a10 <cleanup_stdio+0x30>
 8007a06:	4620      	mov	r0, r4
 8007a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0c:	f000 be76 	b.w	80086fc <_fflush_r>
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	bf00      	nop
 8007a14:	200100a8 	.word	0x200100a8
 8007a18:	20010110 	.word	0x20010110
 8007a1c:	20010178 	.word	0x20010178

08007a20 <global_stdio_init.part.0>:
 8007a20:	b510      	push	{r4, lr}
 8007a22:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <global_stdio_init.part.0+0x30>)
 8007a24:	4c0b      	ldr	r4, [pc, #44]	@ (8007a54 <global_stdio_init.part.0+0x34>)
 8007a26:	4a0c      	ldr	r2, [pc, #48]	@ (8007a58 <global_stdio_init.part.0+0x38>)
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2104      	movs	r1, #4
 8007a30:	f7ff ff94 	bl	800795c <std>
 8007a34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a38:	2201      	movs	r2, #1
 8007a3a:	2109      	movs	r1, #9
 8007a3c:	f7ff ff8e 	bl	800795c <std>
 8007a40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a44:	2202      	movs	r2, #2
 8007a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4a:	2112      	movs	r1, #18
 8007a4c:	f7ff bf86 	b.w	800795c <std>
 8007a50:	200101e0 	.word	0x200101e0
 8007a54:	200100a8 	.word	0x200100a8
 8007a58:	080079c9 	.word	0x080079c9

08007a5c <__sfp_lock_acquire>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__sfp_lock_acquire+0x8>)
 8007a5e:	f000 ba00 	b.w	8007e62 <__retarget_lock_acquire_recursive>
 8007a62:	bf00      	nop
 8007a64:	200101e9 	.word	0x200101e9

08007a68 <__sfp_lock_release>:
 8007a68:	4801      	ldr	r0, [pc, #4]	@ (8007a70 <__sfp_lock_release+0x8>)
 8007a6a:	f000 b9fb 	b.w	8007e64 <__retarget_lock_release_recursive>
 8007a6e:	bf00      	nop
 8007a70:	200101e9 	.word	0x200101e9

08007a74 <__sinit>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	4604      	mov	r4, r0
 8007a78:	f7ff fff0 	bl	8007a5c <__sfp_lock_acquire>
 8007a7c:	6a23      	ldr	r3, [r4, #32]
 8007a7e:	b11b      	cbz	r3, 8007a88 <__sinit+0x14>
 8007a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a84:	f7ff bff0 	b.w	8007a68 <__sfp_lock_release>
 8007a88:	4b04      	ldr	r3, [pc, #16]	@ (8007a9c <__sinit+0x28>)
 8007a8a:	6223      	str	r3, [r4, #32]
 8007a8c:	4b04      	ldr	r3, [pc, #16]	@ (8007aa0 <__sinit+0x2c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f5      	bne.n	8007a80 <__sinit+0xc>
 8007a94:	f7ff ffc4 	bl	8007a20 <global_stdio_init.part.0>
 8007a98:	e7f2      	b.n	8007a80 <__sinit+0xc>
 8007a9a:	bf00      	nop
 8007a9c:	080079e1 	.word	0x080079e1
 8007aa0:	200101e0 	.word	0x200101e0

08007aa4 <_fwalk_sglue>:
 8007aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	4688      	mov	r8, r1
 8007aac:	4614      	mov	r4, r2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ab8:	d505      	bpl.n	8007ac6 <_fwalk_sglue+0x22>
 8007aba:	6824      	ldr	r4, [r4, #0]
 8007abc:	2c00      	cmp	r4, #0
 8007abe:	d1f7      	bne.n	8007ab0 <_fwalk_sglue+0xc>
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d907      	bls.n	8007adc <_fwalk_sglue+0x38>
 8007acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	d003      	beq.n	8007adc <_fwalk_sglue+0x38>
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	47c0      	blx	r8
 8007ada:	4306      	orrs	r6, r0
 8007adc:	3568      	adds	r5, #104	@ 0x68
 8007ade:	e7e9      	b.n	8007ab4 <_fwalk_sglue+0x10>

08007ae0 <iprintf>:
 8007ae0:	b40f      	push	{r0, r1, r2, r3}
 8007ae2:	b507      	push	{r0, r1, r2, lr}
 8007ae4:	4906      	ldr	r1, [pc, #24]	@ (8007b00 <iprintf+0x20>)
 8007ae6:	ab04      	add	r3, sp, #16
 8007ae8:	6808      	ldr	r0, [r1, #0]
 8007aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aee:	6881      	ldr	r1, [r0, #8]
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	f000 fadb 	bl	80080ac <_vfiprintf_r>
 8007af6:	b003      	add	sp, #12
 8007af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007afc:	b004      	add	sp, #16
 8007afe:	4770      	bx	lr
 8007b00:	20000030 	.word	0x20000030

08007b04 <_puts_r>:
 8007b04:	6a03      	ldr	r3, [r0, #32]
 8007b06:	b570      	push	{r4, r5, r6, lr}
 8007b08:	6884      	ldr	r4, [r0, #8]
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	460e      	mov	r6, r1
 8007b0e:	b90b      	cbnz	r3, 8007b14 <_puts_r+0x10>
 8007b10:	f7ff ffb0 	bl	8007a74 <__sinit>
 8007b14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b16:	07db      	lsls	r3, r3, #31
 8007b18:	d405      	bmi.n	8007b26 <_puts_r+0x22>
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	0598      	lsls	r0, r3, #22
 8007b1e:	d402      	bmi.n	8007b26 <_puts_r+0x22>
 8007b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b22:	f000 f99e 	bl	8007e62 <__retarget_lock_acquire_recursive>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	0719      	lsls	r1, r3, #28
 8007b2a:	d502      	bpl.n	8007b32 <_puts_r+0x2e>
 8007b2c:	6923      	ldr	r3, [r4, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d135      	bne.n	8007b9e <_puts_r+0x9a>
 8007b32:	4621      	mov	r1, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 f8c5 	bl	8007cc4 <__swsetup_r>
 8007b3a:	b380      	cbz	r0, 8007b9e <_puts_r+0x9a>
 8007b3c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b42:	07da      	lsls	r2, r3, #31
 8007b44:	d405      	bmi.n	8007b52 <_puts_r+0x4e>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	059b      	lsls	r3, r3, #22
 8007b4a:	d402      	bmi.n	8007b52 <_puts_r+0x4e>
 8007b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b4e:	f000 f989 	bl	8007e64 <__retarget_lock_release_recursive>
 8007b52:	4628      	mov	r0, r5
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da04      	bge.n	8007b64 <_puts_r+0x60>
 8007b5a:	69a2      	ldr	r2, [r4, #24]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	dc17      	bgt.n	8007b90 <_puts_r+0x8c>
 8007b60:	290a      	cmp	r1, #10
 8007b62:	d015      	beq.n	8007b90 <_puts_r+0x8c>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	6022      	str	r2, [r4, #0]
 8007b6a:	7019      	strb	r1, [r3, #0]
 8007b6c:	68a3      	ldr	r3, [r4, #8]
 8007b6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b72:	3b01      	subs	r3, #1
 8007b74:	60a3      	str	r3, [r4, #8]
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d1ed      	bne.n	8007b56 <_puts_r+0x52>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	da11      	bge.n	8007ba2 <_puts_r+0x9e>
 8007b7e:	4622      	mov	r2, r4
 8007b80:	210a      	movs	r1, #10
 8007b82:	4628      	mov	r0, r5
 8007b84:	f000 f85f 	bl	8007c46 <__swbuf_r>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d0d7      	beq.n	8007b3c <_puts_r+0x38>
 8007b8c:	250a      	movs	r5, #10
 8007b8e:	e7d7      	b.n	8007b40 <_puts_r+0x3c>
 8007b90:	4622      	mov	r2, r4
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 f857 	bl	8007c46 <__swbuf_r>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d1e7      	bne.n	8007b6c <_puts_r+0x68>
 8007b9c:	e7ce      	b.n	8007b3c <_puts_r+0x38>
 8007b9e:	3e01      	subs	r6, #1
 8007ba0:	e7e4      	b.n	8007b6c <_puts_r+0x68>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	6022      	str	r2, [r4, #0]
 8007ba8:	220a      	movs	r2, #10
 8007baa:	701a      	strb	r2, [r3, #0]
 8007bac:	e7ee      	b.n	8007b8c <_puts_r+0x88>
	...

08007bb0 <puts>:
 8007bb0:	4b02      	ldr	r3, [pc, #8]	@ (8007bbc <puts+0xc>)
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f7ff bfa5 	b.w	8007b04 <_puts_r>
 8007bba:	bf00      	nop
 8007bbc:	20000030 	.word	0x20000030

08007bc0 <__sread>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc8:	f000 f8fc 	bl	8007dc4 <_read_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	bfab      	itete	ge
 8007bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bd4:	181b      	addge	r3, r3, r0
 8007bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bda:	bfac      	ite	ge
 8007bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bde:	81a3      	strhlt	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__swrite>:
 8007be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be6:	461f      	mov	r7, r3
 8007be8:	898b      	ldrh	r3, [r1, #12]
 8007bea:	05db      	lsls	r3, r3, #23
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	d505      	bpl.n	8007c00 <__swrite+0x1e>
 8007bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f000 f8d0 	bl	8007da0 <_lseek_r>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	4628      	mov	r0, r5
 8007c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c16:	f000 b8e7 	b.w	8007de8 <_write_r>

08007c1a <__sseek>:
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c22:	f000 f8bd 	bl	8007da0 <_lseek_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	bf15      	itete	ne
 8007c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c36:	81a3      	strheq	r3, [r4, #12]
 8007c38:	bf18      	it	ne
 8007c3a:	81a3      	strhne	r3, [r4, #12]
 8007c3c:	bd10      	pop	{r4, pc}

08007c3e <__sclose>:
 8007c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c42:	f000 b89d 	b.w	8007d80 <_close_r>

08007c46 <__swbuf_r>:
 8007c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c48:	460e      	mov	r6, r1
 8007c4a:	4614      	mov	r4, r2
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	b118      	cbz	r0, 8007c58 <__swbuf_r+0x12>
 8007c50:	6a03      	ldr	r3, [r0, #32]
 8007c52:	b90b      	cbnz	r3, 8007c58 <__swbuf_r+0x12>
 8007c54:	f7ff ff0e 	bl	8007a74 <__sinit>
 8007c58:	69a3      	ldr	r3, [r4, #24]
 8007c5a:	60a3      	str	r3, [r4, #8]
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	071a      	lsls	r2, r3, #28
 8007c60:	d501      	bpl.n	8007c66 <__swbuf_r+0x20>
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	b943      	cbnz	r3, 8007c78 <__swbuf_r+0x32>
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f82b 	bl	8007cc4 <__swsetup_r>
 8007c6e:	b118      	cbz	r0, 8007c78 <__swbuf_r+0x32>
 8007c70:	f04f 37ff 	mov.w	r7, #4294967295
 8007c74:	4638      	mov	r0, r7
 8007c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	6922      	ldr	r2, [r4, #16]
 8007c7c:	1a98      	subs	r0, r3, r2
 8007c7e:	6963      	ldr	r3, [r4, #20]
 8007c80:	b2f6      	uxtb	r6, r6
 8007c82:	4283      	cmp	r3, r0
 8007c84:	4637      	mov	r7, r6
 8007c86:	dc05      	bgt.n	8007c94 <__swbuf_r+0x4e>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 fd36 	bl	80086fc <_fflush_r>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1ed      	bne.n	8007c70 <__swbuf_r+0x2a>
 8007c94:	68a3      	ldr	r3, [r4, #8]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	6022      	str	r2, [r4, #0]
 8007ca0:	701e      	strb	r6, [r3, #0]
 8007ca2:	6962      	ldr	r2, [r4, #20]
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d004      	beq.n	8007cb4 <__swbuf_r+0x6e>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	07db      	lsls	r3, r3, #31
 8007cae:	d5e1      	bpl.n	8007c74 <__swbuf_r+0x2e>
 8007cb0:	2e0a      	cmp	r6, #10
 8007cb2:	d1df      	bne.n	8007c74 <__swbuf_r+0x2e>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 fd20 	bl	80086fc <_fflush_r>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d0d9      	beq.n	8007c74 <__swbuf_r+0x2e>
 8007cc0:	e7d6      	b.n	8007c70 <__swbuf_r+0x2a>
	...

08007cc4 <__swsetup_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4b29      	ldr	r3, [pc, #164]	@ (8007d6c <__swsetup_r+0xa8>)
 8007cc8:	4605      	mov	r5, r0
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	460c      	mov	r4, r1
 8007cce:	b118      	cbz	r0, 8007cd8 <__swsetup_r+0x14>
 8007cd0:	6a03      	ldr	r3, [r0, #32]
 8007cd2:	b90b      	cbnz	r3, 8007cd8 <__swsetup_r+0x14>
 8007cd4:	f7ff fece 	bl	8007a74 <__sinit>
 8007cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cdc:	0719      	lsls	r1, r3, #28
 8007cde:	d422      	bmi.n	8007d26 <__swsetup_r+0x62>
 8007ce0:	06da      	lsls	r2, r3, #27
 8007ce2:	d407      	bmi.n	8007cf4 <__swsetup_r+0x30>
 8007ce4:	2209      	movs	r2, #9
 8007ce6:	602a      	str	r2, [r5, #0]
 8007ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cec:	81a3      	strh	r3, [r4, #12]
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	e033      	b.n	8007d5c <__swsetup_r+0x98>
 8007cf4:	0758      	lsls	r0, r3, #29
 8007cf6:	d512      	bpl.n	8007d1e <__swsetup_r+0x5a>
 8007cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cfa:	b141      	cbz	r1, 8007d0e <__swsetup_r+0x4a>
 8007cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d00:	4299      	cmp	r1, r3
 8007d02:	d002      	beq.n	8007d0a <__swsetup_r+0x46>
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 f8af 	bl	8007e68 <_free_r>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	2300      	movs	r3, #0
 8007d18:	6063      	str	r3, [r4, #4]
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f043 0308 	orr.w	r3, r3, #8
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	b94b      	cbnz	r3, 8007d3e <__swsetup_r+0x7a>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d34:	d003      	beq.n	8007d3e <__swsetup_r+0x7a>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 fd2d 	bl	8008798 <__smakebuf_r>
 8007d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d42:	f013 0201 	ands.w	r2, r3, #1
 8007d46:	d00a      	beq.n	8007d5e <__swsetup_r+0x9a>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	60a2      	str	r2, [r4, #8]
 8007d4c:	6962      	ldr	r2, [r4, #20]
 8007d4e:	4252      	negs	r2, r2
 8007d50:	61a2      	str	r2, [r4, #24]
 8007d52:	6922      	ldr	r2, [r4, #16]
 8007d54:	b942      	cbnz	r2, 8007d68 <__swsetup_r+0xa4>
 8007d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d5a:	d1c5      	bne.n	8007ce8 <__swsetup_r+0x24>
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
 8007d5e:	0799      	lsls	r1, r3, #30
 8007d60:	bf58      	it	pl
 8007d62:	6962      	ldrpl	r2, [r4, #20]
 8007d64:	60a2      	str	r2, [r4, #8]
 8007d66:	e7f4      	b.n	8007d52 <__swsetup_r+0x8e>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e7f7      	b.n	8007d5c <__swsetup_r+0x98>
 8007d6c:	20000030 	.word	0x20000030

08007d70 <memset>:
 8007d70:	4402      	add	r2, r0
 8007d72:	4603      	mov	r3, r0
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d100      	bne.n	8007d7a <memset+0xa>
 8007d78:	4770      	bx	lr
 8007d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d7e:	e7f9      	b.n	8007d74 <memset+0x4>

08007d80 <_close_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d06      	ldr	r5, [pc, #24]	@ (8007d9c <_close_r+0x1c>)
 8007d84:	2300      	movs	r3, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7f9 f8f3 	bl	8000f76 <_close>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_close_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_close_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	200101e4 	.word	0x200101e4

08007da0 <_lseek_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d07      	ldr	r5, [pc, #28]	@ (8007dc0 <_lseek_r+0x20>)
 8007da4:	4604      	mov	r4, r0
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	2200      	movs	r2, #0
 8007dac:	602a      	str	r2, [r5, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f7f9 f908 	bl	8000fc4 <_lseek>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_lseek_r+0x1e>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_lseek_r+0x1e>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	200101e4 	.word	0x200101e4

08007dc4 <_read_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	@ (8007de4 <_read_r+0x20>)
 8007dc8:	4604      	mov	r4, r0
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	602a      	str	r2, [r5, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7f9 f8b2 	bl	8000f3c <_read>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_read_r+0x1e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_read_r+0x1e>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200101e4 	.word	0x200101e4

08007de8 <_write_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	@ (8007e08 <_write_r+0x20>)
 8007dec:	4604      	mov	r4, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f8 fbd8 	bl	80005ac <_write>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_write_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_write_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	200101e4 	.word	0x200101e4

08007e0c <__errno>:
 8007e0c:	4b01      	ldr	r3, [pc, #4]	@ (8007e14 <__errno+0x8>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000030 	.word	0x20000030

08007e18 <__libc_init_array>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e50 <__libc_init_array+0x38>)
 8007e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e54 <__libc_init_array+0x3c>)
 8007e1e:	1b64      	subs	r4, r4, r5
 8007e20:	10a4      	asrs	r4, r4, #2
 8007e22:	2600      	movs	r6, #0
 8007e24:	42a6      	cmp	r6, r4
 8007e26:	d109      	bne.n	8007e3c <__libc_init_array+0x24>
 8007e28:	4d0b      	ldr	r5, [pc, #44]	@ (8007e58 <__libc_init_array+0x40>)
 8007e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e5c <__libc_init_array+0x44>)
 8007e2c:	f000 fd22 	bl	8008874 <_init>
 8007e30:	1b64      	subs	r4, r4, r5
 8007e32:	10a4      	asrs	r4, r4, #2
 8007e34:	2600      	movs	r6, #0
 8007e36:	42a6      	cmp	r6, r4
 8007e38:	d105      	bne.n	8007e46 <__libc_init_array+0x2e>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e40:	4798      	blx	r3
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7ee      	b.n	8007e24 <__libc_init_array+0xc>
 8007e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4a:	4798      	blx	r3
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	e7f2      	b.n	8007e36 <__libc_init_array+0x1e>
 8007e50:	08008d88 	.word	0x08008d88
 8007e54:	08008d88 	.word	0x08008d88
 8007e58:	08008d88 	.word	0x08008d88
 8007e5c:	08008d8c 	.word	0x08008d8c

08007e60 <__retarget_lock_init_recursive>:
 8007e60:	4770      	bx	lr

08007e62 <__retarget_lock_acquire_recursive>:
 8007e62:	4770      	bx	lr

08007e64 <__retarget_lock_release_recursive>:
 8007e64:	4770      	bx	lr
	...

08007e68 <_free_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d041      	beq.n	8007ef4 <_free_r+0x8c>
 8007e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e74:	1f0c      	subs	r4, r1, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bfb8      	it	lt
 8007e7a:	18e4      	addlt	r4, r4, r3
 8007e7c:	f000 f8e0 	bl	8008040 <__malloc_lock>
 8007e80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef8 <_free_r+0x90>)
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	b933      	cbnz	r3, 8007e94 <_free_r+0x2c>
 8007e86:	6063      	str	r3, [r4, #4]
 8007e88:	6014      	str	r4, [r2, #0]
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e90:	f000 b8dc 	b.w	800804c <__malloc_unlock>
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d908      	bls.n	8007eaa <_free_r+0x42>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	1821      	adds	r1, r4, r0
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf01      	itttt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	1809      	addeq	r1, r1, r0
 8007ea6:	6021      	streq	r1, [r4, #0]
 8007ea8:	e7ed      	b.n	8007e86 <_free_r+0x1e>
 8007eaa:	461a      	mov	r2, r3
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	b10b      	cbz	r3, 8007eb4 <_free_r+0x4c>
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d9fa      	bls.n	8007eaa <_free_r+0x42>
 8007eb4:	6811      	ldr	r1, [r2, #0]
 8007eb6:	1850      	adds	r0, r2, r1
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	d10b      	bne.n	8007ed4 <_free_r+0x6c>
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	4401      	add	r1, r0
 8007ec0:	1850      	adds	r0, r2, r1
 8007ec2:	4283      	cmp	r3, r0
 8007ec4:	6011      	str	r1, [r2, #0]
 8007ec6:	d1e0      	bne.n	8007e8a <_free_r+0x22>
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	6053      	str	r3, [r2, #4]
 8007ece:	4408      	add	r0, r1
 8007ed0:	6010      	str	r0, [r2, #0]
 8007ed2:	e7da      	b.n	8007e8a <_free_r+0x22>
 8007ed4:	d902      	bls.n	8007edc <_free_r+0x74>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	602b      	str	r3, [r5, #0]
 8007eda:	e7d6      	b.n	8007e8a <_free_r+0x22>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	1821      	adds	r1, r4, r0
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf04      	itt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	6063      	str	r3, [r4, #4]
 8007eea:	bf04      	itt	eq
 8007eec:	1809      	addeq	r1, r1, r0
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	6054      	str	r4, [r2, #4]
 8007ef2:	e7ca      	b.n	8007e8a <_free_r+0x22>
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200101f0 	.word	0x200101f0

08007efc <sbrk_aligned>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4e0f      	ldr	r6, [pc, #60]	@ (8007f3c <sbrk_aligned+0x40>)
 8007f00:	460c      	mov	r4, r1
 8007f02:	6831      	ldr	r1, [r6, #0]
 8007f04:	4605      	mov	r5, r0
 8007f06:	b911      	cbnz	r1, 8007f0e <sbrk_aligned+0x12>
 8007f08:	f000 fca4 	bl	8008854 <_sbrk_r>
 8007f0c:	6030      	str	r0, [r6, #0]
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 fc9f 	bl	8008854 <_sbrk_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d103      	bne.n	8007f22 <sbrk_aligned+0x26>
 8007f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f1e:	4620      	mov	r0, r4
 8007f20:	bd70      	pop	{r4, r5, r6, pc}
 8007f22:	1cc4      	adds	r4, r0, #3
 8007f24:	f024 0403 	bic.w	r4, r4, #3
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d0f8      	beq.n	8007f1e <sbrk_aligned+0x22>
 8007f2c:	1a21      	subs	r1, r4, r0
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 fc90 	bl	8008854 <_sbrk_r>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d1f2      	bne.n	8007f1e <sbrk_aligned+0x22>
 8007f38:	e7ef      	b.n	8007f1a <sbrk_aligned+0x1e>
 8007f3a:	bf00      	nop
 8007f3c:	200101ec 	.word	0x200101ec

08007f40 <_malloc_r>:
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f44:	1ccd      	adds	r5, r1, #3
 8007f46:	f025 0503 	bic.w	r5, r5, #3
 8007f4a:	3508      	adds	r5, #8
 8007f4c:	2d0c      	cmp	r5, #12
 8007f4e:	bf38      	it	cc
 8007f50:	250c      	movcc	r5, #12
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	4606      	mov	r6, r0
 8007f56:	db01      	blt.n	8007f5c <_malloc_r+0x1c>
 8007f58:	42a9      	cmp	r1, r5
 8007f5a:	d904      	bls.n	8007f66 <_malloc_r+0x26>
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	2000      	movs	r0, #0
 8007f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800803c <_malloc_r+0xfc>
 8007f6a:	f000 f869 	bl	8008040 <__malloc_lock>
 8007f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f72:	461c      	mov	r4, r3
 8007f74:	bb44      	cbnz	r4, 8007fc8 <_malloc_r+0x88>
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff ffbf 	bl	8007efc <sbrk_aligned>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	4604      	mov	r4, r0
 8007f82:	d158      	bne.n	8008036 <_malloc_r+0xf6>
 8007f84:	f8d8 4000 	ldr.w	r4, [r8]
 8007f88:	4627      	mov	r7, r4
 8007f8a:	2f00      	cmp	r7, #0
 8007f8c:	d143      	bne.n	8008016 <_malloc_r+0xd6>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	d04b      	beq.n	800802a <_malloc_r+0xea>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	4639      	mov	r1, r7
 8007f96:	4630      	mov	r0, r6
 8007f98:	eb04 0903 	add.w	r9, r4, r3
 8007f9c:	f000 fc5a 	bl	8008854 <_sbrk_r>
 8007fa0:	4581      	cmp	r9, r0
 8007fa2:	d142      	bne.n	800802a <_malloc_r+0xea>
 8007fa4:	6821      	ldr	r1, [r4, #0]
 8007fa6:	1a6d      	subs	r5, r5, r1
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ffa6 	bl	8007efc <sbrk_aligned>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d03a      	beq.n	800802a <_malloc_r+0xea>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	442b      	add	r3, r5
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	f8d8 3000 	ldr.w	r3, [r8]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	bb62      	cbnz	r2, 800801c <_malloc_r+0xdc>
 8007fc2:	f8c8 7000 	str.w	r7, [r8]
 8007fc6:	e00f      	b.n	8007fe8 <_malloc_r+0xa8>
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	1b52      	subs	r2, r2, r5
 8007fcc:	d420      	bmi.n	8008010 <_malloc_r+0xd0>
 8007fce:	2a0b      	cmp	r2, #11
 8007fd0:	d917      	bls.n	8008002 <_malloc_r+0xc2>
 8007fd2:	1961      	adds	r1, r4, r5
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	6025      	str	r5, [r4, #0]
 8007fd8:	bf18      	it	ne
 8007fda:	6059      	strne	r1, [r3, #4]
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	bf08      	it	eq
 8007fe0:	f8c8 1000 	streq.w	r1, [r8]
 8007fe4:	5162      	str	r2, [r4, r5]
 8007fe6:	604b      	str	r3, [r1, #4]
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 f82f 	bl	800804c <__malloc_unlock>
 8007fee:	f104 000b 	add.w	r0, r4, #11
 8007ff2:	1d23      	adds	r3, r4, #4
 8007ff4:	f020 0007 	bic.w	r0, r0, #7
 8007ff8:	1ac2      	subs	r2, r0, r3
 8007ffa:	bf1c      	itt	ne
 8007ffc:	1a1b      	subne	r3, r3, r0
 8007ffe:	50a3      	strne	r3, [r4, r2]
 8008000:	e7af      	b.n	8007f62 <_malloc_r+0x22>
 8008002:	6862      	ldr	r2, [r4, #4]
 8008004:	42a3      	cmp	r3, r4
 8008006:	bf0c      	ite	eq
 8008008:	f8c8 2000 	streq.w	r2, [r8]
 800800c:	605a      	strne	r2, [r3, #4]
 800800e:	e7eb      	b.n	8007fe8 <_malloc_r+0xa8>
 8008010:	4623      	mov	r3, r4
 8008012:	6864      	ldr	r4, [r4, #4]
 8008014:	e7ae      	b.n	8007f74 <_malloc_r+0x34>
 8008016:	463c      	mov	r4, r7
 8008018:	687f      	ldr	r7, [r7, #4]
 800801a:	e7b6      	b.n	8007f8a <_malloc_r+0x4a>
 800801c:	461a      	mov	r2, r3
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	42a3      	cmp	r3, r4
 8008022:	d1fb      	bne.n	800801c <_malloc_r+0xdc>
 8008024:	2300      	movs	r3, #0
 8008026:	6053      	str	r3, [r2, #4]
 8008028:	e7de      	b.n	8007fe8 <_malloc_r+0xa8>
 800802a:	230c      	movs	r3, #12
 800802c:	6033      	str	r3, [r6, #0]
 800802e:	4630      	mov	r0, r6
 8008030:	f000 f80c 	bl	800804c <__malloc_unlock>
 8008034:	e794      	b.n	8007f60 <_malloc_r+0x20>
 8008036:	6005      	str	r5, [r0, #0]
 8008038:	e7d6      	b.n	8007fe8 <_malloc_r+0xa8>
 800803a:	bf00      	nop
 800803c:	200101f0 	.word	0x200101f0

08008040 <__malloc_lock>:
 8008040:	4801      	ldr	r0, [pc, #4]	@ (8008048 <__malloc_lock+0x8>)
 8008042:	f7ff bf0e 	b.w	8007e62 <__retarget_lock_acquire_recursive>
 8008046:	bf00      	nop
 8008048:	200101e8 	.word	0x200101e8

0800804c <__malloc_unlock>:
 800804c:	4801      	ldr	r0, [pc, #4]	@ (8008054 <__malloc_unlock+0x8>)
 800804e:	f7ff bf09 	b.w	8007e64 <__retarget_lock_release_recursive>
 8008052:	bf00      	nop
 8008054:	200101e8 	.word	0x200101e8

08008058 <__sfputc_r>:
 8008058:	6893      	ldr	r3, [r2, #8]
 800805a:	3b01      	subs	r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	b410      	push	{r4}
 8008060:	6093      	str	r3, [r2, #8]
 8008062:	da08      	bge.n	8008076 <__sfputc_r+0x1e>
 8008064:	6994      	ldr	r4, [r2, #24]
 8008066:	42a3      	cmp	r3, r4
 8008068:	db01      	blt.n	800806e <__sfputc_r+0x16>
 800806a:	290a      	cmp	r1, #10
 800806c:	d103      	bne.n	8008076 <__sfputc_r+0x1e>
 800806e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008072:	f7ff bde8 	b.w	8007c46 <__swbuf_r>
 8008076:	6813      	ldr	r3, [r2, #0]
 8008078:	1c58      	adds	r0, r3, #1
 800807a:	6010      	str	r0, [r2, #0]
 800807c:	7019      	strb	r1, [r3, #0]
 800807e:	4608      	mov	r0, r1
 8008080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008084:	4770      	bx	lr

08008086 <__sfputs_r>:
 8008086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008088:	4606      	mov	r6, r0
 800808a:	460f      	mov	r7, r1
 800808c:	4614      	mov	r4, r2
 800808e:	18d5      	adds	r5, r2, r3
 8008090:	42ac      	cmp	r4, r5
 8008092:	d101      	bne.n	8008098 <__sfputs_r+0x12>
 8008094:	2000      	movs	r0, #0
 8008096:	e007      	b.n	80080a8 <__sfputs_r+0x22>
 8008098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809c:	463a      	mov	r2, r7
 800809e:	4630      	mov	r0, r6
 80080a0:	f7ff ffda 	bl	8008058 <__sfputc_r>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d1f3      	bne.n	8008090 <__sfputs_r+0xa>
 80080a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080ac <_vfiprintf_r>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	460d      	mov	r5, r1
 80080b2:	b09d      	sub	sp, #116	@ 0x74
 80080b4:	4614      	mov	r4, r2
 80080b6:	4698      	mov	r8, r3
 80080b8:	4606      	mov	r6, r0
 80080ba:	b118      	cbz	r0, 80080c4 <_vfiprintf_r+0x18>
 80080bc:	6a03      	ldr	r3, [r0, #32]
 80080be:	b90b      	cbnz	r3, 80080c4 <_vfiprintf_r+0x18>
 80080c0:	f7ff fcd8 	bl	8007a74 <__sinit>
 80080c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080c6:	07d9      	lsls	r1, r3, #31
 80080c8:	d405      	bmi.n	80080d6 <_vfiprintf_r+0x2a>
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	059a      	lsls	r2, r3, #22
 80080ce:	d402      	bmi.n	80080d6 <_vfiprintf_r+0x2a>
 80080d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080d2:	f7ff fec6 	bl	8007e62 <__retarget_lock_acquire_recursive>
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	071b      	lsls	r3, r3, #28
 80080da:	d501      	bpl.n	80080e0 <_vfiprintf_r+0x34>
 80080dc:	692b      	ldr	r3, [r5, #16]
 80080de:	b99b      	cbnz	r3, 8008108 <_vfiprintf_r+0x5c>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff fdee 	bl	8007cc4 <__swsetup_r>
 80080e8:	b170      	cbz	r0, 8008108 <_vfiprintf_r+0x5c>
 80080ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ec:	07dc      	lsls	r4, r3, #31
 80080ee:	d504      	bpl.n	80080fa <_vfiprintf_r+0x4e>
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	b01d      	add	sp, #116	@ 0x74
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	0598      	lsls	r0, r3, #22
 80080fe:	d4f7      	bmi.n	80080f0 <_vfiprintf_r+0x44>
 8008100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008102:	f7ff feaf 	bl	8007e64 <__retarget_lock_release_recursive>
 8008106:	e7f3      	b.n	80080f0 <_vfiprintf_r+0x44>
 8008108:	2300      	movs	r3, #0
 800810a:	9309      	str	r3, [sp, #36]	@ 0x24
 800810c:	2320      	movs	r3, #32
 800810e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008112:	f8cd 800c 	str.w	r8, [sp, #12]
 8008116:	2330      	movs	r3, #48	@ 0x30
 8008118:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082c8 <_vfiprintf_r+0x21c>
 800811c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008120:	f04f 0901 	mov.w	r9, #1
 8008124:	4623      	mov	r3, r4
 8008126:	469a      	mov	sl, r3
 8008128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812c:	b10a      	cbz	r2, 8008132 <_vfiprintf_r+0x86>
 800812e:	2a25      	cmp	r2, #37	@ 0x25
 8008130:	d1f9      	bne.n	8008126 <_vfiprintf_r+0x7a>
 8008132:	ebba 0b04 	subs.w	fp, sl, r4
 8008136:	d00b      	beq.n	8008150 <_vfiprintf_r+0xa4>
 8008138:	465b      	mov	r3, fp
 800813a:	4622      	mov	r2, r4
 800813c:	4629      	mov	r1, r5
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff ffa1 	bl	8008086 <__sfputs_r>
 8008144:	3001      	adds	r0, #1
 8008146:	f000 80a7 	beq.w	8008298 <_vfiprintf_r+0x1ec>
 800814a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800814c:	445a      	add	r2, fp
 800814e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008150:	f89a 3000 	ldrb.w	r3, [sl]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 809f 	beq.w	8008298 <_vfiprintf_r+0x1ec>
 800815a:	2300      	movs	r3, #0
 800815c:	f04f 32ff 	mov.w	r2, #4294967295
 8008160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008164:	f10a 0a01 	add.w	sl, sl, #1
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008170:	931a      	str	r3, [sp, #104]	@ 0x68
 8008172:	4654      	mov	r4, sl
 8008174:	2205      	movs	r2, #5
 8008176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817a:	4853      	ldr	r0, [pc, #332]	@ (80082c8 <_vfiprintf_r+0x21c>)
 800817c:	f7f8 f830 	bl	80001e0 <memchr>
 8008180:	9a04      	ldr	r2, [sp, #16]
 8008182:	b9d8      	cbnz	r0, 80081bc <_vfiprintf_r+0x110>
 8008184:	06d1      	lsls	r1, r2, #27
 8008186:	bf44      	itt	mi
 8008188:	2320      	movmi	r3, #32
 800818a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800818e:	0713      	lsls	r3, r2, #28
 8008190:	bf44      	itt	mi
 8008192:	232b      	movmi	r3, #43	@ 0x2b
 8008194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008198:	f89a 3000 	ldrb.w	r3, [sl]
 800819c:	2b2a      	cmp	r3, #42	@ 0x2a
 800819e:	d015      	beq.n	80081cc <_vfiprintf_r+0x120>
 80081a0:	9a07      	ldr	r2, [sp, #28]
 80081a2:	4654      	mov	r4, sl
 80081a4:	2000      	movs	r0, #0
 80081a6:	f04f 0c0a 	mov.w	ip, #10
 80081aa:	4621      	mov	r1, r4
 80081ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b0:	3b30      	subs	r3, #48	@ 0x30
 80081b2:	2b09      	cmp	r3, #9
 80081b4:	d94b      	bls.n	800824e <_vfiprintf_r+0x1a2>
 80081b6:	b1b0      	cbz	r0, 80081e6 <_vfiprintf_r+0x13a>
 80081b8:	9207      	str	r2, [sp, #28]
 80081ba:	e014      	b.n	80081e6 <_vfiprintf_r+0x13a>
 80081bc:	eba0 0308 	sub.w	r3, r0, r8
 80081c0:	fa09 f303 	lsl.w	r3, r9, r3
 80081c4:	4313      	orrs	r3, r2
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	46a2      	mov	sl, r4
 80081ca:	e7d2      	b.n	8008172 <_vfiprintf_r+0xc6>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	1d19      	adds	r1, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	9103      	str	r1, [sp, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bfbb      	ittet	lt
 80081d8:	425b      	neglt	r3, r3
 80081da:	f042 0202 	orrlt.w	r2, r2, #2
 80081de:	9307      	strge	r3, [sp, #28]
 80081e0:	9307      	strlt	r3, [sp, #28]
 80081e2:	bfb8      	it	lt
 80081e4:	9204      	strlt	r2, [sp, #16]
 80081e6:	7823      	ldrb	r3, [r4, #0]
 80081e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80081ea:	d10a      	bne.n	8008202 <_vfiprintf_r+0x156>
 80081ec:	7863      	ldrb	r3, [r4, #1]
 80081ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f0:	d132      	bne.n	8008258 <_vfiprintf_r+0x1ac>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	9203      	str	r2, [sp, #12]
 80081fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081fe:	3402      	adds	r4, #2
 8008200:	9305      	str	r3, [sp, #20]
 8008202:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082d8 <_vfiprintf_r+0x22c>
 8008206:	7821      	ldrb	r1, [r4, #0]
 8008208:	2203      	movs	r2, #3
 800820a:	4650      	mov	r0, sl
 800820c:	f7f7 ffe8 	bl	80001e0 <memchr>
 8008210:	b138      	cbz	r0, 8008222 <_vfiprintf_r+0x176>
 8008212:	9b04      	ldr	r3, [sp, #16]
 8008214:	eba0 000a 	sub.w	r0, r0, sl
 8008218:	2240      	movs	r2, #64	@ 0x40
 800821a:	4082      	lsls	r2, r0
 800821c:	4313      	orrs	r3, r2
 800821e:	3401      	adds	r4, #1
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008226:	4829      	ldr	r0, [pc, #164]	@ (80082cc <_vfiprintf_r+0x220>)
 8008228:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800822c:	2206      	movs	r2, #6
 800822e:	f7f7 ffd7 	bl	80001e0 <memchr>
 8008232:	2800      	cmp	r0, #0
 8008234:	d03f      	beq.n	80082b6 <_vfiprintf_r+0x20a>
 8008236:	4b26      	ldr	r3, [pc, #152]	@ (80082d0 <_vfiprintf_r+0x224>)
 8008238:	bb1b      	cbnz	r3, 8008282 <_vfiprintf_r+0x1d6>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	3307      	adds	r3, #7
 800823e:	f023 0307 	bic.w	r3, r3, #7
 8008242:	3308      	adds	r3, #8
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008248:	443b      	add	r3, r7
 800824a:	9309      	str	r3, [sp, #36]	@ 0x24
 800824c:	e76a      	b.n	8008124 <_vfiprintf_r+0x78>
 800824e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008252:	460c      	mov	r4, r1
 8008254:	2001      	movs	r0, #1
 8008256:	e7a8      	b.n	80081aa <_vfiprintf_r+0xfe>
 8008258:	2300      	movs	r3, #0
 800825a:	3401      	adds	r4, #1
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	4619      	mov	r1, r3
 8008260:	f04f 0c0a 	mov.w	ip, #10
 8008264:	4620      	mov	r0, r4
 8008266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800826a:	3a30      	subs	r2, #48	@ 0x30
 800826c:	2a09      	cmp	r2, #9
 800826e:	d903      	bls.n	8008278 <_vfiprintf_r+0x1cc>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0c6      	beq.n	8008202 <_vfiprintf_r+0x156>
 8008274:	9105      	str	r1, [sp, #20]
 8008276:	e7c4      	b.n	8008202 <_vfiprintf_r+0x156>
 8008278:	fb0c 2101 	mla	r1, ip, r1, r2
 800827c:	4604      	mov	r4, r0
 800827e:	2301      	movs	r3, #1
 8008280:	e7f0      	b.n	8008264 <_vfiprintf_r+0x1b8>
 8008282:	ab03      	add	r3, sp, #12
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	462a      	mov	r2, r5
 8008288:	4b12      	ldr	r3, [pc, #72]	@ (80082d4 <_vfiprintf_r+0x228>)
 800828a:	a904      	add	r1, sp, #16
 800828c:	4630      	mov	r0, r6
 800828e:	f3af 8000 	nop.w
 8008292:	4607      	mov	r7, r0
 8008294:	1c78      	adds	r0, r7, #1
 8008296:	d1d6      	bne.n	8008246 <_vfiprintf_r+0x19a>
 8008298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800829a:	07d9      	lsls	r1, r3, #31
 800829c:	d405      	bmi.n	80082aa <_vfiprintf_r+0x1fe>
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	059a      	lsls	r2, r3, #22
 80082a2:	d402      	bmi.n	80082aa <_vfiprintf_r+0x1fe>
 80082a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082a6:	f7ff fddd 	bl	8007e64 <__retarget_lock_release_recursive>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	065b      	lsls	r3, r3, #25
 80082ae:	f53f af1f 	bmi.w	80080f0 <_vfiprintf_r+0x44>
 80082b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082b4:	e71e      	b.n	80080f4 <_vfiprintf_r+0x48>
 80082b6:	ab03      	add	r3, sp, #12
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	462a      	mov	r2, r5
 80082bc:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <_vfiprintf_r+0x228>)
 80082be:	a904      	add	r1, sp, #16
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f879 	bl	80083b8 <_printf_i>
 80082c6:	e7e4      	b.n	8008292 <_vfiprintf_r+0x1e6>
 80082c8:	08008d4c 	.word	0x08008d4c
 80082cc:	08008d56 	.word	0x08008d56
 80082d0:	00000000 	.word	0x00000000
 80082d4:	08008087 	.word	0x08008087
 80082d8:	08008d52 	.word	0x08008d52

080082dc <_printf_common>:
 80082dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	4616      	mov	r6, r2
 80082e2:	4698      	mov	r8, r3
 80082e4:	688a      	ldr	r2, [r1, #8]
 80082e6:	690b      	ldr	r3, [r1, #16]
 80082e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	bfb8      	it	lt
 80082f0:	4613      	movlt	r3, r2
 80082f2:	6033      	str	r3, [r6, #0]
 80082f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082f8:	4607      	mov	r7, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b10a      	cbz	r2, 8008302 <_printf_common+0x26>
 80082fe:	3301      	adds	r3, #1
 8008300:	6033      	str	r3, [r6, #0]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	0699      	lsls	r1, r3, #26
 8008306:	bf42      	ittt	mi
 8008308:	6833      	ldrmi	r3, [r6, #0]
 800830a:	3302      	addmi	r3, #2
 800830c:	6033      	strmi	r3, [r6, #0]
 800830e:	6825      	ldr	r5, [r4, #0]
 8008310:	f015 0506 	ands.w	r5, r5, #6
 8008314:	d106      	bne.n	8008324 <_printf_common+0x48>
 8008316:	f104 0a19 	add.w	sl, r4, #25
 800831a:	68e3      	ldr	r3, [r4, #12]
 800831c:	6832      	ldr	r2, [r6, #0]
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	42ab      	cmp	r3, r5
 8008322:	dc26      	bgt.n	8008372 <_printf_common+0x96>
 8008324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	3b00      	subs	r3, #0
 800832c:	bf18      	it	ne
 800832e:	2301      	movne	r3, #1
 8008330:	0692      	lsls	r2, r2, #26
 8008332:	d42b      	bmi.n	800838c <_printf_common+0xb0>
 8008334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008338:	4641      	mov	r1, r8
 800833a:	4638      	mov	r0, r7
 800833c:	47c8      	blx	r9
 800833e:	3001      	adds	r0, #1
 8008340:	d01e      	beq.n	8008380 <_printf_common+0xa4>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	f003 0306 	and.w	r3, r3, #6
 800834a:	2b04      	cmp	r3, #4
 800834c:	bf02      	ittt	eq
 800834e:	68e5      	ldreq	r5, [r4, #12]
 8008350:	6833      	ldreq	r3, [r6, #0]
 8008352:	1aed      	subeq	r5, r5, r3
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	bf0c      	ite	eq
 8008358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800835c:	2500      	movne	r5, #0
 800835e:	4293      	cmp	r3, r2
 8008360:	bfc4      	itt	gt
 8008362:	1a9b      	subgt	r3, r3, r2
 8008364:	18ed      	addgt	r5, r5, r3
 8008366:	2600      	movs	r6, #0
 8008368:	341a      	adds	r4, #26
 800836a:	42b5      	cmp	r5, r6
 800836c:	d11a      	bne.n	80083a4 <_printf_common+0xc8>
 800836e:	2000      	movs	r0, #0
 8008370:	e008      	b.n	8008384 <_printf_common+0xa8>
 8008372:	2301      	movs	r3, #1
 8008374:	4652      	mov	r2, sl
 8008376:	4641      	mov	r1, r8
 8008378:	4638      	mov	r0, r7
 800837a:	47c8      	blx	r9
 800837c:	3001      	adds	r0, #1
 800837e:	d103      	bne.n	8008388 <_printf_common+0xac>
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	3501      	adds	r5, #1
 800838a:	e7c6      	b.n	800831a <_printf_common+0x3e>
 800838c:	18e1      	adds	r1, r4, r3
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	2030      	movs	r0, #48	@ 0x30
 8008392:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008396:	4422      	add	r2, r4
 8008398:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800839c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083a0:	3302      	adds	r3, #2
 80083a2:	e7c7      	b.n	8008334 <_printf_common+0x58>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4622      	mov	r2, r4
 80083a8:	4641      	mov	r1, r8
 80083aa:	4638      	mov	r0, r7
 80083ac:	47c8      	blx	r9
 80083ae:	3001      	adds	r0, #1
 80083b0:	d0e6      	beq.n	8008380 <_printf_common+0xa4>
 80083b2:	3601      	adds	r6, #1
 80083b4:	e7d9      	b.n	800836a <_printf_common+0x8e>
	...

080083b8 <_printf_i>:
 80083b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	7e0f      	ldrb	r7, [r1, #24]
 80083be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083c0:	2f78      	cmp	r7, #120	@ 0x78
 80083c2:	4691      	mov	r9, r2
 80083c4:	4680      	mov	r8, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	469a      	mov	sl, r3
 80083ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083ce:	d807      	bhi.n	80083e0 <_printf_i+0x28>
 80083d0:	2f62      	cmp	r7, #98	@ 0x62
 80083d2:	d80a      	bhi.n	80083ea <_printf_i+0x32>
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	f000 80d1 	beq.w	800857c <_printf_i+0x1c4>
 80083da:	2f58      	cmp	r7, #88	@ 0x58
 80083dc:	f000 80b8 	beq.w	8008550 <_printf_i+0x198>
 80083e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083e8:	e03a      	b.n	8008460 <_printf_i+0xa8>
 80083ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083ee:	2b15      	cmp	r3, #21
 80083f0:	d8f6      	bhi.n	80083e0 <_printf_i+0x28>
 80083f2:	a101      	add	r1, pc, #4	@ (adr r1, 80083f8 <_printf_i+0x40>)
 80083f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083f8:	08008451 	.word	0x08008451
 80083fc:	08008465 	.word	0x08008465
 8008400:	080083e1 	.word	0x080083e1
 8008404:	080083e1 	.word	0x080083e1
 8008408:	080083e1 	.word	0x080083e1
 800840c:	080083e1 	.word	0x080083e1
 8008410:	08008465 	.word	0x08008465
 8008414:	080083e1 	.word	0x080083e1
 8008418:	080083e1 	.word	0x080083e1
 800841c:	080083e1 	.word	0x080083e1
 8008420:	080083e1 	.word	0x080083e1
 8008424:	08008563 	.word	0x08008563
 8008428:	0800848f 	.word	0x0800848f
 800842c:	0800851d 	.word	0x0800851d
 8008430:	080083e1 	.word	0x080083e1
 8008434:	080083e1 	.word	0x080083e1
 8008438:	08008585 	.word	0x08008585
 800843c:	080083e1 	.word	0x080083e1
 8008440:	0800848f 	.word	0x0800848f
 8008444:	080083e1 	.word	0x080083e1
 8008448:	080083e1 	.word	0x080083e1
 800844c:	08008525 	.word	0x08008525
 8008450:	6833      	ldr	r3, [r6, #0]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6032      	str	r2, [r6, #0]
 8008458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800845c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008460:	2301      	movs	r3, #1
 8008462:	e09c      	b.n	800859e <_printf_i+0x1e6>
 8008464:	6833      	ldr	r3, [r6, #0]
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	1d19      	adds	r1, r3, #4
 800846a:	6031      	str	r1, [r6, #0]
 800846c:	0606      	lsls	r6, r0, #24
 800846e:	d501      	bpl.n	8008474 <_printf_i+0xbc>
 8008470:	681d      	ldr	r5, [r3, #0]
 8008472:	e003      	b.n	800847c <_printf_i+0xc4>
 8008474:	0645      	lsls	r5, r0, #25
 8008476:	d5fb      	bpl.n	8008470 <_printf_i+0xb8>
 8008478:	f9b3 5000 	ldrsh.w	r5, [r3]
 800847c:	2d00      	cmp	r5, #0
 800847e:	da03      	bge.n	8008488 <_printf_i+0xd0>
 8008480:	232d      	movs	r3, #45	@ 0x2d
 8008482:	426d      	negs	r5, r5
 8008484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008488:	4858      	ldr	r0, [pc, #352]	@ (80085ec <_printf_i+0x234>)
 800848a:	230a      	movs	r3, #10
 800848c:	e011      	b.n	80084b2 <_printf_i+0xfa>
 800848e:	6821      	ldr	r1, [r4, #0]
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	0608      	lsls	r0, r1, #24
 8008494:	f853 5b04 	ldr.w	r5, [r3], #4
 8008498:	d402      	bmi.n	80084a0 <_printf_i+0xe8>
 800849a:	0649      	lsls	r1, r1, #25
 800849c:	bf48      	it	mi
 800849e:	b2ad      	uxthmi	r5, r5
 80084a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80084a2:	4852      	ldr	r0, [pc, #328]	@ (80085ec <_printf_i+0x234>)
 80084a4:	6033      	str	r3, [r6, #0]
 80084a6:	bf14      	ite	ne
 80084a8:	230a      	movne	r3, #10
 80084aa:	2308      	moveq	r3, #8
 80084ac:	2100      	movs	r1, #0
 80084ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084b2:	6866      	ldr	r6, [r4, #4]
 80084b4:	60a6      	str	r6, [r4, #8]
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	db05      	blt.n	80084c6 <_printf_i+0x10e>
 80084ba:	6821      	ldr	r1, [r4, #0]
 80084bc:	432e      	orrs	r6, r5
 80084be:	f021 0104 	bic.w	r1, r1, #4
 80084c2:	6021      	str	r1, [r4, #0]
 80084c4:	d04b      	beq.n	800855e <_printf_i+0x1a6>
 80084c6:	4616      	mov	r6, r2
 80084c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80084cc:	fb03 5711 	mls	r7, r3, r1, r5
 80084d0:	5dc7      	ldrb	r7, [r0, r7]
 80084d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084d6:	462f      	mov	r7, r5
 80084d8:	42bb      	cmp	r3, r7
 80084da:	460d      	mov	r5, r1
 80084dc:	d9f4      	bls.n	80084c8 <_printf_i+0x110>
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d10b      	bne.n	80084fa <_printf_i+0x142>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	07df      	lsls	r7, r3, #31
 80084e6:	d508      	bpl.n	80084fa <_printf_i+0x142>
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	6861      	ldr	r1, [r4, #4]
 80084ec:	4299      	cmp	r1, r3
 80084ee:	bfde      	ittt	le
 80084f0:	2330      	movle	r3, #48	@ 0x30
 80084f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084fa:	1b92      	subs	r2, r2, r6
 80084fc:	6122      	str	r2, [r4, #16]
 80084fe:	f8cd a000 	str.w	sl, [sp]
 8008502:	464b      	mov	r3, r9
 8008504:	aa03      	add	r2, sp, #12
 8008506:	4621      	mov	r1, r4
 8008508:	4640      	mov	r0, r8
 800850a:	f7ff fee7 	bl	80082dc <_printf_common>
 800850e:	3001      	adds	r0, #1
 8008510:	d14a      	bne.n	80085a8 <_printf_i+0x1f0>
 8008512:	f04f 30ff 	mov.w	r0, #4294967295
 8008516:	b004      	add	sp, #16
 8008518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	f043 0320 	orr.w	r3, r3, #32
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	4832      	ldr	r0, [pc, #200]	@ (80085f0 <_printf_i+0x238>)
 8008526:	2778      	movs	r7, #120	@ 0x78
 8008528:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	6831      	ldr	r1, [r6, #0]
 8008530:	061f      	lsls	r7, r3, #24
 8008532:	f851 5b04 	ldr.w	r5, [r1], #4
 8008536:	d402      	bmi.n	800853e <_printf_i+0x186>
 8008538:	065f      	lsls	r7, r3, #25
 800853a:	bf48      	it	mi
 800853c:	b2ad      	uxthmi	r5, r5
 800853e:	6031      	str	r1, [r6, #0]
 8008540:	07d9      	lsls	r1, r3, #31
 8008542:	bf44      	itt	mi
 8008544:	f043 0320 	orrmi.w	r3, r3, #32
 8008548:	6023      	strmi	r3, [r4, #0]
 800854a:	b11d      	cbz	r5, 8008554 <_printf_i+0x19c>
 800854c:	2310      	movs	r3, #16
 800854e:	e7ad      	b.n	80084ac <_printf_i+0xf4>
 8008550:	4826      	ldr	r0, [pc, #152]	@ (80085ec <_printf_i+0x234>)
 8008552:	e7e9      	b.n	8008528 <_printf_i+0x170>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	f023 0320 	bic.w	r3, r3, #32
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	e7f6      	b.n	800854c <_printf_i+0x194>
 800855e:	4616      	mov	r6, r2
 8008560:	e7bd      	b.n	80084de <_printf_i+0x126>
 8008562:	6833      	ldr	r3, [r6, #0]
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	6961      	ldr	r1, [r4, #20]
 8008568:	1d18      	adds	r0, r3, #4
 800856a:	6030      	str	r0, [r6, #0]
 800856c:	062e      	lsls	r6, r5, #24
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	d501      	bpl.n	8008576 <_printf_i+0x1be>
 8008572:	6019      	str	r1, [r3, #0]
 8008574:	e002      	b.n	800857c <_printf_i+0x1c4>
 8008576:	0668      	lsls	r0, r5, #25
 8008578:	d5fb      	bpl.n	8008572 <_printf_i+0x1ba>
 800857a:	8019      	strh	r1, [r3, #0]
 800857c:	2300      	movs	r3, #0
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	4616      	mov	r6, r2
 8008582:	e7bc      	b.n	80084fe <_printf_i+0x146>
 8008584:	6833      	ldr	r3, [r6, #0]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	6032      	str	r2, [r6, #0]
 800858a:	681e      	ldr	r6, [r3, #0]
 800858c:	6862      	ldr	r2, [r4, #4]
 800858e:	2100      	movs	r1, #0
 8008590:	4630      	mov	r0, r6
 8008592:	f7f7 fe25 	bl	80001e0 <memchr>
 8008596:	b108      	cbz	r0, 800859c <_printf_i+0x1e4>
 8008598:	1b80      	subs	r0, r0, r6
 800859a:	6060      	str	r0, [r4, #4]
 800859c:	6863      	ldr	r3, [r4, #4]
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	2300      	movs	r3, #0
 80085a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085a6:	e7aa      	b.n	80084fe <_printf_i+0x146>
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	4632      	mov	r2, r6
 80085ac:	4649      	mov	r1, r9
 80085ae:	4640      	mov	r0, r8
 80085b0:	47d0      	blx	sl
 80085b2:	3001      	adds	r0, #1
 80085b4:	d0ad      	beq.n	8008512 <_printf_i+0x15a>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	079b      	lsls	r3, r3, #30
 80085ba:	d413      	bmi.n	80085e4 <_printf_i+0x22c>
 80085bc:	68e0      	ldr	r0, [r4, #12]
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	4298      	cmp	r0, r3
 80085c2:	bfb8      	it	lt
 80085c4:	4618      	movlt	r0, r3
 80085c6:	e7a6      	b.n	8008516 <_printf_i+0x15e>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4632      	mov	r2, r6
 80085cc:	4649      	mov	r1, r9
 80085ce:	4640      	mov	r0, r8
 80085d0:	47d0      	blx	sl
 80085d2:	3001      	adds	r0, #1
 80085d4:	d09d      	beq.n	8008512 <_printf_i+0x15a>
 80085d6:	3501      	adds	r5, #1
 80085d8:	68e3      	ldr	r3, [r4, #12]
 80085da:	9903      	ldr	r1, [sp, #12]
 80085dc:	1a5b      	subs	r3, r3, r1
 80085de:	42ab      	cmp	r3, r5
 80085e0:	dcf2      	bgt.n	80085c8 <_printf_i+0x210>
 80085e2:	e7eb      	b.n	80085bc <_printf_i+0x204>
 80085e4:	2500      	movs	r5, #0
 80085e6:	f104 0619 	add.w	r6, r4, #25
 80085ea:	e7f5      	b.n	80085d8 <_printf_i+0x220>
 80085ec:	08008d5d 	.word	0x08008d5d
 80085f0:	08008d6e 	.word	0x08008d6e

080085f4 <__sflush_r>:
 80085f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085fc:	0716      	lsls	r6, r2, #28
 80085fe:	4605      	mov	r5, r0
 8008600:	460c      	mov	r4, r1
 8008602:	d454      	bmi.n	80086ae <__sflush_r+0xba>
 8008604:	684b      	ldr	r3, [r1, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dc02      	bgt.n	8008610 <__sflush_r+0x1c>
 800860a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd48      	ble.n	80086a2 <__sflush_r+0xae>
 8008610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008612:	2e00      	cmp	r6, #0
 8008614:	d045      	beq.n	80086a2 <__sflush_r+0xae>
 8008616:	2300      	movs	r3, #0
 8008618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800861c:	682f      	ldr	r7, [r5, #0]
 800861e:	6a21      	ldr	r1, [r4, #32]
 8008620:	602b      	str	r3, [r5, #0]
 8008622:	d030      	beq.n	8008686 <__sflush_r+0x92>
 8008624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	0759      	lsls	r1, r3, #29
 800862a:	d505      	bpl.n	8008638 <__sflush_r+0x44>
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008632:	b10b      	cbz	r3, 8008638 <__sflush_r+0x44>
 8008634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	2300      	movs	r3, #0
 800863a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800863c:	6a21      	ldr	r1, [r4, #32]
 800863e:	4628      	mov	r0, r5
 8008640:	47b0      	blx	r6
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	d106      	bne.n	8008656 <__sflush_r+0x62>
 8008648:	6829      	ldr	r1, [r5, #0]
 800864a:	291d      	cmp	r1, #29
 800864c:	d82b      	bhi.n	80086a6 <__sflush_r+0xb2>
 800864e:	4a2a      	ldr	r2, [pc, #168]	@ (80086f8 <__sflush_r+0x104>)
 8008650:	40ca      	lsrs	r2, r1
 8008652:	07d6      	lsls	r6, r2, #31
 8008654:	d527      	bpl.n	80086a6 <__sflush_r+0xb2>
 8008656:	2200      	movs	r2, #0
 8008658:	6062      	str	r2, [r4, #4]
 800865a:	04d9      	lsls	r1, r3, #19
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	d504      	bpl.n	800866c <__sflush_r+0x78>
 8008662:	1c42      	adds	r2, r0, #1
 8008664:	d101      	bne.n	800866a <__sflush_r+0x76>
 8008666:	682b      	ldr	r3, [r5, #0]
 8008668:	b903      	cbnz	r3, 800866c <__sflush_r+0x78>
 800866a:	6560      	str	r0, [r4, #84]	@ 0x54
 800866c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800866e:	602f      	str	r7, [r5, #0]
 8008670:	b1b9      	cbz	r1, 80086a2 <__sflush_r+0xae>
 8008672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008676:	4299      	cmp	r1, r3
 8008678:	d002      	beq.n	8008680 <__sflush_r+0x8c>
 800867a:	4628      	mov	r0, r5
 800867c:	f7ff fbf4 	bl	8007e68 <_free_r>
 8008680:	2300      	movs	r3, #0
 8008682:	6363      	str	r3, [r4, #52]	@ 0x34
 8008684:	e00d      	b.n	80086a2 <__sflush_r+0xae>
 8008686:	2301      	movs	r3, #1
 8008688:	4628      	mov	r0, r5
 800868a:	47b0      	blx	r6
 800868c:	4602      	mov	r2, r0
 800868e:	1c50      	adds	r0, r2, #1
 8008690:	d1c9      	bne.n	8008626 <__sflush_r+0x32>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0c6      	beq.n	8008626 <__sflush_r+0x32>
 8008698:	2b1d      	cmp	r3, #29
 800869a:	d001      	beq.n	80086a0 <__sflush_r+0xac>
 800869c:	2b16      	cmp	r3, #22
 800869e:	d11e      	bne.n	80086de <__sflush_r+0xea>
 80086a0:	602f      	str	r7, [r5, #0]
 80086a2:	2000      	movs	r0, #0
 80086a4:	e022      	b.n	80086ec <__sflush_r+0xf8>
 80086a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086aa:	b21b      	sxth	r3, r3
 80086ac:	e01b      	b.n	80086e6 <__sflush_r+0xf2>
 80086ae:	690f      	ldr	r7, [r1, #16]
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	d0f6      	beq.n	80086a2 <__sflush_r+0xae>
 80086b4:	0793      	lsls	r3, r2, #30
 80086b6:	680e      	ldr	r6, [r1, #0]
 80086b8:	bf08      	it	eq
 80086ba:	694b      	ldreq	r3, [r1, #20]
 80086bc:	600f      	str	r7, [r1, #0]
 80086be:	bf18      	it	ne
 80086c0:	2300      	movne	r3, #0
 80086c2:	eba6 0807 	sub.w	r8, r6, r7
 80086c6:	608b      	str	r3, [r1, #8]
 80086c8:	f1b8 0f00 	cmp.w	r8, #0
 80086cc:	dde9      	ble.n	80086a2 <__sflush_r+0xae>
 80086ce:	6a21      	ldr	r1, [r4, #32]
 80086d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086d2:	4643      	mov	r3, r8
 80086d4:	463a      	mov	r2, r7
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b0      	blx	r6
 80086da:	2800      	cmp	r0, #0
 80086dc:	dc08      	bgt.n	80086f0 <__sflush_r+0xfc>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	4407      	add	r7, r0
 80086f2:	eba8 0800 	sub.w	r8, r8, r0
 80086f6:	e7e7      	b.n	80086c8 <__sflush_r+0xd4>
 80086f8:	20400001 	.word	0x20400001

080086fc <_fflush_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	690b      	ldr	r3, [r1, #16]
 8008700:	4605      	mov	r5, r0
 8008702:	460c      	mov	r4, r1
 8008704:	b913      	cbnz	r3, 800870c <_fflush_r+0x10>
 8008706:	2500      	movs	r5, #0
 8008708:	4628      	mov	r0, r5
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	b118      	cbz	r0, 8008716 <_fflush_r+0x1a>
 800870e:	6a03      	ldr	r3, [r0, #32]
 8008710:	b90b      	cbnz	r3, 8008716 <_fflush_r+0x1a>
 8008712:	f7ff f9af 	bl	8007a74 <__sinit>
 8008716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0f3      	beq.n	8008706 <_fflush_r+0xa>
 800871e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008720:	07d0      	lsls	r0, r2, #31
 8008722:	d404      	bmi.n	800872e <_fflush_r+0x32>
 8008724:	0599      	lsls	r1, r3, #22
 8008726:	d402      	bmi.n	800872e <_fflush_r+0x32>
 8008728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800872a:	f7ff fb9a 	bl	8007e62 <__retarget_lock_acquire_recursive>
 800872e:	4628      	mov	r0, r5
 8008730:	4621      	mov	r1, r4
 8008732:	f7ff ff5f 	bl	80085f4 <__sflush_r>
 8008736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008738:	07da      	lsls	r2, r3, #31
 800873a:	4605      	mov	r5, r0
 800873c:	d4e4      	bmi.n	8008708 <_fflush_r+0xc>
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	059b      	lsls	r3, r3, #22
 8008742:	d4e1      	bmi.n	8008708 <_fflush_r+0xc>
 8008744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008746:	f7ff fb8d 	bl	8007e64 <__retarget_lock_release_recursive>
 800874a:	e7dd      	b.n	8008708 <_fflush_r+0xc>

0800874c <__swhatbuf_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	2900      	cmp	r1, #0
 8008756:	b096      	sub	sp, #88	@ 0x58
 8008758:	4615      	mov	r5, r2
 800875a:	461e      	mov	r6, r3
 800875c:	da0d      	bge.n	800877a <__swhatbuf_r+0x2e>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	bf14      	ite	ne
 800876a:	2340      	movne	r3, #64	@ 0x40
 800876c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008770:	2000      	movs	r0, #0
 8008772:	6031      	str	r1, [r6, #0]
 8008774:	602b      	str	r3, [r5, #0]
 8008776:	b016      	add	sp, #88	@ 0x58
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	466a      	mov	r2, sp
 800877c:	f000 f848 	bl	8008810 <_fstat_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	dbec      	blt.n	800875e <__swhatbuf_r+0x12>
 8008784:	9901      	ldr	r1, [sp, #4]
 8008786:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800878a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800878e:	4259      	negs	r1, r3
 8008790:	4159      	adcs	r1, r3
 8008792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008796:	e7eb      	b.n	8008770 <__swhatbuf_r+0x24>

08008798 <__smakebuf_r>:
 8008798:	898b      	ldrh	r3, [r1, #12]
 800879a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800879c:	079d      	lsls	r5, r3, #30
 800879e:	4606      	mov	r6, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	d507      	bpl.n	80087b4 <__smakebuf_r+0x1c>
 80087a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	2301      	movs	r3, #1
 80087ae:	6163      	str	r3, [r4, #20]
 80087b0:	b003      	add	sp, #12
 80087b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b4:	ab01      	add	r3, sp, #4
 80087b6:	466a      	mov	r2, sp
 80087b8:	f7ff ffc8 	bl	800874c <__swhatbuf_r>
 80087bc:	9f00      	ldr	r7, [sp, #0]
 80087be:	4605      	mov	r5, r0
 80087c0:	4639      	mov	r1, r7
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7ff fbbc 	bl	8007f40 <_malloc_r>
 80087c8:	b948      	cbnz	r0, 80087de <__smakebuf_r+0x46>
 80087ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ce:	059a      	lsls	r2, r3, #22
 80087d0:	d4ee      	bmi.n	80087b0 <__smakebuf_r+0x18>
 80087d2:	f023 0303 	bic.w	r3, r3, #3
 80087d6:	f043 0302 	orr.w	r3, r3, #2
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	e7e2      	b.n	80087a4 <__smakebuf_r+0xc>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	6020      	str	r0, [r4, #0]
 80087e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087ee:	b15b      	cbz	r3, 8008808 <__smakebuf_r+0x70>
 80087f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 f81d 	bl	8008834 <_isatty_r>
 80087fa:	b128      	cbz	r0, 8008808 <__smakebuf_r+0x70>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f023 0303 	bic.w	r3, r3, #3
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	431d      	orrs	r5, r3
 800880c:	81a5      	strh	r5, [r4, #12]
 800880e:	e7cf      	b.n	80087b0 <__smakebuf_r+0x18>

08008810 <_fstat_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d07      	ldr	r5, [pc, #28]	@ (8008830 <_fstat_r+0x20>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	4611      	mov	r1, r2
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	f7f8 fbb6 	bl	8000f8e <_fstat>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d102      	bne.n	800882c <_fstat_r+0x1c>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b103      	cbz	r3, 800882c <_fstat_r+0x1c>
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	bd38      	pop	{r3, r4, r5, pc}
 800882e:	bf00      	nop
 8008830:	200101e4 	.word	0x200101e4

08008834 <_isatty_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d06      	ldr	r5, [pc, #24]	@ (8008850 <_isatty_r+0x1c>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7f8 fbb5 	bl	8000fae <_isatty>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_isatty_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_isatty_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	200101e4 	.word	0x200101e4

08008854 <_sbrk_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	@ (8008870 <_sbrk_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f8 fbbe 	bl	8000fe0 <_sbrk>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_sbrk_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_sbrk_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	200101e4 	.word	0x200101e4

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	bf00      	nop
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
