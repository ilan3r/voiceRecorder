
voiceRecorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009208  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005700  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaa8  0800eaa8  00010080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eaa8  0800eaa8  0000faa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eab0  0800eab0  00010080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eab0  0800eab0  0000fab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eab4  0800eab4  0000fab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800eab8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe0  20000080  0800eb38  00010080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002060  0800eb38  00011060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce7  00000000  00000000  000100b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361d  00000000  00000000  00023d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  000273b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da9  00000000  00000000  00028578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001991f  00000000  00000000  00029321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a89  00000000  00000000  00042c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5b5  00000000  00000000  0005b6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eac7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  000eacc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f0058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009390 	.word	0x08009390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08009390 	.word	0x08009390

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)  // Replace with your pin
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000db8:	d118      	bne.n	8000dec <HAL_GPIO_EXTI_Callback+0x44>
    {
        // Your interrupt handling code here
    	char str[] = "button pressed \r\n";
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000dbc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000dc0:	461d      	mov	r5, r3
 8000dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc6:	682b      	ldr	r3, [r5, #0]
 8000dc8:	8023      	strh	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, (const uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000dca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fa06 	bl	80001e0 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	4824      	ldr	r0, [pc, #144]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000de2:	f005 fbe3 	bl	80065ac <HAL_UART_Transmit>

    	button_flag = 1;
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]

    }

    if (GPIO_Pin == GPIO_PIN_9)  // Replace with your pin
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000df2:	d11b      	bne.n	8000e2c <HAL_GPIO_EXTI_Callback+0x84>
    {
        // Your interrupt handling code here
    	char str[] = "BACK BUTTON pressed \r\n";
 8000df4:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000df6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000dfa:	461d      	mov	r5, r3
 8000dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e04:	6020      	str	r0, [r4, #0]
 8000e06:	3404      	adds	r4, #4
 8000e08:	8021      	strh	r1, [r4, #0]
 8000e0a:	3402      	adds	r4, #2
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	7023      	strb	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, (const uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff f9e3 	bl	80001e0 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	4813      	ldr	r0, [pc, #76]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e28:	f005 fbc0 	bl	80065ac <HAL_UART_Transmit>

    }

    if (GPIO_Pin == GPIO_PIN_8)  // Replace with your pin
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e32:	d118      	bne.n	8000e66 <HAL_GPIO_EXTI_Callback+0xbe>
    {
        // Your interrupt handling code here
    	char str[] = "OK BUTTON pressed \r\n";
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000e36:	f107 040c 	add.w	r4, r7, #12
 8000e3a:	461d      	mov	r5, r3
 8000e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e44:	6020      	str	r0, [r4, #0]
 8000e46:	3404      	adds	r4, #4
 8000e48:	7021      	strb	r1, [r4, #0]
    	HAL_UART_Transmit(&huart2, (const uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff f9c6 	bl	80001e0 <strlen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	f107 010c 	add.w	r1, r7, #12
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e62:	f005 fba3 	bl	80065ac <HAL_UART_Transmit>


    }
}
 8000e66:	bf00      	nop
 8000e68:	3750      	adds	r7, #80	@ 0x50
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	080093a8 	.word	0x080093a8
 8000e74:	20001a9c 	.word	0x20001a9c
 8000e78:	2000009e 	.word	0x2000009e
 8000e7c:	080093bc 	.word	0x080093bc
 8000e80:	080093d4 	.word	0x080093d4

08000e84 <_write>:

int _write(int file, char *ptr, int len) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	4804      	ldr	r0, [pc, #16]	@ (8000eac <_write+0x28>)
 8000e9c:	f005 fb86 	bl	80065ac <HAL_UART_Transmit>
    return len;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20001a9c 	.word	0x20001a9c

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f002 f970 	bl	8003198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f820 	bl	8000efc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ebc:	f000 f888 	bl	8000fd0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f000 f9b6 	bl	8001230 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec4:	f000 f98c 	bl	80011e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec8:	f000 f960 	bl	800118c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ecc:	f000 f928 	bl	8001120 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ed0:	f005 ff28 	bl	8006d24 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000ed4:	f000 f8c8 	bl	8001068 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000ed8:	f000 f8f4 	bl	80010c4 <MX_I2S3_Init>
  MX_I2C1_Init();
 8000edc:	f000 f896 	bl	800100c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  printf("starting...\r\n");
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <main+0x48>)
 8000ee2:	f006 fdd5 	bl	8007a90 <puts>
  HAL_Delay(500);
 8000ee6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eea:	f002 f9c7 	bl	800327c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ssd1306_TestAll();
 8000eee:	f001 fd81 	bl	80029f4 <ssd1306_TestAll>
  {
 8000ef2:	bf00      	nop
 8000ef4:	e7fb      	b.n	8000eee <main+0x3e>
 8000ef6:	bf00      	nop
 8000ef8:	080093ec 	.word	0x080093ec

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	@ 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	@ 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fef0 	bl	8007cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <SystemClock_Config+0xcc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <SystemClock_Config+0xcc>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f30:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <SystemClock_Config+0xcc>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <SystemClock_Config+0xd0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f48:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <SystemClock_Config+0xd0>)
 8000f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f70:	2308      	movs	r3, #8
 8000f72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f74:	2354      	movs	r3, #84	@ 0x54
 8000f76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f889 	bl	800509c <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f90:	f000 fa18 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 faeb 	bl	800558c <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fbc:	f000 fa02 	bl	80013c4 <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3750      	adds	r7, #80	@ 0x50
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000fe8:	2360      	movs	r3, #96	@ 0x60
 8000fea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fcea 	bl	80059cc <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000ffe:	f000 f9e1 	bl	80013c4 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <MX_I2C1_Init+0x50>)
 8001012:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <MX_I2C1_Init+0x54>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_I2C1_Init+0x50>)
 8001018:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <MX_I2C1_Init+0x58>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_I2C1_Init+0x50>)
 800102a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800102e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <MX_I2C1_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_I2C1_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_I2C1_Init+0x50>)
 800104a:	f002 feed 	bl	8003e28 <HAL_I2C_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001054:	f000 f9b6 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200018a0 	.word	0x200018a0
 8001060:	40005400 	.word	0x40005400
 8001064:	000186a0 	.word	0x000186a0

08001068 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_I2S2_Init+0x54>)
 800106e:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <MX_I2S2_Init+0x58>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <MX_I2S2_Init+0x54>)
 8001074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001078:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_I2S2_Init+0x54>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_I2S2_Init+0x54>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <MX_I2S2_Init+0x54>)
 8001088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800108c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_I2S2_Init+0x54>)
 8001090:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001094:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_I2S2_Init+0x54>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <MX_I2S2_Init+0x54>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_I2S2_Init+0x54>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_I2S2_Init+0x54>)
 80010aa:	f003 fb6b 	bl	8004784 <HAL_I2S_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80010b4:	f000 f986 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200018f4 	.word	0x200018f4
 80010c0:	40003800 	.word	0x40003800

080010c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010ca:	4a14      	ldr	r2, [pc, #80]	@ (800111c <MX_I2S3_Init+0x58>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010d0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80010d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010de:	2201      	movs	r2, #1
 80010e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010ea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80010ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010f0:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_I2S3_Init+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_I2S3_Init+0x54>)
 8001104:	f003 fb3e 	bl	8004784 <HAL_I2S_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800110e:	f000 f959 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000193c 	.word	0x2000193c
 800111c:	40003c00 	.word	0x40003c00

08001120 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <MX_SPI1_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_SPI1_Init+0x64>)
 800112c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_SPI1_Init+0x64>)
 800114c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001154:	2218      	movs	r2, #24
 8001156:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_SPI1_Init+0x64>)
 800116c:	220a      	movs	r2, #10
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_SPI1_Init+0x64>)
 8001172:	f004 fd79 	bl	8005c68 <HAL_SPI_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 f922 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20001a44 	.word	0x20001a44
 8001188:	40013000 	.word	0x40013000

0800118c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <MX_USART2_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f005 f9a2 	bl	800650c <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ce:	f000 f8f9 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20001a9c 	.word	0x20001a9c
 80011dc:	40004400 	.word	0x40004400

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_DMA_Init+0x4c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a0f      	ldr	r2, [pc, #60]	@ (800122c <MX_DMA_Init+0x4c>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <MX_DMA_Init+0x4c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200b      	movs	r0, #11
 8001208:	f002 f937 	bl	800347a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 f950 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	200f      	movs	r0, #15
 8001218:	f002 f92f 	bl	800347a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800121c:	200f      	movs	r0, #15
 800121e:	f002 f948 	bl	80034b2 <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <MX_GPIO_Init+0x118>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a3e      	ldr	r2, [pc, #248]	@ (8001348 <MX_GPIO_Init+0x118>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b3c      	ldr	r3, [pc, #240]	@ (8001348 <MX_GPIO_Init+0x118>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <MX_GPIO_Init+0x118>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a37      	ldr	r2, [pc, #220]	@ (8001348 <MX_GPIO_Init+0x118>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b35      	ldr	r3, [pc, #212]	@ (8001348 <MX_GPIO_Init+0x118>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <MX_GPIO_Init+0x118>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a30      	ldr	r2, [pc, #192]	@ (8001348 <MX_GPIO_Init+0x118>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b2e      	ldr	r3, [pc, #184]	@ (8001348 <MX_GPIO_Init+0x118>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <MX_GPIO_Init+0x118>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a29      	ldr	r2, [pc, #164]	@ (8001348 <MX_GPIO_Init+0x118>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <MX_GPIO_Init+0x118>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2110      	movs	r1, #16
 80012ba:	4824      	ldr	r0, [pc, #144]	@ (800134c <MX_GPIO_Init+0x11c>)
 80012bc:	f002 fd82 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2120      	movs	r1, #32
 80012c4:	4821      	ldr	r0, [pc, #132]	@ (800134c <MX_GPIO_Init+0x11c>)
 80012c6:	f002 fd7d 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_PB_Pin */
  GPIO_InitStruct.Pin = BLUE_PB_Pin;
 80012ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_PB_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	481b      	ldr	r0, [pc, #108]	@ (8001350 <MX_GPIO_Init+0x120>)
 80012e2:	f002 fbeb 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LD3_Pin;
 80012e6:	2330      	movs	r3, #48	@ 0x30
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4813      	ldr	r0, [pc, #76]	@ (800134c <MX_GPIO_Init+0x11c>)
 80012fe:	f002 fbdd 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pins : OK_BUTTON_Pin BACK_BUTTON_Pin */
  GPIO_InitStruct.Pin = OK_BUTTON_Pin|BACK_BUTTON_Pin;
 8001302:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001308:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	2301      	movs	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <MX_GPIO_Init+0x11c>)
 800131a:	f002 fbcf 	bl	8003abc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2017      	movs	r0, #23
 8001324:	f002 f8a9 	bl	800347a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001328:	2017      	movs	r0, #23
 800132a:	f002 f8c2 	bl	80034b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2028      	movs	r0, #40	@ 0x28
 8001334:	f002 f8a1 	bl	800347a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001338:	2028      	movs	r0, #40	@ 0x28
 800133a:	f002 f8ba 	bl	80034b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020800 	.word	0x40020800

08001354 <HAL_I2S_TxCpltCallback>:

}



void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef * hi2s){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

	// whenever called, 32000 samples already got played
	callback_result = FULL_COMPLETED;
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <HAL_I2S_TxCpltCallback+0x1c>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
//	played_size += WAV_READ_SAMPLE_COUNT;
	printf("FULL callback\r\n");
 8001362:	4804      	ldr	r0, [pc, #16]	@ (8001374 <HAL_I2S_TxCpltCallback+0x20>)
 8001364:	f006 fb94 	bl	8007a90 <puts>


}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000009c 	.word	0x2000009c
 8001374:	0800940c 	.word	0x0800940c

08001378 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef * hi2s){
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < WAV_WRITE_SAMPLE_COUNT/2; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e00b      	b.n	800139e <HAL_I2S_RxCpltCallback+0x26>
	    mono_sample_i2s[i] = data_i2s[2 * i];  // Keep every other (left)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_I2S_RxCpltCallback+0x40>)
 800138c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001390:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <HAL_I2S_RxCpltCallback+0x44>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < WAV_WRITE_SAMPLE_COUNT/2; i++) {
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013a4:	dbef      	blt.n	8001386 <HAL_I2S_RxCpltCallback+0xe>
	}

	full_i2s = 1;
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_I2S_RxCpltCallback+0x48>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	200000a0 	.word	0x200000a0
 80013bc:	200010a0 	.word	0x200010a0
 80013c0:	2000009d 	.word	0x2000009d

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <Error_Handler+0x8>

080013d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	2301      	movs	r3, #1
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	2178      	movs	r1, #120	@ 0x78
 80013fe:	4803      	ldr	r0, [pc, #12]	@ (800140c <ssd1306_WriteCommand+0x2c>)
 8001400:	f002 fe56 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200018a0 	.word	0x200018a0

08001410 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af04      	add	r7, sp, #16
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	f04f 32ff 	mov.w	r2, #4294967295
 8001422:	9202      	str	r2, [sp, #8]
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	2240      	movs	r2, #64	@ 0x40
 800142e:	2178      	movs	r1, #120	@ 0x78
 8001430:	4803      	ldr	r0, [pc, #12]	@ (8001440 <ssd1306_WriteData+0x30>)
 8001432:	f002 fe3d 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200018a0 	.word	0x200018a0

08001444 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001448:	f7ff ffc2 	bl	80013d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800144c:	2064      	movs	r0, #100	@ 0x64
 800144e:	f001 ff15 	bl	800327c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001452:	2000      	movs	r0, #0
 8001454:	f000 ff7a 	bl	800234c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001458:	2020      	movs	r0, #32
 800145a:	f7ff ffc1 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff ffbe 	bl	80013e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001464:	20b0      	movs	r0, #176	@ 0xb0
 8001466:	f7ff ffbb 	bl	80013e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800146a:	20c8      	movs	r0, #200	@ 0xc8
 800146c:	f7ff ffb8 	bl	80013e0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ffb5 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001476:	2010      	movs	r0, #16
 8001478:	f7ff ffb2 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800147c:	2040      	movs	r0, #64	@ 0x40
 800147e:	f7ff ffaf 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001482:	20ff      	movs	r0, #255	@ 0xff
 8001484:	f000 ff4f 	bl	8002326 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001488:	20a1      	movs	r0, #161	@ 0xa1
 800148a:	f7ff ffa9 	bl	80013e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800148e:	20a6      	movs	r0, #166	@ 0xa6
 8001490:	f7ff ffa6 	bl	80013e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001494:	20a8      	movs	r0, #168	@ 0xa8
 8001496:	f7ff ffa3 	bl	80013e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800149a:	203f      	movs	r0, #63	@ 0x3f
 800149c:	f7ff ffa0 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014a0:	20a4      	movs	r0, #164	@ 0xa4
 80014a2:	f7ff ff9d 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80014a6:	20d3      	movs	r0, #211	@ 0xd3
 80014a8:	f7ff ff9a 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff97 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80014b2:	20d5      	movs	r0, #213	@ 0xd5
 80014b4:	f7ff ff94 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80014b8:	20f0      	movs	r0, #240	@ 0xf0
 80014ba:	f7ff ff91 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80014be:	20d9      	movs	r0, #217	@ 0xd9
 80014c0:	f7ff ff8e 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80014c4:	2022      	movs	r0, #34	@ 0x22
 80014c6:	f7ff ff8b 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80014ca:	20da      	movs	r0, #218	@ 0xda
 80014cc:	f7ff ff88 	bl	80013e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80014d0:	2012      	movs	r0, #18
 80014d2:	f7ff ff85 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80014d6:	20db      	movs	r0, #219	@ 0xdb
 80014d8:	f7ff ff82 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80014dc:	2020      	movs	r0, #32
 80014de:	f7ff ff7f 	bl	80013e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80014e2:	208d      	movs	r0, #141	@ 0x8d
 80014e4:	f7ff ff7c 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80014e8:	2014      	movs	r0, #20
 80014ea:	f7ff ff79 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 ff2c 	bl	800234c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f80f 	bl	8001518 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80014fa:	f000 f825 	bl	8001548 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80014fe:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <ssd1306_Init+0xd0>)
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <ssd1306_Init+0xd0>)
 8001506:	2200      	movs	r2, #0
 8001508:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800150a:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <ssd1306_Init+0xd0>)
 800150c:	2201      	movs	r2, #1
 800150e:	711a      	strb	r2, [r3, #4]
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20001ee4 	.word	0x20001ee4

08001518 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <ssd1306_Fill+0x14>
 8001528:	2300      	movs	r3, #0
 800152a:	e000      	b.n	800152e <ssd1306_Fill+0x16>
 800152c:	23ff      	movs	r3, #255	@ 0xff
 800152e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001532:	4619      	mov	r1, r3
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <ssd1306_Fill+0x2c>)
 8001536:	f006 fbdb 	bl	8007cf0 <memset>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001ae4 	.word	0x20001ae4

08001548 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e016      	b.n	8001582 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	3b50      	subs	r3, #80	@ 0x50
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff40 	bl	80013e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ff3d 	bl	80013e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001566:	2010      	movs	r0, #16
 8001568:	f7ff ff3a 	bl	80013e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	01db      	lsls	r3, r3, #7
 8001570:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <ssd1306_UpdateScreen+0x4c>)
 8001572:	4413      	add	r3, r2
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff4a 	bl	8001410 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	3301      	adds	r3, #1
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b07      	cmp	r3, #7
 8001586:	d9e5      	bls.n	8001554 <ssd1306_UpdateScreen+0xc>
    }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20001ae4 	.word	0x20001ae4

08001598 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db3d      	blt.n	800162e <ssd1306_DrawPixel+0x96>
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80015b6:	d83a      	bhi.n	800162e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d11a      	bne.n	80015f4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	01db      	lsls	r3, r3, #7
 80015ca:	4413      	add	r3, r2
 80015cc:	4a1b      	ldr	r2, [pc, #108]	@ (800163c <ssd1306_DrawPixel+0xa4>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b259      	sxtb	r1, r3
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	4603      	mov	r3, r0
 80015e8:	01db      	lsls	r3, r3, #7
 80015ea:	4413      	add	r3, r2
 80015ec:	b2c9      	uxtb	r1, r1
 80015ee:	4a13      	ldr	r2, [pc, #76]	@ (800163c <ssd1306_DrawPixel+0xa4>)
 80015f0:	54d1      	strb	r1, [r2, r3]
 80015f2:	e01d      	b.n	8001630 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	4413      	add	r3, r2
 8001602:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <ssd1306_DrawPixel+0xa4>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	b25a      	sxtb	r2, r3
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	b25b      	sxtb	r3, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	b25b      	sxtb	r3, r3
 800161a:	4013      	ands	r3, r2
 800161c:	b259      	sxtb	r1, r3
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	4603      	mov	r3, r0
 8001622:	01db      	lsls	r3, r3, #7
 8001624:	4413      	add	r3, r2
 8001626:	b2c9      	uxtb	r1, r1
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <ssd1306_DrawPixel+0xa4>)
 800162a:	54d1      	strb	r1, [r2, r3]
 800162c:	e000      	b.n	8001630 <ssd1306_DrawPixel+0x98>
        return;
 800162e:	bf00      	nop
    }
}
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20001ae4 	.word	0x20001ae4

08001640 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	4604      	mov	r4, r0
 8001648:	4638      	mov	r0, r7
 800164a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800164e:	4623      	mov	r3, r4
 8001650:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b1f      	cmp	r3, #31
 8001656:	d902      	bls.n	800165e <ssd1306_WriteChar+0x1e>
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b7e      	cmp	r3, #126	@ 0x7e
 800165c:	d901      	bls.n	8001662 <ssd1306_WriteChar+0x22>
        return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e079      	b.n	8001756 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <ssd1306_WriteChar+0x34>
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3b20      	subs	r3, #32
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	e000      	b.n	8001676 <ssd1306_WriteChar+0x36>
 8001674:	783b      	ldrb	r3, [r7, #0]
 8001676:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001678:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <ssd1306_WriteChar+0x120>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	4413      	add	r3, r2
 8001682:	2b80      	cmp	r3, #128	@ 0x80
 8001684:	dc06      	bgt.n	8001694 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001686:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <ssd1306_WriteChar+0x120>)
 8001688:	885b      	ldrh	r3, [r3, #2]
 800168a:	461a      	mov	r2, r3
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001690:	2b40      	cmp	r3, #64	@ 0x40
 8001692:	dd01      	ble.n	8001698 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001694:	2300      	movs	r3, #0
 8001696:	e05e      	b.n	8001756 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	e04d      	b.n	800173a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	3b20      	subs	r3, #32
 80016a4:	7879      	ldrb	r1, [r7, #1]
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	440b      	add	r3, r1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e036      	b.n	800172c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d013      	beq.n	80016f6 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <ssd1306_WriteChar+0x120>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b2d8      	uxtb	r0, r3
 80016dc:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <ssd1306_WriteChar+0x120>)
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff ff52 	bl	8001598 <ssd1306_DrawPixel>
 80016f4:	e017      	b.n	8001726 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <ssd1306_WriteChar+0x120>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b2d8      	uxtb	r0, r3
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <ssd1306_WriteChar+0x120>)
 8001706:	885b      	ldrh	r3, [r3, #2]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4413      	add	r3, r2
 8001710:	b2d9      	uxtb	r1, r3
 8001712:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf0c      	ite	eq
 800171a:	2301      	moveq	r3, #1
 800171c:	2300      	movne	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	f7ff ff39 	bl	8001598 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3301      	adds	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3c4      	bcc.n	80016be <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	3301      	adds	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	787b      	ldrb	r3, [r7, #1]
 800173c:	461a      	mov	r2, r3
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4293      	cmp	r3, r2
 8001742:	d3ac      	bcc.n	800169e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <ssd1306_WriteChar+0x120>)
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <ssd1306_WriteChar+0x120>)
 8001752:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}
 800175e:	bf00      	nop
 8001760:	20001ee4 	.word	0x20001ee4

08001764 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	4638      	mov	r0, r7
 800176e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001772:	e013      	b.n	800179c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	7818      	ldrb	r0, [r3, #0]
 8001778:	7e3b      	ldrb	r3, [r7, #24]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	463b      	mov	r3, r7
 800177e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001780:	f7ff ff5e 	bl	8001640 <ssd1306_WriteChar>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d002      	beq.n	8001796 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	e008      	b.n	80017a8 <ssd1306_WriteString+0x44>
        }
        str++;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e7      	bne.n	8001774 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	781b      	ldrb	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <ssd1306_SetCursor+0x2c>)
 80017c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <ssd1306_SetCursor+0x2c>)
 80017ce:	805a      	strh	r2, [r3, #2]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20001ee4 	.word	0x20001ee4

080017e0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4604      	mov	r4, r0
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	4603      	mov	r3, r0
 80017f4:	71bb      	strb	r3, [r7, #6]
 80017f6:	460b      	mov	r3, r1
 80017f8:	717b      	strb	r3, [r7, #5]
 80017fa:	4613      	mov	r3, r2
 80017fc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80017fe:	797a      	ldrb	r2, [r7, #5]
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb8      	it	lt
 8001808:	425b      	neglt	r3, r3
 800180a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800180c:	793a      	ldrb	r2, [r7, #4]
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	bfb8      	it	lt
 8001816:	425b      	neglt	r3, r3
 8001818:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	797b      	ldrb	r3, [r7, #5]
 800181e:	429a      	cmp	r2, r3
 8001820:	d201      	bcs.n	8001826 <ssd1306_Line+0x46>
 8001822:	2301      	movs	r3, #1
 8001824:	e001      	b.n	800182a <ssd1306_Line+0x4a>
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800182c:	79ba      	ldrb	r2, [r7, #6]
 800182e:	793b      	ldrb	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	d201      	bcs.n	8001838 <ssd1306_Line+0x58>
 8001834:	2301      	movs	r3, #1
 8001836:	e001      	b.n	800183c <ssd1306_Line+0x5c>
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001846:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800184a:	7939      	ldrb	r1, [r7, #4]
 800184c:	797b      	ldrb	r3, [r7, #5]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fea2 	bl	8001598 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001854:	e024      	b.n	80018a0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001856:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800185a:	79b9      	ldrb	r1, [r7, #6]
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fe9a 	bl	8001598 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	425b      	negs	r3, r3
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	429a      	cmp	r2, r3
 8001872:	dd08      	ble.n	8001886 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4413      	add	r3, r2
 8001884:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	429a      	cmp	r2, r3
 800188c:	da08      	bge.n	80018a0 <ssd1306_Line+0xc0>
            error += deltaX;
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4413      	add	r3, r2
 8001894:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	4413      	add	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	797b      	ldrb	r3, [r7, #5]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1d6      	bne.n	8001856 <ssd1306_Line+0x76>
 80018a8:	79ba      	ldrb	r2, [r7, #6]
 80018aa:	793b      	ldrb	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1d2      	bne.n	8001856 <ssd1306_Line+0x76>
        }
    }
    return;
 80018b0:	bf00      	nop
}
 80018b2:	3724      	adds	r7, #36	@ 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}

080018b8 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af02      	add	r7, sp, #8
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d02a      	beq.n	8001924 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 80018ce:	2301      	movs	r3, #1
 80018d0:	81fb      	strh	r3, [r7, #14]
 80018d2:	e022      	b.n	800191a <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80018da:	3b01      	subs	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	7818      	ldrb	r0, [r3, #0]
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80018ea:	3b01      	subs	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	7859      	ldrb	r1, [r3, #1]
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	781c      	ldrb	r4, [r3, #0]
 80018fe:	89fb      	ldrh	r3, [r7, #14]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	785a      	ldrb	r2, [r3, #1]
 8001908:	787b      	ldrb	r3, [r7, #1]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	4622      	mov	r2, r4
 8001910:	f7ff ff66 	bl	80017e0 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	3301      	adds	r3, #1
 8001918:	81fb      	strh	r3, [r7, #14]
 800191a:	89fa      	ldrh	r2, [r7, #14]
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3d8      	bcc.n	80018d4 <ssd1306_Polyline+0x1c>
    }

    return;
 8001922:	e000      	b.n	8001926 <ssd1306_Polyline+0x6e>
        return;
 8001924:	bf00      	nop
}
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8001936:	edd7 7a01 	vldr	s15, [r7, #4]
 800193a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001950 <ssd1306_DegToRad+0x24>
 800193e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001942:	eeb0 0a67 	vmov.f32	s0, s15
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	3c8ee7a7 	.word	0x3c8ee7a7

08001954 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001964:	d802      	bhi.n	800196c <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	81fb      	strh	r3, [r7, #14]
 800196a:	e013      	b.n	8001994 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <ssd1306_NormalizeTo0_360+0x50>)
 8001972:	fba1 1202 	umull	r1, r2, r1, r2
 8001976:	0892      	lsrs	r2, r2, #2
 8001978:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800197c:	fb01 f202 	mul.w	r2, r1, r2
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <ssd1306_NormalizeTo0_360+0x3a>
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	e001      	b.n	8001992 <ssd1306_NormalizeTo0_360+0x3e>
 800198e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001992:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8001994:	89fb      	ldrh	r3, [r7, #14]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	16c16c17 	.word	0x16c16c17

080019a8 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b08d      	sub	sp, #52	@ 0x34
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	4603      	mov	r3, r0
 80019bc:	73bb      	strb	r3, [r7, #14]
 80019be:	460b      	mov	r3, r1
 80019c0:	737b      	strb	r3, [r7, #13]
 80019c2:	4613      	mov	r3, r2
 80019c4:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80019c6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ffc3 	bl	8001954 <ssd1306_NormalizeTo0_360>
 80019ce:	4603      	mov	r3, r0
 80019d0:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80019d2:	897b      	ldrh	r3, [r7, #10]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ffbd 	bl	8001954 <ssd1306_NormalizeTo0_360>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	4b63      	ldr	r3, [pc, #396]	@ (8001b6c <ssd1306_DrawArc+0x1c4>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	4a62      	ldr	r2, [pc, #392]	@ (8001b70 <ssd1306_DrawArc+0x1c8>)
 80019e8:	fb82 1203 	smull	r1, r2, r2, r3
 80019ec:	441a      	add	r2, r3
 80019ee:	1212      	asrs	r2, r2, #8
 80019f0:	17db      	asrs	r3, r3, #31
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80019f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <ssd1306_DrawArc+0x1c4>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	4a5b      	ldr	r2, [pc, #364]	@ (8001b74 <ssd1306_DrawArc+0x1cc>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a26:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 8001a2a:	e096      	b.n	8001b5a <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	f7ff ff73 	bl	800192c <ssd1306_DegToRad>
 8001a46:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001a4a:	ed97 0a08 	vldr	s0, [r7, #32]
 8001a4e:	f006 ff6f 	bl	8008930 <sinf>
 8001a52:	eeb0 7a40 	vmov.f32	s14, s0
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a68:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a6c:	793b      	ldrb	r3, [r7, #4]
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4413      	add	r3, r2
 8001a76:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8001a78:	ed97 0a08 	vldr	s0, [r7, #32]
 8001a7c:	f006 ff14 	bl	80088a8 <cosf>
 8001a80:	eeb0 7a40 	vmov.f32	s14, s0
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a96:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a9a:	793b      	ldrb	r3, [r7, #4]
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	74bb      	strb	r3, [r7, #18]
        count++;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        if(count != approx_segments) {
 8001aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d00f      	beq.n	8001ad4 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001abe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	f7ff ff2f 	bl	800192c <ssd1306_DegToRad>
 8001ace:	ed87 0a08 	vstr	s0, [r7, #32]
 8001ad2:	e00a      	b.n	8001aea <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	f7ff ff23 	bl	800192c <ssd1306_DegToRad>
 8001ae6:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001aea:	ed97 0a08 	vldr	s0, [r7, #32]
 8001aee:	f006 ff1f 	bl	8008930 <sinf>
 8001af2:	eeb0 7a40 	vmov.f32	s14, s0
 8001af6:	7b7b      	ldrb	r3, [r7, #13]
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b08:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b0c:	793b      	ldrb	r3, [r7, #4]
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	4413      	add	r3, r2
 8001b16:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001b18:	ed97 0a08 	vldr	s0, [r7, #32]
 8001b1c:	f006 fec4 	bl	80088a8 <cosf>
 8001b20:	eeb0 7a40 	vmov.f32	s14, s0
 8001b24:	7b7b      	ldrb	r3, [r7, #13]
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b36:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b3a:	793b      	ldrb	r3, [r7, #4]
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	4413      	add	r3, r2
 8001b44:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001b46:	7c3c      	ldrb	r4, [r7, #16]
 8001b48:	7c7a      	ldrb	r2, [r7, #17]
 8001b4a:	7cb9      	ldrb	r1, [r7, #18]
 8001b4c:	7cf8      	ldrb	r0, [r7, #19]
 8001b4e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4623      	mov	r3, r4
 8001b56:	f7ff fe43 	bl	80017e0 <ssd1306_Line>
    while(count < approx_segments)
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	f4ff af64 	bcc.w	8001a2c <ssd1306_DrawArc+0x84>
    }
    
    return;
 8001b64:	bf00      	nop
}
 8001b66:	372c      	adds	r7, #44	@ 0x2c
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	080094e2 	.word	0x080094e2
 8001b70:	b60b60b7 	.word	0xb60b60b7
 8001b74:	16c16c17 	.word	0x16c16c17

08001b78 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b08f      	sub	sp, #60	@ 0x3c
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	73bb      	strb	r3, [r7, #14]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	737b      	strb	r3, [r7, #13]
 8001b92:	4613      	mov	r3, r2
 8001b94:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 8001b96:	2324      	movs	r3, #36	@ 0x24
 8001b98:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fed2 	bl	8001954 <ssd1306_NormalizeTo0_360>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fecc 	bl	8001954 <ssd1306_NormalizeTo0_360>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	08db      	lsrs	r3, r3, #3
 8001bc8:	4a8a      	ldr	r2, [pc, #552]	@ (8001df4 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	08db      	lsrs	r3, r3, #3
 8001bdc:	4a85      	ldr	r2, [pc, #532]	@ (8001df4 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfe:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 8001c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	eeb0 0a67 	vmov.f32	s0, s15
 8001c18:	f7ff fe88 	bl	800192c <ssd1306_DegToRad>
 8001c1c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8001c20:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001c24:	f006 fe84 	bl	8008930 <sinf>
 8001c28:	eeb0 7a40 	vmov.f32	s14, s0
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c42:	793b      	ldrb	r3, [r7, #4]
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 8001c4e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001c52:	f006 fe29 	bl	80088a8 <cosf>
 8001c56:	eeb0 7a40 	vmov.f32	s14, s0
 8001c5a:	7b7b      	ldrb	r3, [r7, #13]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c70:	793b      	ldrb	r3, [r7, #4]
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	7bbb      	ldrb	r3, [r7, #14]
 8001c78:	4413      	add	r3, r2
 8001c7a:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 8001c7c:	e09a      	b.n	8001db4 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 8001c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	f7ff fe4a 	bl	800192c <ssd1306_DegToRad>
 8001c98:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001c9c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001ca0:	f006 fe46 	bl	8008930 <sinf>
 8001ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cba:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cbe:	793b      	ldrb	r3, [r7, #4]
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8001cca:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001cce:	f006 fdeb 	bl	80088a8 <cosf>
 8001cd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd6:	7b7b      	ldrb	r3, [r7, #13]
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cec:	793b      	ldrb	r3, [r7, #4]
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	7bbb      	ldrb	r3, [r7, #14]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	743b      	strb	r3, [r7, #16]
        count++;
 8001cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (count != approx_segments) {
 8001cfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d00f      	beq.n	8001d26 <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d18:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1c:	f7ff fe06 	bl	800192c <ssd1306_DegToRad>
 8001d20:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001d24:	e00a      	b.n	8001d3c <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d30:	eeb0 0a67 	vmov.f32	s0, s15
 8001d34:	f7ff fdfa 	bl	800192c <ssd1306_DegToRad>
 8001d38:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001d3c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001d40:	f006 fdf6 	bl	8008930 <sinf>
 8001d44:	eeb0 7a40 	vmov.f32	s14, s0
 8001d48:	7b7b      	ldrb	r3, [r7, #13]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d5e:	793b      	ldrb	r3, [r7, #4]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	4413      	add	r3, r2
 8001d68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001d6c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001d70:	f006 fd9a 	bl	80088a8 <cosf>
 8001d74:	eeb0 7a40 	vmov.f32	s14, s0
 8001d78:	7b7b      	ldrb	r3, [r7, #13]
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d8e:	793b      	ldrb	r3, [r7, #4]
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	4413      	add	r3, r2
 8001d98:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001d9c:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001da0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001da4:	7c39      	ldrb	r1, [r7, #16]
 8001da6:	7c78      	ldrb	r0, [r7, #17]
 8001da8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4623      	mov	r3, r4
 8001db0:	f7ff fd16 	bl	80017e0 <ssd1306_Line>
    while (count < approx_segments) {
 8001db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f4ff af60 	bcc.w	8001c7e <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8001dbe:	7cbc      	ldrb	r4, [r7, #18]
 8001dc0:	7cfa      	ldrb	r2, [r7, #19]
 8001dc2:	7bb9      	ldrb	r1, [r7, #14]
 8001dc4:	7bf8      	ldrb	r0, [r7, #15]
 8001dc6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4623      	mov	r3, r4
 8001dce:	f7ff fd07 	bl	80017e0 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001dd2:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001dd6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001dda:	7bb9      	ldrb	r1, [r7, #14]
 8001ddc:	7bf8      	ldrb	r0, [r7, #15]
 8001dde:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4623      	mov	r3, r4
 8001de6:	f7ff fcfb 	bl	80017e0 <ssd1306_Line>
    return;
 8001dea:	bf00      	nop
}
 8001dec:	3734      	adds	r7, #52	@ 0x34
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	bf00      	nop
 8001df4:	16c16c17 	.word	0x16c16c17

08001df8 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4604      	mov	r4, r0
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4623      	mov	r3, r4
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71bb      	strb	r3, [r7, #6]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	717b      	strb	r3, [r7, #5]
 8001e12:	4613      	mov	r3, r2
 8001e14:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001e16:	797b      	ldrb	r3, [r7, #5]
 8001e18:	425b      	negs	r3, r3
 8001e1a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001e20:	797b      	ldrb	r3, [r7, #5]
 8001e22:	f1c3 0301 	rsb	r3, r3, #1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db65      	blt.n	8001efe <ssd1306_DrawCircle+0x106>
 8001e32:	79bb      	ldrb	r3, [r7, #6]
 8001e34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e36:	d862      	bhi.n	8001efe <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b2d8      	uxtb	r0, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	793a      	ldrb	r2, [r7, #4]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7ff fba2 	bl	8001598 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b2d8      	uxtb	r0, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	4413      	add	r3, r2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	793a      	ldrb	r2, [r7, #4]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7ff fb94 	bl	8001598 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4413      	add	r3, r2
 8001e78:	b2d8      	uxtb	r0, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	79ba      	ldrb	r2, [r7, #6]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	793a      	ldrb	r2, [r7, #4]
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7ff fb86 	bl	8001598 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	b2d8      	uxtb	r0, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	79ba      	ldrb	r2, [r7, #6]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	793a      	ldrb	r2, [r7, #4]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7ff fb78 	bl	8001598 <ssd1306_DrawPixel>
        e2 = err;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dc13      	bgt.n	8001edc <ssd1306_DrawCircle+0xe4>
            y++;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	425b      	negs	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d105      	bne.n	8001edc <ssd1306_DrawCircle+0xe4>
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dc01      	bgt.n	8001edc <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dd08      	ble.n	8001ef6 <ssd1306_DrawCircle+0xfe>
            x++;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	3301      	adds	r3, #1
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	dd9d      	ble.n	8001e38 <ssd1306_DrawCircle+0x40>

    return;
 8001efc:	e000      	b.n	8001f00 <ssd1306_DrawCircle+0x108>
        return;
 8001efe:	bf00      	nop
}
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}

08001f06 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001f06:	b590      	push	{r4, r7, lr}
 8001f08:	b089      	sub	sp, #36	@ 0x24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	4608      	mov	r0, r1
 8001f10:	4611      	mov	r1, r2
 8001f12:	461a      	mov	r2, r3
 8001f14:	4623      	mov	r3, r4
 8001f16:	71fb      	strb	r3, [r7, #7]
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71bb      	strb	r3, [r7, #6]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	717b      	strb	r3, [r7, #5]
 8001f20:	4613      	mov	r3, r2
 8001f22:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001f24:	797b      	ldrb	r3, [r7, #5]
 8001f26:	425b      	negs	r3, r3
 8001f28:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8001f2e:	797b      	ldrb	r3, [r7, #5]
 8001f30:	f1c3 0301 	rsb	r3, r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db51      	blt.n	8001fe4 <ssd1306_FillCircle+0xde>
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f44:	d84e      	bhi.n	8001fe4 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e017      	b.n	8001f82 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	73bb      	strb	r3, [r7, #14]
 8001f5c:	e008      	b.n	8001f70 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8001f5e:	793a      	ldrb	r2, [r7, #4]
 8001f60:	7bf9      	ldrb	r1, [r7, #15]
 8001f62:	7bbb      	ldrb	r3, [r7, #14]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fb17 	bl	8001598 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001f6a:	7bbb      	ldrb	r3, [r7, #14]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	73bb      	strb	r3, [r7, #14]
 8001f70:	7bba      	ldrb	r2, [r7, #14]
 8001f72:	79f9      	ldrb	r1, [r7, #7]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	440b      	add	r3, r1
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	daf0      	bge.n	8001f5e <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	79b9      	ldrb	r1, [r7, #6]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1acb      	subs	r3, r1, r3
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dae1      	bge.n	8001f52 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	dc13      	bgt.n	8001fc2 <ssd1306_FillCircle+0xbc>
            y++;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4413      	add	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	425b      	negs	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d105      	bne.n	8001fc2 <ssd1306_FillCircle+0xbc>
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dc01      	bgt.n	8001fc2 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dd08      	ble.n	8001fdc <ssd1306_FillCircle+0xd6>
            x++;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	ddb1      	ble.n	8001f46 <ssd1306_FillCircle+0x40>

    return;
 8001fe2:	e000      	b.n	8001fe6 <ssd1306_FillCircle+0xe0>
        return;
 8001fe4:	bf00      	nop
}
 8001fe6:	3724      	adds	r7, #36	@ 0x24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	71fb      	strb	r3, [r7, #7]
 8001ffe:	4603      	mov	r3, r0
 8002000:	71bb      	strb	r3, [r7, #6]
 8002002:	460b      	mov	r3, r1
 8002004:	717b      	strb	r3, [r7, #5]
 8002006:	4613      	mov	r3, r2
 8002008:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800200a:	79bc      	ldrb	r4, [r7, #6]
 800200c:	797a      	ldrb	r2, [r7, #5]
 800200e:	79b9      	ldrb	r1, [r7, #6]
 8002010:	79f8      	ldrb	r0, [r7, #7]
 8002012:	7e3b      	ldrb	r3, [r7, #24]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4623      	mov	r3, r4
 8002018:	f7ff fbe2 	bl	80017e0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800201c:	793c      	ldrb	r4, [r7, #4]
 800201e:	797a      	ldrb	r2, [r7, #5]
 8002020:	79b9      	ldrb	r1, [r7, #6]
 8002022:	7978      	ldrb	r0, [r7, #5]
 8002024:	7e3b      	ldrb	r3, [r7, #24]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4623      	mov	r3, r4
 800202a:	f7ff fbd9 	bl	80017e0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800202e:	793c      	ldrb	r4, [r7, #4]
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	7939      	ldrb	r1, [r7, #4]
 8002034:	7978      	ldrb	r0, [r7, #5]
 8002036:	7e3b      	ldrb	r3, [r7, #24]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4623      	mov	r3, r4
 800203c:	f7ff fbd0 	bl	80017e0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002040:	79bc      	ldrb	r4, [r7, #6]
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	7939      	ldrb	r1, [r7, #4]
 8002046:	79f8      	ldrb	r0, [r7, #7]
 8002048:	7e3b      	ldrb	r3, [r7, #24]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4623      	mov	r3, r4
 800204e:	f7ff fbc7 	bl	80017e0 <ssd1306_Line>

    return;
 8002052:	bf00      	nop
}
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bd90      	pop	{r4, r7, pc}

0800205a <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800205a:	b590      	push	{r4, r7, lr}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	4604      	mov	r4, r0
 8002062:	4608      	mov	r0, r1
 8002064:	4611      	mov	r1, r2
 8002066:	461a      	mov	r2, r3
 8002068:	4623      	mov	r3, r4
 800206a:	71fb      	strb	r3, [r7, #7]
 800206c:	4603      	mov	r3, r0
 800206e:	71bb      	strb	r3, [r7, #6]
 8002070:	460b      	mov	r3, r1
 8002072:	717b      	strb	r3, [r7, #5]
 8002074:	4613      	mov	r3, r2
 8002076:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	797b      	ldrb	r3, [r7, #5]
 800207c:	4293      	cmp	r3, r2
 800207e:	bf28      	it	cs
 8002080:	4613      	movcs	r3, r2
 8002082:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002084:	797a      	ldrb	r2, [r7, #5]
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4293      	cmp	r3, r2
 800208a:	bf38      	it	cc
 800208c:	4613      	movcc	r3, r2
 800208e:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002090:	79ba      	ldrb	r2, [r7, #6]
 8002092:	793b      	ldrb	r3, [r7, #4]
 8002094:	4293      	cmp	r3, r2
 8002096:	bf28      	it	cs
 8002098:	4613      	movcs	r3, r2
 800209a:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800209c:	793a      	ldrb	r2, [r7, #4]
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf38      	it	cc
 80020a4:	4613      	movcc	r3, r2
 80020a6:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e017      	b.n	80020de <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80020ae:	7b7b      	ldrb	r3, [r7, #13]
 80020b0:	73bb      	strb	r3, [r7, #14]
 80020b2:	e009      	b.n	80020c8 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80020b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020b8:	7bf9      	ldrb	r1, [r7, #15]
 80020ba:	7bbb      	ldrb	r3, [r7, #14]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fa6b 	bl	8001598 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	3301      	adds	r3, #1
 80020c6:	73bb      	strb	r3, [r7, #14]
 80020c8:	7bba      	ldrb	r2, [r7, #14]
 80020ca:	7b3b      	ldrb	r3, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d803      	bhi.n	80020d8 <ssd1306_FillRectangle+0x7e>
 80020d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	daed      	bge.n	80020b4 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	3301      	adds	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d803      	bhi.n	80020ee <ssd1306_FillRectangle+0x94>
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80020ea:	d9e0      	bls.n	80020ae <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
}
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
	...

080020f8 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80020f8:	b490      	push	{r4, r7}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4604      	mov	r4, r0
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4623      	mov	r3, r4
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	4603      	mov	r3, r0
 800210c:	71bb      	strb	r3, [r7, #6]
 800210e:	460b      	mov	r3, r1
 8002110:	717b      	strb	r3, [r7, #5]
 8002112:	4613      	mov	r3, r2
 8002114:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8002116:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db02      	blt.n	8002124 <ssd1306_InvertRectangle+0x2c>
 800211e:	793b      	ldrb	r3, [r7, #4]
 8002120:	2b3f      	cmp	r3, #63	@ 0x3f
 8002122:	d901      	bls.n	8002128 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8002124:	2301      	movs	r3, #1
 8002126:	e09c      	b.n	8002262 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8002128:	79fa      	ldrb	r2, [r7, #7]
 800212a:	797b      	ldrb	r3, [r7, #5]
 800212c:	429a      	cmp	r2, r3
 800212e:	d803      	bhi.n	8002138 <ssd1306_InvertRectangle+0x40>
 8002130:	79ba      	ldrb	r2, [r7, #6]
 8002132:	793b      	ldrb	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d901      	bls.n	800213c <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8002138:	2301      	movs	r3, #1
 800213a:	e092      	b.n	8002262 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 800213c:	79bb      	ldrb	r3, [r7, #6]
 800213e:	08db      	lsrs	r3, r3, #3
 8002140:	b2da      	uxtb	r2, r3
 8002142:	793b      	ldrb	r3, [r7, #4]
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	429a      	cmp	r2, r3
 800214a:	d057      	beq.n	80021fc <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e04f      	b.n	80021f2 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	01db      	lsls	r3, r3, #7
 800215a:	461a      	mov	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8002162:	4a42      	ldr	r2, [pc, #264]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b25a      	sxtb	r2, r3
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	21ff      	movs	r1, #255	@ 0xff
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	b25b      	sxtb	r3, r3
 800217a:	4053      	eors	r3, r2
 800217c:	b25b      	sxtb	r3, r3
 800217e:	b2d9      	uxtb	r1, r3
 8002180:	4a3a      	ldr	r2, [pc, #232]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4413      	add	r3, r2
 8002186:	460a      	mov	r2, r1
 8002188:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3380      	adds	r3, #128	@ 0x80
 800218e:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8002190:	e00d      	b.n	80021ae <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8002192:	4a36      	ldr	r2, [pc, #216]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	43db      	mvns	r3, r3
 800219c:	b2d9      	uxtb	r1, r3
 800219e:	4a33      	ldr	r2, [pc, #204]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4413      	add	r3, r2
 80021a4:	460a      	mov	r2, r1
 80021a6:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3380      	adds	r3, #128	@ 0x80
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	793b      	ldrb	r3, [r7, #4]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	01db      	lsls	r3, r3, #7
 80021b6:	461a      	mov	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3e7      	bcc.n	8002192 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 80021c2:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b25a      	sxtb	r2, r3
 80021cc:	793b      	ldrb	r3, [r7, #4]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	21ff      	movs	r1, #255	@ 0xff
 80021d6:	fa41 f303 	asr.w	r3, r1, r3
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	4053      	eors	r3, r2
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	b2d9      	uxtb	r1, r3
 80021e2:	4a22      	ldr	r2, [pc, #136]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4413      	add	r3, r2
 80021e8:	460a      	mov	r2, r1
 80021ea:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	3301      	adds	r3, #1
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	797b      	ldrb	r3, [r7, #5]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d9ab      	bls.n	8002152 <ssd1306_InvertRectangle+0x5a>
 80021fa:	e031      	b.n	8002260 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	22ff      	movs	r2, #255	@ 0xff
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	b25a      	sxtb	r2, r3
 800220a:	793b      	ldrb	r3, [r7, #4]
 800220c:	43db      	mvns	r3, r3
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	21ff      	movs	r1, #255	@ 0xff
 8002214:	fa41 f303 	asr.w	r3, r1, r3
 8002218:	b25b      	sxtb	r3, r3
 800221a:	4013      	ands	r3, r2
 800221c:	b25b      	sxtb	r3, r3
 800221e:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8002220:	79fa      	ldrb	r2, [r7, #7]
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	01db      	lsls	r3, r3, #7
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e00e      	b.n	800224e <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8002230:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4053      	eors	r3, r2
 800223c:	b2d9      	uxtb	r1, r3
 800223e:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <ssd1306_InvertRectangle+0x174>)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4413      	add	r3, r2
 8002244:	460a      	mov	r2, r1
 8002246:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	797b      	ldrb	r3, [r7, #5]
 8002250:	793a      	ldrb	r2, [r7, #4]
 8002252:	08d2      	lsrs	r2, r2, #3
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	01d2      	lsls	r2, r2, #7
 8002258:	4413      	add	r3, r2
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	d9e7      	bls.n	8002230 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bc90      	pop	{r4, r7}
 800226a:	4770      	bx	lr
 800226c:	20001ae4 	.word	0x20001ae4

08002270 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	603a      	str	r2, [r7, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	460b      	mov	r3, r1
 8002280:	71bb      	strb	r3, [r7, #6]
 8002282:	4613      	mov	r3, r2
 8002284:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002286:	797b      	ldrb	r3, [r7, #5]
 8002288:	3307      	adds	r3, #7
 800228a:	2b00      	cmp	r3, #0
 800228c:	da00      	bge.n	8002290 <ssd1306_DrawBitmap+0x20>
 800228e:	3307      	adds	r3, #7
 8002290:	10db      	asrs	r3, r3, #3
 8002292:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db3e      	blt.n	800231e <ssd1306_DrawBitmap+0xae>
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80022a4:	d83b      	bhi.n	800231e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	73bb      	strb	r3, [r7, #14]
 80022aa:	e033      	b.n	8002314 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	737b      	strb	r3, [r7, #13]
 80022b0:	e026      	b.n	8002300 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80022b2:	7b7b      	ldrb	r3, [r7, #13]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e00d      	b.n	80022e0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80022c4:	7bbb      	ldrb	r3, [r7, #14]
 80022c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	7b7a      	ldrb	r2, [r7, #13]
 80022d0:	08d2      	lsrs	r2, r2, #3
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	4413      	add	r3, r2
 80022d6:	461a      	mov	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da08      	bge.n	80022fa <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	7b7b      	ldrb	r3, [r7, #13]
 80022ec:	4413      	add	r3, r2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	7f3a      	ldrb	r2, [r7, #28]
 80022f2:	79b9      	ldrb	r1, [r7, #6]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff f94f 	bl	8001598 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	3301      	adds	r3, #1
 80022fe:	737b      	strb	r3, [r7, #13]
 8002300:	7b7a      	ldrb	r2, [r7, #13]
 8002302:	797b      	ldrb	r3, [r7, #5]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3d4      	bcc.n	80022b2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	3301      	adds	r3, #1
 800230c:	73bb      	strb	r3, [r7, #14]
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	3301      	adds	r3, #1
 8002312:	71bb      	strb	r3, [r7, #6]
 8002314:	7bba      	ldrb	r2, [r7, #14]
 8002316:	7e3b      	ldrb	r3, [r7, #24]
 8002318:	429a      	cmp	r2, r3
 800231a:	d3c7      	bcc.n	80022ac <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800231c:	e000      	b.n	8002320 <ssd1306_DrawBitmap+0xb0>
        return;
 800231e:	bf00      	nop
}
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002330:	2381      	movs	r3, #129	@ 0x81
 8002332:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f852 	bl	80013e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f84e 	bl	80013e0 <ssd1306_WriteCommand>
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800235c:	23af      	movs	r3, #175	@ 0xaf
 800235e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <ssd1306_SetDisplayOn+0x38>)
 8002362:	2201      	movs	r2, #1
 8002364:	715a      	strb	r2, [r3, #5]
 8002366:	e004      	b.n	8002372 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002368:	23ae      	movs	r3, #174	@ 0xae
 800236a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <ssd1306_SetDisplayOn+0x38>)
 800236e:	2200      	movs	r2, #0
 8002370:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f833 	bl	80013e0 <ssd1306_WriteCommand>
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20001ee4 	.word	0x20001ee4

08002388 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff f8c2 	bl	8001518 <ssd1306_Fill>
   
    uint8_t x = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 800239c:	79b9      	ldrb	r1, [r7, #6]
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2200      	movs	r2, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f8f8 	bl	8001598 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <ssd1306_TestBorder+0x34>
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b7e      	cmp	r3, #126	@ 0x7e
 80023b2:	d803      	bhi.n	80023bc <ssd1306_TestBorder+0x34>
            x++;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	3301      	adds	r3, #1
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	e016      	b.n	80023ea <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	2b7f      	cmp	r3, #127	@ 0x7f
 80023c0:	d106      	bne.n	80023d0 <ssd1306_TestBorder+0x48>
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80023c6:	d803      	bhi.n	80023d0 <ssd1306_TestBorder+0x48>
            y++;
 80023c8:	79bb      	ldrb	r3, [r7, #6]
 80023ca:	3301      	adds	r3, #1
 80023cc:	71bb      	strb	r3, [r7, #6]
 80023ce:	e00c      	b.n	80023ea <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 80023d0:	79bb      	ldrb	r3, [r7, #6]
 80023d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80023d4:	d106      	bne.n	80023e4 <ssd1306_TestBorder+0x5c>
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <ssd1306_TestBorder+0x5c>
            x--;
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	3b01      	subs	r3, #1
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	e002      	b.n	80023ea <ssd1306_TestBorder+0x62>
        else
            y--;
 80023e4:	79bb      	ldrb	r3, [r7, #6]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 80023ea:	79b9      	ldrb	r1, [r7, #6]
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f8d1 	bl	8001598 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 80023f6:	f7ff f8a7 	bl	8001548 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 80023fa:	2005      	movs	r0, #5
 80023fc:	f000 ff3e 	bl	800327c <HAL_Delay>
    } while(x > 0 || y > 0);
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ca      	bne.n	800239c <ssd1306_TestBorder+0x14>
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1c7      	bne.n	800239c <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 800240c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002410:	f000 ff34 	bl	800327c <HAL_Delay>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8002426:	2000      	movs	r0, #0
 8002428:	f7ff f876 	bl	8001518 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4619      	mov	r1, r3
 8002430:	2002      	movs	r0, #2
 8002432:	f7ff f9bd 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <ssd1306_TestFonts1+0x90>)
 8002438:	2201      	movs	r2, #1
 800243a:	9200      	str	r2, [sp, #0]
 800243c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243e:	481c      	ldr	r0, [pc, #112]	@ (80024b0 <ssd1306_TestFonts1+0x94>)
 8002440:	f7ff f990 	bl	8001764 <ssd1306_WriteString>
    y += 26;
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	331a      	adds	r3, #26
 8002448:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	4619      	mov	r1, r3
 800244e:	2002      	movs	r0, #2
 8002450:	f7ff f9ae 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <ssd1306_TestFonts1+0x98>)
 8002456:	2201      	movs	r2, #1
 8002458:	9200      	str	r2, [sp, #0]
 800245a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245c:	4816      	ldr	r0, [pc, #88]	@ (80024b8 <ssd1306_TestFonts1+0x9c>)
 800245e:	f7ff f981 	bl	8001764 <ssd1306_WriteString>
    y += 18;
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	3312      	adds	r3, #18
 8002466:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4619      	mov	r1, r3
 800246c:	2002      	movs	r0, #2
 800246e:	f7ff f99f 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <ssd1306_TestFonts1+0xa0>)
 8002474:	2201      	movs	r2, #1
 8002476:	9200      	str	r2, [sp, #0]
 8002478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247a:	4811      	ldr	r0, [pc, #68]	@ (80024c0 <ssd1306_TestFonts1+0xa4>)
 800247c:	f7ff f972 	bl	8001764 <ssd1306_WriteString>
    y += 10;
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	330a      	adds	r3, #10
 8002484:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	4619      	mov	r1, r3
 800248a:	2002      	movs	r0, #2
 800248c:	f7ff f990 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <ssd1306_TestFonts1+0xa8>)
 8002492:	2201      	movs	r2, #1
 8002494:	9200      	str	r2, [sp, #0]
 8002496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002498:	480b      	ldr	r0, [pc, #44]	@ (80024c8 <ssd1306_TestFonts1+0xac>)
 800249a:	f7ff f963 	bl	8001764 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 800249e:	f7ff f853 	bl	8001548 <ssd1306_UpdateScreen>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0800e060 	.word	0x0800e060
 80024b0:	0800941c 	.word	0x0800941c
 80024b4:	0800e054 	.word	0x0800e054
 80024b8:	08009428 	.word	0x08009428
 80024bc:	0800e048 	.word	0x0800e048
 80024c0:	08009434 	.word	0x08009434
 80024c4:	0800e03c 	.word	0x0800e03c
 80024c8:	08009440 	.word	0x08009440

080024cc <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff f820 	bl	8001518 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 80024d8:	2104      	movs	r1, #4
 80024da:	2000      	movs	r0, #0
 80024dc:	f7ff f968 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <ssd1306_TestFonts2+0x68>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	9200      	str	r2, [sp, #0]
 80024e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e8:	4813      	ldr	r0, [pc, #76]	@ (8002538 <ssd1306_TestFonts2+0x6c>)
 80024ea:	f7ff f93b 	bl	8001764 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 80024ee:	2124      	movs	r1, #36	@ 0x24
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff f95d 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <ssd1306_TestFonts2+0x68>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	9200      	str	r2, [sp, #0]
 80024fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fe:	480f      	ldr	r0, [pc, #60]	@ (800253c <ssd1306_TestFonts2+0x70>)
 8002500:	f7ff f930 	bl	8001764 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002504:	2360      	movs	r3, #96	@ 0x60
 8002506:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002508:	233c      	movs	r3, #60	@ 0x3c
 800250a:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	3310      	adds	r3, #16
 8002510:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8002512:	79bb      	ldrb	r3, [r7, #6]
 8002514:	3302      	adds	r3, #2
 8002516:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002518:	793b      	ldrb	r3, [r7, #4]
 800251a:	797a      	ldrb	r2, [r7, #5]
 800251c:	79b9      	ldrb	r1, [r7, #6]
 800251e:	79f8      	ldrb	r0, [r7, #7]
 8002520:	2401      	movs	r4, #1
 8002522:	9400      	str	r4, [sp, #0]
 8002524:	f7ff fd99 	bl	800205a <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002528:	f7ff f80e 	bl	8001548 <ssd1306_UpdateScreen>
#endif
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	0800e06c 	.word	0x0800e06c
 8002538:	0800944c 	.word	0x0800944c
 800253c:	08009458 	.word	0x08009458

08002540 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe ffe6 	bl	8001518 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 800254c:	2104      	movs	r1, #4
 800254e:	2004      	movs	r0, #4
 8002550:	f7ff f92e 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 8002554:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <ssd1306_TestFonts3+0x58>)
 8002556:	2201      	movs	r2, #1
 8002558:	9200      	str	r2, [sp, #0]
 800255a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255c:	480f      	ldr	r0, [pc, #60]	@ (800259c <ssd1306_TestFonts3+0x5c>)
 800255e:	f7ff f901 	bl	8001764 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 8002562:	2118      	movs	r1, #24
 8002564:	2004      	movs	r0, #4
 8002566:	f7ff f923 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <ssd1306_TestFonts3+0x58>)
 800256c:	2201      	movs	r2, #1
 800256e:	9200      	str	r2, [sp, #0]
 8002570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002572:	480b      	ldr	r0, [pc, #44]	@ (80025a0 <ssd1306_TestFonts3+0x60>)
 8002574:	f7ff f8f6 	bl	8001764 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 8002578:	212c      	movs	r1, #44	@ 0x2c
 800257a:	2004      	movs	r0, #4
 800257c:	f7ff f918 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <ssd1306_TestFonts3+0x58>)
 8002582:	2201      	movs	r2, #1
 8002584:	9200      	str	r2, [sp, #0]
 8002586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002588:	4806      	ldr	r0, [pc, #24]	@ (80025a4 <ssd1306_TestFonts3+0x64>)
 800258a:	f7ff f8eb 	bl	8001764 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 800258e:	f7fe ffdb 	bl	8001548 <ssd1306_UpdateScreen>
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	0800e078 	.word	0x0800e078
 800259c:	08009464 	.word	0x08009464
 80025a0:	08009474 	.word	0x08009474
 80025a4:	08009484 	.word	0x08009484

080025a8 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b09a      	sub	sp, #104	@ 0x68
 80025ac:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7fe ffb2 	bl	8001518 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80025b4:	f000 fe56 	bl	8003264 <HAL_GetTick>
 80025b8:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 80025ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025bc:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 80025c2:	4a45      	ldr	r2, [pc, #276]	@ (80026d8 <ssd1306_TestFPS+0x130>)
 80025c4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80025c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 80025ce:	2100      	movs	r1, #0
 80025d0:	2002      	movs	r0, #2
 80025d2:	f7ff f8ed 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <ssd1306_TestFPS+0x134>)
 80025d8:	2200      	movs	r2, #0
 80025da:	9200      	str	r2, [sp, #0]
 80025dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025de:	4840      	ldr	r0, [pc, #256]	@ (80026e0 <ssd1306_TestFPS+0x138>)
 80025e0:	f7ff f8c0 	bl	8001764 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 80025e4:	2124      	movs	r1, #36	@ 0x24
 80025e6:	2002      	movs	r0, #2
 80025e8:	f7ff f8e2 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 80025ec:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <ssd1306_TestFPS+0x134>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	9200      	str	r2, [sp, #0]
 80025f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f4:	483b      	ldr	r0, [pc, #236]	@ (80026e4 <ssd1306_TestFPS+0x13c>)
 80025f6:	f7ff f8b5 	bl	8001764 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 80025fa:	2112      	movs	r1, #18
 80025fc:	2002      	movs	r0, #2
 80025fe:	f7ff f8d7 	bl	80017b0 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8002602:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <ssd1306_TestFPS+0x134>)
 8002604:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002608:	2200      	movs	r2, #0
 800260a:	9200      	str	r2, [sp, #0]
 800260c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260e:	f7ff f8a9 	bl	8001764 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002612:	f7fe ff99 	bl	8001548 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002616:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800261a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 800261e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002622:	3301      	adds	r3, #1
 8002624:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002628:	220a      	movs	r2, #10
 800262a:	4619      	mov	r1, r3
 800262c:	f005 fb46 	bl	8007cbc <memmove>
        message[sizeof(message)-2] = ch;
 8002630:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002634:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 8002638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800263a:	3301      	adds	r3, #1
 800263c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 800263e:	f000 fe11 	bl	8003264 <HAL_GetTick>
 8002642:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 8002644:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800264e:	4293      	cmp	r3, r2
 8002650:	d9d3      	bls.n	80025fa <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 8002652:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002656:	f000 fe11 	bl	800327c <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 800265a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002664:	ee17 0a90 	vmov	r0, s15
 8002668:	f7fd ff76 	bl	8000558 <__aeabi_f2d>
 800266c:	4604      	mov	r4, r0
 800266e:	460d      	mov	r5, r1
 8002670:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff4c 	bl	8000514 <__aeabi_ui2d>
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <ssd1306_TestFPS+0x140>)
 8002682:	f7fe f8eb 	bl	800085c <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fe f8e5 	bl	800085c <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe f9c7 	bl	8000a2c <__aeabi_d2iz>
 800269e:	4603      	mov	r3, r0
 80026a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80026a2:	1d38      	adds	r0, r7, #4
 80026a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026a6:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <ssd1306_TestFPS+0x144>)
 80026a8:	2140      	movs	r1, #64	@ 0x40
 80026aa:	f005 f9f9 	bl	8007aa0 <sniprintf>
   
    ssd1306_Fill(White);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe ff32 	bl	8001518 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 80026b4:	2102      	movs	r1, #2
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7ff f87a 	bl	80017b0 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 80026bc:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <ssd1306_TestFPS+0x134>)
 80026be:	1d38      	adds	r0, r7, #4
 80026c0:	2200      	movs	r2, #0
 80026c2:	9200      	str	r2, [sp, #0]
 80026c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c6:	f7ff f84d 	bl	8001764 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80026ca:	f7fe ff3d 	bl	8001548 <ssd1306_UpdateScreen>
}
 80026ce:	bf00      	nop
 80026d0:	3760      	adds	r7, #96	@ 0x60
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	080094b4 	.word	0x080094b4
 80026dc:	0800e054 	.word	0x0800e054
 80026e0:	08009494 	.word	0x08009494
 80026e4:	080094a0 	.word	0x080094a0
 80026e8:	408f4000 	.word	0x408f4000
 80026ec:	080094ac 	.word	0x080094ac

080026f0 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 80026f6:	2301      	movs	r3, #1
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	233f      	movs	r3, #63	@ 0x3f
 80026fc:	227f      	movs	r2, #127	@ 0x7f
 80026fe:	2101      	movs	r1, #1
 8002700:	2001      	movs	r0, #1
 8002702:	f7ff f86d 	bl	80017e0 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002706:	2301      	movs	r3, #1
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	233f      	movs	r3, #63	@ 0x3f
 800270c:	2201      	movs	r2, #1
 800270e:	2101      	movs	r1, #1
 8002710:	207f      	movs	r0, #127	@ 0x7f
 8002712:	f7ff f865 	bl	80017e0 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002716:	f7fe ff17 	bl	8001548 <ssd1306_UpdateScreen>
  return;
 800271a:	bf00      	nop
}
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b085      	sub	sp, #20
 8002724:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	e028      	b.n	800277e <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4413      	add	r3, r2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	b2d8      	uxtb	r0, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4413      	add	r3, r2
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	b2d9      	uxtb	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4413      	add	r3, r2
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800275c:	b2da      	uxtb	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461c      	mov	r4, r3
 8002764:	00a4      	lsls	r4, r4, #2
 8002766:	4423      	add	r3, r4
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2401      	movs	r4, #1
 8002772:	9400      	str	r4, [sp, #0]
 8002774:	f7ff fc3a 	bl	8001fec <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3301      	adds	r3, #1
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d9d3      	bls.n	800272c <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8002784:	f7fe fee0 	bl	8001548 <ssd1306_UpdateScreen>
  return;
 8002788:	bf00      	nop
}
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}

08002790 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8002796:	2301      	movs	r3, #1
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2323      	movs	r3, #35	@ 0x23
 800279c:	2241      	movs	r2, #65	@ 0x41
 800279e:	2101      	movs	r1, #1
 80027a0:	201f      	movs	r0, #31
 80027a2:	f7ff fc5a 	bl	800205a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 80027a6:	2301      	movs	r3, #1
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	233c      	movs	r3, #60	@ 0x3c
 80027ac:	2246      	movs	r2, #70	@ 0x46
 80027ae:	212d      	movs	r1, #45	@ 0x2d
 80027b0:	200a      	movs	r0, #10
 80027b2:	f7ff fc52 	bl	800205a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 80027b6:	2301      	movs	r3, #1
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	232d      	movs	r3, #45	@ 0x2d
 80027bc:	2264      	movs	r2, #100	@ 0x64
 80027be:	210a      	movs	r1, #10
 80027c0:	204b      	movs	r0, #75	@ 0x4b
 80027c2:	f7ff fc4a 	bl	800205a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 80027c6:	2300      	movs	r3, #0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2337      	movs	r3, #55	@ 0x37
 80027cc:	2250      	movs	r2, #80	@ 0x50
 80027ce:	211e      	movs	r1, #30
 80027d0:	2037      	movs	r0, #55	@ 0x37
 80027d2:	f7ff fc42 	bl	800205a <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 80027d6:	f7fe feb7 	bl	8001548 <ssd1306_UpdateScreen>
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 80027e6:	2100      	movs	r1, #0
 80027e8:	2002      	movs	r0, #2
 80027ea:	f7fe ffe1 	bl	80017b0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 80027ee:	4b27      	ldr	r3, [pc, #156]	@ (800288c <ssd1306_TestRectangleInvert+0xac>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	9200      	str	r2, [sp, #0]
 80027f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f6:	4826      	ldr	r0, [pc, #152]	@ (8002890 <ssd1306_TestRectangleInvert+0xb0>)
 80027f8:	f7fe ffb4 	bl	8001764 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 80027fc:	2114      	movs	r1, #20
 80027fe:	2002      	movs	r0, #2
 8002800:	f7fe ffd6 	bl	80017b0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <ssd1306_TestRectangleInvert+0xac>)
 8002806:	2201      	movs	r2, #1
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800280c:	4821      	ldr	r0, [pc, #132]	@ (8002894 <ssd1306_TestRectangleInvert+0xb4>)
 800280e:	f7fe ffa9 	bl	8001764 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8002812:	2128      	movs	r1, #40	@ 0x28
 8002814:	2002      	movs	r0, #2
 8002816:	f7fe ffcb 	bl	80017b0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 800281a:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <ssd1306_TestRectangleInvert+0xac>)
 800281c:	2201      	movs	r2, #1
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002822:	481d      	ldr	r0, [pc, #116]	@ (8002898 <ssd1306_TestRectangleInvert+0xb8>)
 8002824:	f7fe ff9e 	bl	8001764 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8002828:	2100      	movs	r1, #0
 800282a:	2042      	movs	r0, #66	@ 0x42
 800282c:	f7fe ffc0 	bl	80017b0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002830:	4b16      	ldr	r3, [pc, #88]	@ (800288c <ssd1306_TestRectangleInvert+0xac>)
 8002832:	2201      	movs	r2, #1
 8002834:	9200      	str	r2, [sp, #0]
 8002836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002838:	4817      	ldr	r0, [pc, #92]	@ (8002898 <ssd1306_TestRectangleInvert+0xb8>)
 800283a:	f7fe ff93 	bl	8001764 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 800283e:	2114      	movs	r1, #20
 8002840:	2042      	movs	r0, #66	@ 0x42
 8002842:	f7fe ffb5 	bl	80017b0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <ssd1306_TestRectangleInvert+0xac>)
 8002848:	2201      	movs	r2, #1
 800284a:	9200      	str	r2, [sp, #0]
 800284c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284e:	4811      	ldr	r0, [pc, #68]	@ (8002894 <ssd1306_TestRectangleInvert+0xb4>)
 8002850:	f7fe ff88 	bl	8001764 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8002854:	2128      	movs	r1, #40	@ 0x28
 8002856:	2042      	movs	r0, #66	@ 0x42
 8002858:	f7fe ffaa 	bl	80017b0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <ssd1306_TestRectangleInvert+0xac>)
 800285e:	2201      	movs	r2, #1
 8002860:	9200      	str	r2, [sp, #0]
 8002862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002864:	480a      	ldr	r0, [pc, #40]	@ (8002890 <ssd1306_TestRectangleInvert+0xb0>)
 8002866:	f7fe ff7d 	bl	8001764 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 800286a:	233f      	movs	r3, #63	@ 0x3f
 800286c:	223f      	movs	r2, #63	@ 0x3f
 800286e:	2100      	movs	r1, #0
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff fc41 	bl	80020f8 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 8002876:	233c      	movs	r3, #60	@ 0x3c
 8002878:	227d      	movs	r2, #125	@ 0x7d
 800287a:	213a      	movs	r1, #58	@ 0x3a
 800287c:	2002      	movs	r0, #2
 800287e:	f7ff fc3b 	bl	80020f8 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 8002882:	f7fe fe61 	bl	8001548 <ssd1306_UpdateScreen>
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	0800e054 	.word	0x0800e054
 8002890:	080094c0 	.word	0x080094c0
 8002894:	080094c8 	.word	0x080094c8
 8002898:	080094cc 	.word	0x080094cc

0800289c <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	e010      	b.n	80028ca <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	331e      	adds	r3, #30
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	2301      	movs	r3, #1
 80028bc:	220a      	movs	r2, #10
 80028be:	210f      	movs	r1, #15
 80028c0:	f7ff fa9a 	bl	8001df8 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3301      	adds	r3, #1
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d9eb      	bls.n	80028a8 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	e011      	b.n	80028fa <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	0052      	lsls	r2, r2, #1
 80028de:	441a      	add	r2, r3
 80028e0:	00d2      	lsls	r2, r2, #3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	330f      	adds	r3, #15
 80028e8:	b2d8      	uxtb	r0, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	220a      	movs	r2, #10
 80028ee:	2128      	movs	r1, #40	@ 0x28
 80028f0:	f7ff fb09 	bl	8001f06 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d9ea      	bls.n	80028d6 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002900:	f7fe fe22 	bl	8001548 <ssd1306_UpdateScreen>
  return;
 8002904:	bf00      	nop
}
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <ssd1306_TestArc>:

void ssd1306_TestArc() {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002912:	2301      	movs	r3, #1
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2314      	movs	r3, #20
 800291e:	221e      	movs	r2, #30
 8002920:	211e      	movs	r1, #30
 8002922:	201e      	movs	r0, #30
 8002924:	f7ff f840 	bl	80019a8 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002928:	2301      	movs	r3, #1
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	231e      	movs	r3, #30
 8002934:	220a      	movs	r2, #10
 8002936:	2137      	movs	r1, #55	@ 0x37
 8002938:	2050      	movs	r0, #80	@ 0x50
 800293a:	f7ff f91d 	bl	8001b78 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 800293e:	f7fe fe03 	bl	8001548 <ssd1306_UpdateScreen>
  return;
 8002942:	bf00      	nop
}
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <ssd1306_TestPolyline+0x28>)
 8002950:	463c      	mov	r4, r7
 8002952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002954:	c407      	stmia	r4!, {r0, r1, r2}
 8002956:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002958:	463b      	mov	r3, r7
 800295a:	2201      	movs	r2, #1
 800295c:	2107      	movs	r1, #7
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ffaa 	bl	80018b8 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002964:	f7fe fdf0 	bl	8001548 <ssd1306_UpdateScreen>
  return;
 8002968:	bf00      	nop
}
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	080094d4 	.word	0x080094d4

08002974 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800297a:	2001      	movs	r0, #1
 800297c:	f7fe fdcc 	bl	8001518 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8002980:	2300      	movs	r3, #0
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2340      	movs	r3, #64	@ 0x40
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	4a18      	ldr	r2, [pc, #96]	@ (80029ec <ssd1306_TestDrawBitmap+0x78>)
 800298c:	2100      	movs	r1, #0
 800298e:	2000      	movs	r0, #0
 8002990:	f7ff fc6e 	bl	8002270 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002994:	f7fe fdd8 	bl	8001548 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002998:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800299c:	f000 fc6e 	bl	800327c <HAL_Delay>
    ssd1306_Fill(Black);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe fdb9 	bl	8001518 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80029a6:	2301      	movs	r3, #1
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2340      	movs	r3, #64	@ 0x40
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2340      	movs	r3, #64	@ 0x40
 80029b0:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <ssd1306_TestDrawBitmap+0x7c>)
 80029b2:	2100      	movs	r1, #0
 80029b4:	2020      	movs	r0, #32
 80029b6:	f7ff fc5b 	bl	8002270 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80029ba:	f7fe fdc5 	bl	8001548 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80029be:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80029c2:	f000 fc5b 	bl	800327c <HAL_Delay>
    ssd1306_Fill(White);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7fe fda6 	bl	8001518 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80029cc:	2300      	movs	r3, #0
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2340      	movs	r3, #64	@ 0x40
 80029d6:	4a06      	ldr	r2, [pc, #24]	@ (80029f0 <ssd1306_TestDrawBitmap+0x7c>)
 80029d8:	2100      	movs	r1, #0
 80029da:	2020      	movs	r0, #32
 80029dc:	f7ff fc48 	bl	8002270 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80029e0:	f7fe fdb2 	bl	8001548 <ssd1306_UpdateScreen>
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	0800e084 	.word	0x0800e084
 80029f0:	0800e484 	.word	0x0800e484

080029f4 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80029f8:	f7fe fd24 	bl	8001444 <ssd1306_Init>

    ssd1306_TestFPS();
 80029fc:	f7ff fdd4 	bl	80025a8 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002a00:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a04:	f000 fc3a 	bl	800327c <HAL_Delay>
    ssd1306_TestBorder();
 8002a08:	f7ff fcbe 	bl	8002388 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002a0c:	f7ff fd06 	bl	800241c <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002a10:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a14:	f000 fc32 	bl	800327c <HAL_Delay>
    ssd1306_TestFonts2();
 8002a18:	f7ff fd58 	bl	80024cc <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002a1c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a20:	f000 fc2c 	bl	800327c <HAL_Delay>
    ssd1306_TestFonts3();
 8002a24:	f7ff fd8c 	bl	8002540 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 8002a28:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a2c:	f000 fc26 	bl	800327c <HAL_Delay>
    ssd1306_Fill(Black);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fe fd71 	bl	8001518 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002a36:	f7ff fe73 	bl	8002720 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002a3a:	f7ff fe59 	bl	80026f0 <ssd1306_TestLine>
    HAL_Delay(3000);
 8002a3e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a42:	f000 fc1b 	bl	800327c <HAL_Delay>
    ssd1306_Fill(Black);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe fd66 	bl	8001518 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8002a4c:	f7ff fea0 	bl	8002790 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002a50:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a54:	f000 fc12 	bl	800327c <HAL_Delay>
    ssd1306_Fill(Black);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe fd5d 	bl	8001518 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 8002a5e:	f7ff febf 	bl	80027e0 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 8002a62:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a66:	f000 fc09 	bl	800327c <HAL_Delay>
    ssd1306_Fill(Black);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe fd54 	bl	8001518 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002a70:	f7ff ff6a 	bl	8002948 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002a74:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a78:	f000 fc00 	bl	800327c <HAL_Delay>
    ssd1306_Fill(Black);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fd4b 	bl	8001518 <ssd1306_Fill>
    ssd1306_TestArc();
 8002a82:	f7ff ff43 	bl	800290c <ssd1306_TestArc>
    HAL_Delay(3000);
 8002a86:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a8a:	f000 fbf7 	bl	800327c <HAL_Delay>
    ssd1306_Fill(Black);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe fd42 	bl	8001518 <ssd1306_Fill>
    ssd1306_TestCircle();
 8002a94:	f7ff ff02 	bl	800289c <ssd1306_TestCircle>
    HAL_Delay(3000);
 8002a98:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a9c:	f000 fbee 	bl	800327c <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8002aa0:	f7ff ff68 	bl	8002974 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8002aa4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002aa8:	f000 fbe8 	bl	800327c <HAL_Delay>
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_MspInit+0x4c>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	4a0f      	ldr	r2, [pc, #60]	@ (8002afc <HAL_MspInit+0x4c>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <HAL_MspInit+0x4c>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <HAL_MspInit+0x4c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	4a08      	ldr	r2, [pc, #32]	@ (8002afc <HAL_MspInit+0x4c>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_MspInit+0x4c>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <HAL_I2C_MspInit+0x84>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12b      	bne.n	8002b7a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4a17      	ldr	r2, [pc, #92]	@ (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b3e:	23c0      	movs	r3, #192	@ 0xc0
 8002b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b42:	2312      	movs	r3, #18
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	480c      	ldr	r0, [pc, #48]	@ (8002b8c <HAL_I2C_MspInit+0x8c>)
 8002b5a:	f000 ffaf 	bl	8003abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	4a08      	ldr	r2, [pc, #32]	@ (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_I2C_MspInit+0x88>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3728      	adds	r7, #40	@ 0x28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40005400 	.word	0x40005400
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020400 	.word	0x40020400

08002b90 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08e      	sub	sp, #56	@ 0x38
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a8a      	ldr	r2, [pc, #552]	@ (8002dd8 <HAL_I2S_MspInit+0x248>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	f040 808c 	bne.w	8002ccc <HAL_I2S_MspInit+0x13c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	4b88      	ldr	r3, [pc, #544]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a87      	ldr	r2, [pc, #540]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc4:	4b85      	ldr	r3, [pc, #532]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	4b81      	ldr	r3, [pc, #516]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	4a80      	ldr	r2, [pc, #512]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	4b7a      	ldr	r3, [pc, #488]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	4a79      	ldr	r2, [pc, #484]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfc:	4b77      	ldr	r3, [pc, #476]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002c18:	2306      	movs	r3, #6
 8002c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c20:	4619      	mov	r1, r3
 8002c22:	486f      	ldr	r0, [pc, #444]	@ (8002de0 <HAL_I2S_MspInit+0x250>)
 8002c24:	f000 ff4a 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002c28:	2348      	movs	r3, #72	@ 0x48
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	4867      	ldr	r0, [pc, #412]	@ (8002de0 <HAL_I2S_MspInit+0x250>)
 8002c44:	f000 ff3a 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002c48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c62:	4619      	mov	r1, r3
 8002c64:	485f      	ldr	r0, [pc, #380]	@ (8002de4 <HAL_I2S_MspInit+0x254>)
 8002c66:	f000 ff29 	bl	8003abc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c6c:	4a5f      	ldr	r2, [pc, #380]	@ (8002dec <HAL_I2S_MspInit+0x25c>)
 8002c6e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002c70:	4b5d      	ldr	r3, [pc, #372]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c76:	4b5c      	ldr	r3, [pc, #368]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c78:	2240      	movs	r2, #64	@ 0x40
 8002c7a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c82:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c88:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c90:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c92:	4b55      	ldr	r3, [pc, #340]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c98:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ca0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ca2:	4b51      	ldr	r3, [pc, #324]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002cae:	484e      	ldr	r0, [pc, #312]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002cb0:	f000 fc1a 	bl	80034e8 <HAL_DMA_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2S_MspInit+0x12e>
    {
      Error_Handler();
 8002cba:	f7fe fb83 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cc4:	4a48      	ldr	r2, [pc, #288]	@ (8002de8 <HAL_I2S_MspInit+0x258>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002cca:	e080      	b.n	8002dce <HAL_I2S_MspInit+0x23e>
  else if(hi2s->Instance==SPI3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a47      	ldr	r2, [pc, #284]	@ (8002df0 <HAL_I2S_MspInit+0x260>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d17b      	bne.n	8002dce <HAL_I2S_MspInit+0x23e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	4b40      	ldr	r3, [pc, #256]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	4a3f      	ldr	r2, [pc, #252]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b39      	ldr	r3, [pc, #228]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	4a38      	ldr	r2, [pc, #224]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d02:	4b36      	ldr	r3, [pc, #216]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <HAL_I2S_MspInit+0x24c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	482b      	ldr	r0, [pc, #172]	@ (8002df4 <HAL_I2S_MspInit+0x264>)
 8002d48:	f000 feb8 	bl	8003abc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002d4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d5e:	2306      	movs	r3, #6
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d66:	4619      	mov	r1, r3
 8002d68:	481d      	ldr	r0, [pc, #116]	@ (8002de0 <HAL_I2S_MspInit+0x250>)
 8002d6a:	f000 fea7 	bl	8003abc <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8002d6e:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002d70:	4a22      	ldr	r2, [pc, #136]	@ (8002dfc <HAL_I2S_MspInit+0x26c>)
 8002d72:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8002d74:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d80:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d86:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d8c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002d90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d94:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d9c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002da4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002da6:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002db2:	4811      	ldr	r0, [pc, #68]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002db4:	f000 fb98 	bl	80034e8 <HAL_DMA_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2S_MspInit+0x232>
      Error_Handler();
 8002dbe:	f7fe fb01 	bl	80013c4 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002df8 <HAL_I2S_MspInit+0x268>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002dce:	bf00      	nop
 8002dd0:	3738      	adds	r7, #56	@ 0x38
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40003800 	.word	0x40003800
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020400 	.word	0x40020400
 8002de8:	20001984 	.word	0x20001984
 8002dec:	40026070 	.word	0x40026070
 8002df0:	40003c00 	.word	0x40003c00
 8002df4:	40020000 	.word	0x40020000
 8002df8:	200019e4 	.word	0x200019e4
 8002dfc:	40026010 	.word	0x40026010

08002e00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_SPI_MspInit+0xc0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d149      	bne.n	8002eb6 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	4a26      	ldr	r2, [pc, #152]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e32:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <HAL_SPI_MspInit+0xc4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e76:	23c0      	movs	r3, #192	@ 0xc0
 8002e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e86:	2305      	movs	r3, #5
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <HAL_SPI_MspInit+0xc8>)
 8002e92:	f000 fe13 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e96:	2308      	movs	r3, #8
 8002e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ea6:	2305      	movs	r3, #5
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4806      	ldr	r0, [pc, #24]	@ (8002ecc <HAL_SPI_MspInit+0xcc>)
 8002eb2:	f000 fe03 	bl	8003abc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	@ 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40013000 	.word	0x40013000
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020400 	.word	0x40020400

08002ed0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a19      	ldr	r2, [pc, #100]	@ (8002f54 <HAL_UART_MspInit+0x84>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d12b      	bne.n	8002f4a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <HAL_UART_MspInit+0x88>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	4a17      	ldr	r2, [pc, #92]	@ (8002f58 <HAL_UART_MspInit+0x88>)
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_UART_MspInit+0x88>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_UART_MspInit+0x88>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a10      	ldr	r2, [pc, #64]	@ (8002f58 <HAL_UART_MspInit+0x88>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_UART_MspInit+0x88>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	@ (8002f5c <HAL_UART_MspInit+0x8c>)
 8002f46:	f000 fdb9 	bl	8003abc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002f4a:	bf00      	nop
 8002f4c:	3728      	adds	r7, #40	@ 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40004400 	.word	0x40004400
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020000 	.word	0x40020000

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <NMI_Handler+0x4>

08002f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <MemManage_Handler+0x4>

08002f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb6:	f000 f941 	bl	800323c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002fc4:	4802      	ldr	r0, [pc, #8]	@ (8002fd0 <DMA1_Stream0_IRQHandler+0x10>)
 8002fc6:	f000 fb3d 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200019e4 	.word	0x200019e4

08002fd4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <DMA1_Stream4_IRQHandler+0x10>)
 8002fda:	f000 fb33 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20001984 	.word	0x20001984

08002fe8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OK_BUTTON_Pin);
 8002fec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ff0:	f000 ff02 	bl	8003df8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BACK_BUTTON_Pin);
 8002ff4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ff8:	f000 fefe 	bl	8003df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_PB_Pin);
 8003004:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003008:	f000 fef6 	bl	8003df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}

08003010 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e00a      	b.n	8003038 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003022:	f3af 8000 	nop.w
 8003026:	4601      	mov	r1, r0
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	b2ca      	uxtb	r2, r1
 8003030:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbf0      	blt.n	8003022 <_read+0x12>
  }

  return len;
 8003040:	687b      	ldr	r3, [r7, #4]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <_close>:
  }
  return len;
}

int _close(int file)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003072:	605a      	str	r2, [r3, #4]
  return 0;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <_isatty>:

int _isatty(int file)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800308a:	2301      	movs	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030bc:	4a14      	ldr	r2, [pc, #80]	@ (8003110 <_sbrk+0x5c>)
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <_sbrk+0x60>)
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c8:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <_sbrk+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <_sbrk+0x64>)
 80030d2:	4a12      	ldr	r2, [pc, #72]	@ (800311c <_sbrk+0x68>)
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <_sbrk+0x64>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d207      	bcs.n	80030f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e4:	f004 fe52 	bl	8007d8c <__errno>
 80030e8:	4603      	mov	r3, r0
 80030ea:	220c      	movs	r2, #12
 80030ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e009      	b.n	8003108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <_sbrk+0x64>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <_sbrk+0x64>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <_sbrk+0x64>)
 8003104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20018000 	.word	0x20018000
 8003114:	00000400 	.word	0x00000400
 8003118:	20001eec 	.word	0x20001eec
 800311c:	20002060 	.word	0x20002060

08003120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <SystemInit+0x20>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312a:	4a05      	ldr	r2, [pc, #20]	@ (8003140 <SystemInit+0x20>)
 800312c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800317c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003148:	f7ff ffea 	bl	8003120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800314c:	480c      	ldr	r0, [pc, #48]	@ (8003180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800314e:	490d      	ldr	r1, [pc, #52]	@ (8003184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003150:	4a0d      	ldr	r2, [pc, #52]	@ (8003188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003154:	e002      	b.n	800315c <LoopCopyDataInit>

08003156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315a:	3304      	adds	r3, #4

0800315c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800315c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003160:	d3f9      	bcc.n	8003156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003164:	4c0a      	ldr	r4, [pc, #40]	@ (8003190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003168:	e001      	b.n	800316e <LoopFillZerobss>

0800316a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800316c:	3204      	adds	r2, #4

0800316e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003170:	d3fb      	bcc.n	800316a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003172:	f004 fe11 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003176:	f7fd fe9b 	bl	8000eb0 <main>
  bx  lr    
 800317a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800317c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003184:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003188:	0800eab8 	.word	0x0800eab8
  ldr r2, =_sbss
 800318c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003190:	20002060 	.word	0x20002060

08003194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC_IRQHandler>
	...

08003198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800319c:	4b0e      	ldr	r3, [pc, #56]	@ (80031d8 <HAL_Init+0x40>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <HAL_Init+0x40>)
 80031a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a8:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <HAL_Init+0x40>)
 80031ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b4:	4b08      	ldr	r3, [pc, #32]	@ (80031d8 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <HAL_Init+0x40>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c0:	2003      	movs	r0, #3
 80031c2:	f000 f94f 	bl	8003464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f000 f808 	bl	80031dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031cc:	f7ff fc70 	bl	8002ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00

080031dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e4:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <HAL_InitTick+0x54>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <HAL_InitTick+0x58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f967 	bl	80034ce <HAL_SYSTICK_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00e      	b.n	8003228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d80a      	bhi.n	8003226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003210:	2200      	movs	r2, #0
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f000 f92f 	bl	800347a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800321c:	4a06      	ldr	r2, [pc, #24]	@ (8003238 <HAL_InitTick+0x5c>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000000 	.word	0x20000000
 8003234:	20000008 	.word	0x20000008
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_IncTick+0x20>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_IncTick+0x24>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4413      	add	r3, r2
 800324c:	4a04      	ldr	r2, [pc, #16]	@ (8003260 <HAL_IncTick+0x24>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000008 	.word	0x20000008
 8003260:	20001ef0 	.word	0x20001ef0

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20001ef0 	.word	0x20001ef0

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff ffee 	bl	8003264 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d005      	beq.n	80032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_Delay+0x44>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032a2:	bf00      	nop
 80032a4:	f7ff ffde 	bl	8003264 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d8f7      	bhi.n	80032a4 <HAL_Delay+0x28>
  {
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000008 	.word	0x20000008

080032c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f6:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	60d3      	str	r3, [r2, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4907      	ldr	r1, [pc, #28]	@ (8003360 <__NVIC_EnableIRQ+0x38>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	@ (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	@ (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	@ 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	@ 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003430:	d301      	bcc.n	8003436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003432:	2301      	movs	r3, #1
 8003434:	e00f      	b.n	8003456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003436:	4a0a      	ldr	r2, [pc, #40]	@ (8003460 <SysTick_Config+0x40>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343e:	210f      	movs	r1, #15
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f7ff ff8e 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <SysTick_Config+0x40>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344e:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <SysTick_Config+0x40>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010

08003464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff29 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800348c:	f7ff ff3e 	bl	800330c <__NVIC_GetPriorityGrouping>
 8003490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	6978      	ldr	r0, [r7, #20]
 8003498:	f7ff ff8e 	bl	80033b8 <NVIC_EncodePriority>
 800349c:	4602      	mov	r2, r0
 800349e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff5d 	bl	8003364 <__NVIC_SetPriority>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff31 	bl	8003328 <__NVIC_EnableIRQ>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ffa2 	bl	8003420 <SysTick_Config>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff feb6 	bl	8003264 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e099      	b.n	8003638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003524:	e00f      	b.n	8003546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003526:	f7ff fe9d 	bl	8003264 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b05      	cmp	r3, #5
 8003532:	d908      	bls.n	8003546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e078      	b.n	8003638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e8      	bne.n	8003526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <HAL_DMA_Init+0x158>)
 8003560:	4013      	ands	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	2b04      	cmp	r3, #4
 800359e:	d107      	bne.n	80035b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	4313      	orrs	r3, r2
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0307 	bic.w	r3, r3, #7
 80035c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d117      	bne.n	800360a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f9e9 	bl	80039c4 <DMA_CheckFifoParam>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2240      	movs	r2, #64	@ 0x40
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003606:	2301      	movs	r3, #1
 8003608:	e016      	b.n	8003638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9a0 	bl	8003958 <DMA_CalcBaseAndBitshift>
 8003618:	4603      	mov	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	223f      	movs	r2, #63	@ 0x3f
 8003622:	409a      	lsls	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	f010803f 	.word	0xf010803f

08003644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003650:	4b8e      	ldr	r3, [pc, #568]	@ (800388c <HAL_DMA_IRQHandler+0x248>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a8e      	ldr	r2, [pc, #568]	@ (8003890 <HAL_DMA_IRQHandler+0x24c>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	2208      	movs	r2, #8
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	2208      	movs	r2, #8
 800369e:	409a      	lsls	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	2201      	movs	r2, #1
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	f043 0202 	orr.w	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	2204      	movs	r2, #4
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	2204      	movs	r2, #4
 800370a:	409a      	lsls	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003720:	2210      	movs	r2, #16
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d043      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03c      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373e:	2210      	movs	r2, #16
 8003740:	409a      	lsls	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d018      	beq.n	8003786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d024      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e01f      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e016      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0208 	bic.w	r2, r2, #8
 80037a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	2220      	movs	r2, #32
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808f 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8087 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037da:	2220      	movs	r2, #32
 80037dc:	409a      	lsls	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d136      	bne.n	800385c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0216 	bic.w	r2, r2, #22
 80037fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800380c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_DMA_IRQHandler+0x1da>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0208 	bic.w	r2, r2, #8
 800382c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	223f      	movs	r2, #63	@ 0x3f
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07e      	beq.n	8003950 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
        }
        return;
 800385a:	e079      	b.n	8003950 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01d      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387c:	2b00      	cmp	r3, #0
 800387e:	d031      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e02c      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000
 8003890:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d023      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	e01e      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0210 	bic.w	r2, r2, #16
 80038c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d032      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2205      	movs	r2, #5
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d307      	bcc.n	800392c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f2      	bne.n	8003910 <HAL_DMA_IRQHandler+0x2cc>
 800392a:	e000      	b.n	800392e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800392c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
 800394e:	e000      	b.n	8003952 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003950:	bf00      	nop
    }
  }
}
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	3b10      	subs	r3, #16
 8003968:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <DMA_CalcBaseAndBitshift+0x64>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003972:	4a13      	ldr	r2, [pc, #76]	@ (80039c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d909      	bls.n	800399a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800398e:	f023 0303 	bic.w	r3, r3, #3
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	659a      	str	r2, [r3, #88]	@ 0x58
 8003998:	e007      	b.n	80039aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	aaaaaaab 	.word	0xaaaaaaab
 80039c0:	0800e69c 	.word	0x0800e69c

080039c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11f      	bne.n	8003a1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d856      	bhi.n	8003a92 <DMA_CheckFifoParam+0xce>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <DMA_CheckFifoParam+0x28>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a0f 	.word	0x08003a0f
 80039f4:	080039fd 	.word	0x080039fd
 80039f8:	08003a93 	.word	0x08003a93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d046      	beq.n	8003a96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0c:	e043      	b.n	8003a96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a16:	d140      	bne.n	8003a9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e03d      	b.n	8003a9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	d121      	bne.n	8003a6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d837      	bhi.n	8003a9e <DMA_CheckFifoParam+0xda>
 8003a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <DMA_CheckFifoParam+0x70>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003a4b 	.word	0x08003a4b
 8003a3c:	08003a45 	.word	0x08003a45
 8003a40:	08003a5d 	.word	0x08003a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	e030      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d025      	beq.n	8003aa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5a:	e022      	b.n	8003aa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a64:	d11f      	bne.n	8003aa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a6a:	e01c      	b.n	8003aa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d903      	bls.n	8003a7a <DMA_CheckFifoParam+0xb6>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d003      	beq.n	8003a80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a78:	e018      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7e:	e015      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a90:	e00b      	b.n	8003aaa <DMA_CheckFifoParam+0xe6>
      break;
 8003a92:	bf00      	nop
 8003a94:	e00a      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e008      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e006      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e004      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;   
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
    }
  } 
  
  return status; 
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop

08003abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	@ 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	e159      	b.n	8003d8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad8:	2201      	movs	r2, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	f040 8148 	bne.w	8003d86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d005      	beq.n	8003b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d130      	bne.n	8003b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	2203      	movs	r2, #3
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b44:	2201      	movs	r2, #1
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 0201 	and.w	r2, r3, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d017      	beq.n	8003bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	2203      	movs	r2, #3
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d123      	bne.n	8003c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	08da      	lsrs	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3208      	adds	r2, #8
 8003bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	220f      	movs	r2, #15
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	08da      	lsrs	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3208      	adds	r2, #8
 8003bfa:	69b9      	ldr	r1, [r7, #24]
 8003bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0203 	and.w	r2, r3, #3
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a2 	beq.w	8003d86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b57      	ldr	r3, [pc, #348]	@ (8003da4 <HAL_GPIO_Init+0x2e8>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <HAL_GPIO_Init+0x2e8>)
 8003c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c52:	4b54      	ldr	r3, [pc, #336]	@ (8003da4 <HAL_GPIO_Init+0x2e8>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c5e:	4a52      	ldr	r2, [pc, #328]	@ (8003da8 <HAL_GPIO_Init+0x2ec>)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	3302      	adds	r3, #2
 8003c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	220f      	movs	r2, #15
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a49      	ldr	r2, [pc, #292]	@ (8003dac <HAL_GPIO_Init+0x2f0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_GPIO_Init+0x202>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a48      	ldr	r2, [pc, #288]	@ (8003db0 <HAL_GPIO_Init+0x2f4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x1fe>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a47      	ldr	r2, [pc, #284]	@ (8003db4 <HAL_GPIO_Init+0x2f8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x1fa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a46      	ldr	r2, [pc, #280]	@ (8003db8 <HAL_GPIO_Init+0x2fc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x1f6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a45      	ldr	r2, [pc, #276]	@ (8003dbc <HAL_GPIO_Init+0x300>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x1f2>
 8003caa:	2304      	movs	r3, #4
 8003cac:	e008      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cae:	2307      	movs	r3, #7
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e004      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f002 0203 	and.w	r2, r2, #3
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	4093      	lsls	r3, r2
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd0:	4935      	ldr	r1, [pc, #212]	@ (8003da8 <HAL_GPIO_Init+0x2ec>)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cde:	4b38      	ldr	r3, [pc, #224]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d02:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d08:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d2c:	4a24      	ldr	r2, [pc, #144]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d32:	4b23      	ldr	r3, [pc, #140]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d56:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d80:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	f67f aea2 	bls.w	8003ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3724      	adds	r7, #36	@ 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40013c00 	.word	0x40013c00

08003dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd4:	787b      	ldrb	r3, [r7, #1]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003de0:	e003      	b.n	8003dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	041a      	lsls	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	619a      	str	r2, [r3, #24]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d006      	beq.n	8003e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e0e:	4a05      	ldr	r2, [pc, #20]	@ (8003e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc ffc6 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40013c00 	.word	0x40013c00

08003e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e12b      	b.n	8004092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe fe56 	bl	8002b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	@ 0x24
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f001 fd76 	bl	800597c <HAL_RCC_GetPCLK1Freq>
 8003e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4a81      	ldr	r2, [pc, #516]	@ (800409c <HAL_I2C_Init+0x274>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d807      	bhi.n	8003eac <HAL_I2C_Init+0x84>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a80      	ldr	r2, [pc, #512]	@ (80040a0 <HAL_I2C_Init+0x278>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	bf94      	ite	ls
 8003ea4:	2301      	movls	r3, #1
 8003ea6:	2300      	movhi	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e006      	b.n	8003eba <HAL_I2C_Init+0x92>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a7d      	ldr	r2, [pc, #500]	@ (80040a4 <HAL_I2C_Init+0x27c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	bf94      	ite	ls
 8003eb4:	2301      	movls	r3, #1
 8003eb6:	2300      	movhi	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0e7      	b.n	8004092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a78      	ldr	r2, [pc, #480]	@ (80040a8 <HAL_I2C_Init+0x280>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0c9b      	lsrs	r3, r3, #18
 8003ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800409c <HAL_I2C_Init+0x274>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d802      	bhi.n	8003efc <HAL_I2C_Init+0xd4>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	e009      	b.n	8003f10 <HAL_I2C_Init+0xe8>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	4a69      	ldr	r2, [pc, #420]	@ (80040ac <HAL_I2C_Init+0x284>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	3301      	adds	r3, #1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	495c      	ldr	r1, [pc, #368]	@ (800409c <HAL_I2C_Init+0x274>)
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	d819      	bhi.n	8003f64 <HAL_I2C_Init+0x13c>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e59      	subs	r1, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f44:	400b      	ands	r3, r1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_I2C_Init+0x138>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e59      	subs	r1, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	e051      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e04f      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d111      	bne.n	8003f90 <HAL_I2C_Init+0x168>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1e58      	subs	r0, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	440b      	add	r3, r1
 8003f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e012      	b.n	8003fb6 <HAL_I2C_Init+0x18e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e58      	subs	r0, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	0099      	lsls	r1, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_Init+0x196>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e022      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_I2C_Init+0x1bc>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1e58      	subs	r0, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	440b      	add	r3, r1
 8003fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe2:	e00f      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e58      	subs	r0, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	0099      	lsls	r1, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	6809      	ldr	r1, [r1, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004032:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6911      	ldr	r1, [r2, #16]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68d2      	ldr	r2, [r2, #12]
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430b      	orrs	r3, r1
 8004046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	000186a0 	.word	0x000186a0
 80040a0:	001e847f 	.word	0x001e847f
 80040a4:	003d08ff 	.word	0x003d08ff
 80040a8:	431bde83 	.word	0x431bde83
 80040ac:	10624dd3 	.word	0x10624dd3

080040b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	817b      	strh	r3, [r7, #10]
 80040c2:	460b      	mov	r3, r1
 80040c4:	813b      	strh	r3, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ca:	f7ff f8cb 	bl	8003264 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b20      	cmp	r3, #32
 80040da:	f040 80d9 	bne.w	8004290 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2319      	movs	r3, #25
 80040e4:	2201      	movs	r2, #1
 80040e6:	496d      	ldr	r1, [pc, #436]	@ (800429c <HAL_I2C_Mem_Write+0x1ec>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f971 	bl	80043d0 <I2C_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
 80040f6:	e0cc      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_I2C_Mem_Write+0x56>
 8004102:	2302      	movs	r3, #2
 8004104:	e0c5      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d007      	beq.n	800412c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800413a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2221      	movs	r2, #33	@ 0x21
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2240      	movs	r2, #64	@ 0x40
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a4d      	ldr	r2, [pc, #308]	@ (80042a0 <HAL_I2C_Mem_Write+0x1f0>)
 800416c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800416e:	88f8      	ldrh	r0, [r7, #6]
 8004170:	893a      	ldrh	r2, [r7, #8]
 8004172:	8979      	ldrh	r1, [r7, #10]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	4603      	mov	r3, r0
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f890 	bl	80042a4 <I2C_RequestMemoryWrite>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d052      	beq.n	8004230 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e081      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fa36 	bl	8004604 <I2C_WaitOnTXEFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d107      	bne.n	80041b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e06b      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d11b      	bne.n	8004230 <HAL_I2C_Mem_Write+0x180>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d017      	beq.n	8004230 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1aa      	bne.n	800418e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa29 	bl	8004694 <I2C_WaitOnBTFFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	2b04      	cmp	r3, #4
 800424e:	d107      	bne.n	8004260 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800425e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e016      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	00100002 	.word	0x00100002
 80042a0:	ffff0000 	.word	0xffff0000

080042a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f878 	bl	80043d0 <I2C_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00d      	beq.n	8004302 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f4:	d103      	bne.n	80042fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e05f      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	492d      	ldr	r1, [pc, #180]	@ (80043cc <I2C_RequestMemoryWrite+0x128>)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f8d3 	bl	80044c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e04c      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004340:	6a39      	ldr	r1, [r7, #32]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f95e 	bl	8004604 <I2C_WaitOnTXEFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	2b04      	cmp	r3, #4
 8004354:	d107      	bne.n	8004366 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e02b      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]
 800437a:	e021      	b.n	80043c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	b29b      	uxth	r3, r3
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438c:	6a39      	ldr	r1, [r7, #32]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f938 	bl	8004604 <I2C_WaitOnTXEFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d107      	bne.n	80043b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e005      	b.n	80043c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043b6:	893b      	ldrh	r3, [r7, #8]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	00010002 	.word	0x00010002

080043d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e0:	e048      	b.n	8004474 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d044      	beq.n	8004474 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fe ff3b 	bl	8003264 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d139      	bne.n	8004474 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	0c1b      	lsrs	r3, r3, #16
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d10d      	bne.n	8004426 <I2C_WaitOnFlagUntilTimeout+0x56>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	43da      	mvns	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	e00c      	b.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	43da      	mvns	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4013      	ands	r3, r2
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	429a      	cmp	r2, r3
 8004444:	d116      	bne.n	8004474 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e023      	b.n	80044bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10d      	bne.n	800449a <I2C_WaitOnFlagUntilTimeout+0xca>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	43da      	mvns	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	e00c      	b.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	43da      	mvns	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d093      	beq.n	80043e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044d2:	e071      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e2:	d123      	bne.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e067      	b.n	80045fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d041      	beq.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004534:	f7fe fe96 	bl	8003264 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d136      	bne.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d10c      	bne.n	800456e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e00b      	b.n	8004586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	43da      	mvns	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e021      	b.n	80045fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d10c      	bne.n	80045dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	43da      	mvns	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e00b      	b.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	43da      	mvns	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bf14      	ite	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	2300      	moveq	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f47f af6d 	bne.w	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004610:	e034      	b.n	800467c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f886 	bl	8004724 <I2C_IsAcknowledgeFailed>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e034      	b.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d028      	beq.n	800467c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fe fe1b 	bl	8003264 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11d      	bne.n	800467c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b80      	cmp	r3, #128	@ 0x80
 800464c:	d016      	beq.n	800467c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e007      	b.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d1c3      	bne.n	8004612 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a0:	e034      	b.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f83e 	bl	8004724 <I2C_IsAcknowledgeFailed>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e034      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d028      	beq.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ba:	f7fe fdd3 	bl	8003264 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11d      	bne.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d016      	beq.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e007      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d1c3      	bne.n	80046a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473a:	d11b      	bne.n	8004774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e128      	b.n	80049e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a90      	ldr	r2, [pc, #576]	@ (80049f0 <HAL_I2S_Init+0x26c>)
 80047ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fe f9ed 	bl	8002b90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80047cc:	f023 030f 	bic.w	r3, r3, #15
 80047d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2202      	movs	r2, #2
 80047d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d060      	beq.n	80048a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80047ea:	2310      	movs	r3, #16
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e001      	b.n	80047f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80047f0:	2320      	movs	r3, #32
 80047f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d802      	bhi.n	8004802 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004802:	2001      	movs	r0, #1
 8004804:	f001 f9d0 	bl	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004808:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004812:	d125      	bne.n	8004860 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d010      	beq.n	800483e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	fbb2 f2f3 	udiv	r2, r2, r3
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	461a      	mov	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	3305      	adds	r3, #5
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e01f      	b.n	800487e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	fbb2 f2f3 	udiv	r2, r2, r3
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	461a      	mov	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	3305      	adds	r3, #5
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	e00e      	b.n	800487e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	fbb2 f2f3 	udiv	r2, r2, r3
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	461a      	mov	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	3305      	adds	r3, #5
 800487c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4a5c      	ldr	r2, [pc, #368]	@ (80049f4 <HAL_I2S_Init+0x270>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	08db      	lsrs	r3, r3, #3
 8004888:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e003      	b.n	80048ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048a4:	2302      	movs	r3, #2
 80048a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d902      	bls.n	80048b8 <HAL_I2S_Init+0x134>
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2bff      	cmp	r3, #255	@ 0xff
 80048b6:	d907      	bls.n	80048c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048bc:	f043 0210 	orr.w	r2, r3, #16
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e08f      	b.n	80049e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	ea42 0103 	orr.w	r1, r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	430a      	orrs	r2, r1
 80048da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80048e6:	f023 030f 	bic.w	r3, r3, #15
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6851      	ldr	r1, [r2, #4]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	4311      	orrs	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68d2      	ldr	r2, [r2, #12]
 80048f8:	4311      	orrs	r1, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6992      	ldr	r2, [r2, #24]
 80048fe:	430a      	orrs	r2, r1
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800490a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d161      	bne.n	80049d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a38      	ldr	r2, [pc, #224]	@ (80049f8 <HAL_I2S_Init+0x274>)
 8004918:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a37      	ldr	r2, [pc, #220]	@ (80049fc <HAL_I2S_Init+0x278>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d101      	bne.n	8004928 <HAL_I2S_Init+0x1a4>
 8004924:	4b36      	ldr	r3, [pc, #216]	@ (8004a00 <HAL_I2S_Init+0x27c>)
 8004926:	e001      	b.n	800492c <HAL_I2S_Init+0x1a8>
 8004928:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	4932      	ldr	r1, [pc, #200]	@ (80049fc <HAL_I2S_Init+0x278>)
 8004934:	428a      	cmp	r2, r1
 8004936:	d101      	bne.n	800493c <HAL_I2S_Init+0x1b8>
 8004938:	4a31      	ldr	r2, [pc, #196]	@ (8004a00 <HAL_I2S_Init+0x27c>)
 800493a:	e001      	b.n	8004940 <HAL_I2S_Init+0x1bc>
 800493c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004940:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004944:	f023 030f 	bic.w	r3, r3, #15
 8004948:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2b      	ldr	r2, [pc, #172]	@ (80049fc <HAL_I2S_Init+0x278>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d101      	bne.n	8004958 <HAL_I2S_Init+0x1d4>
 8004954:	4b2a      	ldr	r3, [pc, #168]	@ (8004a00 <HAL_I2S_Init+0x27c>)
 8004956:	e001      	b.n	800495c <HAL_I2S_Init+0x1d8>
 8004958:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800495c:	2202      	movs	r2, #2
 800495e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a25      	ldr	r2, [pc, #148]	@ (80049fc <HAL_I2S_Init+0x278>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_I2S_Init+0x1ea>
 800496a:	4b25      	ldr	r3, [pc, #148]	@ (8004a00 <HAL_I2S_Init+0x27c>)
 800496c:	e001      	b.n	8004972 <HAL_I2S_Init+0x1ee>
 800496e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497e:	d003      	beq.n	8004988 <HAL_I2S_Init+0x204>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	e001      	b.n	8004994 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800499e:	4313      	orrs	r3, r2
 80049a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049a8:	4313      	orrs	r3, r2
 80049aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049b2:	4313      	orrs	r3, r2
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80049c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0d      	ldr	r2, [pc, #52]	@ (80049fc <HAL_I2S_Init+0x278>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_I2S_Init+0x24c>
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <HAL_I2S_Init+0x27c>)
 80049ce:	e001      	b.n	80049d4 <HAL_I2S_Init+0x250>
 80049d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049d4:	897a      	ldrh	r2, [r7, #10]
 80049d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	08004ad3 	.word	0x08004ad3
 80049f4:	cccccccd 	.word	0xcccccccd
 80049f8:	08004be9 	.word	0x08004be9
 80049fc:	40003800 	.word	0x40003800
 8004a00:	40003400 	.word	0x40003400

08004a04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	881a      	ldrh	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10e      	bne.n	8004a6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fc fc74 	bl	8001354 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	b292      	uxth	r2, r2
 8004a88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10e      	bne.n	8004aca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004aba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fc fc57 	bl	8001378 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d13a      	bne.n	8004b64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d109      	bne.n	8004b0c <I2S_IRQHandler+0x3a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b02:	2b40      	cmp	r3, #64	@ 0x40
 8004b04:	d102      	bne.n	8004b0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ffb4 	bl	8004a74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b12:	2b40      	cmp	r3, #64	@ 0x40
 8004b14:	d126      	bne.n	8004b64 <I2S_IRQHandler+0x92>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d11f      	bne.n	8004b64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f043 0202 	orr.w	r2, r3, #2
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff50 	bl	8004a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d136      	bne.n	8004bde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d109      	bne.n	8004b8e <I2S_IRQHandler+0xbc>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b84:	2b80      	cmp	r3, #128	@ 0x80
 8004b86:	d102      	bne.n	8004b8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ff45 	bl	8004a18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d122      	bne.n	8004bde <I2S_IRQHandler+0x10c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d11b      	bne.n	8004bde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff13 	bl	8004a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a92      	ldr	r2, [pc, #584]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c02:	4b92      	ldr	r3, [pc, #584]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c04:	e001      	b.n	8004c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a8b      	ldr	r2, [pc, #556]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c20:	4b8a      	ldr	r3, [pc, #552]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c22:	e001      	b.n	8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c34:	d004      	beq.n	8004c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 8099 	bne.w	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d107      	bne.n	8004c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f925 	bl	8004ea4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9c8 	bl	8005004 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b40      	cmp	r3, #64	@ 0x40
 8004c7c:	d13a      	bne.n	8004cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d035      	beq.n	8004cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c92:	4b6e      	ldr	r3, [pc, #440]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c94:	e001      	b.n	8004c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4969      	ldr	r1, [pc, #420]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ca2:	428b      	cmp	r3, r1
 8004ca4:	d101      	bne.n	8004caa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ca6:	4b69      	ldr	r3, [pc, #420]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ca8:	e001      	b.n	8004cae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004caa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cb2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	f043 0202 	orr.w	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fe88 	bl	8004a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	f040 80c3 	bne.w	8004e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80bd 	beq.w	8004e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a49      	ldr	r2, [pc, #292]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d101      	bne.n	8004d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d26:	4b49      	ldr	r3, [pc, #292]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d28:	e001      	b.n	8004d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4944      	ldr	r1, [pc, #272]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d36:	428b      	cmp	r3, r1
 8004d38:	d101      	bne.n	8004d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d3a:	4b44      	ldr	r3, [pc, #272]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d3c:	e001      	b.n	8004d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fe4a 	bl	8004a04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d70:	e089      	b.n	8004e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d107      	bne.n	8004d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f8be 	bl	8004f08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8fd 	bl	8004fa0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	2b40      	cmp	r3, #64	@ 0x40
 8004dae:	d12f      	bne.n	8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d02a      	beq.n	8004e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dc8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1e      	ldr	r2, [pc, #120]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d101      	bne.n	8004dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dd6:	e001      	b.n	8004ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4919      	ldr	r1, [pc, #100]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004de4:	428b      	cmp	r3, r1
 8004de6:	d101      	bne.n	8004dec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004de8:	4b18      	ldr	r3, [pc, #96]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dea:	e001      	b.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004dec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004df0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004df4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e02:	f043 0202 	orr.w	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff fdfa 	bl	8004a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d136      	bne.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d031      	beq.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a07      	ldr	r2, [pc, #28]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d101      	bne.n	8004e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e2e:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e30:	e001      	b.n	8004e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4902      	ldr	r1, [pc, #8]	@ (8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e3e:	428b      	cmp	r3, r1
 8004e40:	d106      	bne.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e42:	4b02      	ldr	r3, [pc, #8]	@ (8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e44:	e006      	b.n	8004e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e46:	bf00      	nop
 8004e48:	40003800 	.word	0x40003800
 8004e4c:	40003400 	.word	0x40003400
 8004e50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fdc0 	bl	8004a04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e84:	e000      	b.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e86:	bf00      	nop
}
 8004e88:	bf00      	nop
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	1c99      	adds	r1, r3, #2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6251      	str	r1, [r2, #36]	@ 0x24
 8004eb6:	881a      	ldrh	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d113      	bne.n	8004efe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ee4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ffc9 	bl	8004e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	1c99      	adds	r1, r3, #2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6251      	str	r1, [r2, #36]	@ 0x24
 8004f1a:	8819      	ldrh	r1, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	@ (8004f98 <I2SEx_TxISR_I2SExt+0x90>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <I2SEx_TxISR_I2SExt+0x22>
 8004f26:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <I2SEx_TxISR_I2SExt+0x94>)
 8004f28:	e001      	b.n	8004f2e <I2SEx_TxISR_I2SExt+0x26>
 8004f2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f2e:	460a      	mov	r2, r1
 8004f30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d121      	bne.n	8004f8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a12      	ldr	r2, [pc, #72]	@ (8004f98 <I2SEx_TxISR_I2SExt+0x90>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <I2SEx_TxISR_I2SExt+0x50>
 8004f54:	4b11      	ldr	r3, [pc, #68]	@ (8004f9c <I2SEx_TxISR_I2SExt+0x94>)
 8004f56:	e001      	b.n	8004f5c <I2SEx_TxISR_I2SExt+0x54>
 8004f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	490d      	ldr	r1, [pc, #52]	@ (8004f98 <I2SEx_TxISR_I2SExt+0x90>)
 8004f64:	428b      	cmp	r3, r1
 8004f66:	d101      	bne.n	8004f6c <I2SEx_TxISR_I2SExt+0x64>
 8004f68:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <I2SEx_TxISR_I2SExt+0x94>)
 8004f6a:	e001      	b.n	8004f70 <I2SEx_TxISR_I2SExt+0x68>
 8004f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff81 	bl	8004e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40003800 	.word	0x40003800
 8004f9c:	40003400 	.word	0x40003400

08004fa0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68d8      	ldr	r0, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	1c99      	adds	r1, r3, #2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004fb8:	b282      	uxth	r2, r0
 8004fba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d113      	bne.n	8004ffc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fe2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff ff4a 	bl	8004e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a20      	ldr	r2, [pc, #128]	@ (8005094 <I2SEx_RxISR_I2SExt+0x90>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <I2SEx_RxISR_I2SExt+0x16>
 8005016:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <I2SEx_RxISR_I2SExt+0x94>)
 8005018:	e001      	b.n	800501e <I2SEx_RxISR_I2SExt+0x1a>
 800501a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800501e:	68d8      	ldr	r0, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	1c99      	adds	r1, r3, #2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800502a:	b282      	uxth	r2, r0
 800502c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d121      	bne.n	800508a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a12      	ldr	r2, [pc, #72]	@ (8005094 <I2SEx_RxISR_I2SExt+0x90>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <I2SEx_RxISR_I2SExt+0x50>
 8005050:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <I2SEx_RxISR_I2SExt+0x94>)
 8005052:	e001      	b.n	8005058 <I2SEx_RxISR_I2SExt+0x54>
 8005054:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	490d      	ldr	r1, [pc, #52]	@ (8005094 <I2SEx_RxISR_I2SExt+0x90>)
 8005060:	428b      	cmp	r3, r1
 8005062:	d101      	bne.n	8005068 <I2SEx_RxISR_I2SExt+0x64>
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <I2SEx_RxISR_I2SExt+0x94>)
 8005066:	e001      	b.n	800506c <I2SEx_RxISR_I2SExt+0x68>
 8005068:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800506c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005070:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff03 	bl	8004e90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40003800 	.word	0x40003800
 8005098:	40003400 	.word	0x40003400

0800509c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e267      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d075      	beq.n	80051a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050ba:	4b88      	ldr	r3, [pc, #544]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d00c      	beq.n	80050e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c6:	4b85      	ldr	r3, [pc, #532]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d112      	bne.n	80050f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d2:	4b82      	ldr	r3, [pc, #520]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050de:	d10b      	bne.n	80050f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	4b7e      	ldr	r3, [pc, #504]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d05b      	beq.n	80051a4 <HAL_RCC_OscConfig+0x108>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d157      	bne.n	80051a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e242      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005100:	d106      	bne.n	8005110 <HAL_RCC_OscConfig+0x74>
 8005102:	4b76      	ldr	r3, [pc, #472]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a75      	ldr	r2, [pc, #468]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e01d      	b.n	800514c <HAL_RCC_OscConfig+0xb0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0x98>
 800511a:	4b70      	ldr	r3, [pc, #448]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6f      	ldr	r2, [pc, #444]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b6d      	ldr	r3, [pc, #436]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a6c      	ldr	r2, [pc, #432]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e00b      	b.n	800514c <HAL_RCC_OscConfig+0xb0>
 8005134:	4b69      	ldr	r3, [pc, #420]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a68      	ldr	r2, [pc, #416]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 800513a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	4b66      	ldr	r3, [pc, #408]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a65      	ldr	r2, [pc, #404]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800514a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fe f886 	bl	8003264 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fe f882 	bl	8003264 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	@ 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e207      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	4b5b      	ldr	r3, [pc, #364]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0xc0>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fe f872 	bl	8003264 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fe f86e 	bl	8003264 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	@ 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e1f3      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	4b51      	ldr	r3, [pc, #324]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0xe8>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d063      	beq.n	800527a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051b2:	4b4a      	ldr	r3, [pc, #296]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051be:	4b47      	ldr	r3, [pc, #284]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d11c      	bne.n	8005204 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ca:	4b44      	ldr	r3, [pc, #272]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d116      	bne.n	8005204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d6:	4b41      	ldr	r3, [pc, #260]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RCC_OscConfig+0x152>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e1c7      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ee:	4b3b      	ldr	r3, [pc, #236]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4937      	ldr	r1, [pc, #220]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	e03a      	b.n	800527a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800520c:	4b34      	ldr	r3, [pc, #208]	@ (80052e0 <HAL_RCC_OscConfig+0x244>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fe f827 	bl	8003264 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521a:	f7fe f823 	bl	8003264 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e1a8      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	4b2b      	ldr	r3, [pc, #172]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005238:	4b28      	ldr	r3, [pc, #160]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4925      	ldr	r1, [pc, #148]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]
 800524c:	e015      	b.n	800527a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524e:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <HAL_RCC_OscConfig+0x244>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fe f806 	bl	8003264 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525c:	f7fe f802 	bl	8003264 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e187      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d036      	beq.n	80052f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d016      	beq.n	80052bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528e:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <HAL_RCC_OscConfig+0x248>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fd ffe6 	bl	8003264 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529c:	f7fd ffe2 	bl	8003264 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e167      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <HAL_RCC_OscConfig+0x240>)
 80052b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x200>
 80052ba:	e01b      	b.n	80052f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052bc:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <HAL_RCC_OscConfig+0x248>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c2:	f7fd ffcf 	bl	8003264 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	e00e      	b.n	80052e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ca:	f7fd ffcb 	bl	8003264 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d907      	bls.n	80052e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e150      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
 80052dc:	40023800 	.word	0x40023800
 80052e0:	42470000 	.word	0x42470000
 80052e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e8:	4b88      	ldr	r3, [pc, #544]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80052ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1ea      	bne.n	80052ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8097 	beq.w	8005430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005306:	4b81      	ldr	r3, [pc, #516]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	4b7d      	ldr	r3, [pc, #500]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	4a7c      	ldr	r2, [pc, #496]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 800531c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005320:	6413      	str	r3, [r2, #64]	@ 0x40
 8005322:	4b7a      	ldr	r3, [pc, #488]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005332:	4b77      	ldr	r3, [pc, #476]	@ (8005510 <HAL_RCC_OscConfig+0x474>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d118      	bne.n	8005370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800533e:	4b74      	ldr	r3, [pc, #464]	@ (8005510 <HAL_RCC_OscConfig+0x474>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a73      	ldr	r2, [pc, #460]	@ (8005510 <HAL_RCC_OscConfig+0x474>)
 8005344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534a:	f7fd ff8b 	bl	8003264 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005352:	f7fd ff87 	bl	8003264 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e10c      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005364:	4b6a      	ldr	r3, [pc, #424]	@ (8005510 <HAL_RCC_OscConfig+0x474>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d106      	bne.n	8005386 <HAL_RCC_OscConfig+0x2ea>
 8005378:	4b64      	ldr	r3, [pc, #400]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537c:	4a63      	ldr	r2, [pc, #396]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	6713      	str	r3, [r2, #112]	@ 0x70
 8005384:	e01c      	b.n	80053c0 <HAL_RCC_OscConfig+0x324>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d10c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x30c>
 800538e:	4b5f      	ldr	r3, [pc, #380]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005392:	4a5e      	ldr	r2, [pc, #376]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005394:	f043 0304 	orr.w	r3, r3, #4
 8005398:	6713      	str	r3, [r2, #112]	@ 0x70
 800539a:	4b5c      	ldr	r3, [pc, #368]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539e:	4a5b      	ldr	r2, [pc, #364]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a6:	e00b      	b.n	80053c0 <HAL_RCC_OscConfig+0x324>
 80053a8:	4b58      	ldr	r3, [pc, #352]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ac:	4a57      	ldr	r2, [pc, #348]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b4:	4b55      	ldr	r3, [pc, #340]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b8:	4a54      	ldr	r2, [pc, #336]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80053ba:	f023 0304 	bic.w	r3, r3, #4
 80053be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c8:	f7fd ff4c 	bl	8003264 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d0:	f7fd ff48 	bl	8003264 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0cb      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e6:	4b49      	ldr	r3, [pc, #292]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ee      	beq.n	80053d0 <HAL_RCC_OscConfig+0x334>
 80053f2:	e014      	b.n	800541e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f4:	f7fd ff36 	bl	8003264 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fc:	f7fd ff32 	bl	8003264 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0b5      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005412:	4b3e      	ldr	r3, [pc, #248]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ee      	bne.n	80053fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d105      	bne.n	8005430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005424:	4b39      	ldr	r3, [pc, #228]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	4a38      	ldr	r2, [pc, #224]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 800542a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800542e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80a1 	beq.w	800557c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800543a:	4b34      	ldr	r3, [pc, #208]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b08      	cmp	r3, #8
 8005444:	d05c      	beq.n	8005500 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d141      	bne.n	80054d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b31      	ldr	r3, [pc, #196]	@ (8005514 <HAL_RCC_OscConfig+0x478>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fd ff06 	bl	8003264 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fd ff02 	bl	8003264 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e087      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	4b27      	ldr	r3, [pc, #156]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	3b01      	subs	r3, #1
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	491b      	ldr	r1, [pc, #108]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005514 <HAL_RCC_OscConfig+0x478>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054aa:	f7fd fedb 	bl	8003264 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b2:	f7fd fed7 	bl	8003264 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e05c      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c4:	4b11      	ldr	r3, [pc, #68]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f0      	beq.n	80054b2 <HAL_RCC_OscConfig+0x416>
 80054d0:	e054      	b.n	800557c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d2:	4b10      	ldr	r3, [pc, #64]	@ (8005514 <HAL_RCC_OscConfig+0x478>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d8:	f7fd fec4 	bl	8003264 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e0:	f7fd fec0 	bl	8003264 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e045      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_RCC_OscConfig+0x470>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x444>
 80054fe:	e03d      	b.n	800557c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d107      	bne.n	8005518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e038      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
 800550c:	40023800 	.word	0x40023800
 8005510:	40007000 	.word	0x40007000
 8005514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005518:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <HAL_RCC_OscConfig+0x4ec>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d028      	beq.n	8005578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d121      	bne.n	8005578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d11a      	bne.n	8005578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800554e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005550:	4293      	cmp	r3, r2
 8005552:	d111      	bne.n	8005578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	3b01      	subs	r3, #1
 8005562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d107      	bne.n	8005578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800

0800558c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0cc      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a0:	4b68      	ldr	r3, [pc, #416]	@ (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d90c      	bls.n	80055c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ae:	4b65      	ldr	r3, [pc, #404]	@ (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b63      	ldr	r3, [pc, #396]	@ (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0b8      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d020      	beq.n	8005616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055e0:	4b59      	ldr	r3, [pc, #356]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4a58      	ldr	r2, [pc, #352]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f8:	4b53      	ldr	r3, [pc, #332]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a52      	ldr	r2, [pc, #328]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005604:	4b50      	ldr	r3, [pc, #320]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	494d      	ldr	r1, [pc, #308]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d044      	beq.n	80056ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d107      	bne.n	800563a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562a:	4b47      	ldr	r3, [pc, #284]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d119      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e07f      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d003      	beq.n	800564a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005646:	2b03      	cmp	r3, #3
 8005648:	d107      	bne.n	800565a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564a:	4b3f      	ldr	r3, [pc, #252]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e06f      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565a:	4b3b      	ldr	r3, [pc, #236]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e067      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800566a:	4b37      	ldr	r3, [pc, #220]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f023 0203 	bic.w	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4934      	ldr	r1, [pc, #208]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	4313      	orrs	r3, r2
 800567a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800567c:	f7fd fdf2 	bl	8003264 <HAL_GetTick>
 8005680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	e00a      	b.n	800569a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005684:	f7fd fdee 	bl	8003264 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e04f      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	4b2b      	ldr	r3, [pc, #172]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 020c 	and.w	r2, r3, #12
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d1eb      	bne.n	8005684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ac:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d20c      	bcs.n	80056d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b22      	ldr	r3, [pc, #136]	@ (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b20      	ldr	r3, [pc, #128]	@ (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e032      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e0:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4916      	ldr	r1, [pc, #88]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056fe:	4b12      	ldr	r3, [pc, #72]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	490e      	ldr	r1, [pc, #56]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005712:	f000 f821 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8005716:	4602      	mov	r2, r0
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	490a      	ldr	r1, [pc, #40]	@ (800574c <HAL_RCC_ClockConfig+0x1c0>)
 8005724:	5ccb      	ldrb	r3, [r1, r3]
 8005726:	fa22 f303 	lsr.w	r3, r2, r3
 800572a:	4a09      	ldr	r2, [pc, #36]	@ (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800572c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800572e:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <HAL_RCC_ClockConfig+0x1c8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7fd fd52 	bl	80031dc <HAL_InitTick>

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40023c00 	.word	0x40023c00
 8005748:	40023800 	.word	0x40023800
 800574c:	0800e684 	.word	0x0800e684
 8005750:	20000000 	.word	0x20000000
 8005754:	20000004 	.word	0x20000004

08005758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800575c:	b094      	sub	sp, #80	@ 0x50
 800575e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005770:	4b79      	ldr	r3, [pc, #484]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x200>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 030c 	and.w	r3, r3, #12
 8005778:	2b08      	cmp	r3, #8
 800577a:	d00d      	beq.n	8005798 <HAL_RCC_GetSysClockFreq+0x40>
 800577c:	2b08      	cmp	r3, #8
 800577e:	f200 80e1 	bhi.w	8005944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x34>
 8005786:	2b04      	cmp	r3, #4
 8005788:	d003      	beq.n	8005792 <HAL_RCC_GetSysClockFreq+0x3a>
 800578a:	e0db      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800578c:	4b73      	ldr	r3, [pc, #460]	@ (800595c <HAL_RCC_GetSysClockFreq+0x204>)
 800578e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005790:	e0db      	b.n	800594a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005792:	4b73      	ldr	r3, [pc, #460]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x208>)
 8005794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005796:	e0d8      	b.n	800594a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005798:	4b6f      	ldr	r3, [pc, #444]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x200>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d063      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x200>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	099b      	lsrs	r3, r3, #6
 80057b4:	2200      	movs	r2, #0
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057c2:	2300      	movs	r3, #0
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057ca:	4622      	mov	r2, r4
 80057cc:	462b      	mov	r3, r5
 80057ce:	f04f 0000 	mov.w	r0, #0
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	0159      	lsls	r1, r3, #5
 80057d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057dc:	0150      	lsls	r0, r2, #5
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4621      	mov	r1, r4
 80057e4:	1a51      	subs	r1, r2, r1
 80057e6:	6139      	str	r1, [r7, #16]
 80057e8:	4629      	mov	r1, r5
 80057ea:	eb63 0301 	sbc.w	r3, r3, r1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057fc:	4659      	mov	r1, fp
 80057fe:	018b      	lsls	r3, r1, #6
 8005800:	4651      	mov	r1, sl
 8005802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005806:	4651      	mov	r1, sl
 8005808:	018a      	lsls	r2, r1, #6
 800580a:	4651      	mov	r1, sl
 800580c:	ebb2 0801 	subs.w	r8, r2, r1
 8005810:	4659      	mov	r1, fp
 8005812:	eb63 0901 	sbc.w	r9, r3, r1
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582a:	4690      	mov	r8, r2
 800582c:	4699      	mov	r9, r3
 800582e:	4623      	mov	r3, r4
 8005830:	eb18 0303 	adds.w	r3, r8, r3
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	462b      	mov	r3, r5
 8005838:	eb49 0303 	adc.w	r3, r9, r3
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800584a:	4629      	mov	r1, r5
 800584c:	024b      	lsls	r3, r1, #9
 800584e:	4621      	mov	r1, r4
 8005850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005854:	4621      	mov	r1, r4
 8005856:	024a      	lsls	r2, r1, #9
 8005858:	4610      	mov	r0, r2
 800585a:	4619      	mov	r1, r3
 800585c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585e:	2200      	movs	r2, #0
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005868:	f7fb f908 	bl	8000a7c <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4613      	mov	r3, r2
 8005872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005874:	e058      	b.n	8005928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005876:	4b38      	ldr	r3, [pc, #224]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x200>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	099b      	lsrs	r3, r3, #6
 800587c:	2200      	movs	r2, #0
 800587e:	4618      	mov	r0, r3
 8005880:	4611      	mov	r1, r2
 8005882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	2300      	movs	r3, #0
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24
 800588c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f04f 0100 	mov.w	r1, #0
 800589c:	0159      	lsls	r1, r3, #5
 800589e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058a2:	0150      	lsls	r0, r2, #5
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4641      	mov	r1, r8
 80058aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80058ae:	4649      	mov	r1, r9
 80058b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058c8:	ebb2 040a 	subs.w	r4, r2, sl
 80058cc:	eb63 050b 	sbc.w	r5, r3, fp
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	00eb      	lsls	r3, r5, #3
 80058da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058de:	00e2      	lsls	r2, r4, #3
 80058e0:	4614      	mov	r4, r2
 80058e2:	461d      	mov	r5, r3
 80058e4:	4643      	mov	r3, r8
 80058e6:	18e3      	adds	r3, r4, r3
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	464b      	mov	r3, r9
 80058ec:	eb45 0303 	adc.w	r3, r5, r3
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058fe:	4629      	mov	r1, r5
 8005900:	028b      	lsls	r3, r1, #10
 8005902:	4621      	mov	r1, r4
 8005904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005908:	4621      	mov	r1, r4
 800590a:	028a      	lsls	r2, r1, #10
 800590c:	4610      	mov	r0, r2
 800590e:	4619      	mov	r1, r3
 8005910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005912:	2200      	movs	r2, #0
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	61fa      	str	r2, [r7, #28]
 8005918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800591c:	f7fb f8ae 	bl	8000a7c <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4613      	mov	r3, r2
 8005926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005928:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x200>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	0c1b      	lsrs	r3, r3, #16
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	3301      	adds	r3, #1
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800593a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005942:	e002      	b.n	800594a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005944:	4b05      	ldr	r3, [pc, #20]	@ (800595c <HAL_RCC_GetSysClockFreq+0x204>)
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800594a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800594c:	4618      	mov	r0, r3
 800594e:	3750      	adds	r7, #80	@ 0x50
 8005950:	46bd      	mov	sp, r7
 8005952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005956:	bf00      	nop
 8005958:	40023800 	.word	0x40023800
 800595c:	00f42400 	.word	0x00f42400
 8005960:	007a1200 	.word	0x007a1200

08005964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005968:	4b03      	ldr	r3, [pc, #12]	@ (8005978 <HAL_RCC_GetHCLKFreq+0x14>)
 800596a:	681b      	ldr	r3, [r3, #0]
}
 800596c:	4618      	mov	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000000 	.word	0x20000000

0800597c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005980:	f7ff fff0 	bl	8005964 <HAL_RCC_GetHCLKFreq>
 8005984:	4602      	mov	r2, r0
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	0a9b      	lsrs	r3, r3, #10
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	4903      	ldr	r1, [pc, #12]	@ (80059a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005992:	5ccb      	ldrb	r3, [r1, r3]
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40023800 	.word	0x40023800
 80059a0:	0800e694 	.word	0x0800e694

080059a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059a8:	f7ff ffdc 	bl	8005964 <HAL_RCC_GetHCLKFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	0b5b      	lsrs	r3, r3, #13
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	4903      	ldr	r1, [pc, #12]	@ (80059c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ba:	5ccb      	ldrb	r3, [r1, r3]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40023800 	.word	0x40023800
 80059c8:	0800e694 	.word	0x0800e694

080059cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d035      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059f4:	4b67      	ldr	r3, [pc, #412]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059fa:	f7fd fc33 	bl	8003264 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a02:	f7fd fc2f 	bl	8003264 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0ba      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a14:	4b60      	ldr	r3, [pc, #384]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f0      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	019a      	lsls	r2, r3, #6
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	071b      	lsls	r3, r3, #28
 8005a2c:	495a      	ldr	r1, [pc, #360]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a34:	4b57      	ldr	r3, [pc, #348]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a3a:	f7fd fc13 	bl	8003264 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a42:	f7fd fc0f 	bl	8003264 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e09a      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a54:	4b50      	ldr	r3, [pc, #320]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8083 	beq.w	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	4b49      	ldr	r3, [pc, #292]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	4a48      	ldr	r2, [pc, #288]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a7e:	4b46      	ldr	r3, [pc, #280]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a8a:	4b44      	ldr	r3, [pc, #272]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a43      	ldr	r2, [pc, #268]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a96:	f7fd fbe5 	bl	8003264 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9e:	f7fd fbe1 	bl	8003264 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e06c      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005abc:	4b36      	ldr	r3, [pc, #216]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d02f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d028      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ada:	4b2f      	ldr	r3, [pc, #188]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aea:	4b2d      	ldr	r3, [pc, #180]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005af0:	4a29      	ldr	r2, [pc, #164]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005af6:	4b28      	ldr	r3, [pc, #160]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d114      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b02:	f7fd fbaf 	bl	8003264 <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b08:	e00a      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fd fbab 	bl	8003264 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e034      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b20:	4b1d      	ldr	r3, [pc, #116]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ee      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b38:	d10d      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b3a:	4b17      	ldr	r3, [pc, #92]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4e:	4912      	ldr	r1, [pc, #72]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	608b      	str	r3, [r1, #8]
 8005b54:	e005      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b56:	4b10      	ldr	r3, [pc, #64]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b5c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b60:	6093      	str	r3, [r2, #8]
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6e:	490a      	ldr	r1, [pc, #40]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7c1a      	ldrb	r2, [r3, #16]
 8005b84:	4b07      	ldr	r3, [pc, #28]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b86:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	42470068 	.word	0x42470068
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	40007000 	.word	0x40007000
 8005ba0:	42470e40 	.word	0x42470e40
 8005ba4:	424711e0 	.word	0x424711e0

08005ba8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d13f      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005bc6:	4b24      	ldr	r3, [pc, #144]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bce:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d006      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bdc:	d12f      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bde:	4b1f      	ldr	r3, [pc, #124]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005be0:	617b      	str	r3, [r7, #20]
          break;
 8005be2:	e02f      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005be4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bf0:	d108      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bf2:	4b19      	ldr	r3, [pc, #100]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bfa:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	e007      	b.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c04:	4b14      	ldr	r3, [pc, #80]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c0c:	4a15      	ldr	r2, [pc, #84]	@ (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c12:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c14:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c1a:	099b      	lsrs	r3, r3, #6
 8005c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c28:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c2e:	0f1b      	lsrs	r3, r3, #28
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	617b      	str	r3, [r7, #20]
          break;
 8005c3c:	e002      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
          break;
 8005c42:	bf00      	nop
        }
      }
      break;
 8005c44:	e000      	b.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005c46:	bf00      	nop
    }
  }
  return frequency;
 8005c48:	697b      	ldr	r3, [r7, #20]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	00bb8000 	.word	0x00bb8000
 8005c60:	007a1200 	.word	0x007a1200
 8005c64:	00f42400 	.word	0x00f42400

08005c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e07b      	b.n	8005d72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c8a:	d009      	beq.n	8005ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	61da      	str	r2, [r3, #28]
 8005c92:	e005      	b.n	8005ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fd f8a0 	bl	8002e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d24:	ea42 0103 	orr.w	r1, r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	f003 0104 	and.w	r1, r3, #4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	f003 0210 	and.w	r2, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b088      	sub	sp, #32
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d8a:	f7fd fa6b 	bl	8003264 <HAL_GetTick>
 8005d8e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e12a      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_SPI_Transmit+0x36>
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e122      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_SPI_Transmit+0x48>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e11b      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e10:	d10f      	bne.n	8005e32 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d007      	beq.n	8005e50 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e58:	d152      	bne.n	8005f00 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_SPI_Transmit+0xee>
 8005e62:	8b7b      	ldrh	r3, [r7, #26]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d145      	bne.n	8005ef4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	881a      	ldrh	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	1c9a      	adds	r2, r3, #2
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e8c:	e032      	b.n	8005ef4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d112      	bne.n	8005ec2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ec0:	e018      	b.n	8005ef4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec2:	f7fd f9cf 	bl	8003264 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d803      	bhi.n	8005eda <HAL_SPI_Transmit+0x160>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Transmit+0x166>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d109      	bne.n	8005ef4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e082      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1c7      	bne.n	8005e8e <HAL_SPI_Transmit+0x114>
 8005efe:	e053      	b.n	8005fa8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_SPI_Transmit+0x194>
 8005f08:	8b7b      	ldrh	r3, [r7, #26]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d147      	bne.n	8005f9e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f34:	e033      	b.n	8005f9e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d113      	bne.n	8005f6c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f6a:	e018      	b.n	8005f9e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6c:	f7fd f97a 	bl	8003264 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d803      	bhi.n	8005f84 <HAL_SPI_Transmit+0x20a>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d102      	bne.n	8005f8a <HAL_SPI_Transmit+0x210>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e02d      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1c6      	bne.n	8005f36 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fa59 	bl	8006464 <SPI_EndRxTxTransaction>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
  }
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	@ 0x28
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006010:	2301      	movs	r3, #1
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006014:	f7fd f926 	bl	8003264 <HAL_GetTick>
 8006018:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006020:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006028:	887b      	ldrh	r3, [r7, #2]
 800602a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800602c:	7ffb      	ldrb	r3, [r7, #31]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d00c      	beq.n	800604c <HAL_SPI_TransmitReceive+0x4a>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006038:	d106      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x46>
 8006042:	7ffb      	ldrb	r3, [r7, #31]
 8006044:	2b04      	cmp	r3, #4
 8006046:	d001      	beq.n	800604c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
 800604a:	e17f      	b.n	800634c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_SPI_TransmitReceive+0x5c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_SPI_TransmitReceive+0x5c>
 8006058:	887b      	ldrh	r3, [r7, #2]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e174      	b.n	800634c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x6e>
 800606c:	2302      	movs	r3, #2
 800606e:	e16d      	b.n	800634c <HAL_SPI_TransmitReceive+0x34a>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b04      	cmp	r3, #4
 8006082:	d003      	beq.n	800608c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2205      	movs	r2, #5
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	887a      	ldrh	r2, [r7, #2]
 80060a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	887a      	ldrh	r2, [r7, #2]
 80060ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	887a      	ldrh	r2, [r7, #2]
 80060b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	d007      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e8:	d17e      	bne.n	80061e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_SPI_TransmitReceive+0xf6>
 80060f2:	8afb      	ldrh	r3, [r7, #22]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d16c      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fc:	881a      	ldrh	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800611c:	e059      	b.n	80061d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b02      	cmp	r3, #2
 800612a:	d11b      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x162>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d016      	beq.n	8006164 <HAL_SPI_TransmitReceive+0x162>
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	2b01      	cmp	r3, #1
 800613a:	d113      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006140:	881a      	ldrh	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b01      	cmp	r3, #1
 8006170:	d119      	bne.n	80061a6 <HAL_SPI_TransmitReceive+0x1a4>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d014      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006186:	b292      	uxth	r2, r2
 8006188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618e:	1c9a      	adds	r2, r3, #2
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061a2:	2301      	movs	r3, #1
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061a6:	f7fd f85d 	bl	8003264 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d80d      	bhi.n	80061d2 <HAL_SPI_TransmitReceive+0x1d0>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d009      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0bc      	b.n	800634c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1a0      	bne.n	800611e <HAL_SPI_TransmitReceive+0x11c>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d19b      	bne.n	800611e <HAL_SPI_TransmitReceive+0x11c>
 80061e6:	e082      	b.n	80062ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_SPI_TransmitReceive+0x1f4>
 80061f0:	8afb      	ldrh	r3, [r7, #22]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d171      	bne.n	80062da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800621c:	e05d      	b.n	80062da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b02      	cmp	r3, #2
 800622a:	d11c      	bne.n	8006266 <HAL_SPI_TransmitReceive+0x264>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d017      	beq.n	8006266 <HAL_SPI_TransmitReceive+0x264>
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	2b01      	cmp	r3, #1
 800623a:	d114      	bne.n	8006266 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d119      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x2a6>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d014      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062a4:	2301      	movs	r3, #1
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062a8:	f7fc ffdc 	bl	8003264 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d803      	bhi.n	80062c0 <HAL_SPI_TransmitReceive+0x2be>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d102      	bne.n	80062c6 <HAL_SPI_TransmitReceive+0x2c4>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e038      	b.n	800634c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d19c      	bne.n	800621e <HAL_SPI_TransmitReceive+0x21c>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d197      	bne.n	800621e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f8b6 	bl	8006464 <SPI_EndRxTxTransaction>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d008      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e01d      	b.n	800634c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800634a:	2300      	movs	r3, #0
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3728      	adds	r7, #40	@ 0x28
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006364:	f7fc ff7e 	bl	8003264 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	4413      	add	r3, r2
 8006372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006374:	f7fc ff76 	bl	8003264 <HAL_GetTick>
 8006378:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800637a:	4b39      	ldr	r3, [pc, #228]	@ (8006460 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	015b      	lsls	r3, r3, #5
 8006380:	0d1b      	lsrs	r3, r3, #20
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	fb02 f303 	mul.w	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800638a:	e055      	b.n	8006438 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d051      	beq.n	8006438 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006394:	f7fc ff66 	bl	8003264 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d902      	bls.n	80063aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d13d      	bne.n	8006426 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c2:	d111      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063cc:	d004      	beq.n	80063d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d107      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f0:	d10f      	bne.n	8006412 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006410:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e018      	b.n	8006458 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e002      	b.n	8006438 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	3b01      	subs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4013      	ands	r3, r2
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	429a      	cmp	r2, r3
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	429a      	cmp	r2, r3
 8006454:	d19a      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000000 	.word	0x20000000

08006464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2201      	movs	r2, #1
 8006478:	2102      	movs	r1, #2
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff ff6a 	bl	8006354 <SPI_WaitFlagStateUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e032      	b.n	80064fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006496:	4b1b      	ldr	r3, [pc, #108]	@ (8006504 <SPI_EndRxTxTransaction+0xa0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1b      	ldr	r2, [pc, #108]	@ (8006508 <SPI_EndRxTxTransaction+0xa4>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	0d5b      	lsrs	r3, r3, #21
 80064a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b4:	d112      	bne.n	80064dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2200      	movs	r2, #0
 80064be:	2180      	movs	r1, #128	@ 0x80
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff ff47 	bl	8006354 <SPI_WaitFlagStateUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d016      	beq.n	80064fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e00f      	b.n	80064fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f2:	2b80      	cmp	r3, #128	@ 0x80
 80064f4:	d0f2      	beq.n	80064dc <SPI_EndRxTxTransaction+0x78>
 80064f6:	e000      	b.n	80064fa <SPI_EndRxTxTransaction+0x96>
        break;
 80064f8:	bf00      	nop
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000000 	.word	0x20000000
 8006508:	165e9f81 	.word	0x165e9f81

0800650c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e042      	b.n	80065a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fc fccc 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2224      	movs	r2, #36	@ 0x24
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800654e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f973 	bl	800683c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d175      	bne.n	80066b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_UART_Transmit+0x2c>
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e06e      	b.n	80066ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2221      	movs	r2, #33	@ 0x21
 80065e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ea:	f7fc fe3b 	bl	8003264 <HAL_GetTick>
 80065ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006604:	d108      	bne.n	8006618 <HAL_UART_Transmit+0x6c>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	e003      	b.n	8006620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006620:	e02e      	b.n	8006680 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	@ 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f848 	bl	80066c2 <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e03a      	b.n	80066ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3302      	adds	r3, #2
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e007      	b.n	8006672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	3301      	adds	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1cb      	bne.n	8006622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	2140      	movs	r1, #64	@ 0x40
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f814 	bl	80066c2 <UART_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b086      	sub	sp, #24
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d2:	e03b      	b.n	800674c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d037      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066dc:	f7fc fdc2 	bl	8003264 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	6a3a      	ldr	r2, [r7, #32]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d302      	bcc.n	80066f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e03a      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d023      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b80      	cmp	r3, #128	@ 0x80
 8006708:	d020      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0x8a>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b40      	cmp	r3, #64	@ 0x40
 800670e:	d01d      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b08      	cmp	r3, #8
 800671c:	d116      	bne.n	800674c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f81d 	bl	8006774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2208      	movs	r2, #8
 800673e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e00f      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	429a      	cmp	r2, r3
 8006768:	d0b4      	beq.n	80066d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b095      	sub	sp, #84	@ 0x54
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800679c:	643a      	str	r2, [r7, #64]	@ 0x40
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3314      	adds	r3, #20
 80067ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d119      	bne.n	8006820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	647b      	str	r3, [r7, #68]	@ 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800680c:	61ba      	str	r2, [r7, #24]
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800682e:	bf00      	nop
 8006830:	3754      	adds	r7, #84	@ 0x54
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800683c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006840:	b0c0      	sub	sp, #256	@ 0x100
 8006842:	af00      	add	r7, sp, #0
 8006844:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006858:	68d9      	ldr	r1, [r3, #12]
 800685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	ea40 0301 	orr.w	r3, r0, r1
 8006864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	431a      	orrs	r2, r3
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	431a      	orrs	r2, r3
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006894:	f021 010c 	bic.w	r1, r1, #12
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068a2:	430b      	orrs	r3, r1
 80068a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b6:	6999      	ldr	r1, [r3, #24]
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	ea40 0301 	orr.w	r3, r0, r1
 80068c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006b08 <UART_SetConfig+0x2cc>)
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d005      	beq.n	80068dc <UART_SetConfig+0xa0>
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4b8d      	ldr	r3, [pc, #564]	@ (8006b0c <UART_SetConfig+0x2d0>)
 80068d8:	429a      	cmp	r2, r3
 80068da:	d104      	bne.n	80068e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068dc:	f7ff f862 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 80068e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80068e4:	e003      	b.n	80068ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068e6:	f7ff f849 	bl	800597c <HAL_RCC_GetPCLK1Freq>
 80068ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068f8:	f040 810c 	bne.w	8006b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006900:	2200      	movs	r2, #0
 8006902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006906:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800690a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800690e:	4622      	mov	r2, r4
 8006910:	462b      	mov	r3, r5
 8006912:	1891      	adds	r1, r2, r2
 8006914:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006916:	415b      	adcs	r3, r3
 8006918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800691a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800691e:	4621      	mov	r1, r4
 8006920:	eb12 0801 	adds.w	r8, r2, r1
 8006924:	4629      	mov	r1, r5
 8006926:	eb43 0901 	adc.w	r9, r3, r1
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800693a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800693e:	4690      	mov	r8, r2
 8006940:	4699      	mov	r9, r3
 8006942:	4623      	mov	r3, r4
 8006944:	eb18 0303 	adds.w	r3, r8, r3
 8006948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800694c:	462b      	mov	r3, r5
 800694e:	eb49 0303 	adc.w	r3, r9, r3
 8006952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006962:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800696a:	460b      	mov	r3, r1
 800696c:	18db      	adds	r3, r3, r3
 800696e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006970:	4613      	mov	r3, r2
 8006972:	eb42 0303 	adc.w	r3, r2, r3
 8006976:	657b      	str	r3, [r7, #84]	@ 0x54
 8006978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800697c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006980:	f7fa f87c 	bl	8000a7c <__aeabi_uldivmod>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4b61      	ldr	r3, [pc, #388]	@ (8006b10 <UART_SetConfig+0x2d4>)
 800698a:	fba3 2302 	umull	r2, r3, r3, r2
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	011c      	lsls	r4, r3, #4
 8006992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006996:	2200      	movs	r2, #0
 8006998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800699c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069a4:	4642      	mov	r2, r8
 80069a6:	464b      	mov	r3, r9
 80069a8:	1891      	adds	r1, r2, r2
 80069aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069ac:	415b      	adcs	r3, r3
 80069ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069b4:	4641      	mov	r1, r8
 80069b6:	eb12 0a01 	adds.w	sl, r2, r1
 80069ba:	4649      	mov	r1, r9
 80069bc:	eb43 0b01 	adc.w	fp, r3, r1
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069d4:	4692      	mov	sl, r2
 80069d6:	469b      	mov	fp, r3
 80069d8:	4643      	mov	r3, r8
 80069da:	eb1a 0303 	adds.w	r3, sl, r3
 80069de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069e2:	464b      	mov	r3, r9
 80069e4:	eb4b 0303 	adc.w	r3, fp, r3
 80069e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80069fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a00:	460b      	mov	r3, r1
 8006a02:	18db      	adds	r3, r3, r3
 8006a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a06:	4613      	mov	r3, r2
 8006a08:	eb42 0303 	adc.w	r3, r2, r3
 8006a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a16:	f7fa f831 	bl	8000a7c <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4b3b      	ldr	r3, [pc, #236]	@ (8006b10 <UART_SetConfig+0x2d4>)
 8006a22:	fba3 2301 	umull	r2, r3, r3, r1
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	2264      	movs	r2, #100	@ 0x64
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
 8006a2e:	1acb      	subs	r3, r1, r3
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a36:	4b36      	ldr	r3, [pc, #216]	@ (8006b10 <UART_SetConfig+0x2d4>)
 8006a38:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a44:	441c      	add	r4, r3
 8006a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	1891      	adds	r1, r2, r2
 8006a5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a60:	415b      	adcs	r3, r3
 8006a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a68:	4641      	mov	r1, r8
 8006a6a:	1851      	adds	r1, r2, r1
 8006a6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a6e:	4649      	mov	r1, r9
 8006a70:	414b      	adcs	r3, r1
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a80:	4659      	mov	r1, fp
 8006a82:	00cb      	lsls	r3, r1, #3
 8006a84:	4651      	mov	r1, sl
 8006a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	00ca      	lsls	r2, r1, #3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	4642      	mov	r2, r8
 8006a96:	189b      	adds	r3, r3, r2
 8006a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006abc:	460b      	mov	r3, r1
 8006abe:	18db      	adds	r3, r3, r3
 8006ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	eb42 0303 	adc.w	r3, r2, r3
 8006ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ad2:	f7f9 ffd3 	bl	8000a7c <__aeabi_uldivmod>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <UART_SetConfig+0x2d4>)
 8006adc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	2164      	movs	r1, #100	@ 0x64
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	3332      	adds	r3, #50	@ 0x32
 8006aee:	4a08      	ldr	r2, [pc, #32]	@ (8006b10 <UART_SetConfig+0x2d4>)
 8006af0:	fba2 2303 	umull	r2, r3, r2, r3
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	f003 0207 	and.w	r2, r3, #7
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4422      	add	r2, r4
 8006b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b04:	e106      	b.n	8006d14 <UART_SetConfig+0x4d8>
 8006b06:	bf00      	nop
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	40011400 	.word	0x40011400
 8006b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b26:	4642      	mov	r2, r8
 8006b28:	464b      	mov	r3, r9
 8006b2a:	1891      	adds	r1, r2, r2
 8006b2c:	6239      	str	r1, [r7, #32]
 8006b2e:	415b      	adcs	r3, r3
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b36:	4641      	mov	r1, r8
 8006b38:	1854      	adds	r4, r2, r1
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	eb43 0501 	adc.w	r5, r3, r1
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	00eb      	lsls	r3, r5, #3
 8006b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b4e:	00e2      	lsls	r2, r4, #3
 8006b50:	4614      	mov	r4, r2
 8006b52:	461d      	mov	r5, r3
 8006b54:	4643      	mov	r3, r8
 8006b56:	18e3      	adds	r3, r4, r3
 8006b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	eb45 0303 	adc.w	r3, r5, r3
 8006b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b82:	4629      	mov	r1, r5
 8006b84:	008b      	lsls	r3, r1, #2
 8006b86:	4621      	mov	r1, r4
 8006b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	008a      	lsls	r2, r1, #2
 8006b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b94:	f7f9 ff72 	bl	8000a7c <__aeabi_uldivmod>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4b60      	ldr	r3, [pc, #384]	@ (8006d20 <UART_SetConfig+0x4e4>)
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	011c      	lsls	r4, r3, #4
 8006ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	1891      	adds	r1, r2, r2
 8006bbe:	61b9      	str	r1, [r7, #24]
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bc8:	4641      	mov	r1, r8
 8006bca:	1851      	adds	r1, r2, r1
 8006bcc:	6139      	str	r1, [r7, #16]
 8006bce:	4649      	mov	r1, r9
 8006bd0:	414b      	adcs	r3, r1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006be0:	4659      	mov	r1, fp
 8006be2:	00cb      	lsls	r3, r1, #3
 8006be4:	4651      	mov	r1, sl
 8006be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bea:	4651      	mov	r1, sl
 8006bec:	00ca      	lsls	r2, r1, #3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	460a      	mov	r2, r1
 8006c00:	eb42 0303 	adc.w	r3, r2, r3
 8006c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c20:	4649      	mov	r1, r9
 8006c22:	008b      	lsls	r3, r1, #2
 8006c24:	4641      	mov	r1, r8
 8006c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	008a      	lsls	r2, r1, #2
 8006c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c32:	f7f9 ff23 	bl	8000a7c <__aeabi_uldivmod>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4b38      	ldr	r3, [pc, #224]	@ (8006d20 <UART_SetConfig+0x4e4>)
 8006c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2264      	movs	r2, #100	@ 0x64
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	1acb      	subs	r3, r1, r3
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	3332      	adds	r3, #50	@ 0x32
 8006c50:	4a33      	ldr	r2, [pc, #204]	@ (8006d20 <UART_SetConfig+0x4e4>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c5c:	441c      	add	r4, r3
 8006c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c62:	2200      	movs	r2, #0
 8006c64:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c66:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	1891      	adds	r1, r2, r2
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	415b      	adcs	r3, r3
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	1851      	adds	r1, r2, r1
 8006c80:	6039      	str	r1, [r7, #0]
 8006c82:	4649      	mov	r1, r9
 8006c84:	414b      	adcs	r3, r1
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c94:	4659      	mov	r1, fp
 8006c96:	00cb      	lsls	r3, r1, #3
 8006c98:	4651      	mov	r1, sl
 8006c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9e:	4651      	mov	r1, sl
 8006ca0:	00ca      	lsls	r2, r1, #3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4642      	mov	r2, r8
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cae:	464b      	mov	r3, r9
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	eb42 0303 	adc.w	r3, r2, r3
 8006cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	008b      	lsls	r3, r1, #2
 8006cd4:	4641      	mov	r1, r8
 8006cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cda:	4641      	mov	r1, r8
 8006cdc:	008a      	lsls	r2, r1, #2
 8006cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ce2:	f7f9 fecb 	bl	8000a7c <__aeabi_uldivmod>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <UART_SetConfig+0x4e4>)
 8006cec:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	2164      	movs	r1, #100	@ 0x64
 8006cf4:	fb01 f303 	mul.w	r3, r1, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	3332      	adds	r3, #50	@ 0x32
 8006cfe:	4a08      	ldr	r2, [pc, #32]	@ (8006d20 <UART_SetConfig+0x4e4>)
 8006d00:	fba2 2303 	umull	r2, r3, r2, r3
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4422      	add	r2, r4
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d20:	51eb851f 	.word	0x51eb851f

08006d24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006d28:	4904      	ldr	r1, [pc, #16]	@ (8006d3c <MX_FATFS_Init+0x18>)
 8006d2a:	4805      	ldr	r0, [pc, #20]	@ (8006d40 <MX_FATFS_Init+0x1c>)
 8006d2c:	f000 fd88 	bl	8007840 <FATFS_LinkDriver>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	4b03      	ldr	r3, [pc, #12]	@ (8006d44 <MX_FATFS_Init+0x20>)
 8006d36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006d38:	bf00      	nop
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20001ef8 	.word	0x20001ef8
 8006d40:	2000000c 	.word	0x2000000c
 8006d44:	20001ef4 	.word	0x20001ef4

08006d48 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;

	return USER_SPI_initialize(pdrv);
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f9d3 	bl	8007100 <USER_SPI_initialize>
 8006d5a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fab1 	bl	80072d8 <USER_SPI_status>
 8006d76:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;

	return USER_SPI_read(pdrv, buff, sector, count);
 8006d90:	7bf8      	ldrb	r0, [r7, #15]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	f000 fab4 	bl	8007304 <USER_SPI_read>
 8006d9c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	4603      	mov	r3, r0
 8006db4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff,  sector, count);
 8006db6:	7bf8      	ldrb	r0, [r7, #15]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	f000 fb07 	bl	80073d0 <USER_SPI_write>
 8006dc2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	603a      	str	r2, [r7, #0]
 8006dd6:	71fb      	strb	r3, [r7, #7]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006ddc:	79b9      	ldrb	r1, [r7, #6]
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb70 	bl	80074c8 <USER_SPI_ioctl>
 8006de8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006dfc:	f7fc fa32 	bl	8003264 <HAL_GetTick>
 8006e00:	4603      	mov	r3, r0
 8006e02:	4a04      	ldr	r2, [pc, #16]	@ (8006e14 <SPI_Timer_On+0x20>)
 8006e04:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006e06:	4a04      	ldr	r2, [pc, #16]	@ (8006e18 <SPI_Timer_On+0x24>)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6013      	str	r3, [r2, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20001f00 	.word	0x20001f00
 8006e18:	20001f04 	.word	0x20001f04

08006e1c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006e20:	f7fc fa20 	bl	8003264 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4b06      	ldr	r3, [pc, #24]	@ (8006e40 <SPI_Timer_Status+0x24>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	4b05      	ldr	r3, [pc, #20]	@ (8006e44 <SPI_Timer_Status+0x28>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	bf34      	ite	cc
 8006e34:	2301      	movcc	r3, #1
 8006e36:	2300      	movcs	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20001f00 	.word	0x20001f00
 8006e44:	20001f04 	.word	0x20001f04

08006e48 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af02      	add	r7, sp, #8
 8006e4e:	4603      	mov	r3, r0
 8006e50:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006e52:	f107 020f 	add.w	r2, r7, #15
 8006e56:	1df9      	adds	r1, r7, #7
 8006e58:	2332      	movs	r3, #50	@ 0x32
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	4804      	ldr	r0, [pc, #16]	@ (8006e70 <xchg_spi+0x28>)
 8006e60:	f7ff f8cf 	bl	8006002 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20001a44 	.word	0x20001a44

08006e74 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	e00a      	b.n	8006e9a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	18d4      	adds	r4, r2, r3
 8006e8a:	20ff      	movs	r0, #255	@ 0xff
 8006e8c:	f7ff ffdc 	bl	8006e48 <xchg_spi>
 8006e90:	4603      	mov	r3, r0
 8006e92:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d3f0      	bcc.n	8006e84 <rcvr_spi_multi+0x10>
	}
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd90      	pop	{r4, r7, pc}

08006eac <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4803      	ldr	r0, [pc, #12]	@ (8006ed0 <xmit_spi_multi+0x24>)
 8006ec2:	f7fe ff5a 	bl	8005d7a <HAL_SPI_Transmit>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20001a44 	.word	0x20001a44

08006ed4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006edc:	f7fc f9c2 	bl	8003264 <HAL_GetTick>
 8006ee0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006ee6:	20ff      	movs	r0, #255	@ 0xff
 8006ee8:	f7ff ffae 	bl	8006e48 <xchg_spi>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2bff      	cmp	r3, #255	@ 0xff
 8006ef4:	d007      	beq.n	8006f06 <wait_ready+0x32>
 8006ef6:	f7fc f9b5 	bl	8003264 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d8ef      	bhi.n	8006ee6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2bff      	cmp	r3, #255	@ 0xff
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006f20:	2201      	movs	r2, #1
 8006f22:	2110      	movs	r1, #16
 8006f24:	4803      	ldr	r0, [pc, #12]	@ (8006f34 <despiselect+0x18>)
 8006f26:	f7fc ff4d 	bl	8003dc4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006f2a:	20ff      	movs	r0, #255	@ 0xff
 8006f2c:	f7ff ff8c 	bl	8006e48 <xchg_spi>

}
 8006f30:	bf00      	nop
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40020000 	.word	0x40020000

08006f38 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2110      	movs	r1, #16
 8006f40:	4809      	ldr	r0, [pc, #36]	@ (8006f68 <spiselect+0x30>)
 8006f42:	f7fc ff3f 	bl	8003dc4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006f46:	20ff      	movs	r0, #255	@ 0xff
 8006f48:	f7ff ff7e 	bl	8006e48 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006f4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006f50:	f7ff ffc0 	bl	8006ed4 <wait_ready>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <spiselect+0x26>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e002      	b.n	8006f64 <spiselect+0x2c>

	despiselect();
 8006f5e:	f7ff ffdd 	bl	8006f1c <despiselect>
	return 0;	/* Timeout */
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40020000 	.word	0x40020000

08006f6c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006f76:	20c8      	movs	r0, #200	@ 0xc8
 8006f78:	f7ff ff3c 	bl	8006df4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006f7c:	20ff      	movs	r0, #255	@ 0xff
 8006f7e:	f7ff ff63 	bl	8006e48 <xchg_spi>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	2bff      	cmp	r3, #255	@ 0xff
 8006f8a:	d104      	bne.n	8006f96 <rcvr_datablock+0x2a>
 8006f8c:	f7ff ff46 	bl	8006e1c <SPI_Timer_Status>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f2      	bne.n	8006f7c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2bfe      	cmp	r3, #254	@ 0xfe
 8006f9a:	d001      	beq.n	8006fa0 <rcvr_datablock+0x34>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e00a      	b.n	8006fb6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff ff66 	bl	8006e74 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006fa8:	20ff      	movs	r0, #255	@ 0xff
 8006faa:	f7ff ff4d 	bl	8006e48 <xchg_spi>
 8006fae:	20ff      	movs	r0, #255	@ 0xff
 8006fb0:	f7ff ff4a 	bl	8006e48 <xchg_spi>

	return 1;						/* Function succeeded */
 8006fb4:	2301      	movs	r3, #1
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006fca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006fce:	f7ff ff81 	bl	8006ed4 <wait_ready>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <xmit_datablock+0x1e>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e01e      	b.n	800701a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff ff32 	bl	8006e48 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	2bfd      	cmp	r3, #253	@ 0xfd
 8006fe8:	d016      	beq.n	8007018 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006fea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff ff5c 	bl	8006eac <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006ff4:	20ff      	movs	r0, #255	@ 0xff
 8006ff6:	f7ff ff27 	bl	8006e48 <xchg_spi>
 8006ffa:	20ff      	movs	r0, #255	@ 0xff
 8006ffc:	f7ff ff24 	bl	8006e48 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007000:	20ff      	movs	r0, #255	@ 0xff
 8007002:	f7ff ff21 	bl	8006e48 <xchg_spi>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	f003 031f 	and.w	r3, r3, #31
 8007010:	2b05      	cmp	r3, #5
 8007012:	d001      	beq.n	8007018 <xmit_datablock+0x5a>
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <xmit_datablock+0x5c>
	}
	return 1;
 8007018:	2301      	movs	r3, #1
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	4603      	mov	r3, r0
 800702a:	6039      	str	r1, [r7, #0]
 800702c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800702e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	da0e      	bge.n	8007054 <send_cmd+0x32>
		cmd &= 0x7F;
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800703e:	2100      	movs	r1, #0
 8007040:	2037      	movs	r0, #55	@ 0x37
 8007042:	f7ff ffee 	bl	8007022 <send_cmd>
 8007046:	4603      	mov	r3, r0
 8007048:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d901      	bls.n	8007054 <send_cmd+0x32>
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	e051      	b.n	80070f8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b0c      	cmp	r3, #12
 8007058:	d008      	beq.n	800706c <send_cmd+0x4a>
		despiselect();
 800705a:	f7ff ff5f 	bl	8006f1c <despiselect>
		if (!spiselect()) return 0xFF;
 800705e:	f7ff ff6b 	bl	8006f38 <spiselect>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <send_cmd+0x4a>
 8007068:	23ff      	movs	r3, #255	@ 0xff
 800706a:	e045      	b.n	80070f8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007072:	b2db      	uxtb	r3, r3
 8007074:	4618      	mov	r0, r3
 8007076:	f7ff fee7 	bl	8006e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	0e1b      	lsrs	r3, r3, #24
 800707e:	b2db      	uxtb	r3, r3
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff fee1 	bl	8006e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	0c1b      	lsrs	r3, r3, #16
 800708a:	b2db      	uxtb	r3, r3
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff fedb 	bl	8006e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	b2db      	uxtb	r3, r3
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fed5 	bl	8006e48 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fed0 	bl	8006e48 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <send_cmd+0x94>
 80070b2:	2395      	movs	r3, #149	@ 0x95
 80070b4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d101      	bne.n	80070c0 <send_cmd+0x9e>
 80070bc:	2387      	movs	r3, #135	@ 0x87
 80070be:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fec0 	bl	8006e48 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	2b0c      	cmp	r3, #12
 80070cc:	d102      	bne.n	80070d4 <send_cmd+0xb2>
 80070ce:	20ff      	movs	r0, #255	@ 0xff
 80070d0:	f7ff feba 	bl	8006e48 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80070d4:	230a      	movs	r3, #10
 80070d6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80070d8:	20ff      	movs	r0, #255	@ 0xff
 80070da:	f7ff feb5 	bl	8006e48 <xchg_spi>
 80070de:	4603      	mov	r3, r0
 80070e0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80070e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da05      	bge.n	80070f6 <send_cmd+0xd4>
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f0      	bne.n	80070d8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <USER_SPI_initialize+0x14>
 8007110:	2301      	movs	r3, #1
 8007112:	e0d6      	b.n	80072c2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007114:	4b6d      	ldr	r3, [pc, #436]	@ (80072cc <USER_SPI_initialize+0x1cc>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <USER_SPI_initialize+0x2a>
 8007122:	4b6a      	ldr	r3, [pc, #424]	@ (80072cc <USER_SPI_initialize+0x1cc>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	e0cb      	b.n	80072c2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800712a:	4b69      	ldr	r3, [pc, #420]	@ (80072d0 <USER_SPI_initialize+0x1d0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007134:	4b66      	ldr	r3, [pc, #408]	@ (80072d0 <USER_SPI_initialize+0x1d0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800713c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800713e:	230a      	movs	r3, #10
 8007140:	73fb      	strb	r3, [r7, #15]
 8007142:	e005      	b.n	8007150 <USER_SPI_initialize+0x50>
 8007144:	20ff      	movs	r0, #255	@ 0xff
 8007146:	f7ff fe7f 	bl	8006e48 <xchg_spi>
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	3b01      	subs	r3, #1
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f6      	bne.n	8007144 <USER_SPI_initialize+0x44>

	ty = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800715a:	2100      	movs	r1, #0
 800715c:	2000      	movs	r0, #0
 800715e:	f7ff ff60 	bl	8007022 <send_cmd>
 8007162:	4603      	mov	r3, r0
 8007164:	2b01      	cmp	r3, #1
 8007166:	f040 808b 	bne.w	8007280 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800716a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800716e:	f7ff fe41 	bl	8006df4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007172:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007176:	2008      	movs	r0, #8
 8007178:	f7ff ff53 	bl	8007022 <send_cmd>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d151      	bne.n	8007226 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]
 8007186:	e00d      	b.n	80071a4 <USER_SPI_initialize+0xa4>
 8007188:	7bfc      	ldrb	r4, [r7, #15]
 800718a:	20ff      	movs	r0, #255	@ 0xff
 800718c:	f7ff fe5c 	bl	8006e48 <xchg_spi>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	f104 0310 	add.w	r3, r4, #16
 8007198:	443b      	add	r3, r7
 800719a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	3301      	adds	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d9ee      	bls.n	8007188 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80071aa:	7abb      	ldrb	r3, [r7, #10]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d167      	bne.n	8007280 <USER_SPI_initialize+0x180>
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	2baa      	cmp	r3, #170	@ 0xaa
 80071b4:	d164      	bne.n	8007280 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80071b6:	bf00      	nop
 80071b8:	f7ff fe30 	bl	8006e1c <SPI_Timer_Status>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <USER_SPI_initialize+0xd2>
 80071c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80071c6:	20a9      	movs	r0, #169	@ 0xa9
 80071c8:	f7ff ff2b 	bl	8007022 <send_cmd>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f2      	bne.n	80071b8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80071d2:	f7ff fe23 	bl	8006e1c <SPI_Timer_Status>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d051      	beq.n	8007280 <USER_SPI_initialize+0x180>
 80071dc:	2100      	movs	r1, #0
 80071de:	203a      	movs	r0, #58	@ 0x3a
 80071e0:	f7ff ff1f 	bl	8007022 <send_cmd>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d14a      	bne.n	8007280 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
 80071ee:	e00d      	b.n	800720c <USER_SPI_initialize+0x10c>
 80071f0:	7bfc      	ldrb	r4, [r7, #15]
 80071f2:	20ff      	movs	r0, #255	@ 0xff
 80071f4:	f7ff fe28 	bl	8006e48 <xchg_spi>
 80071f8:	4603      	mov	r3, r0
 80071fa:	461a      	mov	r2, r3
 80071fc:	f104 0310 	add.w	r3, r4, #16
 8007200:	443b      	add	r3, r7
 8007202:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	3301      	adds	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d9ee      	bls.n	80071f0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007212:	7a3b      	ldrb	r3, [r7, #8]
 8007214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <USER_SPI_initialize+0x120>
 800721c:	230c      	movs	r3, #12
 800721e:	e000      	b.n	8007222 <USER_SPI_initialize+0x122>
 8007220:	2304      	movs	r3, #4
 8007222:	737b      	strb	r3, [r7, #13]
 8007224:	e02c      	b.n	8007280 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007226:	2100      	movs	r1, #0
 8007228:	20a9      	movs	r0, #169	@ 0xa9
 800722a:	f7ff fefa 	bl	8007022 <send_cmd>
 800722e:	4603      	mov	r3, r0
 8007230:	2b01      	cmp	r3, #1
 8007232:	d804      	bhi.n	800723e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007234:	2302      	movs	r3, #2
 8007236:	737b      	strb	r3, [r7, #13]
 8007238:	23a9      	movs	r3, #169	@ 0xa9
 800723a:	73bb      	strb	r3, [r7, #14]
 800723c:	e003      	b.n	8007246 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800723e:	2301      	movs	r3, #1
 8007240:	737b      	strb	r3, [r7, #13]
 8007242:	2301      	movs	r3, #1
 8007244:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007246:	bf00      	nop
 8007248:	f7ff fde8 	bl	8006e1c <SPI_Timer_Status>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <USER_SPI_initialize+0x162>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2100      	movs	r1, #0
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fee3 	bl	8007022 <send_cmd>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f2      	bne.n	8007248 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007262:	f7ff fddb 	bl	8006e1c <SPI_Timer_Status>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d007      	beq.n	800727c <USER_SPI_initialize+0x17c>
 800726c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007270:	2010      	movs	r0, #16
 8007272:	f7ff fed6 	bl	8007022 <send_cmd>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <USER_SPI_initialize+0x180>
				ty = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007280:	4a14      	ldr	r2, [pc, #80]	@ (80072d4 <USER_SPI_initialize+0x1d4>)
 8007282:	7b7b      	ldrb	r3, [r7, #13]
 8007284:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007286:	f7ff fe49 	bl	8006f1c <despiselect>

	if (ty) {			/* OK */
 800728a:	7b7b      	ldrb	r3, [r7, #13]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d012      	beq.n	80072b6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007290:	4b0f      	ldr	r3, [pc, #60]	@ (80072d0 <USER_SPI_initialize+0x1d0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800729a:	4b0d      	ldr	r3, [pc, #52]	@ (80072d0 <USER_SPI_initialize+0x1d0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0210 	orr.w	r2, r2, #16
 80072a2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80072a4:	4b09      	ldr	r3, [pc, #36]	@ (80072cc <USER_SPI_initialize+0x1cc>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f023 0301 	bic.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	4b06      	ldr	r3, [pc, #24]	@ (80072cc <USER_SPI_initialize+0x1cc>)
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	e002      	b.n	80072bc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80072b6:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <USER_SPI_initialize+0x1cc>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80072bc:	4b03      	ldr	r3, [pc, #12]	@ (80072cc <USER_SPI_initialize+0x1cc>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd90      	pop	{r4, r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000020 	.word	0x20000020
 80072d0:	20001a44 	.word	0x20001a44
 80072d4:	20001efc 	.word	0x20001efc

080072d8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <USER_SPI_status+0x14>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e002      	b.n	80072f2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80072ec:	4b04      	ldr	r3, [pc, #16]	@ (8007300 <USER_SPI_status+0x28>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b2db      	uxtb	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000020 	.word	0x20000020

08007304 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d102      	bne.n	8007320 <USER_SPI_read+0x1c>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <USER_SPI_read+0x20>
 8007320:	2304      	movs	r3, #4
 8007322:	e04d      	b.n	80073c0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007324:	4b28      	ldr	r3, [pc, #160]	@ (80073c8 <USER_SPI_read+0xc4>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <USER_SPI_read+0x32>
 8007332:	2303      	movs	r3, #3
 8007334:	e044      	b.n	80073c0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007336:	4b25      	ldr	r3, [pc, #148]	@ (80073cc <USER_SPI_read+0xc8>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <USER_SPI_read+0x44>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	025b      	lsls	r3, r3, #9
 8007346:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d111      	bne.n	8007372 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	2011      	movs	r0, #17
 8007352:	f7ff fe66 	bl	8007022 <send_cmd>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d129      	bne.n	80073b0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800735c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007360:	68b8      	ldr	r0, [r7, #8]
 8007362:	f7ff fe03 	bl	8006f6c <rcvr_datablock>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d021      	beq.n	80073b0 <USER_SPI_read+0xac>
			count = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	e01e      	b.n	80073b0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	2012      	movs	r0, #18
 8007376:	f7ff fe54 	bl	8007022 <send_cmd>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d117      	bne.n	80073b0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007384:	68b8      	ldr	r0, [r7, #8]
 8007386:	f7ff fdf1 	bl	8006f6c <rcvr_datablock>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <USER_SPI_read+0xa2>
				buff += 512;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007396:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	3b01      	subs	r3, #1
 800739c:	603b      	str	r3, [r7, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1ed      	bne.n	8007380 <USER_SPI_read+0x7c>
 80073a4:	e000      	b.n	80073a8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80073a6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80073a8:	2100      	movs	r1, #0
 80073aa:	200c      	movs	r0, #12
 80073ac:	f7ff fe39 	bl	8007022 <send_cmd>
		}
	}
	despiselect();
 80073b0:	f7ff fdb4 	bl	8006f1c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bf14      	ite	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	2300      	moveq	r3, #0
 80073be:	b2db      	uxtb	r3, r3
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000020 	.word	0x20000020
 80073cc:	20001efc 	.word	0x20001efc

080073d0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d102      	bne.n	80073ec <USER_SPI_write+0x1c>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <USER_SPI_write+0x20>
 80073ec:	2304      	movs	r3, #4
 80073ee:	e063      	b.n	80074b8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80073f0:	4b33      	ldr	r3, [pc, #204]	@ (80074c0 <USER_SPI_write+0xf0>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <USER_SPI_write+0x32>
 80073fe:	2303      	movs	r3, #3
 8007400:	e05a      	b.n	80074b8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007402:	4b2f      	ldr	r3, [pc, #188]	@ (80074c0 <USER_SPI_write+0xf0>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <USER_SPI_write+0x44>
 8007410:	2302      	movs	r3, #2
 8007412:	e051      	b.n	80074b8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007414:	4b2b      	ldr	r3, [pc, #172]	@ (80074c4 <USER_SPI_write+0xf4>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <USER_SPI_write+0x56>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	025b      	lsls	r3, r3, #9
 8007424:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d110      	bne.n	800744e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	2018      	movs	r0, #24
 8007430:	f7ff fdf7 	bl	8007022 <send_cmd>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d136      	bne.n	80074a8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800743a:	21fe      	movs	r1, #254	@ 0xfe
 800743c:	68b8      	ldr	r0, [r7, #8]
 800743e:	f7ff fdbe 	bl	8006fbe <xmit_datablock>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d02f      	beq.n	80074a8 <USER_SPI_write+0xd8>
			count = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	e02c      	b.n	80074a8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800744e:	4b1d      	ldr	r3, [pc, #116]	@ (80074c4 <USER_SPI_write+0xf4>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f003 0306 	and.w	r3, r3, #6
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <USER_SPI_write+0x92>
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	2097      	movs	r0, #151	@ 0x97
 800745e:	f7ff fde0 	bl	8007022 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	2019      	movs	r0, #25
 8007466:	f7ff fddc 	bl	8007022 <send_cmd>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d11b      	bne.n	80074a8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007470:	21fc      	movs	r1, #252	@ 0xfc
 8007472:	68b8      	ldr	r0, [r7, #8]
 8007474:	f7ff fda3 	bl	8006fbe <xmit_datablock>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <USER_SPI_write+0xc4>
				buff += 512;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007484:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	3b01      	subs	r3, #1
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1ee      	bne.n	8007470 <USER_SPI_write+0xa0>
 8007492:	e000      	b.n	8007496 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007494:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007496:	21fd      	movs	r1, #253	@ 0xfd
 8007498:	2000      	movs	r0, #0
 800749a:	f7ff fd90 	bl	8006fbe <xmit_datablock>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USER_SPI_write+0xd8>
 80074a4:	2301      	movs	r3, #1
 80074a6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80074a8:	f7ff fd38 	bl	8006f1c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000020 	.word	0x20000020
 80074c4:	20001efc 	.word	0x20001efc

080074c8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08c      	sub	sp, #48	@ 0x30
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	603a      	str	r2, [r7, #0]
 80074d2:	71fb      	strb	r3, [r7, #7]
 80074d4:	460b      	mov	r3, r1
 80074d6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <USER_SPI_ioctl+0x1a>
 80074de:	2304      	movs	r3, #4
 80074e0:	e15a      	b.n	8007798 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80074e2:	4baf      	ldr	r3, [pc, #700]	@ (80077a0 <USER_SPI_ioctl+0x2d8>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <USER_SPI_ioctl+0x2c>
 80074f0:	2303      	movs	r3, #3
 80074f2:	e151      	b.n	8007798 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80074fa:	79bb      	ldrb	r3, [r7, #6]
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	f200 8136 	bhi.w	800776e <USER_SPI_ioctl+0x2a6>
 8007502:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <USER_SPI_ioctl+0x40>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800751d 	.word	0x0800751d
 800750c:	08007531 	.word	0x08007531
 8007510:	0800776f 	.word	0x0800776f
 8007514:	080075dd 	.word	0x080075dd
 8007518:	080076d3 	.word	0x080076d3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800751c:	f7ff fd0c 	bl	8006f38 <spiselect>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8127 	beq.w	8007776 <USER_SPI_ioctl+0x2ae>
 8007528:	2300      	movs	r3, #0
 800752a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800752e:	e122      	b.n	8007776 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007530:	2100      	movs	r1, #0
 8007532:	2009      	movs	r0, #9
 8007534:	f7ff fd75 	bl	8007022 <send_cmd>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	f040 811d 	bne.w	800777a <USER_SPI_ioctl+0x2b2>
 8007540:	f107 030c 	add.w	r3, r7, #12
 8007544:	2110      	movs	r1, #16
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fd10 	bl	8006f6c <rcvr_datablock>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 8113 	beq.w	800777a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007554:	7b3b      	ldrb	r3, [r7, #12]
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d111      	bne.n	8007582 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800755e:	7d7b      	ldrb	r3, [r7, #21]
 8007560:	461a      	mov	r2, r3
 8007562:	7d3b      	ldrb	r3, [r7, #20]
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	4413      	add	r3, r2
 8007568:	461a      	mov	r2, r3
 800756a:	7cfb      	ldrb	r3, [r7, #19]
 800756c:	041b      	lsls	r3, r3, #16
 800756e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007572:	4413      	add	r3, r2
 8007574:	3301      	adds	r3, #1
 8007576:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	029a      	lsls	r2, r3, #10
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e028      	b.n	80075d4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007582:	7c7b      	ldrb	r3, [r7, #17]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	b2da      	uxtb	r2, r3
 800758a:	7dbb      	ldrb	r3, [r7, #22]
 800758c:	09db      	lsrs	r3, r3, #7
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4413      	add	r3, r2
 8007592:	b2da      	uxtb	r2, r3
 8007594:	7d7b      	ldrb	r3, [r7, #21]
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f003 0306 	and.w	r3, r3, #6
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	4413      	add	r3, r2
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	3302      	adds	r3, #2
 80075a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80075aa:	7d3b      	ldrb	r3, [r7, #20]
 80075ac:	099b      	lsrs	r3, r3, #6
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	7cfb      	ldrb	r3, [r7, #19]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	441a      	add	r2, r3
 80075b8:	7cbb      	ldrb	r3, [r7, #18]
 80075ba:	029b      	lsls	r3, r3, #10
 80075bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075c0:	4413      	add	r3, r2
 80075c2:	3301      	adds	r3, #1
 80075c4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80075c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075ca:	3b09      	subs	r3, #9
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	409a      	lsls	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80075da:	e0ce      	b.n	800777a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80075dc:	4b71      	ldr	r3, [pc, #452]	@ (80077a4 <USER_SPI_ioctl+0x2dc>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d031      	beq.n	800764c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80075e8:	2100      	movs	r1, #0
 80075ea:	208d      	movs	r0, #141	@ 0x8d
 80075ec:	f7ff fd19 	bl	8007022 <send_cmd>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 80c3 	bne.w	800777e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80075f8:	20ff      	movs	r0, #255	@ 0xff
 80075fa:	f7ff fc25 	bl	8006e48 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80075fe:	f107 030c 	add.w	r3, r7, #12
 8007602:	2110      	movs	r1, #16
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fcb1 	bl	8006f6c <rcvr_datablock>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80b6 	beq.w	800777e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007612:	2330      	movs	r3, #48	@ 0x30
 8007614:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007618:	e007      	b.n	800762a <USER_SPI_ioctl+0x162>
 800761a:	20ff      	movs	r0, #255	@ 0xff
 800761c:	f7ff fc14 	bl	8006e48 <xchg_spi>
 8007620:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007624:	3b01      	subs	r3, #1
 8007626:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800762a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f3      	bne.n	800761a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007632:	7dbb      	ldrb	r3, [r7, #22]
 8007634:	091b      	lsrs	r3, r3, #4
 8007636:	b2db      	uxtb	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	2310      	movs	r3, #16
 800763c:	fa03 f202 	lsl.w	r2, r3, r2
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800764a:	e098      	b.n	800777e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800764c:	2100      	movs	r1, #0
 800764e:	2009      	movs	r0, #9
 8007650:	f7ff fce7 	bl	8007022 <send_cmd>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 8091 	bne.w	800777e <USER_SPI_ioctl+0x2b6>
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	2110      	movs	r1, #16
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fc82 	bl	8006f6c <rcvr_datablock>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8087 	beq.w	800777e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007670:	4b4c      	ldr	r3, [pc, #304]	@ (80077a4 <USER_SPI_ioctl+0x2dc>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d012      	beq.n	80076a2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800767c:	7dbb      	ldrb	r3, [r7, #22]
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007684:	7dfa      	ldrb	r2, [r7, #23]
 8007686:	09d2      	lsrs	r2, r2, #7
 8007688:	b2d2      	uxtb	r2, r2
 800768a:	4413      	add	r3, r2
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	7e7b      	ldrb	r3, [r7, #25]
 8007690:	099b      	lsrs	r3, r3, #6
 8007692:	b2db      	uxtb	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	461a      	mov	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e013      	b.n	80076ca <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80076a2:	7dbb      	ldrb	r3, [r7, #22]
 80076a4:	109b      	asrs	r3, r3, #2
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	3301      	adds	r3, #1
 80076ae:	7dfa      	ldrb	r2, [r7, #23]
 80076b0:	00d2      	lsls	r2, r2, #3
 80076b2:	f002 0218 	and.w	r2, r2, #24
 80076b6:	7df9      	ldrb	r1, [r7, #23]
 80076b8:	0949      	lsrs	r1, r1, #5
 80076ba:	b2c9      	uxtb	r1, r1
 80076bc:	440a      	add	r2, r1
 80076be:	3201      	adds	r2, #1
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80076d0:	e055      	b.n	800777e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80076d2:	4b34      	ldr	r3, [pc, #208]	@ (80077a4 <USER_SPI_ioctl+0x2dc>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 0306 	and.w	r3, r3, #6
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d051      	beq.n	8007782 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80076de:	f107 020c 	add.w	r2, r7, #12
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	210b      	movs	r1, #11
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff feee 	bl	80074c8 <USER_SPI_ioctl>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d149      	bne.n	8007786 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80076f2:	7b3b      	ldrb	r3, [r7, #12]
 80076f4:	099b      	lsrs	r3, r3, #6
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <USER_SPI_ioctl+0x23e>
 80076fc:	7dbb      	ldrb	r3, [r7, #22]
 80076fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d041      	beq.n	800778a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	623b      	str	r3, [r7, #32]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007716:	4b23      	ldr	r3, [pc, #140]	@ (80077a4 <USER_SPI_ioctl+0x2dc>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	025b      	lsls	r3, r3, #9
 8007726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772a:	025b      	lsls	r3, r3, #9
 800772c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800772e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007730:	2020      	movs	r0, #32
 8007732:	f7ff fc76 	bl	8007022 <send_cmd>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d128      	bne.n	800778e <USER_SPI_ioctl+0x2c6>
 800773c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800773e:	2021      	movs	r0, #33	@ 0x21
 8007740:	f7ff fc6f 	bl	8007022 <send_cmd>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d121      	bne.n	800778e <USER_SPI_ioctl+0x2c6>
 800774a:	2100      	movs	r1, #0
 800774c:	2026      	movs	r0, #38	@ 0x26
 800774e:	f7ff fc68 	bl	8007022 <send_cmd>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d11a      	bne.n	800778e <USER_SPI_ioctl+0x2c6>
 8007758:	f247 5030 	movw	r0, #30000	@ 0x7530
 800775c:	f7ff fbba 	bl	8006ed4 <wait_ready>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d013      	beq.n	800778e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007766:	2300      	movs	r3, #0
 8007768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800776c:	e00f      	b.n	800778e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800776e:	2304      	movs	r3, #4
 8007770:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007774:	e00c      	b.n	8007790 <USER_SPI_ioctl+0x2c8>
		break;
 8007776:	bf00      	nop
 8007778:	e00a      	b.n	8007790 <USER_SPI_ioctl+0x2c8>
		break;
 800777a:	bf00      	nop
 800777c:	e008      	b.n	8007790 <USER_SPI_ioctl+0x2c8>
		break;
 800777e:	bf00      	nop
 8007780:	e006      	b.n	8007790 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007782:	bf00      	nop
 8007784:	e004      	b.n	8007790 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007786:	bf00      	nop
 8007788:	e002      	b.n	8007790 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800778a:	bf00      	nop
 800778c:	e000      	b.n	8007790 <USER_SPI_ioctl+0x2c8>
		break;
 800778e:	bf00      	nop
	}

	despiselect();
 8007790:	f7ff fbc4 	bl	8006f1c <despiselect>

	return res;
 8007794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007798:	4618      	mov	r0, r3
 800779a:	3730      	adds	r7, #48	@ 0x30
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000020 	.word	0x20000020
 80077a4:	20001efc 	.word	0x20001efc

080077a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077be:	4b1f      	ldr	r3, [pc, #124]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077c0:	7a5b      	ldrb	r3, [r3, #9]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d131      	bne.n	800782c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077c8:	4b1c      	ldr	r3, [pc, #112]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077ca:	7a5b      	ldrb	r3, [r3, #9]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	4b1a      	ldr	r3, [pc, #104]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077d2:	2100      	movs	r1, #0
 80077d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077d6:	4b19      	ldr	r3, [pc, #100]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077d8:	7a5b      	ldrb	r3, [r3, #9]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	4a17      	ldr	r2, [pc, #92]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077e6:	4b15      	ldr	r3, [pc, #84]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077e8:	7a5b      	ldrb	r3, [r3, #9]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b13      	ldr	r3, [pc, #76]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077f0:	4413      	add	r3, r2
 80077f2:	79fa      	ldrb	r2, [r7, #7]
 80077f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077f6:	4b11      	ldr	r3, [pc, #68]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 80077f8:	7a5b      	ldrb	r3, [r3, #9]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	b2d1      	uxtb	r1, r2
 8007800:	4a0e      	ldr	r2, [pc, #56]	@ (800783c <FATFS_LinkDriverEx+0x94>)
 8007802:	7251      	strb	r1, [r2, #9]
 8007804:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007806:	7dbb      	ldrb	r3, [r7, #22]
 8007808:	3330      	adds	r3, #48	@ 0x30
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	3301      	adds	r3, #1
 8007814:	223a      	movs	r2, #58	@ 0x3a
 8007816:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3302      	adds	r3, #2
 800781c:	222f      	movs	r2, #47	@ 0x2f
 800781e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	3303      	adds	r3, #3
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
}
 800782e:	4618      	mov	r0, r3
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20001f08 	.word	0x20001f08

08007840 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800784a:	2200      	movs	r2, #0
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff ffaa 	bl	80077a8 <FATFS_LinkDriverEx>
 8007854:	4603      	mov	r3, r0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <std>:
 8007860:	2300      	movs	r3, #0
 8007862:	b510      	push	{r4, lr}
 8007864:	4604      	mov	r4, r0
 8007866:	e9c0 3300 	strd	r3, r3, [r0]
 800786a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800786e:	6083      	str	r3, [r0, #8]
 8007870:	8181      	strh	r1, [r0, #12]
 8007872:	6643      	str	r3, [r0, #100]	@ 0x64
 8007874:	81c2      	strh	r2, [r0, #14]
 8007876:	6183      	str	r3, [r0, #24]
 8007878:	4619      	mov	r1, r3
 800787a:	2208      	movs	r2, #8
 800787c:	305c      	adds	r0, #92	@ 0x5c
 800787e:	f000 fa37 	bl	8007cf0 <memset>
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <std+0x58>)
 8007884:	6263      	str	r3, [r4, #36]	@ 0x24
 8007886:	4b0d      	ldr	r3, [pc, #52]	@ (80078bc <std+0x5c>)
 8007888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800788a:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <std+0x60>)
 800788c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800788e:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <std+0x64>)
 8007890:	6323      	str	r3, [r4, #48]	@ 0x30
 8007892:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <std+0x68>)
 8007894:	6224      	str	r4, [r4, #32]
 8007896:	429c      	cmp	r4, r3
 8007898:	d006      	beq.n	80078a8 <std+0x48>
 800789a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800789e:	4294      	cmp	r4, r2
 80078a0:	d002      	beq.n	80078a8 <std+0x48>
 80078a2:	33d0      	adds	r3, #208	@ 0xd0
 80078a4:	429c      	cmp	r4, r3
 80078a6:	d105      	bne.n	80078b4 <std+0x54>
 80078a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b0:	f000 ba96 	b.w	8007de0 <__retarget_lock_init_recursive>
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	bf00      	nop
 80078b8:	08007b0d 	.word	0x08007b0d
 80078bc:	08007b2f 	.word	0x08007b2f
 80078c0:	08007b67 	.word	0x08007b67
 80078c4:	08007b8b 	.word	0x08007b8b
 80078c8:	20001f14 	.word	0x20001f14

080078cc <stdio_exit_handler>:
 80078cc:	4a02      	ldr	r2, [pc, #8]	@ (80078d8 <stdio_exit_handler+0xc>)
 80078ce:	4903      	ldr	r1, [pc, #12]	@ (80078dc <stdio_exit_handler+0x10>)
 80078d0:	4803      	ldr	r0, [pc, #12]	@ (80078e0 <stdio_exit_handler+0x14>)
 80078d2:	f000 b869 	b.w	80079a8 <_fwalk_sglue>
 80078d6:	bf00      	nop
 80078d8:	20000024 	.word	0x20000024
 80078dc:	080086c5 	.word	0x080086c5
 80078e0:	20000034 	.word	0x20000034

080078e4 <cleanup_stdio>:
 80078e4:	6841      	ldr	r1, [r0, #4]
 80078e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <cleanup_stdio+0x34>)
 80078e8:	4299      	cmp	r1, r3
 80078ea:	b510      	push	{r4, lr}
 80078ec:	4604      	mov	r4, r0
 80078ee:	d001      	beq.n	80078f4 <cleanup_stdio+0x10>
 80078f0:	f000 fee8 	bl	80086c4 <_fflush_r>
 80078f4:	68a1      	ldr	r1, [r4, #8]
 80078f6:	4b09      	ldr	r3, [pc, #36]	@ (800791c <cleanup_stdio+0x38>)
 80078f8:	4299      	cmp	r1, r3
 80078fa:	d002      	beq.n	8007902 <cleanup_stdio+0x1e>
 80078fc:	4620      	mov	r0, r4
 80078fe:	f000 fee1 	bl	80086c4 <_fflush_r>
 8007902:	68e1      	ldr	r1, [r4, #12]
 8007904:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <cleanup_stdio+0x3c>)
 8007906:	4299      	cmp	r1, r3
 8007908:	d004      	beq.n	8007914 <cleanup_stdio+0x30>
 800790a:	4620      	mov	r0, r4
 800790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007910:	f000 bed8 	b.w	80086c4 <_fflush_r>
 8007914:	bd10      	pop	{r4, pc}
 8007916:	bf00      	nop
 8007918:	20001f14 	.word	0x20001f14
 800791c:	20001f7c 	.word	0x20001f7c
 8007920:	20001fe4 	.word	0x20001fe4

08007924 <global_stdio_init.part.0>:
 8007924:	b510      	push	{r4, lr}
 8007926:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <global_stdio_init.part.0+0x30>)
 8007928:	4c0b      	ldr	r4, [pc, #44]	@ (8007958 <global_stdio_init.part.0+0x34>)
 800792a:	4a0c      	ldr	r2, [pc, #48]	@ (800795c <global_stdio_init.part.0+0x38>)
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	4620      	mov	r0, r4
 8007930:	2200      	movs	r2, #0
 8007932:	2104      	movs	r1, #4
 8007934:	f7ff ff94 	bl	8007860 <std>
 8007938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800793c:	2201      	movs	r2, #1
 800793e:	2109      	movs	r1, #9
 8007940:	f7ff ff8e 	bl	8007860 <std>
 8007944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007948:	2202      	movs	r2, #2
 800794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794e:	2112      	movs	r1, #18
 8007950:	f7ff bf86 	b.w	8007860 <std>
 8007954:	2000204c 	.word	0x2000204c
 8007958:	20001f14 	.word	0x20001f14
 800795c:	080078cd 	.word	0x080078cd

08007960 <__sfp_lock_acquire>:
 8007960:	4801      	ldr	r0, [pc, #4]	@ (8007968 <__sfp_lock_acquire+0x8>)
 8007962:	f000 ba3e 	b.w	8007de2 <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	20002055 	.word	0x20002055

0800796c <__sfp_lock_release>:
 800796c:	4801      	ldr	r0, [pc, #4]	@ (8007974 <__sfp_lock_release+0x8>)
 800796e:	f000 ba39 	b.w	8007de4 <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	20002055 	.word	0x20002055

08007978 <__sinit>:
 8007978:	b510      	push	{r4, lr}
 800797a:	4604      	mov	r4, r0
 800797c:	f7ff fff0 	bl	8007960 <__sfp_lock_acquire>
 8007980:	6a23      	ldr	r3, [r4, #32]
 8007982:	b11b      	cbz	r3, 800798c <__sinit+0x14>
 8007984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007988:	f7ff bff0 	b.w	800796c <__sfp_lock_release>
 800798c:	4b04      	ldr	r3, [pc, #16]	@ (80079a0 <__sinit+0x28>)
 800798e:	6223      	str	r3, [r4, #32]
 8007990:	4b04      	ldr	r3, [pc, #16]	@ (80079a4 <__sinit+0x2c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f5      	bne.n	8007984 <__sinit+0xc>
 8007998:	f7ff ffc4 	bl	8007924 <global_stdio_init.part.0>
 800799c:	e7f2      	b.n	8007984 <__sinit+0xc>
 800799e:	bf00      	nop
 80079a0:	080078e5 	.word	0x080078e5
 80079a4:	2000204c 	.word	0x2000204c

080079a8 <_fwalk_sglue>:
 80079a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ac:	4607      	mov	r7, r0
 80079ae:	4688      	mov	r8, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	2600      	movs	r6, #0
 80079b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079b8:	f1b9 0901 	subs.w	r9, r9, #1
 80079bc:	d505      	bpl.n	80079ca <_fwalk_sglue+0x22>
 80079be:	6824      	ldr	r4, [r4, #0]
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	d1f7      	bne.n	80079b4 <_fwalk_sglue+0xc>
 80079c4:	4630      	mov	r0, r6
 80079c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ca:	89ab      	ldrh	r3, [r5, #12]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d907      	bls.n	80079e0 <_fwalk_sglue+0x38>
 80079d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079d4:	3301      	adds	r3, #1
 80079d6:	d003      	beq.n	80079e0 <_fwalk_sglue+0x38>
 80079d8:	4629      	mov	r1, r5
 80079da:	4638      	mov	r0, r7
 80079dc:	47c0      	blx	r8
 80079de:	4306      	orrs	r6, r0
 80079e0:	3568      	adds	r5, #104	@ 0x68
 80079e2:	e7e9      	b.n	80079b8 <_fwalk_sglue+0x10>

080079e4 <_puts_r>:
 80079e4:	6a03      	ldr	r3, [r0, #32]
 80079e6:	b570      	push	{r4, r5, r6, lr}
 80079e8:	6884      	ldr	r4, [r0, #8]
 80079ea:	4605      	mov	r5, r0
 80079ec:	460e      	mov	r6, r1
 80079ee:	b90b      	cbnz	r3, 80079f4 <_puts_r+0x10>
 80079f0:	f7ff ffc2 	bl	8007978 <__sinit>
 80079f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079f6:	07db      	lsls	r3, r3, #31
 80079f8:	d405      	bmi.n	8007a06 <_puts_r+0x22>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	0598      	lsls	r0, r3, #22
 80079fe:	d402      	bmi.n	8007a06 <_puts_r+0x22>
 8007a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a02:	f000 f9ee 	bl	8007de2 <__retarget_lock_acquire_recursive>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	0719      	lsls	r1, r3, #28
 8007a0a:	d502      	bpl.n	8007a12 <_puts_r+0x2e>
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d135      	bne.n	8007a7e <_puts_r+0x9a>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 f8fb 	bl	8007c10 <__swsetup_r>
 8007a1a:	b380      	cbz	r0, 8007a7e <_puts_r+0x9a>
 8007a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a22:	07da      	lsls	r2, r3, #31
 8007a24:	d405      	bmi.n	8007a32 <_puts_r+0x4e>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	059b      	lsls	r3, r3, #22
 8007a2a:	d402      	bmi.n	8007a32 <_puts_r+0x4e>
 8007a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a2e:	f000 f9d9 	bl	8007de4 <__retarget_lock_release_recursive>
 8007a32:	4628      	mov	r0, r5
 8007a34:	bd70      	pop	{r4, r5, r6, pc}
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da04      	bge.n	8007a44 <_puts_r+0x60>
 8007a3a:	69a2      	ldr	r2, [r4, #24]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	dc17      	bgt.n	8007a70 <_puts_r+0x8c>
 8007a40:	290a      	cmp	r1, #10
 8007a42:	d015      	beq.n	8007a70 <_puts_r+0x8c>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	6022      	str	r2, [r4, #0]
 8007a4a:	7019      	strb	r1, [r3, #0]
 8007a4c:	68a3      	ldr	r3, [r4, #8]
 8007a4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a52:	3b01      	subs	r3, #1
 8007a54:	60a3      	str	r3, [r4, #8]
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d1ed      	bne.n	8007a36 <_puts_r+0x52>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da11      	bge.n	8007a82 <_puts_r+0x9e>
 8007a5e:	4622      	mov	r2, r4
 8007a60:	210a      	movs	r1, #10
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f895 	bl	8007b92 <__swbuf_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d0d7      	beq.n	8007a1c <_puts_r+0x38>
 8007a6c:	250a      	movs	r5, #10
 8007a6e:	e7d7      	b.n	8007a20 <_puts_r+0x3c>
 8007a70:	4622      	mov	r2, r4
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 f88d 	bl	8007b92 <__swbuf_r>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d1e7      	bne.n	8007a4c <_puts_r+0x68>
 8007a7c:	e7ce      	b.n	8007a1c <_puts_r+0x38>
 8007a7e:	3e01      	subs	r6, #1
 8007a80:	e7e4      	b.n	8007a4c <_puts_r+0x68>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	6022      	str	r2, [r4, #0]
 8007a88:	220a      	movs	r2, #10
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	e7ee      	b.n	8007a6c <_puts_r+0x88>
	...

08007a90 <puts>:
 8007a90:	4b02      	ldr	r3, [pc, #8]	@ (8007a9c <puts+0xc>)
 8007a92:	4601      	mov	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f7ff bfa5 	b.w	80079e4 <_puts_r>
 8007a9a:	bf00      	nop
 8007a9c:	20000030 	.word	0x20000030

08007aa0 <sniprintf>:
 8007aa0:	b40c      	push	{r2, r3}
 8007aa2:	b530      	push	{r4, r5, lr}
 8007aa4:	4b18      	ldr	r3, [pc, #96]	@ (8007b08 <sniprintf+0x68>)
 8007aa6:	1e0c      	subs	r4, r1, #0
 8007aa8:	681d      	ldr	r5, [r3, #0]
 8007aaa:	b09d      	sub	sp, #116	@ 0x74
 8007aac:	da08      	bge.n	8007ac0 <sniprintf+0x20>
 8007aae:	238b      	movs	r3, #139	@ 0x8b
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab6:	b01d      	add	sp, #116	@ 0x74
 8007ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007abc:	b002      	add	sp, #8
 8007abe:	4770      	bx	lr
 8007ac0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ac4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007ace:	bf14      	ite	ne
 8007ad0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ad4:	4623      	moveq	r3, r4
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	9307      	str	r3, [sp, #28]
 8007ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ade:	9002      	str	r0, [sp, #8]
 8007ae0:	9006      	str	r0, [sp, #24]
 8007ae2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ae6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ae8:	ab21      	add	r3, sp, #132	@ 0x84
 8007aea:	a902      	add	r1, sp, #8
 8007aec:	4628      	mov	r0, r5
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	f000 fadc 	bl	80080ac <_svfiprintf_r>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	bfbc      	itt	lt
 8007af8:	238b      	movlt	r3, #139	@ 0x8b
 8007afa:	602b      	strlt	r3, [r5, #0]
 8007afc:	2c00      	cmp	r4, #0
 8007afe:	d0da      	beq.n	8007ab6 <sniprintf+0x16>
 8007b00:	9b02      	ldr	r3, [sp, #8]
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	e7d6      	b.n	8007ab6 <sniprintf+0x16>
 8007b08:	20000030 	.word	0x20000030

08007b0c <__sread>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	460c      	mov	r4, r1
 8007b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b14:	f000 f916 	bl	8007d44 <_read_r>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	bfab      	itete	ge
 8007b1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b20:	181b      	addge	r3, r3, r0
 8007b22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b26:	bfac      	ite	ge
 8007b28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b2a:	81a3      	strhlt	r3, [r4, #12]
 8007b2c:	bd10      	pop	{r4, pc}

08007b2e <__swrite>:
 8007b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	461f      	mov	r7, r3
 8007b34:	898b      	ldrh	r3, [r1, #12]
 8007b36:	05db      	lsls	r3, r3, #23
 8007b38:	4605      	mov	r5, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	4616      	mov	r6, r2
 8007b3e:	d505      	bpl.n	8007b4c <__swrite+0x1e>
 8007b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b44:	2302      	movs	r3, #2
 8007b46:	2200      	movs	r2, #0
 8007b48:	f000 f8ea 	bl	8007d20 <_lseek_r>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	4632      	mov	r2, r6
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	f000 b901 	b.w	8007d68 <_write_r>

08007b66 <__sseek>:
 8007b66:	b510      	push	{r4, lr}
 8007b68:	460c      	mov	r4, r1
 8007b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6e:	f000 f8d7 	bl	8007d20 <_lseek_r>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	bf15      	itete	ne
 8007b78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b82:	81a3      	strheq	r3, [r4, #12]
 8007b84:	bf18      	it	ne
 8007b86:	81a3      	strhne	r3, [r4, #12]
 8007b88:	bd10      	pop	{r4, pc}

08007b8a <__sclose>:
 8007b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8e:	f000 b8b7 	b.w	8007d00 <_close_r>

08007b92 <__swbuf_r>:
 8007b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b94:	460e      	mov	r6, r1
 8007b96:	4614      	mov	r4, r2
 8007b98:	4605      	mov	r5, r0
 8007b9a:	b118      	cbz	r0, 8007ba4 <__swbuf_r+0x12>
 8007b9c:	6a03      	ldr	r3, [r0, #32]
 8007b9e:	b90b      	cbnz	r3, 8007ba4 <__swbuf_r+0x12>
 8007ba0:	f7ff feea 	bl	8007978 <__sinit>
 8007ba4:	69a3      	ldr	r3, [r4, #24]
 8007ba6:	60a3      	str	r3, [r4, #8]
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	071a      	lsls	r2, r3, #28
 8007bac:	d501      	bpl.n	8007bb2 <__swbuf_r+0x20>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	b943      	cbnz	r3, 8007bc4 <__swbuf_r+0x32>
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f000 f82b 	bl	8007c10 <__swsetup_r>
 8007bba:	b118      	cbz	r0, 8007bc4 <__swbuf_r+0x32>
 8007bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	6922      	ldr	r2, [r4, #16]
 8007bc8:	1a98      	subs	r0, r3, r2
 8007bca:	6963      	ldr	r3, [r4, #20]
 8007bcc:	b2f6      	uxtb	r6, r6
 8007bce:	4283      	cmp	r3, r0
 8007bd0:	4637      	mov	r7, r6
 8007bd2:	dc05      	bgt.n	8007be0 <__swbuf_r+0x4e>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fd74 	bl	80086c4 <_fflush_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1ed      	bne.n	8007bbc <__swbuf_r+0x2a>
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	60a3      	str	r3, [r4, #8]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	6022      	str	r2, [r4, #0]
 8007bec:	701e      	strb	r6, [r3, #0]
 8007bee:	6962      	ldr	r2, [r4, #20]
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d004      	beq.n	8007c00 <__swbuf_r+0x6e>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	07db      	lsls	r3, r3, #31
 8007bfa:	d5e1      	bpl.n	8007bc0 <__swbuf_r+0x2e>
 8007bfc:	2e0a      	cmp	r6, #10
 8007bfe:	d1df      	bne.n	8007bc0 <__swbuf_r+0x2e>
 8007c00:	4621      	mov	r1, r4
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 fd5e 	bl	80086c4 <_fflush_r>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d0d9      	beq.n	8007bc0 <__swbuf_r+0x2e>
 8007c0c:	e7d6      	b.n	8007bbc <__swbuf_r+0x2a>
	...

08007c10 <__swsetup_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4b29      	ldr	r3, [pc, #164]	@ (8007cb8 <__swsetup_r+0xa8>)
 8007c14:	4605      	mov	r5, r0
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	460c      	mov	r4, r1
 8007c1a:	b118      	cbz	r0, 8007c24 <__swsetup_r+0x14>
 8007c1c:	6a03      	ldr	r3, [r0, #32]
 8007c1e:	b90b      	cbnz	r3, 8007c24 <__swsetup_r+0x14>
 8007c20:	f7ff feaa 	bl	8007978 <__sinit>
 8007c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c28:	0719      	lsls	r1, r3, #28
 8007c2a:	d422      	bmi.n	8007c72 <__swsetup_r+0x62>
 8007c2c:	06da      	lsls	r2, r3, #27
 8007c2e:	d407      	bmi.n	8007c40 <__swsetup_r+0x30>
 8007c30:	2209      	movs	r2, #9
 8007c32:	602a      	str	r2, [r5, #0]
 8007c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3e:	e033      	b.n	8007ca8 <__swsetup_r+0x98>
 8007c40:	0758      	lsls	r0, r3, #29
 8007c42:	d512      	bpl.n	8007c6a <__swsetup_r+0x5a>
 8007c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c46:	b141      	cbz	r1, 8007c5a <__swsetup_r+0x4a>
 8007c48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	d002      	beq.n	8007c56 <__swsetup_r+0x46>
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 f8d7 	bl	8007e04 <_free_r>
 8007c56:	2300      	movs	r3, #0
 8007c58:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6063      	str	r3, [r4, #4]
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f043 0308 	orr.w	r3, r3, #8
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	b94b      	cbnz	r3, 8007c8a <__swsetup_r+0x7a>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c80:	d003      	beq.n	8007c8a <__swsetup_r+0x7a>
 8007c82:	4621      	mov	r1, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 fd6b 	bl	8008760 <__smakebuf_r>
 8007c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8e:	f013 0201 	ands.w	r2, r3, #1
 8007c92:	d00a      	beq.n	8007caa <__swsetup_r+0x9a>
 8007c94:	2200      	movs	r2, #0
 8007c96:	60a2      	str	r2, [r4, #8]
 8007c98:	6962      	ldr	r2, [r4, #20]
 8007c9a:	4252      	negs	r2, r2
 8007c9c:	61a2      	str	r2, [r4, #24]
 8007c9e:	6922      	ldr	r2, [r4, #16]
 8007ca0:	b942      	cbnz	r2, 8007cb4 <__swsetup_r+0xa4>
 8007ca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ca6:	d1c5      	bne.n	8007c34 <__swsetup_r+0x24>
 8007ca8:	bd38      	pop	{r3, r4, r5, pc}
 8007caa:	0799      	lsls	r1, r3, #30
 8007cac:	bf58      	it	pl
 8007cae:	6962      	ldrpl	r2, [r4, #20]
 8007cb0:	60a2      	str	r2, [r4, #8]
 8007cb2:	e7f4      	b.n	8007c9e <__swsetup_r+0x8e>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e7f7      	b.n	8007ca8 <__swsetup_r+0x98>
 8007cb8:	20000030 	.word	0x20000030

08007cbc <memmove>:
 8007cbc:	4288      	cmp	r0, r1
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	eb01 0402 	add.w	r4, r1, r2
 8007cc4:	d902      	bls.n	8007ccc <memmove+0x10>
 8007cc6:	4284      	cmp	r4, r0
 8007cc8:	4623      	mov	r3, r4
 8007cca:	d807      	bhi.n	8007cdc <memmove+0x20>
 8007ccc:	1e43      	subs	r3, r0, #1
 8007cce:	42a1      	cmp	r1, r4
 8007cd0:	d008      	beq.n	8007ce4 <memmove+0x28>
 8007cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cda:	e7f8      	b.n	8007cce <memmove+0x12>
 8007cdc:	4402      	add	r2, r0
 8007cde:	4601      	mov	r1, r0
 8007ce0:	428a      	cmp	r2, r1
 8007ce2:	d100      	bne.n	8007ce6 <memmove+0x2a>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cee:	e7f7      	b.n	8007ce0 <memmove+0x24>

08007cf0 <memset>:
 8007cf0:	4402      	add	r2, r0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <memset+0xa>
 8007cf8:	4770      	bx	lr
 8007cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfe:	e7f9      	b.n	8007cf4 <memset+0x4>

08007d00 <_close_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d06      	ldr	r5, [pc, #24]	@ (8007d1c <_close_r+0x1c>)
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	f7fb f99d 	bl	800304a <_close>
 8007d10:	1c43      	adds	r3, r0, #1
 8007d12:	d102      	bne.n	8007d1a <_close_r+0x1a>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	b103      	cbz	r3, 8007d1a <_close_r+0x1a>
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	20002050 	.word	0x20002050

08007d20 <_lseek_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d07      	ldr	r5, [pc, #28]	@ (8007d40 <_lseek_r+0x20>)
 8007d24:	4604      	mov	r4, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f7fb f9b2 	bl	8003098 <_lseek>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_lseek_r+0x1e>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_lseek_r+0x1e>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	20002050 	.word	0x20002050

08007d44 <_read_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d07      	ldr	r5, [pc, #28]	@ (8007d64 <_read_r+0x20>)
 8007d48:	4604      	mov	r4, r0
 8007d4a:	4608      	mov	r0, r1
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	2200      	movs	r2, #0
 8007d50:	602a      	str	r2, [r5, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f7fb f95c 	bl	8003010 <_read>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_read_r+0x1e>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_read_r+0x1e>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	20002050 	.word	0x20002050

08007d68 <_write_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	@ (8007d88 <_write_r+0x20>)
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4611      	mov	r1, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7f9 f884 	bl	8000e84 <_write>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_write_r+0x1e>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_write_r+0x1e>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20002050 	.word	0x20002050

08007d8c <__errno>:
 8007d8c:	4b01      	ldr	r3, [pc, #4]	@ (8007d94 <__errno+0x8>)
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000030 	.word	0x20000030

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007dd0 <__libc_init_array+0x38>)
 8007d9c:	4c0d      	ldr	r4, [pc, #52]	@ (8007dd4 <__libc_init_array+0x3c>)
 8007d9e:	1b64      	subs	r4, r4, r5
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	2600      	movs	r6, #0
 8007da4:	42a6      	cmp	r6, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	4d0b      	ldr	r5, [pc, #44]	@ (8007dd8 <__libc_init_array+0x40>)
 8007daa:	4c0c      	ldr	r4, [pc, #48]	@ (8007ddc <__libc_init_array+0x44>)
 8007dac:	f001 faf0 	bl	8009390 <_init>
 8007db0:	1b64      	subs	r4, r4, r5
 8007db2:	10a4      	asrs	r4, r4, #2
 8007db4:	2600      	movs	r6, #0
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc0:	4798      	blx	r3
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dca:	4798      	blx	r3
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	0800eab0 	.word	0x0800eab0
 8007dd4:	0800eab0 	.word	0x0800eab0
 8007dd8:	0800eab0 	.word	0x0800eab0
 8007ddc:	0800eab4 	.word	0x0800eab4

08007de0 <__retarget_lock_init_recursive>:
 8007de0:	4770      	bx	lr

08007de2 <__retarget_lock_acquire_recursive>:
 8007de2:	4770      	bx	lr

08007de4 <__retarget_lock_release_recursive>:
 8007de4:	4770      	bx	lr

08007de6 <memcpy>:
 8007de6:	440a      	add	r2, r1
 8007de8:	4291      	cmp	r1, r2
 8007dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dee:	d100      	bne.n	8007df2 <memcpy+0xc>
 8007df0:	4770      	bx	lr
 8007df2:	b510      	push	{r4, lr}
 8007df4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dfc:	4291      	cmp	r1, r2
 8007dfe:	d1f9      	bne.n	8007df4 <memcpy+0xe>
 8007e00:	bd10      	pop	{r4, pc}
	...

08007e04 <_free_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	4605      	mov	r5, r0
 8007e08:	2900      	cmp	r1, #0
 8007e0a:	d041      	beq.n	8007e90 <_free_r+0x8c>
 8007e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e10:	1f0c      	subs	r4, r1, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfb8      	it	lt
 8007e16:	18e4      	addlt	r4, r4, r3
 8007e18:	f000 f8e0 	bl	8007fdc <__malloc_lock>
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e94 <_free_r+0x90>)
 8007e1e:	6813      	ldr	r3, [r2, #0]
 8007e20:	b933      	cbnz	r3, 8007e30 <_free_r+0x2c>
 8007e22:	6063      	str	r3, [r4, #4]
 8007e24:	6014      	str	r4, [r2, #0]
 8007e26:	4628      	mov	r0, r5
 8007e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e2c:	f000 b8dc 	b.w	8007fe8 <__malloc_unlock>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d908      	bls.n	8007e46 <_free_r+0x42>
 8007e34:	6820      	ldr	r0, [r4, #0]
 8007e36:	1821      	adds	r1, r4, r0
 8007e38:	428b      	cmp	r3, r1
 8007e3a:	bf01      	itttt	eq
 8007e3c:	6819      	ldreq	r1, [r3, #0]
 8007e3e:	685b      	ldreq	r3, [r3, #4]
 8007e40:	1809      	addeq	r1, r1, r0
 8007e42:	6021      	streq	r1, [r4, #0]
 8007e44:	e7ed      	b.n	8007e22 <_free_r+0x1e>
 8007e46:	461a      	mov	r2, r3
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	b10b      	cbz	r3, 8007e50 <_free_r+0x4c>
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	d9fa      	bls.n	8007e46 <_free_r+0x42>
 8007e50:	6811      	ldr	r1, [r2, #0]
 8007e52:	1850      	adds	r0, r2, r1
 8007e54:	42a0      	cmp	r0, r4
 8007e56:	d10b      	bne.n	8007e70 <_free_r+0x6c>
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	4401      	add	r1, r0
 8007e5c:	1850      	adds	r0, r2, r1
 8007e5e:	4283      	cmp	r3, r0
 8007e60:	6011      	str	r1, [r2, #0]
 8007e62:	d1e0      	bne.n	8007e26 <_free_r+0x22>
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	6053      	str	r3, [r2, #4]
 8007e6a:	4408      	add	r0, r1
 8007e6c:	6010      	str	r0, [r2, #0]
 8007e6e:	e7da      	b.n	8007e26 <_free_r+0x22>
 8007e70:	d902      	bls.n	8007e78 <_free_r+0x74>
 8007e72:	230c      	movs	r3, #12
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	e7d6      	b.n	8007e26 <_free_r+0x22>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	1821      	adds	r1, r4, r0
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	bf04      	itt	eq
 8007e80:	6819      	ldreq	r1, [r3, #0]
 8007e82:	685b      	ldreq	r3, [r3, #4]
 8007e84:	6063      	str	r3, [r4, #4]
 8007e86:	bf04      	itt	eq
 8007e88:	1809      	addeq	r1, r1, r0
 8007e8a:	6021      	streq	r1, [r4, #0]
 8007e8c:	6054      	str	r4, [r2, #4]
 8007e8e:	e7ca      	b.n	8007e26 <_free_r+0x22>
 8007e90:	bd38      	pop	{r3, r4, r5, pc}
 8007e92:	bf00      	nop
 8007e94:	2000205c 	.word	0x2000205c

08007e98 <sbrk_aligned>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	4e0f      	ldr	r6, [pc, #60]	@ (8007ed8 <sbrk_aligned+0x40>)
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	6831      	ldr	r1, [r6, #0]
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	b911      	cbnz	r1, 8007eaa <sbrk_aligned+0x12>
 8007ea4:	f000 fcba 	bl	800881c <_sbrk_r>
 8007ea8:	6030      	str	r0, [r6, #0]
 8007eaa:	4621      	mov	r1, r4
 8007eac:	4628      	mov	r0, r5
 8007eae:	f000 fcb5 	bl	800881c <_sbrk_r>
 8007eb2:	1c43      	adds	r3, r0, #1
 8007eb4:	d103      	bne.n	8007ebe <sbrk_aligned+0x26>
 8007eb6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eba:	4620      	mov	r0, r4
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
 8007ebe:	1cc4      	adds	r4, r0, #3
 8007ec0:	f024 0403 	bic.w	r4, r4, #3
 8007ec4:	42a0      	cmp	r0, r4
 8007ec6:	d0f8      	beq.n	8007eba <sbrk_aligned+0x22>
 8007ec8:	1a21      	subs	r1, r4, r0
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 fca6 	bl	800881c <_sbrk_r>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d1f2      	bne.n	8007eba <sbrk_aligned+0x22>
 8007ed4:	e7ef      	b.n	8007eb6 <sbrk_aligned+0x1e>
 8007ed6:	bf00      	nop
 8007ed8:	20002058 	.word	0x20002058

08007edc <_malloc_r>:
 8007edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee0:	1ccd      	adds	r5, r1, #3
 8007ee2:	f025 0503 	bic.w	r5, r5, #3
 8007ee6:	3508      	adds	r5, #8
 8007ee8:	2d0c      	cmp	r5, #12
 8007eea:	bf38      	it	cc
 8007eec:	250c      	movcc	r5, #12
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	db01      	blt.n	8007ef8 <_malloc_r+0x1c>
 8007ef4:	42a9      	cmp	r1, r5
 8007ef6:	d904      	bls.n	8007f02 <_malloc_r+0x26>
 8007ef8:	230c      	movs	r3, #12
 8007efa:	6033      	str	r3, [r6, #0]
 8007efc:	2000      	movs	r0, #0
 8007efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fd8 <_malloc_r+0xfc>
 8007f06:	f000 f869 	bl	8007fdc <__malloc_lock>
 8007f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0e:	461c      	mov	r4, r3
 8007f10:	bb44      	cbnz	r4, 8007f64 <_malloc_r+0x88>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7ff ffbf 	bl	8007e98 <sbrk_aligned>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	d158      	bne.n	8007fd2 <_malloc_r+0xf6>
 8007f20:	f8d8 4000 	ldr.w	r4, [r8]
 8007f24:	4627      	mov	r7, r4
 8007f26:	2f00      	cmp	r7, #0
 8007f28:	d143      	bne.n	8007fb2 <_malloc_r+0xd6>
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	d04b      	beq.n	8007fc6 <_malloc_r+0xea>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	4639      	mov	r1, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	eb04 0903 	add.w	r9, r4, r3
 8007f38:	f000 fc70 	bl	800881c <_sbrk_r>
 8007f3c:	4581      	cmp	r9, r0
 8007f3e:	d142      	bne.n	8007fc6 <_malloc_r+0xea>
 8007f40:	6821      	ldr	r1, [r4, #0]
 8007f42:	1a6d      	subs	r5, r5, r1
 8007f44:	4629      	mov	r1, r5
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7ff ffa6 	bl	8007e98 <sbrk_aligned>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d03a      	beq.n	8007fc6 <_malloc_r+0xea>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	442b      	add	r3, r5
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	f8d8 3000 	ldr.w	r3, [r8]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	bb62      	cbnz	r2, 8007fb8 <_malloc_r+0xdc>
 8007f5e:	f8c8 7000 	str.w	r7, [r8]
 8007f62:	e00f      	b.n	8007f84 <_malloc_r+0xa8>
 8007f64:	6822      	ldr	r2, [r4, #0]
 8007f66:	1b52      	subs	r2, r2, r5
 8007f68:	d420      	bmi.n	8007fac <_malloc_r+0xd0>
 8007f6a:	2a0b      	cmp	r2, #11
 8007f6c:	d917      	bls.n	8007f9e <_malloc_r+0xc2>
 8007f6e:	1961      	adds	r1, r4, r5
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	6025      	str	r5, [r4, #0]
 8007f74:	bf18      	it	ne
 8007f76:	6059      	strne	r1, [r3, #4]
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	bf08      	it	eq
 8007f7c:	f8c8 1000 	streq.w	r1, [r8]
 8007f80:	5162      	str	r2, [r4, r5]
 8007f82:	604b      	str	r3, [r1, #4]
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f82f 	bl	8007fe8 <__malloc_unlock>
 8007f8a:	f104 000b 	add.w	r0, r4, #11
 8007f8e:	1d23      	adds	r3, r4, #4
 8007f90:	f020 0007 	bic.w	r0, r0, #7
 8007f94:	1ac2      	subs	r2, r0, r3
 8007f96:	bf1c      	itt	ne
 8007f98:	1a1b      	subne	r3, r3, r0
 8007f9a:	50a3      	strne	r3, [r4, r2]
 8007f9c:	e7af      	b.n	8007efe <_malloc_r+0x22>
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	bf0c      	ite	eq
 8007fa4:	f8c8 2000 	streq.w	r2, [r8]
 8007fa8:	605a      	strne	r2, [r3, #4]
 8007faa:	e7eb      	b.n	8007f84 <_malloc_r+0xa8>
 8007fac:	4623      	mov	r3, r4
 8007fae:	6864      	ldr	r4, [r4, #4]
 8007fb0:	e7ae      	b.n	8007f10 <_malloc_r+0x34>
 8007fb2:	463c      	mov	r4, r7
 8007fb4:	687f      	ldr	r7, [r7, #4]
 8007fb6:	e7b6      	b.n	8007f26 <_malloc_r+0x4a>
 8007fb8:	461a      	mov	r2, r3
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d1fb      	bne.n	8007fb8 <_malloc_r+0xdc>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	6053      	str	r3, [r2, #4]
 8007fc4:	e7de      	b.n	8007f84 <_malloc_r+0xa8>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f80c 	bl	8007fe8 <__malloc_unlock>
 8007fd0:	e794      	b.n	8007efc <_malloc_r+0x20>
 8007fd2:	6005      	str	r5, [r0, #0]
 8007fd4:	e7d6      	b.n	8007f84 <_malloc_r+0xa8>
 8007fd6:	bf00      	nop
 8007fd8:	2000205c 	.word	0x2000205c

08007fdc <__malloc_lock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <__malloc_lock+0x8>)
 8007fde:	f7ff bf00 	b.w	8007de2 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20002054 	.word	0x20002054

08007fe8 <__malloc_unlock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__malloc_unlock+0x8>)
 8007fea:	f7ff befb 	b.w	8007de4 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20002054 	.word	0x20002054

08007ff4 <__ssputs_r>:
 8007ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	688e      	ldr	r6, [r1, #8]
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	42be      	cmp	r6, r7
 8007ffe:	680b      	ldr	r3, [r1, #0]
 8008000:	4682      	mov	sl, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4690      	mov	r8, r2
 8008006:	d82d      	bhi.n	8008064 <__ssputs_r+0x70>
 8008008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800800c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008010:	d026      	beq.n	8008060 <__ssputs_r+0x6c>
 8008012:	6965      	ldr	r5, [r4, #20]
 8008014:	6909      	ldr	r1, [r1, #16]
 8008016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800801a:	eba3 0901 	sub.w	r9, r3, r1
 800801e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008022:	1c7b      	adds	r3, r7, #1
 8008024:	444b      	add	r3, r9
 8008026:	106d      	asrs	r5, r5, #1
 8008028:	429d      	cmp	r5, r3
 800802a:	bf38      	it	cc
 800802c:	461d      	movcc	r5, r3
 800802e:	0553      	lsls	r3, r2, #21
 8008030:	d527      	bpl.n	8008082 <__ssputs_r+0x8e>
 8008032:	4629      	mov	r1, r5
 8008034:	f7ff ff52 	bl	8007edc <_malloc_r>
 8008038:	4606      	mov	r6, r0
 800803a:	b360      	cbz	r0, 8008096 <__ssputs_r+0xa2>
 800803c:	6921      	ldr	r1, [r4, #16]
 800803e:	464a      	mov	r2, r9
 8008040:	f7ff fed1 	bl	8007de6 <memcpy>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800804a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	6126      	str	r6, [r4, #16]
 8008052:	6165      	str	r5, [r4, #20]
 8008054:	444e      	add	r6, r9
 8008056:	eba5 0509 	sub.w	r5, r5, r9
 800805a:	6026      	str	r6, [r4, #0]
 800805c:	60a5      	str	r5, [r4, #8]
 800805e:	463e      	mov	r6, r7
 8008060:	42be      	cmp	r6, r7
 8008062:	d900      	bls.n	8008066 <__ssputs_r+0x72>
 8008064:	463e      	mov	r6, r7
 8008066:	6820      	ldr	r0, [r4, #0]
 8008068:	4632      	mov	r2, r6
 800806a:	4641      	mov	r1, r8
 800806c:	f7ff fe26 	bl	8007cbc <memmove>
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	1b9b      	subs	r3, r3, r6
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	4433      	add	r3, r6
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	2000      	movs	r0, #0
 800807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008082:	462a      	mov	r2, r5
 8008084:	f000 fbda 	bl	800883c <_realloc_r>
 8008088:	4606      	mov	r6, r0
 800808a:	2800      	cmp	r0, #0
 800808c:	d1e0      	bne.n	8008050 <__ssputs_r+0x5c>
 800808e:	6921      	ldr	r1, [r4, #16]
 8008090:	4650      	mov	r0, sl
 8008092:	f7ff feb7 	bl	8007e04 <_free_r>
 8008096:	230c      	movs	r3, #12
 8008098:	f8ca 3000 	str.w	r3, [sl]
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e7e9      	b.n	800807e <__ssputs_r+0x8a>
	...

080080ac <_svfiprintf_r>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	4698      	mov	r8, r3
 80080b2:	898b      	ldrh	r3, [r1, #12]
 80080b4:	061b      	lsls	r3, r3, #24
 80080b6:	b09d      	sub	sp, #116	@ 0x74
 80080b8:	4607      	mov	r7, r0
 80080ba:	460d      	mov	r5, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	d510      	bpl.n	80080e2 <_svfiprintf_r+0x36>
 80080c0:	690b      	ldr	r3, [r1, #16]
 80080c2:	b973      	cbnz	r3, 80080e2 <_svfiprintf_r+0x36>
 80080c4:	2140      	movs	r1, #64	@ 0x40
 80080c6:	f7ff ff09 	bl	8007edc <_malloc_r>
 80080ca:	6028      	str	r0, [r5, #0]
 80080cc:	6128      	str	r0, [r5, #16]
 80080ce:	b930      	cbnz	r0, 80080de <_svfiprintf_r+0x32>
 80080d0:	230c      	movs	r3, #12
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295
 80080d8:	b01d      	add	sp, #116	@ 0x74
 80080da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	2340      	movs	r3, #64	@ 0x40
 80080e0:	616b      	str	r3, [r5, #20]
 80080e2:	2300      	movs	r3, #0
 80080e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e6:	2320      	movs	r3, #32
 80080e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f0:	2330      	movs	r3, #48	@ 0x30
 80080f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008290 <_svfiprintf_r+0x1e4>
 80080f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080fa:	f04f 0901 	mov.w	r9, #1
 80080fe:	4623      	mov	r3, r4
 8008100:	469a      	mov	sl, r3
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	b10a      	cbz	r2, 800810c <_svfiprintf_r+0x60>
 8008108:	2a25      	cmp	r2, #37	@ 0x25
 800810a:	d1f9      	bne.n	8008100 <_svfiprintf_r+0x54>
 800810c:	ebba 0b04 	subs.w	fp, sl, r4
 8008110:	d00b      	beq.n	800812a <_svfiprintf_r+0x7e>
 8008112:	465b      	mov	r3, fp
 8008114:	4622      	mov	r2, r4
 8008116:	4629      	mov	r1, r5
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff ff6b 	bl	8007ff4 <__ssputs_r>
 800811e:	3001      	adds	r0, #1
 8008120:	f000 80a7 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008126:	445a      	add	r2, fp
 8008128:	9209      	str	r2, [sp, #36]	@ 0x24
 800812a:	f89a 3000 	ldrb.w	r3, [sl]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 809f 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008134:	2300      	movs	r3, #0
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800813e:	f10a 0a01 	add.w	sl, sl, #1
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	9307      	str	r3, [sp, #28]
 8008146:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800814a:	931a      	str	r3, [sp, #104]	@ 0x68
 800814c:	4654      	mov	r4, sl
 800814e:	2205      	movs	r2, #5
 8008150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008154:	484e      	ldr	r0, [pc, #312]	@ (8008290 <_svfiprintf_r+0x1e4>)
 8008156:	f7f8 f84b 	bl	80001f0 <memchr>
 800815a:	9a04      	ldr	r2, [sp, #16]
 800815c:	b9d8      	cbnz	r0, 8008196 <_svfiprintf_r+0xea>
 800815e:	06d0      	lsls	r0, r2, #27
 8008160:	bf44      	itt	mi
 8008162:	2320      	movmi	r3, #32
 8008164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008168:	0711      	lsls	r1, r2, #28
 800816a:	bf44      	itt	mi
 800816c:	232b      	movmi	r3, #43	@ 0x2b
 800816e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	2b2a      	cmp	r3, #42	@ 0x2a
 8008178:	d015      	beq.n	80081a6 <_svfiprintf_r+0xfa>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	4654      	mov	r4, sl
 800817e:	2000      	movs	r0, #0
 8008180:	f04f 0c0a 	mov.w	ip, #10
 8008184:	4621      	mov	r1, r4
 8008186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800818a:	3b30      	subs	r3, #48	@ 0x30
 800818c:	2b09      	cmp	r3, #9
 800818e:	d94b      	bls.n	8008228 <_svfiprintf_r+0x17c>
 8008190:	b1b0      	cbz	r0, 80081c0 <_svfiprintf_r+0x114>
 8008192:	9207      	str	r2, [sp, #28]
 8008194:	e014      	b.n	80081c0 <_svfiprintf_r+0x114>
 8008196:	eba0 0308 	sub.w	r3, r0, r8
 800819a:	fa09 f303 	lsl.w	r3, r9, r3
 800819e:	4313      	orrs	r3, r2
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	46a2      	mov	sl, r4
 80081a4:	e7d2      	b.n	800814c <_svfiprintf_r+0xa0>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	1d19      	adds	r1, r3, #4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	9103      	str	r1, [sp, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfbb      	ittet	lt
 80081b2:	425b      	neglt	r3, r3
 80081b4:	f042 0202 	orrlt.w	r2, r2, #2
 80081b8:	9307      	strge	r3, [sp, #28]
 80081ba:	9307      	strlt	r3, [sp, #28]
 80081bc:	bfb8      	it	lt
 80081be:	9204      	strlt	r2, [sp, #16]
 80081c0:	7823      	ldrb	r3, [r4, #0]
 80081c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80081c4:	d10a      	bne.n	80081dc <_svfiprintf_r+0x130>
 80081c6:	7863      	ldrb	r3, [r4, #1]
 80081c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ca:	d132      	bne.n	8008232 <_svfiprintf_r+0x186>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	1d1a      	adds	r2, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	9203      	str	r2, [sp, #12]
 80081d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081d8:	3402      	adds	r4, #2
 80081da:	9305      	str	r3, [sp, #20]
 80081dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082a0 <_svfiprintf_r+0x1f4>
 80081e0:	7821      	ldrb	r1, [r4, #0]
 80081e2:	2203      	movs	r2, #3
 80081e4:	4650      	mov	r0, sl
 80081e6:	f7f8 f803 	bl	80001f0 <memchr>
 80081ea:	b138      	cbz	r0, 80081fc <_svfiprintf_r+0x150>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	eba0 000a 	sub.w	r0, r0, sl
 80081f2:	2240      	movs	r2, #64	@ 0x40
 80081f4:	4082      	lsls	r2, r0
 80081f6:	4313      	orrs	r3, r2
 80081f8:	3401      	adds	r4, #1
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	4824      	ldr	r0, [pc, #144]	@ (8008294 <_svfiprintf_r+0x1e8>)
 8008202:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008206:	2206      	movs	r2, #6
 8008208:	f7f7 fff2 	bl	80001f0 <memchr>
 800820c:	2800      	cmp	r0, #0
 800820e:	d036      	beq.n	800827e <_svfiprintf_r+0x1d2>
 8008210:	4b21      	ldr	r3, [pc, #132]	@ (8008298 <_svfiprintf_r+0x1ec>)
 8008212:	bb1b      	cbnz	r3, 800825c <_svfiprintf_r+0x1b0>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	3307      	adds	r3, #7
 8008218:	f023 0307 	bic.w	r3, r3, #7
 800821c:	3308      	adds	r3, #8
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008222:	4433      	add	r3, r6
 8008224:	9309      	str	r3, [sp, #36]	@ 0x24
 8008226:	e76a      	b.n	80080fe <_svfiprintf_r+0x52>
 8008228:	fb0c 3202 	mla	r2, ip, r2, r3
 800822c:	460c      	mov	r4, r1
 800822e:	2001      	movs	r0, #1
 8008230:	e7a8      	b.n	8008184 <_svfiprintf_r+0xd8>
 8008232:	2300      	movs	r3, #0
 8008234:	3401      	adds	r4, #1
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	4619      	mov	r1, r3
 800823a:	f04f 0c0a 	mov.w	ip, #10
 800823e:	4620      	mov	r0, r4
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	3a30      	subs	r2, #48	@ 0x30
 8008246:	2a09      	cmp	r2, #9
 8008248:	d903      	bls.n	8008252 <_svfiprintf_r+0x1a6>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0c6      	beq.n	80081dc <_svfiprintf_r+0x130>
 800824e:	9105      	str	r1, [sp, #20]
 8008250:	e7c4      	b.n	80081dc <_svfiprintf_r+0x130>
 8008252:	fb0c 2101 	mla	r1, ip, r1, r2
 8008256:	4604      	mov	r4, r0
 8008258:	2301      	movs	r3, #1
 800825a:	e7f0      	b.n	800823e <_svfiprintf_r+0x192>
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4b0e      	ldr	r3, [pc, #56]	@ (800829c <_svfiprintf_r+0x1f0>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	4638      	mov	r0, r7
 8008268:	f3af 8000 	nop.w
 800826c:	1c42      	adds	r2, r0, #1
 800826e:	4606      	mov	r6, r0
 8008270:	d1d6      	bne.n	8008220 <_svfiprintf_r+0x174>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	065b      	lsls	r3, r3, #25
 8008276:	f53f af2d 	bmi.w	80080d4 <_svfiprintf_r+0x28>
 800827a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800827c:	e72c      	b.n	80080d8 <_svfiprintf_r+0x2c>
 800827e:	ab03      	add	r3, sp, #12
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	462a      	mov	r2, r5
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <_svfiprintf_r+0x1f0>)
 8008286:	a904      	add	r1, sp, #16
 8008288:	4638      	mov	r0, r7
 800828a:	f000 f879 	bl	8008380 <_printf_i>
 800828e:	e7ed      	b.n	800826c <_svfiprintf_r+0x1c0>
 8008290:	0800e6a4 	.word	0x0800e6a4
 8008294:	0800e6ae 	.word	0x0800e6ae
 8008298:	00000000 	.word	0x00000000
 800829c:	08007ff5 	.word	0x08007ff5
 80082a0:	0800e6aa 	.word	0x0800e6aa

080082a4 <_printf_common>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	4616      	mov	r6, r2
 80082aa:	4698      	mov	r8, r3
 80082ac:	688a      	ldr	r2, [r1, #8]
 80082ae:	690b      	ldr	r3, [r1, #16]
 80082b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082b4:	4293      	cmp	r3, r2
 80082b6:	bfb8      	it	lt
 80082b8:	4613      	movlt	r3, r2
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082c0:	4607      	mov	r7, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b10a      	cbz	r2, 80082ca <_printf_common+0x26>
 80082c6:	3301      	adds	r3, #1
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	0699      	lsls	r1, r3, #26
 80082ce:	bf42      	ittt	mi
 80082d0:	6833      	ldrmi	r3, [r6, #0]
 80082d2:	3302      	addmi	r3, #2
 80082d4:	6033      	strmi	r3, [r6, #0]
 80082d6:	6825      	ldr	r5, [r4, #0]
 80082d8:	f015 0506 	ands.w	r5, r5, #6
 80082dc:	d106      	bne.n	80082ec <_printf_common+0x48>
 80082de:	f104 0a19 	add.w	sl, r4, #25
 80082e2:	68e3      	ldr	r3, [r4, #12]
 80082e4:	6832      	ldr	r2, [r6, #0]
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dc26      	bgt.n	800833a <_printf_common+0x96>
 80082ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082f0:	6822      	ldr	r2, [r4, #0]
 80082f2:	3b00      	subs	r3, #0
 80082f4:	bf18      	it	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	0692      	lsls	r2, r2, #26
 80082fa:	d42b      	bmi.n	8008354 <_printf_common+0xb0>
 80082fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008300:	4641      	mov	r1, r8
 8008302:	4638      	mov	r0, r7
 8008304:	47c8      	blx	r9
 8008306:	3001      	adds	r0, #1
 8008308:	d01e      	beq.n	8008348 <_printf_common+0xa4>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	f003 0306 	and.w	r3, r3, #6
 8008312:	2b04      	cmp	r3, #4
 8008314:	bf02      	ittt	eq
 8008316:	68e5      	ldreq	r5, [r4, #12]
 8008318:	6833      	ldreq	r3, [r6, #0]
 800831a:	1aed      	subeq	r5, r5, r3
 800831c:	68a3      	ldr	r3, [r4, #8]
 800831e:	bf0c      	ite	eq
 8008320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008324:	2500      	movne	r5, #0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfc4      	itt	gt
 800832a:	1a9b      	subgt	r3, r3, r2
 800832c:	18ed      	addgt	r5, r5, r3
 800832e:	2600      	movs	r6, #0
 8008330:	341a      	adds	r4, #26
 8008332:	42b5      	cmp	r5, r6
 8008334:	d11a      	bne.n	800836c <_printf_common+0xc8>
 8008336:	2000      	movs	r0, #0
 8008338:	e008      	b.n	800834c <_printf_common+0xa8>
 800833a:	2301      	movs	r3, #1
 800833c:	4652      	mov	r2, sl
 800833e:	4641      	mov	r1, r8
 8008340:	4638      	mov	r0, r7
 8008342:	47c8      	blx	r9
 8008344:	3001      	adds	r0, #1
 8008346:	d103      	bne.n	8008350 <_printf_common+0xac>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	3501      	adds	r5, #1
 8008352:	e7c6      	b.n	80082e2 <_printf_common+0x3e>
 8008354:	18e1      	adds	r1, r4, r3
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	2030      	movs	r0, #48	@ 0x30
 800835a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800835e:	4422      	add	r2, r4
 8008360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008368:	3302      	adds	r3, #2
 800836a:	e7c7      	b.n	80082fc <_printf_common+0x58>
 800836c:	2301      	movs	r3, #1
 800836e:	4622      	mov	r2, r4
 8008370:	4641      	mov	r1, r8
 8008372:	4638      	mov	r0, r7
 8008374:	47c8      	blx	r9
 8008376:	3001      	adds	r0, #1
 8008378:	d0e6      	beq.n	8008348 <_printf_common+0xa4>
 800837a:	3601      	adds	r6, #1
 800837c:	e7d9      	b.n	8008332 <_printf_common+0x8e>
	...

08008380 <_printf_i>:
 8008380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	7e0f      	ldrb	r7, [r1, #24]
 8008386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008388:	2f78      	cmp	r7, #120	@ 0x78
 800838a:	4691      	mov	r9, r2
 800838c:	4680      	mov	r8, r0
 800838e:	460c      	mov	r4, r1
 8008390:	469a      	mov	sl, r3
 8008392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008396:	d807      	bhi.n	80083a8 <_printf_i+0x28>
 8008398:	2f62      	cmp	r7, #98	@ 0x62
 800839a:	d80a      	bhi.n	80083b2 <_printf_i+0x32>
 800839c:	2f00      	cmp	r7, #0
 800839e:	f000 80d1 	beq.w	8008544 <_printf_i+0x1c4>
 80083a2:	2f58      	cmp	r7, #88	@ 0x58
 80083a4:	f000 80b8 	beq.w	8008518 <_printf_i+0x198>
 80083a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083b0:	e03a      	b.n	8008428 <_printf_i+0xa8>
 80083b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083b6:	2b15      	cmp	r3, #21
 80083b8:	d8f6      	bhi.n	80083a8 <_printf_i+0x28>
 80083ba:	a101      	add	r1, pc, #4	@ (adr r1, 80083c0 <_printf_i+0x40>)
 80083bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083c0:	08008419 	.word	0x08008419
 80083c4:	0800842d 	.word	0x0800842d
 80083c8:	080083a9 	.word	0x080083a9
 80083cc:	080083a9 	.word	0x080083a9
 80083d0:	080083a9 	.word	0x080083a9
 80083d4:	080083a9 	.word	0x080083a9
 80083d8:	0800842d 	.word	0x0800842d
 80083dc:	080083a9 	.word	0x080083a9
 80083e0:	080083a9 	.word	0x080083a9
 80083e4:	080083a9 	.word	0x080083a9
 80083e8:	080083a9 	.word	0x080083a9
 80083ec:	0800852b 	.word	0x0800852b
 80083f0:	08008457 	.word	0x08008457
 80083f4:	080084e5 	.word	0x080084e5
 80083f8:	080083a9 	.word	0x080083a9
 80083fc:	080083a9 	.word	0x080083a9
 8008400:	0800854d 	.word	0x0800854d
 8008404:	080083a9 	.word	0x080083a9
 8008408:	08008457 	.word	0x08008457
 800840c:	080083a9 	.word	0x080083a9
 8008410:	080083a9 	.word	0x080083a9
 8008414:	080084ed 	.word	0x080084ed
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	1d1a      	adds	r2, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6032      	str	r2, [r6, #0]
 8008420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008428:	2301      	movs	r3, #1
 800842a:	e09c      	b.n	8008566 <_printf_i+0x1e6>
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	6820      	ldr	r0, [r4, #0]
 8008430:	1d19      	adds	r1, r3, #4
 8008432:	6031      	str	r1, [r6, #0]
 8008434:	0606      	lsls	r6, r0, #24
 8008436:	d501      	bpl.n	800843c <_printf_i+0xbc>
 8008438:	681d      	ldr	r5, [r3, #0]
 800843a:	e003      	b.n	8008444 <_printf_i+0xc4>
 800843c:	0645      	lsls	r5, r0, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0xb8>
 8008440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008444:	2d00      	cmp	r5, #0
 8008446:	da03      	bge.n	8008450 <_printf_i+0xd0>
 8008448:	232d      	movs	r3, #45	@ 0x2d
 800844a:	426d      	negs	r5, r5
 800844c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008450:	4858      	ldr	r0, [pc, #352]	@ (80085b4 <_printf_i+0x234>)
 8008452:	230a      	movs	r3, #10
 8008454:	e011      	b.n	800847a <_printf_i+0xfa>
 8008456:	6821      	ldr	r1, [r4, #0]
 8008458:	6833      	ldr	r3, [r6, #0]
 800845a:	0608      	lsls	r0, r1, #24
 800845c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008460:	d402      	bmi.n	8008468 <_printf_i+0xe8>
 8008462:	0649      	lsls	r1, r1, #25
 8008464:	bf48      	it	mi
 8008466:	b2ad      	uxthmi	r5, r5
 8008468:	2f6f      	cmp	r7, #111	@ 0x6f
 800846a:	4852      	ldr	r0, [pc, #328]	@ (80085b4 <_printf_i+0x234>)
 800846c:	6033      	str	r3, [r6, #0]
 800846e:	bf14      	ite	ne
 8008470:	230a      	movne	r3, #10
 8008472:	2308      	moveq	r3, #8
 8008474:	2100      	movs	r1, #0
 8008476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800847a:	6866      	ldr	r6, [r4, #4]
 800847c:	60a6      	str	r6, [r4, #8]
 800847e:	2e00      	cmp	r6, #0
 8008480:	db05      	blt.n	800848e <_printf_i+0x10e>
 8008482:	6821      	ldr	r1, [r4, #0]
 8008484:	432e      	orrs	r6, r5
 8008486:	f021 0104 	bic.w	r1, r1, #4
 800848a:	6021      	str	r1, [r4, #0]
 800848c:	d04b      	beq.n	8008526 <_printf_i+0x1a6>
 800848e:	4616      	mov	r6, r2
 8008490:	fbb5 f1f3 	udiv	r1, r5, r3
 8008494:	fb03 5711 	mls	r7, r3, r1, r5
 8008498:	5dc7      	ldrb	r7, [r0, r7]
 800849a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800849e:	462f      	mov	r7, r5
 80084a0:	42bb      	cmp	r3, r7
 80084a2:	460d      	mov	r5, r1
 80084a4:	d9f4      	bls.n	8008490 <_printf_i+0x110>
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d10b      	bne.n	80084c2 <_printf_i+0x142>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	07df      	lsls	r7, r3, #31
 80084ae:	d508      	bpl.n	80084c2 <_printf_i+0x142>
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	6861      	ldr	r1, [r4, #4]
 80084b4:	4299      	cmp	r1, r3
 80084b6:	bfde      	ittt	le
 80084b8:	2330      	movle	r3, #48	@ 0x30
 80084ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084c2:	1b92      	subs	r2, r2, r6
 80084c4:	6122      	str	r2, [r4, #16]
 80084c6:	f8cd a000 	str.w	sl, [sp]
 80084ca:	464b      	mov	r3, r9
 80084cc:	aa03      	add	r2, sp, #12
 80084ce:	4621      	mov	r1, r4
 80084d0:	4640      	mov	r0, r8
 80084d2:	f7ff fee7 	bl	80082a4 <_printf_common>
 80084d6:	3001      	adds	r0, #1
 80084d8:	d14a      	bne.n	8008570 <_printf_i+0x1f0>
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	b004      	add	sp, #16
 80084e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	f043 0320 	orr.w	r3, r3, #32
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	4832      	ldr	r0, [pc, #200]	@ (80085b8 <_printf_i+0x238>)
 80084ee:	2778      	movs	r7, #120	@ 0x78
 80084f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	6831      	ldr	r1, [r6, #0]
 80084f8:	061f      	lsls	r7, r3, #24
 80084fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80084fe:	d402      	bmi.n	8008506 <_printf_i+0x186>
 8008500:	065f      	lsls	r7, r3, #25
 8008502:	bf48      	it	mi
 8008504:	b2ad      	uxthmi	r5, r5
 8008506:	6031      	str	r1, [r6, #0]
 8008508:	07d9      	lsls	r1, r3, #31
 800850a:	bf44      	itt	mi
 800850c:	f043 0320 	orrmi.w	r3, r3, #32
 8008510:	6023      	strmi	r3, [r4, #0]
 8008512:	b11d      	cbz	r5, 800851c <_printf_i+0x19c>
 8008514:	2310      	movs	r3, #16
 8008516:	e7ad      	b.n	8008474 <_printf_i+0xf4>
 8008518:	4826      	ldr	r0, [pc, #152]	@ (80085b4 <_printf_i+0x234>)
 800851a:	e7e9      	b.n	80084f0 <_printf_i+0x170>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	f023 0320 	bic.w	r3, r3, #32
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	e7f6      	b.n	8008514 <_printf_i+0x194>
 8008526:	4616      	mov	r6, r2
 8008528:	e7bd      	b.n	80084a6 <_printf_i+0x126>
 800852a:	6833      	ldr	r3, [r6, #0]
 800852c:	6825      	ldr	r5, [r4, #0]
 800852e:	6961      	ldr	r1, [r4, #20]
 8008530:	1d18      	adds	r0, r3, #4
 8008532:	6030      	str	r0, [r6, #0]
 8008534:	062e      	lsls	r6, r5, #24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	d501      	bpl.n	800853e <_printf_i+0x1be>
 800853a:	6019      	str	r1, [r3, #0]
 800853c:	e002      	b.n	8008544 <_printf_i+0x1c4>
 800853e:	0668      	lsls	r0, r5, #25
 8008540:	d5fb      	bpl.n	800853a <_printf_i+0x1ba>
 8008542:	8019      	strh	r1, [r3, #0]
 8008544:	2300      	movs	r3, #0
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	4616      	mov	r6, r2
 800854a:	e7bc      	b.n	80084c6 <_printf_i+0x146>
 800854c:	6833      	ldr	r3, [r6, #0]
 800854e:	1d1a      	adds	r2, r3, #4
 8008550:	6032      	str	r2, [r6, #0]
 8008552:	681e      	ldr	r6, [r3, #0]
 8008554:	6862      	ldr	r2, [r4, #4]
 8008556:	2100      	movs	r1, #0
 8008558:	4630      	mov	r0, r6
 800855a:	f7f7 fe49 	bl	80001f0 <memchr>
 800855e:	b108      	cbz	r0, 8008564 <_printf_i+0x1e4>
 8008560:	1b80      	subs	r0, r0, r6
 8008562:	6060      	str	r0, [r4, #4]
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	6123      	str	r3, [r4, #16]
 8008568:	2300      	movs	r3, #0
 800856a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800856e:	e7aa      	b.n	80084c6 <_printf_i+0x146>
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	4632      	mov	r2, r6
 8008574:	4649      	mov	r1, r9
 8008576:	4640      	mov	r0, r8
 8008578:	47d0      	blx	sl
 800857a:	3001      	adds	r0, #1
 800857c:	d0ad      	beq.n	80084da <_printf_i+0x15a>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	079b      	lsls	r3, r3, #30
 8008582:	d413      	bmi.n	80085ac <_printf_i+0x22c>
 8008584:	68e0      	ldr	r0, [r4, #12]
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	4298      	cmp	r0, r3
 800858a:	bfb8      	it	lt
 800858c:	4618      	movlt	r0, r3
 800858e:	e7a6      	b.n	80084de <_printf_i+0x15e>
 8008590:	2301      	movs	r3, #1
 8008592:	4632      	mov	r2, r6
 8008594:	4649      	mov	r1, r9
 8008596:	4640      	mov	r0, r8
 8008598:	47d0      	blx	sl
 800859a:	3001      	adds	r0, #1
 800859c:	d09d      	beq.n	80084da <_printf_i+0x15a>
 800859e:	3501      	adds	r5, #1
 80085a0:	68e3      	ldr	r3, [r4, #12]
 80085a2:	9903      	ldr	r1, [sp, #12]
 80085a4:	1a5b      	subs	r3, r3, r1
 80085a6:	42ab      	cmp	r3, r5
 80085a8:	dcf2      	bgt.n	8008590 <_printf_i+0x210>
 80085aa:	e7eb      	b.n	8008584 <_printf_i+0x204>
 80085ac:	2500      	movs	r5, #0
 80085ae:	f104 0619 	add.w	r6, r4, #25
 80085b2:	e7f5      	b.n	80085a0 <_printf_i+0x220>
 80085b4:	0800e6b5 	.word	0x0800e6b5
 80085b8:	0800e6c6 	.word	0x0800e6c6

080085bc <__sflush_r>:
 80085bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	0716      	lsls	r6, r2, #28
 80085c6:	4605      	mov	r5, r0
 80085c8:	460c      	mov	r4, r1
 80085ca:	d454      	bmi.n	8008676 <__sflush_r+0xba>
 80085cc:	684b      	ldr	r3, [r1, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	dc02      	bgt.n	80085d8 <__sflush_r+0x1c>
 80085d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dd48      	ble.n	800866a <__sflush_r+0xae>
 80085d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085da:	2e00      	cmp	r6, #0
 80085dc:	d045      	beq.n	800866a <__sflush_r+0xae>
 80085de:	2300      	movs	r3, #0
 80085e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085e4:	682f      	ldr	r7, [r5, #0]
 80085e6:	6a21      	ldr	r1, [r4, #32]
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	d030      	beq.n	800864e <__sflush_r+0x92>
 80085ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	0759      	lsls	r1, r3, #29
 80085f2:	d505      	bpl.n	8008600 <__sflush_r+0x44>
 80085f4:	6863      	ldr	r3, [r4, #4]
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085fa:	b10b      	cbz	r3, 8008600 <__sflush_r+0x44>
 80085fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	2300      	movs	r3, #0
 8008602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008604:	6a21      	ldr	r1, [r4, #32]
 8008606:	4628      	mov	r0, r5
 8008608:	47b0      	blx	r6
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	d106      	bne.n	800861e <__sflush_r+0x62>
 8008610:	6829      	ldr	r1, [r5, #0]
 8008612:	291d      	cmp	r1, #29
 8008614:	d82b      	bhi.n	800866e <__sflush_r+0xb2>
 8008616:	4a2a      	ldr	r2, [pc, #168]	@ (80086c0 <__sflush_r+0x104>)
 8008618:	40ca      	lsrs	r2, r1
 800861a:	07d6      	lsls	r6, r2, #31
 800861c:	d527      	bpl.n	800866e <__sflush_r+0xb2>
 800861e:	2200      	movs	r2, #0
 8008620:	6062      	str	r2, [r4, #4]
 8008622:	04d9      	lsls	r1, r3, #19
 8008624:	6922      	ldr	r2, [r4, #16]
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	d504      	bpl.n	8008634 <__sflush_r+0x78>
 800862a:	1c42      	adds	r2, r0, #1
 800862c:	d101      	bne.n	8008632 <__sflush_r+0x76>
 800862e:	682b      	ldr	r3, [r5, #0]
 8008630:	b903      	cbnz	r3, 8008634 <__sflush_r+0x78>
 8008632:	6560      	str	r0, [r4, #84]	@ 0x54
 8008634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008636:	602f      	str	r7, [r5, #0]
 8008638:	b1b9      	cbz	r1, 800866a <__sflush_r+0xae>
 800863a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800863e:	4299      	cmp	r1, r3
 8008640:	d002      	beq.n	8008648 <__sflush_r+0x8c>
 8008642:	4628      	mov	r0, r5
 8008644:	f7ff fbde 	bl	8007e04 <_free_r>
 8008648:	2300      	movs	r3, #0
 800864a:	6363      	str	r3, [r4, #52]	@ 0x34
 800864c:	e00d      	b.n	800866a <__sflush_r+0xae>
 800864e:	2301      	movs	r3, #1
 8008650:	4628      	mov	r0, r5
 8008652:	47b0      	blx	r6
 8008654:	4602      	mov	r2, r0
 8008656:	1c50      	adds	r0, r2, #1
 8008658:	d1c9      	bne.n	80085ee <__sflush_r+0x32>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0c6      	beq.n	80085ee <__sflush_r+0x32>
 8008660:	2b1d      	cmp	r3, #29
 8008662:	d001      	beq.n	8008668 <__sflush_r+0xac>
 8008664:	2b16      	cmp	r3, #22
 8008666:	d11e      	bne.n	80086a6 <__sflush_r+0xea>
 8008668:	602f      	str	r7, [r5, #0]
 800866a:	2000      	movs	r0, #0
 800866c:	e022      	b.n	80086b4 <__sflush_r+0xf8>
 800866e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008672:	b21b      	sxth	r3, r3
 8008674:	e01b      	b.n	80086ae <__sflush_r+0xf2>
 8008676:	690f      	ldr	r7, [r1, #16]
 8008678:	2f00      	cmp	r7, #0
 800867a:	d0f6      	beq.n	800866a <__sflush_r+0xae>
 800867c:	0793      	lsls	r3, r2, #30
 800867e:	680e      	ldr	r6, [r1, #0]
 8008680:	bf08      	it	eq
 8008682:	694b      	ldreq	r3, [r1, #20]
 8008684:	600f      	str	r7, [r1, #0]
 8008686:	bf18      	it	ne
 8008688:	2300      	movne	r3, #0
 800868a:	eba6 0807 	sub.w	r8, r6, r7
 800868e:	608b      	str	r3, [r1, #8]
 8008690:	f1b8 0f00 	cmp.w	r8, #0
 8008694:	dde9      	ble.n	800866a <__sflush_r+0xae>
 8008696:	6a21      	ldr	r1, [r4, #32]
 8008698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800869a:	4643      	mov	r3, r8
 800869c:	463a      	mov	r2, r7
 800869e:	4628      	mov	r0, r5
 80086a0:	47b0      	blx	r6
 80086a2:	2800      	cmp	r0, #0
 80086a4:	dc08      	bgt.n	80086b8 <__sflush_r+0xfc>
 80086a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b8:	4407      	add	r7, r0
 80086ba:	eba8 0800 	sub.w	r8, r8, r0
 80086be:	e7e7      	b.n	8008690 <__sflush_r+0xd4>
 80086c0:	20400001 	.word	0x20400001

080086c4 <_fflush_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	690b      	ldr	r3, [r1, #16]
 80086c8:	4605      	mov	r5, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	b913      	cbnz	r3, 80086d4 <_fflush_r+0x10>
 80086ce:	2500      	movs	r5, #0
 80086d0:	4628      	mov	r0, r5
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	b118      	cbz	r0, 80086de <_fflush_r+0x1a>
 80086d6:	6a03      	ldr	r3, [r0, #32]
 80086d8:	b90b      	cbnz	r3, 80086de <_fflush_r+0x1a>
 80086da:	f7ff f94d 	bl	8007978 <__sinit>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f3      	beq.n	80086ce <_fflush_r+0xa>
 80086e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086e8:	07d0      	lsls	r0, r2, #31
 80086ea:	d404      	bmi.n	80086f6 <_fflush_r+0x32>
 80086ec:	0599      	lsls	r1, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_fflush_r+0x32>
 80086f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086f2:	f7ff fb76 	bl	8007de2 <__retarget_lock_acquire_recursive>
 80086f6:	4628      	mov	r0, r5
 80086f8:	4621      	mov	r1, r4
 80086fa:	f7ff ff5f 	bl	80085bc <__sflush_r>
 80086fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008700:	07da      	lsls	r2, r3, #31
 8008702:	4605      	mov	r5, r0
 8008704:	d4e4      	bmi.n	80086d0 <_fflush_r+0xc>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	059b      	lsls	r3, r3, #22
 800870a:	d4e1      	bmi.n	80086d0 <_fflush_r+0xc>
 800870c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800870e:	f7ff fb69 	bl	8007de4 <__retarget_lock_release_recursive>
 8008712:	e7dd      	b.n	80086d0 <_fflush_r+0xc>

08008714 <__swhatbuf_r>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	460c      	mov	r4, r1
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	2900      	cmp	r1, #0
 800871e:	b096      	sub	sp, #88	@ 0x58
 8008720:	4615      	mov	r5, r2
 8008722:	461e      	mov	r6, r3
 8008724:	da0d      	bge.n	8008742 <__swhatbuf_r+0x2e>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800872c:	f04f 0100 	mov.w	r1, #0
 8008730:	bf14      	ite	ne
 8008732:	2340      	movne	r3, #64	@ 0x40
 8008734:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008738:	2000      	movs	r0, #0
 800873a:	6031      	str	r1, [r6, #0]
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	b016      	add	sp, #88	@ 0x58
 8008740:	bd70      	pop	{r4, r5, r6, pc}
 8008742:	466a      	mov	r2, sp
 8008744:	f000 f848 	bl	80087d8 <_fstat_r>
 8008748:	2800      	cmp	r0, #0
 800874a:	dbec      	blt.n	8008726 <__swhatbuf_r+0x12>
 800874c:	9901      	ldr	r1, [sp, #4]
 800874e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008752:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008756:	4259      	negs	r1, r3
 8008758:	4159      	adcs	r1, r3
 800875a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800875e:	e7eb      	b.n	8008738 <__swhatbuf_r+0x24>

08008760 <__smakebuf_r>:
 8008760:	898b      	ldrh	r3, [r1, #12]
 8008762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008764:	079d      	lsls	r5, r3, #30
 8008766:	4606      	mov	r6, r0
 8008768:	460c      	mov	r4, r1
 800876a:	d507      	bpl.n	800877c <__smakebuf_r+0x1c>
 800876c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	2301      	movs	r3, #1
 8008776:	6163      	str	r3, [r4, #20]
 8008778:	b003      	add	sp, #12
 800877a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800877c:	ab01      	add	r3, sp, #4
 800877e:	466a      	mov	r2, sp
 8008780:	f7ff ffc8 	bl	8008714 <__swhatbuf_r>
 8008784:	9f00      	ldr	r7, [sp, #0]
 8008786:	4605      	mov	r5, r0
 8008788:	4639      	mov	r1, r7
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff fba6 	bl	8007edc <_malloc_r>
 8008790:	b948      	cbnz	r0, 80087a6 <__smakebuf_r+0x46>
 8008792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008796:	059a      	lsls	r2, r3, #22
 8008798:	d4ee      	bmi.n	8008778 <__smakebuf_r+0x18>
 800879a:	f023 0303 	bic.w	r3, r3, #3
 800879e:	f043 0302 	orr.w	r3, r3, #2
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	e7e2      	b.n	800876c <__smakebuf_r+0xc>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	6020      	str	r0, [r4, #0]
 80087aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087b6:	b15b      	cbz	r3, 80087d0 <__smakebuf_r+0x70>
 80087b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087bc:	4630      	mov	r0, r6
 80087be:	f000 f81d 	bl	80087fc <_isatty_r>
 80087c2:	b128      	cbz	r0, 80087d0 <__smakebuf_r+0x70>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f023 0303 	bic.w	r3, r3, #3
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	431d      	orrs	r5, r3
 80087d4:	81a5      	strh	r5, [r4, #12]
 80087d6:	e7cf      	b.n	8008778 <__smakebuf_r+0x18>

080087d8 <_fstat_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d07      	ldr	r5, [pc, #28]	@ (80087f8 <_fstat_r+0x20>)
 80087dc:	2300      	movs	r3, #0
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	4611      	mov	r1, r2
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	f7fa fc3c 	bl	8003062 <_fstat>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d102      	bne.n	80087f4 <_fstat_r+0x1c>
 80087ee:	682b      	ldr	r3, [r5, #0]
 80087f0:	b103      	cbz	r3, 80087f4 <_fstat_r+0x1c>
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	bd38      	pop	{r3, r4, r5, pc}
 80087f6:	bf00      	nop
 80087f8:	20002050 	.word	0x20002050

080087fc <_isatty_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d06      	ldr	r5, [pc, #24]	@ (8008818 <_isatty_r+0x1c>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7fa fc3b 	bl	8003082 <_isatty>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_isatty_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_isatty_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20002050 	.word	0x20002050

0800881c <_sbrk_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d06      	ldr	r5, [pc, #24]	@ (8008838 <_sbrk_r+0x1c>)
 8008820:	2300      	movs	r3, #0
 8008822:	4604      	mov	r4, r0
 8008824:	4608      	mov	r0, r1
 8008826:	602b      	str	r3, [r5, #0]
 8008828:	f7fa fc44 	bl	80030b4 <_sbrk>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_sbrk_r+0x1a>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_sbrk_r+0x1a>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	20002050 	.word	0x20002050

0800883c <_realloc_r>:
 800883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008840:	4607      	mov	r7, r0
 8008842:	4614      	mov	r4, r2
 8008844:	460d      	mov	r5, r1
 8008846:	b921      	cbnz	r1, 8008852 <_realloc_r+0x16>
 8008848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800884c:	4611      	mov	r1, r2
 800884e:	f7ff bb45 	b.w	8007edc <_malloc_r>
 8008852:	b92a      	cbnz	r2, 8008860 <_realloc_r+0x24>
 8008854:	f7ff fad6 	bl	8007e04 <_free_r>
 8008858:	4625      	mov	r5, r4
 800885a:	4628      	mov	r0, r5
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	f000 f81a 	bl	8008898 <_malloc_usable_size_r>
 8008864:	4284      	cmp	r4, r0
 8008866:	4606      	mov	r6, r0
 8008868:	d802      	bhi.n	8008870 <_realloc_r+0x34>
 800886a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800886e:	d8f4      	bhi.n	800885a <_realloc_r+0x1e>
 8008870:	4621      	mov	r1, r4
 8008872:	4638      	mov	r0, r7
 8008874:	f7ff fb32 	bl	8007edc <_malloc_r>
 8008878:	4680      	mov	r8, r0
 800887a:	b908      	cbnz	r0, 8008880 <_realloc_r+0x44>
 800887c:	4645      	mov	r5, r8
 800887e:	e7ec      	b.n	800885a <_realloc_r+0x1e>
 8008880:	42b4      	cmp	r4, r6
 8008882:	4622      	mov	r2, r4
 8008884:	4629      	mov	r1, r5
 8008886:	bf28      	it	cs
 8008888:	4632      	movcs	r2, r6
 800888a:	f7ff faac 	bl	8007de6 <memcpy>
 800888e:	4629      	mov	r1, r5
 8008890:	4638      	mov	r0, r7
 8008892:	f7ff fab7 	bl	8007e04 <_free_r>
 8008896:	e7f1      	b.n	800887c <_realloc_r+0x40>

08008898 <_malloc_usable_size_r>:
 8008898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889c:	1f18      	subs	r0, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bfbc      	itt	lt
 80088a2:	580b      	ldrlt	r3, [r1, r0]
 80088a4:	18c0      	addlt	r0, r0, r3
 80088a6:	4770      	bx	lr

080088a8 <cosf>:
 80088a8:	ee10 3a10 	vmov	r3, s0
 80088ac:	b507      	push	{r0, r1, r2, lr}
 80088ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008928 <cosf+0x80>)
 80088b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d806      	bhi.n	80088c6 <cosf+0x1e>
 80088b8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800892c <cosf+0x84>
 80088bc:	b003      	add	sp, #12
 80088be:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c2:	f000 b87b 	b.w	80089bc <__kernel_cosf>
 80088c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80088ca:	d304      	bcc.n	80088d6 <cosf+0x2e>
 80088cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80088d0:	b003      	add	sp, #12
 80088d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80088d6:	4668      	mov	r0, sp
 80088d8:	f000 f910 	bl	8008afc <__ieee754_rem_pio2f>
 80088dc:	f000 0003 	and.w	r0, r0, #3
 80088e0:	2801      	cmp	r0, #1
 80088e2:	d009      	beq.n	80088f8 <cosf+0x50>
 80088e4:	2802      	cmp	r0, #2
 80088e6:	d010      	beq.n	800890a <cosf+0x62>
 80088e8:	b9b0      	cbnz	r0, 8008918 <cosf+0x70>
 80088ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80088ee:	ed9d 0a00 	vldr	s0, [sp]
 80088f2:	f000 f863 	bl	80089bc <__kernel_cosf>
 80088f6:	e7eb      	b.n	80088d0 <cosf+0x28>
 80088f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80088fc:	ed9d 0a00 	vldr	s0, [sp]
 8008900:	f000 f8b4 	bl	8008a6c <__kernel_sinf>
 8008904:	eeb1 0a40 	vneg.f32	s0, s0
 8008908:	e7e2      	b.n	80088d0 <cosf+0x28>
 800890a:	eddd 0a01 	vldr	s1, [sp, #4]
 800890e:	ed9d 0a00 	vldr	s0, [sp]
 8008912:	f000 f853 	bl	80089bc <__kernel_cosf>
 8008916:	e7f5      	b.n	8008904 <cosf+0x5c>
 8008918:	eddd 0a01 	vldr	s1, [sp, #4]
 800891c:	ed9d 0a00 	vldr	s0, [sp]
 8008920:	2001      	movs	r0, #1
 8008922:	f000 f8a3 	bl	8008a6c <__kernel_sinf>
 8008926:	e7d3      	b.n	80088d0 <cosf+0x28>
 8008928:	3f490fd8 	.word	0x3f490fd8
 800892c:	00000000 	.word	0x00000000

08008930 <sinf>:
 8008930:	ee10 3a10 	vmov	r3, s0
 8008934:	b507      	push	{r0, r1, r2, lr}
 8008936:	4a1f      	ldr	r2, [pc, #124]	@ (80089b4 <sinf+0x84>)
 8008938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800893c:	4293      	cmp	r3, r2
 800893e:	d807      	bhi.n	8008950 <sinf+0x20>
 8008940:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80089b8 <sinf+0x88>
 8008944:	2000      	movs	r0, #0
 8008946:	b003      	add	sp, #12
 8008948:	f85d eb04 	ldr.w	lr, [sp], #4
 800894c:	f000 b88e 	b.w	8008a6c <__kernel_sinf>
 8008950:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008954:	d304      	bcc.n	8008960 <sinf+0x30>
 8008956:	ee30 0a40 	vsub.f32	s0, s0, s0
 800895a:	b003      	add	sp, #12
 800895c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008960:	4668      	mov	r0, sp
 8008962:	f000 f8cb 	bl	8008afc <__ieee754_rem_pio2f>
 8008966:	f000 0003 	and.w	r0, r0, #3
 800896a:	2801      	cmp	r0, #1
 800896c:	d00a      	beq.n	8008984 <sinf+0x54>
 800896e:	2802      	cmp	r0, #2
 8008970:	d00f      	beq.n	8008992 <sinf+0x62>
 8008972:	b9c0      	cbnz	r0, 80089a6 <sinf+0x76>
 8008974:	eddd 0a01 	vldr	s1, [sp, #4]
 8008978:	ed9d 0a00 	vldr	s0, [sp]
 800897c:	2001      	movs	r0, #1
 800897e:	f000 f875 	bl	8008a6c <__kernel_sinf>
 8008982:	e7ea      	b.n	800895a <sinf+0x2a>
 8008984:	eddd 0a01 	vldr	s1, [sp, #4]
 8008988:	ed9d 0a00 	vldr	s0, [sp]
 800898c:	f000 f816 	bl	80089bc <__kernel_cosf>
 8008990:	e7e3      	b.n	800895a <sinf+0x2a>
 8008992:	eddd 0a01 	vldr	s1, [sp, #4]
 8008996:	ed9d 0a00 	vldr	s0, [sp]
 800899a:	2001      	movs	r0, #1
 800899c:	f000 f866 	bl	8008a6c <__kernel_sinf>
 80089a0:	eeb1 0a40 	vneg.f32	s0, s0
 80089a4:	e7d9      	b.n	800895a <sinf+0x2a>
 80089a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80089aa:	ed9d 0a00 	vldr	s0, [sp]
 80089ae:	f000 f805 	bl	80089bc <__kernel_cosf>
 80089b2:	e7f5      	b.n	80089a0 <sinf+0x70>
 80089b4:	3f490fd8 	.word	0x3f490fd8
 80089b8:	00000000 	.word	0x00000000

080089bc <__kernel_cosf>:
 80089bc:	ee10 3a10 	vmov	r3, s0
 80089c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089c4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80089c8:	eef0 6a40 	vmov.f32	s13, s0
 80089cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80089d0:	d204      	bcs.n	80089dc <__kernel_cosf+0x20>
 80089d2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80089d6:	ee17 2a90 	vmov	r2, s15
 80089da:	b342      	cbz	r2, 8008a2e <__kernel_cosf+0x72>
 80089dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80089e0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008a4c <__kernel_cosf+0x90>
 80089e4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008a50 <__kernel_cosf+0x94>
 80089e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008a54 <__kernel_cosf+0x98>)
 80089ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 80089ee:	4293      	cmp	r3, r2
 80089f0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008a58 <__kernel_cosf+0x9c>
 80089f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80089f8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008a5c <__kernel_cosf+0xa0>
 80089fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008a00:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008a60 <__kernel_cosf+0xa4>
 8008a04:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a08:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008a64 <__kernel_cosf+0xa8>
 8008a0c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008a10:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008a14:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008a18:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008a1c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a24:	d804      	bhi.n	8008a30 <__kernel_cosf+0x74>
 8008a26:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008a2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a2e:	4770      	bx	lr
 8008a30:	4a0d      	ldr	r2, [pc, #52]	@ (8008a68 <__kernel_cosf+0xac>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	bf9a      	itte	ls
 8008a36:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008a3a:	ee07 3a10 	vmovls	s14, r3
 8008a3e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008a42:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a4a:	e7ec      	b.n	8008a26 <__kernel_cosf+0x6a>
 8008a4c:	ad47d74e 	.word	0xad47d74e
 8008a50:	310f74f6 	.word	0x310f74f6
 8008a54:	3e999999 	.word	0x3e999999
 8008a58:	b493f27c 	.word	0xb493f27c
 8008a5c:	37d00d01 	.word	0x37d00d01
 8008a60:	bab60b61 	.word	0xbab60b61
 8008a64:	3d2aaaab 	.word	0x3d2aaaab
 8008a68:	3f480000 	.word	0x3f480000

08008a6c <__kernel_sinf>:
 8008a6c:	ee10 3a10 	vmov	r3, s0
 8008a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a74:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008a78:	d204      	bcs.n	8008a84 <__kernel_sinf+0x18>
 8008a7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a7e:	ee17 3a90 	vmov	r3, s15
 8008a82:	b35b      	cbz	r3, 8008adc <__kernel_sinf+0x70>
 8008a84:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008a88:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008ae0 <__kernel_sinf+0x74>
 8008a8c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008ae4 <__kernel_sinf+0x78>
 8008a90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a94:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008ae8 <__kernel_sinf+0x7c>
 8008a98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a9c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008aec <__kernel_sinf+0x80>
 8008aa0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008aa4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008af0 <__kernel_sinf+0x84>
 8008aa8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008aac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ab0:	b930      	cbnz	r0, 8008ac0 <__kernel_sinf+0x54>
 8008ab2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008af4 <__kernel_sinf+0x88>
 8008ab6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008aba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008abe:	4770      	bx	lr
 8008ac0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ac4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008ac8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008acc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008ad0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008af8 <__kernel_sinf+0x8c>
 8008ad4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008ad8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	2f2ec9d3 	.word	0x2f2ec9d3
 8008ae4:	b2d72f34 	.word	0xb2d72f34
 8008ae8:	3638ef1b 	.word	0x3638ef1b
 8008aec:	b9500d01 	.word	0xb9500d01
 8008af0:	3c088889 	.word	0x3c088889
 8008af4:	be2aaaab 	.word	0xbe2aaaab
 8008af8:	3e2aaaab 	.word	0x3e2aaaab

08008afc <__ieee754_rem_pio2f>:
 8008afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008afe:	ee10 6a10 	vmov	r6, s0
 8008b02:	4b88      	ldr	r3, [pc, #544]	@ (8008d24 <__ieee754_rem_pio2f+0x228>)
 8008b04:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8008b08:	429d      	cmp	r5, r3
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	d805      	bhi.n	8008b1c <__ieee754_rem_pio2f+0x20>
 8008b10:	2300      	movs	r3, #0
 8008b12:	ed80 0a00 	vstr	s0, [r0]
 8008b16:	6043      	str	r3, [r0, #4]
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e022      	b.n	8008b62 <__ieee754_rem_pio2f+0x66>
 8008b1c:	4b82      	ldr	r3, [pc, #520]	@ (8008d28 <__ieee754_rem_pio2f+0x22c>)
 8008b1e:	429d      	cmp	r5, r3
 8008b20:	d83a      	bhi.n	8008b98 <__ieee754_rem_pio2f+0x9c>
 8008b22:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8008d2c <__ieee754_rem_pio2f+0x230>
 8008b2c:	4a80      	ldr	r2, [pc, #512]	@ (8008d30 <__ieee754_rem_pio2f+0x234>)
 8008b2e:	f023 030f 	bic.w	r3, r3, #15
 8008b32:	dd18      	ble.n	8008b66 <__ieee754_rem_pio2f+0x6a>
 8008b34:	4293      	cmp	r3, r2
 8008b36:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008b3a:	bf09      	itett	eq
 8008b3c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8008d34 <__ieee754_rem_pio2f+0x238>
 8008b40:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8008d38 <__ieee754_rem_pio2f+0x23c>
 8008b44:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8008d3c <__ieee754_rem_pio2f+0x240>
 8008b48:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008b4c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8008b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b54:	ed80 7a00 	vstr	s14, [r0]
 8008b58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b5c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b60:	2001      	movs	r0, #1
 8008b62:	b007      	add	sp, #28
 8008b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b66:	4293      	cmp	r3, r2
 8008b68:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008b6c:	bf09      	itett	eq
 8008b6e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8008d34 <__ieee754_rem_pio2f+0x238>
 8008b72:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8008d38 <__ieee754_rem_pio2f+0x23c>
 8008b76:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8008d3c <__ieee754_rem_pio2f+0x240>
 8008b7a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008b7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b86:	ed80 7a00 	vstr	s14, [r0]
 8008b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8e:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b92:	f04f 30ff 	mov.w	r0, #4294967295
 8008b96:	e7e4      	b.n	8008b62 <__ieee754_rem_pio2f+0x66>
 8008b98:	4b69      	ldr	r3, [pc, #420]	@ (8008d40 <__ieee754_rem_pio2f+0x244>)
 8008b9a:	429d      	cmp	r5, r3
 8008b9c:	d873      	bhi.n	8008c86 <__ieee754_rem_pio2f+0x18a>
 8008b9e:	f000 f8dd 	bl	8008d5c <fabsf>
 8008ba2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8008d44 <__ieee754_rem_pio2f+0x248>
 8008ba6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008baa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bb6:	ee17 0a90 	vmov	r0, s15
 8008bba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008d2c <__ieee754_rem_pio2f+0x230>
 8008bbe:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008bc2:	281f      	cmp	r0, #31
 8008bc4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008d38 <__ieee754_rem_pio2f+0x23c>
 8008bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bcc:	eeb1 6a47 	vneg.f32	s12, s14
 8008bd0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008bd4:	ee16 1a90 	vmov	r1, s13
 8008bd8:	dc09      	bgt.n	8008bee <__ieee754_rem_pio2f+0xf2>
 8008bda:	4a5b      	ldr	r2, [pc, #364]	@ (8008d48 <__ieee754_rem_pio2f+0x24c>)
 8008bdc:	1e47      	subs	r7, r0, #1
 8008bde:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008be2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8008be6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d107      	bne.n	8008bfe <__ieee754_rem_pio2f+0x102>
 8008bee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8008bf2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8008bf6:	2a08      	cmp	r2, #8
 8008bf8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8008bfc:	dc14      	bgt.n	8008c28 <__ieee754_rem_pio2f+0x12c>
 8008bfe:	6021      	str	r1, [r4, #0]
 8008c00:	ed94 7a00 	vldr	s14, [r4]
 8008c04:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008c08:	2e00      	cmp	r6, #0
 8008c0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c0e:	ed84 0a01 	vstr	s0, [r4, #4]
 8008c12:	daa6      	bge.n	8008b62 <__ieee754_rem_pio2f+0x66>
 8008c14:	eeb1 7a47 	vneg.f32	s14, s14
 8008c18:	eeb1 0a40 	vneg.f32	s0, s0
 8008c1c:	ed84 7a00 	vstr	s14, [r4]
 8008c20:	ed84 0a01 	vstr	s0, [r4, #4]
 8008c24:	4240      	negs	r0, r0
 8008c26:	e79c      	b.n	8008b62 <__ieee754_rem_pio2f+0x66>
 8008c28:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8008d34 <__ieee754_rem_pio2f+0x238>
 8008c2c:	eef0 6a40 	vmov.f32	s13, s0
 8008c30:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008c34:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008c38:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008c3c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d3c <__ieee754_rem_pio2f+0x240>
 8008c40:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008c44:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008c48:	ee15 2a90 	vmov	r2, s11
 8008c4c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008c50:	1a5b      	subs	r3, r3, r1
 8008c52:	2b19      	cmp	r3, #25
 8008c54:	dc04      	bgt.n	8008c60 <__ieee754_rem_pio2f+0x164>
 8008c56:	edc4 5a00 	vstr	s11, [r4]
 8008c5a:	eeb0 0a66 	vmov.f32	s0, s13
 8008c5e:	e7cf      	b.n	8008c00 <__ieee754_rem_pio2f+0x104>
 8008c60:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8008d4c <__ieee754_rem_pio2f+0x250>
 8008c64:	eeb0 0a66 	vmov.f32	s0, s13
 8008c68:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008c6c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008c70:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8008d50 <__ieee754_rem_pio2f+0x254>
 8008c74:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008c78:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008c7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008c80:	ed84 7a00 	vstr	s14, [r4]
 8008c84:	e7bc      	b.n	8008c00 <__ieee754_rem_pio2f+0x104>
 8008c86:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8008c8a:	d306      	bcc.n	8008c9a <__ieee754_rem_pio2f+0x19e>
 8008c8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008c90:	edc0 7a01 	vstr	s15, [r0, #4]
 8008c94:	edc0 7a00 	vstr	s15, [r0]
 8008c98:	e73e      	b.n	8008b18 <__ieee754_rem_pio2f+0x1c>
 8008c9a:	15ea      	asrs	r2, r5, #23
 8008c9c:	3a86      	subs	r2, #134	@ 0x86
 8008c9e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008caa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008d54 <__ieee754_rem_pio2f+0x258>
 8008cae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cb6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008cba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008cbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008cc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008cc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cca:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008cce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008cd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cda:	edcd 7a05 	vstr	s15, [sp, #20]
 8008cde:	d11e      	bne.n	8008d1e <__ieee754_rem_pio2f+0x222>
 8008ce0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce8:	bf0c      	ite	eq
 8008cea:	2301      	moveq	r3, #1
 8008cec:	2302      	movne	r3, #2
 8008cee:	491a      	ldr	r1, [pc, #104]	@ (8008d58 <__ieee754_rem_pio2f+0x25c>)
 8008cf0:	9101      	str	r1, [sp, #4]
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	9100      	str	r1, [sp, #0]
 8008cf6:	a803      	add	r0, sp, #12
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f000 f837 	bl	8008d6c <__kernel_rem_pio2f>
 8008cfe:	2e00      	cmp	r6, #0
 8008d00:	f6bf af2f 	bge.w	8008b62 <__ieee754_rem_pio2f+0x66>
 8008d04:	edd4 7a00 	vldr	s15, [r4]
 8008d08:	eef1 7a67 	vneg.f32	s15, s15
 8008d0c:	edc4 7a00 	vstr	s15, [r4]
 8008d10:	edd4 7a01 	vldr	s15, [r4, #4]
 8008d14:	eef1 7a67 	vneg.f32	s15, s15
 8008d18:	edc4 7a01 	vstr	s15, [r4, #4]
 8008d1c:	e782      	b.n	8008c24 <__ieee754_rem_pio2f+0x128>
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e7e5      	b.n	8008cee <__ieee754_rem_pio2f+0x1f2>
 8008d22:	bf00      	nop
 8008d24:	3f490fd8 	.word	0x3f490fd8
 8008d28:	4016cbe3 	.word	0x4016cbe3
 8008d2c:	3fc90f80 	.word	0x3fc90f80
 8008d30:	3fc90fd0 	.word	0x3fc90fd0
 8008d34:	37354400 	.word	0x37354400
 8008d38:	37354443 	.word	0x37354443
 8008d3c:	2e85a308 	.word	0x2e85a308
 8008d40:	43490f80 	.word	0x43490f80
 8008d44:	3f22f984 	.word	0x3f22f984
 8008d48:	0800e6d8 	.word	0x0800e6d8
 8008d4c:	2e85a300 	.word	0x2e85a300
 8008d50:	248d3132 	.word	0x248d3132
 8008d54:	43800000 	.word	0x43800000
 8008d58:	0800e758 	.word	0x0800e758

08008d5c <fabsf>:
 8008d5c:	ee10 3a10 	vmov	r3, s0
 8008d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d64:	ee00 3a10 	vmov	s0, r3
 8008d68:	4770      	bx	lr
	...

08008d6c <__kernel_rem_pio2f>:
 8008d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	ed2d 8b04 	vpush	{d8-d9}
 8008d74:	b0d9      	sub	sp, #356	@ 0x164
 8008d76:	4690      	mov	r8, r2
 8008d78:	9001      	str	r0, [sp, #4]
 8008d7a:	4ab6      	ldr	r2, [pc, #728]	@ (8009054 <__kernel_rem_pio2f+0x2e8>)
 8008d7c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008d7e:	f118 0f04 	cmn.w	r8, #4
 8008d82:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8008d86:	460f      	mov	r7, r1
 8008d88:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d8c:	db26      	blt.n	8008ddc <__kernel_rem_pio2f+0x70>
 8008d8e:	f1b8 0203 	subs.w	r2, r8, #3
 8008d92:	bf48      	it	mi
 8008d94:	f108 0204 	addmi.w	r2, r8, #4
 8008d98:	10d2      	asrs	r2, r2, #3
 8008d9a:	1c55      	adds	r5, r2, #1
 8008d9c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008d9e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009064 <__kernel_rem_pio2f+0x2f8>
 8008da2:	00e8      	lsls	r0, r5, #3
 8008da4:	eba2 060b 	sub.w	r6, r2, fp
 8008da8:	9002      	str	r0, [sp, #8]
 8008daa:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8008dae:	eb0a 0c0b 	add.w	ip, sl, fp
 8008db2:	ac1c      	add	r4, sp, #112	@ 0x70
 8008db4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8008db8:	2000      	movs	r0, #0
 8008dba:	4560      	cmp	r0, ip
 8008dbc:	dd10      	ble.n	8008de0 <__kernel_rem_pio2f+0x74>
 8008dbe:	a91c      	add	r1, sp, #112	@ 0x70
 8008dc0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008dc4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8008dc8:	2600      	movs	r6, #0
 8008dca:	4556      	cmp	r6, sl
 8008dcc:	dc24      	bgt.n	8008e18 <__kernel_rem_pio2f+0xac>
 8008dce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008dd2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009064 <__kernel_rem_pio2f+0x2f8>
 8008dd6:	4684      	mov	ip, r0
 8008dd8:	2400      	movs	r4, #0
 8008dda:	e016      	b.n	8008e0a <__kernel_rem_pio2f+0x9e>
 8008ddc:	2200      	movs	r2, #0
 8008dde:	e7dc      	b.n	8008d9a <__kernel_rem_pio2f+0x2e>
 8008de0:	42c6      	cmn	r6, r0
 8008de2:	bf5d      	ittte	pl
 8008de4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8008de8:	ee07 1a90 	vmovpl	s15, r1
 8008dec:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008df0:	eef0 7a47 	vmovmi.f32	s15, s14
 8008df4:	ece4 7a01 	vstmia	r4!, {s15}
 8008df8:	3001      	adds	r0, #1
 8008dfa:	e7de      	b.n	8008dba <__kernel_rem_pio2f+0x4e>
 8008dfc:	ecfe 6a01 	vldmia	lr!, {s13}
 8008e00:	ed3c 7a01 	vldmdb	ip!, {s14}
 8008e04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e08:	3401      	adds	r4, #1
 8008e0a:	455c      	cmp	r4, fp
 8008e0c:	ddf6      	ble.n	8008dfc <__kernel_rem_pio2f+0x90>
 8008e0e:	ece9 7a01 	vstmia	r9!, {s15}
 8008e12:	3601      	adds	r6, #1
 8008e14:	3004      	adds	r0, #4
 8008e16:	e7d8      	b.n	8008dca <__kernel_rem_pio2f+0x5e>
 8008e18:	a908      	add	r1, sp, #32
 8008e1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e1e:	9104      	str	r1, [sp, #16]
 8008e20:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008e22:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8009060 <__kernel_rem_pio2f+0x2f4>
 8008e26:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800905c <__kernel_rem_pio2f+0x2f0>
 8008e2a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008e2e:	9203      	str	r2, [sp, #12]
 8008e30:	4654      	mov	r4, sl
 8008e32:	00a2      	lsls	r2, r4, #2
 8008e34:	9205      	str	r2, [sp, #20]
 8008e36:	aa58      	add	r2, sp, #352	@ 0x160
 8008e38:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008e3c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8008e40:	a944      	add	r1, sp, #272	@ 0x110
 8008e42:	aa08      	add	r2, sp, #32
 8008e44:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008e48:	4694      	mov	ip, r2
 8008e4a:	4626      	mov	r6, r4
 8008e4c:	2e00      	cmp	r6, #0
 8008e4e:	dc4c      	bgt.n	8008eea <__kernel_rem_pio2f+0x17e>
 8008e50:	4628      	mov	r0, r5
 8008e52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e56:	f000 f9f1 	bl	800923c <scalbnf>
 8008e5a:	eeb0 8a40 	vmov.f32	s16, s0
 8008e5e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8008e62:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008e66:	f000 fa4f 	bl	8009308 <floorf>
 8008e6a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8008e6e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008e72:	2d00      	cmp	r5, #0
 8008e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e78:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008e7c:	ee17 9a90 	vmov	r9, s15
 8008e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e84:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008e88:	dd41      	ble.n	8008f0e <__kernel_rem_pio2f+0x1a2>
 8008e8a:	f104 3cff 	add.w	ip, r4, #4294967295
 8008e8e:	a908      	add	r1, sp, #32
 8008e90:	f1c5 0e08 	rsb	lr, r5, #8
 8008e94:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8008e98:	fa46 f00e 	asr.w	r0, r6, lr
 8008e9c:	4481      	add	r9, r0
 8008e9e:	fa00 f00e 	lsl.w	r0, r0, lr
 8008ea2:	1a36      	subs	r6, r6, r0
 8008ea4:	f1c5 0007 	rsb	r0, r5, #7
 8008ea8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8008eac:	4106      	asrs	r6, r0
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	dd3c      	ble.n	8008f2c <__kernel_rem_pio2f+0x1c0>
 8008eb2:	f04f 0e00 	mov.w	lr, #0
 8008eb6:	f109 0901 	add.w	r9, r9, #1
 8008eba:	4670      	mov	r0, lr
 8008ebc:	4574      	cmp	r4, lr
 8008ebe:	dc68      	bgt.n	8008f92 <__kernel_rem_pio2f+0x226>
 8008ec0:	2d00      	cmp	r5, #0
 8008ec2:	dd03      	ble.n	8008ecc <__kernel_rem_pio2f+0x160>
 8008ec4:	2d01      	cmp	r5, #1
 8008ec6:	d074      	beq.n	8008fb2 <__kernel_rem_pio2f+0x246>
 8008ec8:	2d02      	cmp	r5, #2
 8008eca:	d07d      	beq.n	8008fc8 <__kernel_rem_pio2f+0x25c>
 8008ecc:	2e02      	cmp	r6, #2
 8008ece:	d12d      	bne.n	8008f2c <__kernel_rem_pio2f+0x1c0>
 8008ed0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008ed4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008ed8:	b340      	cbz	r0, 8008f2c <__kernel_rem_pio2f+0x1c0>
 8008eda:	4628      	mov	r0, r5
 8008edc:	9306      	str	r3, [sp, #24]
 8008ede:	f000 f9ad 	bl	800923c <scalbnf>
 8008ee2:	9b06      	ldr	r3, [sp, #24]
 8008ee4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008ee8:	e020      	b.n	8008f2c <__kernel_rem_pio2f+0x1c0>
 8008eea:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008eee:	3e01      	subs	r6, #1
 8008ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008efc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008f00:	ecac 0a01 	vstmia	ip!, {s0}
 8008f04:	ed30 0a01 	vldmdb	r0!, {s0}
 8008f08:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008f0c:	e79e      	b.n	8008e4c <__kernel_rem_pio2f+0xe0>
 8008f0e:	d105      	bne.n	8008f1c <__kernel_rem_pio2f+0x1b0>
 8008f10:	1e60      	subs	r0, r4, #1
 8008f12:	a908      	add	r1, sp, #32
 8008f14:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8008f18:	11f6      	asrs	r6, r6, #7
 8008f1a:	e7c8      	b.n	8008eae <__kernel_rem_pio2f+0x142>
 8008f1c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008f20:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f28:	da31      	bge.n	8008f8e <__kernel_rem_pio2f+0x222>
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f34:	f040 8098 	bne.w	8009068 <__kernel_rem_pio2f+0x2fc>
 8008f38:	1e60      	subs	r0, r4, #1
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4550      	cmp	r0, sl
 8008f3e:	da4b      	bge.n	8008fd8 <__kernel_rem_pio2f+0x26c>
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	d065      	beq.n	8009010 <__kernel_rem_pio2f+0x2a4>
 8008f44:	3c01      	subs	r4, #1
 8008f46:	ab08      	add	r3, sp, #32
 8008f48:	3d08      	subs	r5, #8
 8008f4a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0f8      	beq.n	8008f44 <__kernel_rem_pio2f+0x1d8>
 8008f52:	4628      	mov	r0, r5
 8008f54:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008f58:	f000 f970 	bl	800923c <scalbnf>
 8008f5c:	1c63      	adds	r3, r4, #1
 8008f5e:	aa44      	add	r2, sp, #272	@ 0x110
 8008f60:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009060 <__kernel_rem_pio2f+0x2f4>
 8008f64:	0099      	lsls	r1, r3, #2
 8008f66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008f6a:	4623      	mov	r3, r4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f280 80a9 	bge.w	80090c4 <__kernel_rem_pio2f+0x358>
 8008f72:	4623      	mov	r3, r4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f2c0 80c7 	blt.w	8009108 <__kernel_rem_pio2f+0x39c>
 8008f7a:	aa44      	add	r2, sp, #272	@ 0x110
 8008f7c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008f80:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009058 <__kernel_rem_pio2f+0x2ec>
 8008f84:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009064 <__kernel_rem_pio2f+0x2f8>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	1ae2      	subs	r2, r4, r3
 8008f8c:	e0b1      	b.n	80090f2 <__kernel_rem_pio2f+0x386>
 8008f8e:	2602      	movs	r6, #2
 8008f90:	e78f      	b.n	8008eb2 <__kernel_rem_pio2f+0x146>
 8008f92:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f96:	b948      	cbnz	r0, 8008fac <__kernel_rem_pio2f+0x240>
 8008f98:	b121      	cbz	r1, 8008fa4 <__kernel_rem_pio2f+0x238>
 8008f9a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8008f9e:	f842 1c04 	str.w	r1, [r2, #-4]
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	f10e 0e01 	add.w	lr, lr, #1
 8008fa8:	4608      	mov	r0, r1
 8008faa:	e787      	b.n	8008ebc <__kernel_rem_pio2f+0x150>
 8008fac:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8008fb0:	e7f5      	b.n	8008f9e <__kernel_rem_pio2f+0x232>
 8008fb2:	f104 3cff 	add.w	ip, r4, #4294967295
 8008fb6:	aa08      	add	r2, sp, #32
 8008fb8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008fbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008fc0:	a908      	add	r1, sp, #32
 8008fc2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008fc6:	e781      	b.n	8008ecc <__kernel_rem_pio2f+0x160>
 8008fc8:	f104 3cff 	add.w	ip, r4, #4294967295
 8008fcc:	aa08      	add	r2, sp, #32
 8008fce:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008fd2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008fd6:	e7f3      	b.n	8008fc0 <__kernel_rem_pio2f+0x254>
 8008fd8:	a908      	add	r1, sp, #32
 8008fda:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008fde:	3801      	subs	r0, #1
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	e7ab      	b.n	8008f3c <__kernel_rem_pio2f+0x1d0>
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d0fa      	beq.n	8008fe4 <__kernel_rem_pio2f+0x278>
 8008fee:	9905      	ldr	r1, [sp, #20]
 8008ff0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008ff4:	eb0d 0001 	add.w	r0, sp, r1
 8008ff8:	18e6      	adds	r6, r4, r3
 8008ffa:	a91c      	add	r1, sp, #112	@ 0x70
 8008ffc:	f104 0c01 	add.w	ip, r4, #1
 8009000:	384c      	subs	r0, #76	@ 0x4c
 8009002:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009006:	4422      	add	r2, r4
 8009008:	4562      	cmp	r2, ip
 800900a:	da04      	bge.n	8009016 <__kernel_rem_pio2f+0x2aa>
 800900c:	4614      	mov	r4, r2
 800900e:	e710      	b.n	8008e32 <__kernel_rem_pio2f+0xc6>
 8009010:	9804      	ldr	r0, [sp, #16]
 8009012:	2201      	movs	r2, #1
 8009014:	e7e7      	b.n	8008fe6 <__kernel_rem_pio2f+0x27a>
 8009016:	9903      	ldr	r1, [sp, #12]
 8009018:	f8dd e004 	ldr.w	lr, [sp, #4]
 800901c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009020:	9105      	str	r1, [sp, #20]
 8009022:	ee07 1a90 	vmov	s15, r1
 8009026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800902a:	2400      	movs	r4, #0
 800902c:	ece6 7a01 	vstmia	r6!, {s15}
 8009030:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009064 <__kernel_rem_pio2f+0x2f8>
 8009034:	46b1      	mov	r9, r6
 8009036:	455c      	cmp	r4, fp
 8009038:	dd04      	ble.n	8009044 <__kernel_rem_pio2f+0x2d8>
 800903a:	ece0 7a01 	vstmia	r0!, {s15}
 800903e:	f10c 0c01 	add.w	ip, ip, #1
 8009042:	e7e1      	b.n	8009008 <__kernel_rem_pio2f+0x29c>
 8009044:	ecfe 6a01 	vldmia	lr!, {s13}
 8009048:	ed39 7a01 	vldmdb	r9!, {s14}
 800904c:	3401      	adds	r4, #1
 800904e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009052:	e7f0      	b.n	8009036 <__kernel_rem_pio2f+0x2ca>
 8009054:	0800ea9c 	.word	0x0800ea9c
 8009058:	0800ea70 	.word	0x0800ea70
 800905c:	43800000 	.word	0x43800000
 8009060:	3b800000 	.word	0x3b800000
 8009064:	00000000 	.word	0x00000000
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	eeb0 0a48 	vmov.f32	s0, s16
 800906e:	eba3 0008 	sub.w	r0, r3, r8
 8009072:	f000 f8e3 	bl	800923c <scalbnf>
 8009076:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800905c <__kernel_rem_pio2f+0x2f0>
 800907a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	db19      	blt.n	80090b8 <__kernel_rem_pio2f+0x34c>
 8009084:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009060 <__kernel_rem_pio2f+0x2f4>
 8009088:	ee60 7a27 	vmul.f32	s15, s0, s15
 800908c:	aa08      	add	r2, sp, #32
 800908e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009092:	3508      	adds	r5, #8
 8009094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009098:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800909c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80090a4:	ee10 3a10 	vmov	r3, s0
 80090a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80090ac:	ee17 3a90 	vmov	r3, s15
 80090b0:	3401      	adds	r4, #1
 80090b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80090b6:	e74c      	b.n	8008f52 <__kernel_rem_pio2f+0x1e6>
 80090b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80090bc:	aa08      	add	r2, sp, #32
 80090be:	ee10 3a10 	vmov	r3, s0
 80090c2:	e7f6      	b.n	80090b2 <__kernel_rem_pio2f+0x346>
 80090c4:	a808      	add	r0, sp, #32
 80090c6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80090ca:	9001      	str	r0, [sp, #4]
 80090cc:	ee07 0a90 	vmov	s15, r0
 80090d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090d4:	3b01      	subs	r3, #1
 80090d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80090da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80090de:	ed62 7a01 	vstmdb	r2!, {s15}
 80090e2:	e743      	b.n	8008f6c <__kernel_rem_pio2f+0x200>
 80090e4:	ecfc 6a01 	vldmia	ip!, {s13}
 80090e8:	ecb5 7a01 	vldmia	r5!, {s14}
 80090ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80090f0:	3001      	adds	r0, #1
 80090f2:	4550      	cmp	r0, sl
 80090f4:	dc01      	bgt.n	80090fa <__kernel_rem_pio2f+0x38e>
 80090f6:	4290      	cmp	r0, r2
 80090f8:	ddf4      	ble.n	80090e4 <__kernel_rem_pio2f+0x378>
 80090fa:	a858      	add	r0, sp, #352	@ 0x160
 80090fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009100:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009104:	3b01      	subs	r3, #1
 8009106:	e735      	b.n	8008f74 <__kernel_rem_pio2f+0x208>
 8009108:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800910a:	2b02      	cmp	r3, #2
 800910c:	dc09      	bgt.n	8009122 <__kernel_rem_pio2f+0x3b6>
 800910e:	2b00      	cmp	r3, #0
 8009110:	dc27      	bgt.n	8009162 <__kernel_rem_pio2f+0x3f6>
 8009112:	d040      	beq.n	8009196 <__kernel_rem_pio2f+0x42a>
 8009114:	f009 0007 	and.w	r0, r9, #7
 8009118:	b059      	add	sp, #356	@ 0x164
 800911a:	ecbd 8b04 	vpop	{d8-d9}
 800911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009122:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009124:	2b03      	cmp	r3, #3
 8009126:	d1f5      	bne.n	8009114 <__kernel_rem_pio2f+0x3a8>
 8009128:	aa30      	add	r2, sp, #192	@ 0xc0
 800912a:	1f0b      	subs	r3, r1, #4
 800912c:	4413      	add	r3, r2
 800912e:	461a      	mov	r2, r3
 8009130:	4620      	mov	r0, r4
 8009132:	2800      	cmp	r0, #0
 8009134:	dc50      	bgt.n	80091d8 <__kernel_rem_pio2f+0x46c>
 8009136:	4622      	mov	r2, r4
 8009138:	2a01      	cmp	r2, #1
 800913a:	dc5d      	bgt.n	80091f8 <__kernel_rem_pio2f+0x48c>
 800913c:	ab30      	add	r3, sp, #192	@ 0xc0
 800913e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009064 <__kernel_rem_pio2f+0x2f8>
 8009142:	440b      	add	r3, r1
 8009144:	2c01      	cmp	r4, #1
 8009146:	dc67      	bgt.n	8009218 <__kernel_rem_pio2f+0x4ac>
 8009148:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800914c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009150:	2e00      	cmp	r6, #0
 8009152:	d167      	bne.n	8009224 <__kernel_rem_pio2f+0x4b8>
 8009154:	edc7 6a00 	vstr	s13, [r7]
 8009158:	ed87 7a01 	vstr	s14, [r7, #4]
 800915c:	edc7 7a02 	vstr	s15, [r7, #8]
 8009160:	e7d8      	b.n	8009114 <__kernel_rem_pio2f+0x3a8>
 8009162:	ab30      	add	r3, sp, #192	@ 0xc0
 8009164:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009064 <__kernel_rem_pio2f+0x2f8>
 8009168:	440b      	add	r3, r1
 800916a:	4622      	mov	r2, r4
 800916c:	2a00      	cmp	r2, #0
 800916e:	da24      	bge.n	80091ba <__kernel_rem_pio2f+0x44e>
 8009170:	b34e      	cbz	r6, 80091c6 <__kernel_rem_pio2f+0x45a>
 8009172:	eef1 7a47 	vneg.f32	s15, s14
 8009176:	edc7 7a00 	vstr	s15, [r7]
 800917a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800917e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009182:	aa31      	add	r2, sp, #196	@ 0xc4
 8009184:	2301      	movs	r3, #1
 8009186:	429c      	cmp	r4, r3
 8009188:	da20      	bge.n	80091cc <__kernel_rem_pio2f+0x460>
 800918a:	b10e      	cbz	r6, 8009190 <__kernel_rem_pio2f+0x424>
 800918c:	eef1 7a67 	vneg.f32	s15, s15
 8009190:	edc7 7a01 	vstr	s15, [r7, #4]
 8009194:	e7be      	b.n	8009114 <__kernel_rem_pio2f+0x3a8>
 8009196:	ab30      	add	r3, sp, #192	@ 0xc0
 8009198:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009064 <__kernel_rem_pio2f+0x2f8>
 800919c:	440b      	add	r3, r1
 800919e:	2c00      	cmp	r4, #0
 80091a0:	da05      	bge.n	80091ae <__kernel_rem_pio2f+0x442>
 80091a2:	b10e      	cbz	r6, 80091a8 <__kernel_rem_pio2f+0x43c>
 80091a4:	eef1 7a67 	vneg.f32	s15, s15
 80091a8:	edc7 7a00 	vstr	s15, [r7]
 80091ac:	e7b2      	b.n	8009114 <__kernel_rem_pio2f+0x3a8>
 80091ae:	ed33 7a01 	vldmdb	r3!, {s14}
 80091b2:	3c01      	subs	r4, #1
 80091b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091b8:	e7f1      	b.n	800919e <__kernel_rem_pio2f+0x432>
 80091ba:	ed73 7a01 	vldmdb	r3!, {s15}
 80091be:	3a01      	subs	r2, #1
 80091c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091c4:	e7d2      	b.n	800916c <__kernel_rem_pio2f+0x400>
 80091c6:	eef0 7a47 	vmov.f32	s15, s14
 80091ca:	e7d4      	b.n	8009176 <__kernel_rem_pio2f+0x40a>
 80091cc:	ecb2 7a01 	vldmia	r2!, {s14}
 80091d0:	3301      	adds	r3, #1
 80091d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091d6:	e7d6      	b.n	8009186 <__kernel_rem_pio2f+0x41a>
 80091d8:	ed72 7a01 	vldmdb	r2!, {s15}
 80091dc:	edd2 6a01 	vldr	s13, [r2, #4]
 80091e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80091e4:	3801      	subs	r0, #1
 80091e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091ea:	ed82 7a00 	vstr	s14, [r2]
 80091ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80091f6:	e79c      	b.n	8009132 <__kernel_rem_pio2f+0x3c6>
 80091f8:	ed73 7a01 	vldmdb	r3!, {s15}
 80091fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8009200:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009204:	3a01      	subs	r2, #1
 8009206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800920a:	ed83 7a00 	vstr	s14, [r3]
 800920e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009212:	edc3 7a01 	vstr	s15, [r3, #4]
 8009216:	e78f      	b.n	8009138 <__kernel_rem_pio2f+0x3cc>
 8009218:	ed33 7a01 	vldmdb	r3!, {s14}
 800921c:	3c01      	subs	r4, #1
 800921e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009222:	e78f      	b.n	8009144 <__kernel_rem_pio2f+0x3d8>
 8009224:	eef1 6a66 	vneg.f32	s13, s13
 8009228:	eeb1 7a47 	vneg.f32	s14, s14
 800922c:	edc7 6a00 	vstr	s13, [r7]
 8009230:	ed87 7a01 	vstr	s14, [r7, #4]
 8009234:	eef1 7a67 	vneg.f32	s15, s15
 8009238:	e790      	b.n	800915c <__kernel_rem_pio2f+0x3f0>
 800923a:	bf00      	nop

0800923c <scalbnf>:
 800923c:	ee10 3a10 	vmov	r3, s0
 8009240:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009244:	d02b      	beq.n	800929e <scalbnf+0x62>
 8009246:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800924a:	d302      	bcc.n	8009252 <scalbnf+0x16>
 800924c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009250:	4770      	bx	lr
 8009252:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009256:	d123      	bne.n	80092a0 <scalbnf+0x64>
 8009258:	4b24      	ldr	r3, [pc, #144]	@ (80092ec <scalbnf+0xb0>)
 800925a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80092f0 <scalbnf+0xb4>
 800925e:	4298      	cmp	r0, r3
 8009260:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009264:	db17      	blt.n	8009296 <scalbnf+0x5a>
 8009266:	ee10 3a10 	vmov	r3, s0
 800926a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800926e:	3a19      	subs	r2, #25
 8009270:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009274:	4288      	cmp	r0, r1
 8009276:	dd15      	ble.n	80092a4 <scalbnf+0x68>
 8009278:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80092f4 <scalbnf+0xb8>
 800927c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80092f8 <scalbnf+0xbc>
 8009280:	ee10 3a10 	vmov	r3, s0
 8009284:	eeb0 7a67 	vmov.f32	s14, s15
 8009288:	2b00      	cmp	r3, #0
 800928a:	bfb8      	it	lt
 800928c:	eef0 7a66 	vmovlt.f32	s15, s13
 8009290:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009294:	4770      	bx	lr
 8009296:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80092fc <scalbnf+0xc0>
 800929a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800929e:	4770      	bx	lr
 80092a0:	0dd2      	lsrs	r2, r2, #23
 80092a2:	e7e5      	b.n	8009270 <scalbnf+0x34>
 80092a4:	4410      	add	r0, r2
 80092a6:	28fe      	cmp	r0, #254	@ 0xfe
 80092a8:	dce6      	bgt.n	8009278 <scalbnf+0x3c>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	dd06      	ble.n	80092bc <scalbnf+0x80>
 80092ae:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80092b2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80092b6:	ee00 3a10 	vmov	s0, r3
 80092ba:	4770      	bx	lr
 80092bc:	f110 0f16 	cmn.w	r0, #22
 80092c0:	da09      	bge.n	80092d6 <scalbnf+0x9a>
 80092c2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80092fc <scalbnf+0xc0>
 80092c6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009300 <scalbnf+0xc4>
 80092ca:	ee10 3a10 	vmov	r3, s0
 80092ce:	eeb0 7a67 	vmov.f32	s14, s15
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	e7d9      	b.n	800928a <scalbnf+0x4e>
 80092d6:	3019      	adds	r0, #25
 80092d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80092dc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80092e0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009304 <scalbnf+0xc8>
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	e7d7      	b.n	800929a <scalbnf+0x5e>
 80092ea:	bf00      	nop
 80092ec:	ffff3cb0 	.word	0xffff3cb0
 80092f0:	4c000000 	.word	0x4c000000
 80092f4:	7149f2ca 	.word	0x7149f2ca
 80092f8:	f149f2ca 	.word	0xf149f2ca
 80092fc:	0da24260 	.word	0x0da24260
 8009300:	8da24260 	.word	0x8da24260
 8009304:	33000000 	.word	0x33000000

08009308 <floorf>:
 8009308:	ee10 3a10 	vmov	r3, s0
 800930c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009310:	3a7f      	subs	r2, #127	@ 0x7f
 8009312:	2a16      	cmp	r2, #22
 8009314:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009318:	dc2b      	bgt.n	8009372 <floorf+0x6a>
 800931a:	2a00      	cmp	r2, #0
 800931c:	da12      	bge.n	8009344 <floorf+0x3c>
 800931e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009384 <floorf+0x7c>
 8009322:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009326:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932e:	dd06      	ble.n	800933e <floorf+0x36>
 8009330:	2b00      	cmp	r3, #0
 8009332:	da24      	bge.n	800937e <floorf+0x76>
 8009334:	2900      	cmp	r1, #0
 8009336:	4b14      	ldr	r3, [pc, #80]	@ (8009388 <floorf+0x80>)
 8009338:	bf08      	it	eq
 800933a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800933e:	ee00 3a10 	vmov	s0, r3
 8009342:	4770      	bx	lr
 8009344:	4911      	ldr	r1, [pc, #68]	@ (800938c <floorf+0x84>)
 8009346:	4111      	asrs	r1, r2
 8009348:	420b      	tst	r3, r1
 800934a:	d0fa      	beq.n	8009342 <floorf+0x3a>
 800934c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009384 <floorf+0x7c>
 8009350:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009354:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935c:	ddef      	ble.n	800933e <floorf+0x36>
 800935e:	2b00      	cmp	r3, #0
 8009360:	bfbe      	ittt	lt
 8009362:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009366:	fa40 f202 	asrlt.w	r2, r0, r2
 800936a:	189b      	addlt	r3, r3, r2
 800936c:	ea23 0301 	bic.w	r3, r3, r1
 8009370:	e7e5      	b.n	800933e <floorf+0x36>
 8009372:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009376:	d3e4      	bcc.n	8009342 <floorf+0x3a>
 8009378:	ee30 0a00 	vadd.f32	s0, s0, s0
 800937c:	4770      	bx	lr
 800937e:	2300      	movs	r3, #0
 8009380:	e7dd      	b.n	800933e <floorf+0x36>
 8009382:	bf00      	nop
 8009384:	7149f2ca 	.word	0x7149f2ca
 8009388:	bf800000 	.word	0xbf800000
 800938c:	007fffff 	.word	0x007fffff

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
